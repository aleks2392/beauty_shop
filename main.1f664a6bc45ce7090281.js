/*! For license information please see main.1f664a6bc45ce7090281.js.LICENSE.txt */
(()=>{var e,t,n,r,a={6893:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n\tdisplay: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n\tline-height: 1;\n}\nmenu, ol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n","",{version:3,sources:["webpack://./node_modules/reset-css/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA,kDAAkD;AAClD;IACI,aAAa;AACjB;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/\n   v5.0.1 | 20191019\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n\tdisplay: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n\tline-height: 1;\n}\nmenu, ol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n"],sourceRoot:""}]),a.locals={},e.exports=a},7199:(e,t,n)=>{var r=n(1354),a=n(6314),o=n(8699),l=a(r);l.i(o),l.push([e.id,"* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n}\n","",{version:3,sources:["webpack://./src/app/App.css"],names:[],mappings:"AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,8BAA8B;AAChC",sourcesContent:['@import url("../styles/index.css");\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n}\n'],sourceRoot:""}]),l.locals={},e.exports=l},7811:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,".footerContainer {\n  background-color: #333;\n  color: #ddd;\n  padding: 40px 20px;\n  font-family: Arial, sans-serif;\n}\n\n.footerMain {\n  display: flex;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #444;\n  align-items: center;\n}\n\n.footerSection {\n  flex: 1 1 180px;\n  justify-content: center;\n}\n\n.footerSection h3 {\n  font-size: 20px;\n  color: #fff;\n  margin-bottom: 10px;\n}\n\n.footerSection p,\n.footerSection ul {\n  font-size: 14px;\n  margin: 0;\n  margin-top: 10px;\n}\n\n.footerSection ul {\n  list-style: none;\n  padding: 0;\n}\n\n.footerSection ul li {\n  margin: 5px 0;\n}\n\n.footerSection ul li a {\n  text-decoration: none;\n  color: #ddd;\n}\n\n.footerSection ul li a:hover {\n  color: rgb(245 163 183 / 100%);\n}\n\n.brandName {\n  color: rgb(245 163 183 / 100%);\n}\n\n.socialIcons {\n  display: flex;\n  gap: 60px;\n}\n\n.socialIcons img {\n  width: 29px;\n  height: 29px;\n  transition: transform 0.2s ease;\n  cursor: pointer;\n}\n\n.socialIcons img:hover {\n  transform: scale(1.1);\n}\n\n.footerSubscribe {\n  max-width: 200px;\n}\n\n.footerSubscribe input {\n  width: 100%;\n  padding: 8px;\n  margin: 10px 0;\n  border: none;\n  border-radius: 4px;\n}\n\n.footerBottom {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n  color: #aaa;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding-top: 20px;\n}\n\n.footerLinks {\n  display: flex;\n  gap: 20px;\n}\n\n.footerLink:hover {\n  color: rgb(245 163 183 / 100%);\n}\n\n.subscribeFormLink:hover {\n  color: rgb(245 163 183 / 100%);\n}\n\n.third {\n  margin-top: -40px;\n}\n\nspan {\n  line-height: 1.5;\n}\n","",{version:3,sources:["webpack://./src/app/providers/router/layouts/root-layout/components/Footer/Footer.module.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,WAAW;EACX,kBAAkB;EAClB,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,cAAc;EACd,oBAAoB;EACpB,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,mBAAmB;AACrB;;AAEA;;EAEE,eAAe;EACf,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,+BAA+B;EAC/B,eAAe;AACjB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,cAAc;EACd,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;EACf,WAAW;EACX,iBAAiB;EACjB,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:[".footerContainer {\n  background-color: #333;\n  color: #ddd;\n  padding: 40px 20px;\n  font-family: Arial, sans-serif;\n}\n\n.footerMain {\n  display: flex;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #444;\n  align-items: center;\n}\n\n.footerSection {\n  flex: 1 1 180px;\n  justify-content: center;\n}\n\n.footerSection h3 {\n  font-size: 20px;\n  color: #fff;\n  margin-bottom: 10px;\n}\n\n.footerSection p,\n.footerSection ul {\n  font-size: 14px;\n  margin: 0;\n  margin-top: 10px;\n}\n\n.footerSection ul {\n  list-style: none;\n  padding: 0;\n}\n\n.footerSection ul li {\n  margin: 5px 0;\n}\n\n.footerSection ul li a {\n  text-decoration: none;\n  color: #ddd;\n}\n\n.footerSection ul li a:hover {\n  color: rgb(245 163 183 / 100%);\n}\n\n.brandName {\n  color: rgb(245 163 183 / 100%);\n}\n\n.socialIcons {\n  display: flex;\n  gap: 60px;\n}\n\n.socialIcons img {\n  width: 29px;\n  height: 29px;\n  transition: transform 0.2s ease;\n  cursor: pointer;\n}\n\n.socialIcons img:hover {\n  transform: scale(1.1);\n}\n\n.footerSubscribe {\n  max-width: 200px;\n}\n\n.footerSubscribe input {\n  width: 100%;\n  padding: 8px;\n  margin: 10px 0;\n  border: none;\n  border-radius: 4px;\n}\n\n.footerBottom {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n  color: #aaa;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding-top: 20px;\n}\n\n.footerLinks {\n  display: flex;\n  gap: 20px;\n}\n\n.footerLink:hover {\n  color: rgb(245 163 183 / 100%);\n}\n\n.subscribeFormLink:hover {\n  color: rgb(245 163 183 / 100%);\n}\n\n.third {\n  margin-top: -40px;\n}\n\nspan {\n  line-height: 1.5;\n}\n"],sourceRoot:""}]),a.locals={footerContainer:"footerContainer",footerMain:"footerMain",footerSection:"footerSection",brandName:"brandName",socialIcons:"socialIcons",footerSubscribe:"footerSubscribe",footerBottom:"footerBottom",footerLinks:"footerLinks",footerLink:"footerLink",subscribeFormLink:"subscribeFormLink",third:"third"},e.exports=a},9839:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,".header {\n  width: 100%;\n  height: 80px;\n  background-color: #fff;\n  display: flex;\n  justify-content: center;\n  border-bottom: 2px solid #e5e5e5;\n}\n\n.headerContainer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 70%;\n  max-width: 1920px;\n}\n\n.title {\n  font-size: 24px;\n  color: #f5a3b7;\n  font-weight: 500;\n  text-decoration: none;\n}\n\n.titleSpan {\n  color: black;\n}\n\n.headerNav {\n  display: flex;\n  gap: 40px;\n}\n\n.headerNavLink {\n  text-decoration: none;\n  font-size: 14px;\n  color: black;\n}\n\n.headerNavLink:hover {\n  color: rgb(245 163 183 / 100%);\n  cursor: pointer;\n}\n\n.icons {\n  display: flex;\n  gap: 20px;\n}\n\n.iconItem {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: 10px;\n  color: black;\n}\n\n.iconItem:hover {\n  color: rgb(245 163 183 / 100%);\n  cursor: pointer;\n}\n\n.iconItemImg {\n  width: 20px;\n  height: 20px;\n  margin-bottom: 4px;\n}\n","",{version:3,sources:["webpack://./src/app/providers/router/layouts/root-layout/components/Header/Header.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,aAAa;EACb,uBAAuB;EACvB,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,UAAU;EACV,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,cAAc;EACd,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:[".header {\n  width: 100%;\n  height: 80px;\n  background-color: #fff;\n  display: flex;\n  justify-content: center;\n  border-bottom: 2px solid #e5e5e5;\n}\n\n.headerContainer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 70%;\n  max-width: 1920px;\n}\n\n.title {\n  font-size: 24px;\n  color: #f5a3b7;\n  font-weight: 500;\n  text-decoration: none;\n}\n\n.titleSpan {\n  color: black;\n}\n\n.headerNav {\n  display: flex;\n  gap: 40px;\n}\n\n.headerNavLink {\n  text-decoration: none;\n  font-size: 14px;\n  color: black;\n}\n\n.headerNavLink:hover {\n  color: rgb(245 163 183 / 100%);\n  cursor: pointer;\n}\n\n.icons {\n  display: flex;\n  gap: 20px;\n}\n\n.iconItem {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: 10px;\n  color: black;\n}\n\n.iconItem:hover {\n  color: rgb(245 163 183 / 100%);\n  cursor: pointer;\n}\n\n.iconItemImg {\n  width: 20px;\n  height: 20px;\n  margin-bottom: 4px;\n}\n"],sourceRoot:""}]),a.locals={header:"header",headerContainer:"headerContainer",title:"title",titleSpan:"titleSpan",headerNav:"headerNav",headerNavLink:"headerNavLink",icons:"icons",iconItem:"iconItem",iconItemImg:"iconItemImg"},e.exports=a},452:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,".modalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgb(0 0 0 / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modalContent {\n  background: #fff;\n  box-shadow: 0 2px 10px rgb(185 166 189 / 10%);\n  border-radius: 6px;\n  padding: 40px 100px;\n  width: 598px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  position: relative;\n}\n\n.closeButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: #697586;\n}\n\n.modalTitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 500;\n  font-size: 26px;\n  line-height: 39px;\n  color: #383838;\n  margin-bottom: -10px;\n}\n\n.modalSubtitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n  text-align: center;\n}\n\n.modalInputGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n}\n\n.modalInputGroup input {\n  height: 41px;\n  padding: 8px;\n  border: 1px solid var(--gray);\n  border-radius: 4px;\n  font-size: 16px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.modalLoginButton:hover {\n  background: #f28096;\n}\n\n.modalDivider {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n}\n\n.dividerLine {\n  flex: 1;\n  height: 1px;\n  background: #b0a6bd;\n}\n\n.dividerText {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n}\n\n.modalGoogleButton {\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 20px;\n  width: 100%;\n  background: #fff;\n  border: 1px solid #b0a6bd;\n  border-radius: 4px;\n  cursor: pointer;\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  color: #697586;\n}\n\n.modalGoogleButton:hover {\n  background-color: rgb(235 230 230 / 50%);\n}\n\n.modalGoogleButton img {\n  position: absolute;\n  left: 10px;\n  width: 24px;\n  height: 24px;\n}\n\n.modalFooter {\n  text-align: center;\n  font-family: Poppins, sans-serif;\n  font-size: 16px;\n  line-height: 24px;\n  color: #697586;\n}\n\n.modalFooter p {\n  margin: 10px 0;\n}\n\n.modalLink {\n  color: #697586;\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.modalLink:hover {\n  color: #383838;\n}\n","",{version:3,sources:["webpack://./src/components/modal/Modal.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,4BAA4B;EAC5B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,6CAA6C;EAC7C,kBAAkB;EAClB,mBAAmB;EACnB,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,eAAe;EACf,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,6BAA6B;EAC7B,kBAAkB;EAClB,eAAe;EACf,WAAW;EACX,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,OAAO;EACP,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,WAAW;EACX,gBAAgB;EAChB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,wCAAwC;AAC1C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gCAAgC;EAChC,eAAe;EACf,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".modalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgb(0 0 0 / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modalContent {\n  background: #fff;\n  box-shadow: 0 2px 10px rgb(185 166 189 / 10%);\n  border-radius: 6px;\n  padding: 40px 100px;\n  width: 598px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  position: relative;\n}\n\n.closeButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: #697586;\n}\n\n.modalTitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 500;\n  font-size: 26px;\n  line-height: 39px;\n  color: #383838;\n  margin-bottom: -10px;\n}\n\n.modalSubtitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n  text-align: center;\n}\n\n.modalInputGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n}\n\n.modalInputGroup input {\n  height: 41px;\n  padding: 8px;\n  border: 1px solid var(--gray);\n  border-radius: 4px;\n  font-size: 16px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.modalLoginButton:hover {\n  background: #f28096;\n}\n\n.modalDivider {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n}\n\n.dividerLine {\n  flex: 1;\n  height: 1px;\n  background: #b0a6bd;\n}\n\n.dividerText {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n}\n\n.modalGoogleButton {\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 20px;\n  width: 100%;\n  background: #fff;\n  border: 1px solid #b0a6bd;\n  border-radius: 4px;\n  cursor: pointer;\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  color: #697586;\n}\n\n.modalGoogleButton:hover {\n  background-color: rgb(235 230 230 / 50%);\n}\n\n.modalGoogleButton img {\n  position: absolute;\n  left: 10px;\n  width: 24px;\n  height: 24px;\n}\n\n.modalFooter {\n  text-align: center;\n  font-family: Poppins, sans-serif;\n  font-size: 16px;\n  line-height: 24px;\n  color: #697586;\n}\n\n.modalFooter p {\n  margin: 10px 0;\n}\n\n.modalLink {\n  color: #697586;\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.modalLink:hover {\n  color: #383838;\n}\n"],sourceRoot:""}]),a.locals={modalOverlay:"modalOverlay",modalContent:"modalContent",closeButton:"closeButton",modalTitle:"modalTitle",modalSubtitle:"modalSubtitle",modalInputGroup:"modalInputGroup",modalLoginButton:"modalLoginButton",modalDivider:"modalDivider",dividerLine:"dividerLine",dividerText:"dividerText",modalGoogleButton:"modalGoogleButton",modalFooter:"modalFooter",modalLink:"modalLink"},e.exports=a},3856:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,'.modalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgb(0 0 0 / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.error {\n  color: #bf1650;\n}\n\n.error::before {\n  content: "⚠ ";\n  margin-right: 5px;\n}\n\n.modalContent {\n  margin: 0 auto;\n  background: #fff;\n  box-shadow: 0 2px 10px rgb(185 166 189 / 10%);\n  border-radius: 6px;\n  padding: 40px 100px;\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  position: relative;\n}\n\n.closeButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: #697586;\n}\n\n.modalTitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 500;\n  font-size: 26px;\n  line-height: 39px;\n  color: #383838;\n  margin-bottom: -10px;\n}\n\n.modalSubtitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n  text-align: center;\n}\n\n.modalInputGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n}\n\n.modalInputGroup input {\n  height: 41px;\n  padding: 8px;\n  border: 1px solid var(--gray);\n  border-radius: 4px;\n  font-size: 16px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.modalLoginButton {\n  margin: 20px 0;\n}\n\n.subscribe {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  font-size: 14px;\n}\n\n.modalLoginButton:hover {\n  background: #f28096;\n}\n\n.modalDivider {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n  margin: 20px 0;\n}\n\n.dividerLine {\n  flex: 1;\n  height: 1px;\n  background: #b0a6bd;\n}\n\n.dividerText {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n}\n\n.modalGoogleButton {\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 20px;\n  width: 100%;\n  background: #fff;\n  border: 1px solid #b0a6bd;\n  border-radius: 4px;\n  cursor: pointer;\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  color: #697586;\n}\n\n.modalGoogleButton:hover {\n  background-color: rgb(235 230 230 / 50%);\n}\n\n.modalGoogleButton img {\n  position: absolute;\n  left: 10px;\n  width: 24px;\n  height: 24px;\n}\n\n.modalFooter {\n  text-align: center;\n  font-family: Poppins, sans-serif;\n  font-size: 16px;\n  line-height: 24px;\n  color: #697586;\n}\n\n.modalFooter p {\n  margin: 10px 0;\n}\n\n.modalLink {\n  color: #697586;\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.modalLink:hover {\n  color: #383838;\n}\n',"",{version:3,sources:["webpack://./src/components/registrationForm/registrationForm.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,4BAA4B;EAC5B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,6CAA6C;EAC7C,kBAAkB;EAClB,mBAAmB;EACnB,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,eAAe;EACf,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,6BAA6B;EAC7B,kBAAkB;EAClB,eAAe;EACf,WAAW;EACX,sBAAsB;AACxB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,WAAW;EACX,gBAAgB;EAChB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,gCAAgC;EAChC,gBAAgB;EAChB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,wCAAwC;AAC1C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,gCAAgC;EAChC,eAAe;EACf,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB",sourcesContent:['.modalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgb(0 0 0 / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.error {\n  color: #bf1650;\n}\n\n.error::before {\n  content: "⚠ ";\n  margin-right: 5px;\n}\n\n.modalContent {\n  margin: 0 auto;\n  background: #fff;\n  box-shadow: 0 2px 10px rgb(185 166 189 / 10%);\n  border-radius: 6px;\n  padding: 40px 100px;\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  position: relative;\n}\n\n.closeButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: #697586;\n}\n\n.modalTitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 500;\n  font-size: 26px;\n  line-height: 39px;\n  color: #383838;\n  margin-bottom: -10px;\n}\n\n.modalSubtitle {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n  text-align: center;\n}\n\n.modalInputGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n}\n\n.modalInputGroup input {\n  height: 41px;\n  padding: 8px;\n  border: 1px solid var(--gray);\n  border-radius: 4px;\n  font-size: 16px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.modalLoginButton {\n  margin: 20px 0;\n}\n\n.subscribe {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  font-size: 14px;\n}\n\n.modalLoginButton:hover {\n  background: #f28096;\n}\n\n.modalDivider {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n  margin: 20px 0;\n}\n\n.dividerLine {\n  flex: 1;\n  height: 1px;\n  background: #b0a6bd;\n}\n\n.dividerText {\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n  color: #b0a6bd;\n}\n\n.modalGoogleButton {\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 20px;\n  width: 100%;\n  background: #fff;\n  border: 1px solid #b0a6bd;\n  border-radius: 4px;\n  cursor: pointer;\n  font-family: Poppins, sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  color: #697586;\n}\n\n.modalGoogleButton:hover {\n  background-color: rgb(235 230 230 / 50%);\n}\n\n.modalGoogleButton img {\n  position: absolute;\n  left: 10px;\n  width: 24px;\n  height: 24px;\n}\n\n.modalFooter {\n  text-align: center;\n  font-family: Poppins, sans-serif;\n  font-size: 16px;\n  line-height: 24px;\n  color: #697586;\n}\n\n.modalFooter p {\n  margin: 10px 0;\n}\n\n.modalLink {\n  color: #697586;\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.modalLink:hover {\n  color: #383838;\n}\n'],sourceRoot:""}]),a.locals={modalOverlay:"modalOverlay",error:"error",modalContent:"modalContent",closeButton:"closeButton",modalTitle:"modalTitle",modalSubtitle:"modalSubtitle",modalInputGroup:"modalInputGroup",modalLoginButton:"modalLoginButton",subscribe:"subscribe",modalDivider:"modalDivider",dividerLine:"dividerLine",dividerText:"dividerText",modalGoogleButton:"modalGoogleButton",modalFooter:"modalFooter",modalLink:"modalLink"},e.exports=a},8134:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,".overlayModalSearch {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(0 0 0 / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  z-index: 1000;\n}\n\n.modalSearchInput {\n  background: white;\n  padding: 15px 20px;\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.searchInput {\n  display: flex;\n  align-items: center;\n  width: 60%;\n  border: 1px solid #eaeaea;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.styledInput {\n  width: 100%;\n  height: 46px;\n  border: none;\n  padding: 0 15px;\n  font-size: 16px;\n  outline: none;\n  background: none;\n  transition: border 0.3s ease;\n}\n\n.styledInput::placeholder {\n  color: #b3b3b3;\n}\n\n.closeSearchButton {\n  position: absolute;\n  right: 18%;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: var(--blue-gray);\n}\n","",{version:3,sources:["webpack://./src/components/search/Search.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,kCAAkC;EAClC,aAAa;EACb,uBAAuB;EACvB,uBAAuB;EACvB,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,UAAU;EACV,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,eAAe;EACf,eAAe;EACf,aAAa;EACb,gBAAgB;EAChB,4BAA4B;AAC9B;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,gBAAgB;EAChB,YAAY;EACZ,eAAe;EACf,eAAe;EACf,uBAAuB;AACzB",sourcesContent:[".overlayModalSearch {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(0 0 0 / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  z-index: 1000;\n}\n\n.modalSearchInput {\n  background: white;\n  padding: 15px 20px;\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.searchInput {\n  display: flex;\n  align-items: center;\n  width: 60%;\n  border: 1px solid #eaeaea;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.styledInput {\n  width: 100%;\n  height: 46px;\n  border: none;\n  padding: 0 15px;\n  font-size: 16px;\n  outline: none;\n  background: none;\n  transition: border 0.3s ease;\n}\n\n.styledInput::placeholder {\n  color: #b3b3b3;\n}\n\n.closeSearchButton {\n  position: absolute;\n  right: 18%;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: var(--blue-gray);\n}\n"],sourceRoot:""}]),a.locals={overlayModalSearch:"overlayModalSearch",modalSearchInput:"modalSearchInput",searchInput:"searchInput",styledInput:"styledInput",closeSearchButton:"closeSearchButton"},e.exports=a},715:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,".errorContainer {\n  display: flex;\n  flex-direction: column;\n  top: center;\n  align-items: center;\n  margin: 120px;\n  gap: 10px;\n  font-size: 30px;\n}\n","",{version:3,sources:["webpack://./src/styles/error404.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,mBAAmB;EACnB,aAAa;EACb,SAAS;EACT,eAAe;AACjB",sourcesContent:[".errorContainer {\n  display: flex;\n  flex-direction: column;\n  top: center;\n  align-items: center;\n  margin: 120px;\n  gap: 10px;\n  font-size: 30px;\n}\n"],sourceRoot:""}]),a.locals={errorContainer:"errorContainer"},e.exports=a},8699:(e,t,n)=>{var r=n(1354),a=n(6314),o=n(6726),l=n(381),i=a(r);i.i(o),i.i(l),i.push([e.id,"\n","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]),i.locals={},e.exports=i},6726:(e,t,n)=>{var r=n(1354),a=n(6314),o=n(6893),l=a(r);l.i(o),l.push([e.id,"\n","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]),l.locals={},e.exports=l},381:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,":root {\n  --black: #383838;\n  --black-rgb: 56 56 56;\n  --white: #fff;\n  --pink: #f5a3b7;\n  --gray: #8498af;\n  --blue: #007bff;\n  --blue-gray: #697586;\n}\n","",{version:3,sources:["webpack://./src/styles/variables/colors.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,aAAa;EACb,eAAe;EACf,eAAe;EACf,eAAe;EACf,oBAAoB;AACtB",sourcesContent:[":root {\n  --black: #383838;\n  --black-rgb: 56 56 56;\n  --white: #fff;\n  --pink: #f5a3b7;\n  --gray: #8498af;\n  --blue: #007bff;\n  --blue-gray: #697586;\n}\n"],sourceRoot:""}]),a.locals={},e.exports=a},9992:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,":root {\n  --pink: #f5a3b7;\n  --black: #000;\n  --white: #fff;\n  --gray-disabled: #d6d6d6;\n  --gray-disabled-text: #999;\n  --button-padding: 10px;\n  --button-font-size: 16px;\n  --button-border-radius: 4px;\n  --transition-duration: 0.3s;\n  --hover-bg: var(--black);\n  --hover-text: var(--white);\n}\n\n.btn {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 41px;\n  padding: var(--button-padding);\n  font-size: var(--button-font-size);\n  color: var(--black);\n  background-color: var(--pink);\n  border: none;\n  border-radius: var(--button-border-radius);\n  cursor: pointer;\n  margin: 10px 0;\n  transition:\n    background-color var(--transition-duration) ease,\n    color var(--transition-duration) ease;\n}\n\n.btn .label {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.btn .icon {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  margin: 10px;\n}\n\n.btn.small {\n  width: 100%;\n  max-width: 195px;\n  min-width: 120px;\n  font-size: 14px;\n  padding: 8px 16px;\n  margin: 5px;\n}\n\n.btn.medium {\n  width: 250px;\n  font-size: 18px;\n  padding: 12px 20px;\n}\n\n.btn.large {\n  width: 100%;\n  font-size: 18px;\n  padding: 12px 20px;\n}\n\n.btn.transparent {\n  background-color: var(--white);\n  color: var(--black);\n  border: 1px solid var(--black);\n}\n\n.btn.pink {\n  background-color: var(--pink);\n  color: var(--black);\n}\n\n.btn:hover {\n  background-color: var(--hover-bg);\n  color: var(--hover-text);\n}\n\n.btn.transparent:hover {\n  background-color: var(--black);\n  color: var(--white);\n}\n\n.btn:disabled {\n  background-color: var(--gray-disabled);\n  color: var(--gray-disabled-text);\n  cursor: not-allowed;\n  pointer-events: none;\n}\n","",{version:3,sources:["webpack://./src/ui/Button/button.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,aAAa;EACb,aAAa;EACb,wBAAwB;EACxB,0BAA0B;EAC1B,sBAAsB;EACtB,wBAAwB;EACxB,2BAA2B;EAC3B,2BAA2B;EAC3B,wBAAwB;EACxB,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,8BAA8B;EAC9B,kCAAkC;EAClC,mBAAmB;EACnB,6BAA6B;EAC7B,YAAY;EACZ,0CAA0C;EAC1C,eAAe;EACf,cAAc;EACd;;yCAEuC;AACzC;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,oBAAoB;EACpB,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,8BAA8B;EAC9B,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,iCAAiC;EACjC,wBAAwB;AAC1B;;AAEA;EACE,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,sCAAsC;EACtC,gCAAgC;EAChC,mBAAmB;EACnB,oBAAoB;AACtB",sourcesContent:[":root {\n  --pink: #f5a3b7;\n  --black: #000;\n  --white: #fff;\n  --gray-disabled: #d6d6d6;\n  --gray-disabled-text: #999;\n  --button-padding: 10px;\n  --button-font-size: 16px;\n  --button-border-radius: 4px;\n  --transition-duration: 0.3s;\n  --hover-bg: var(--black);\n  --hover-text: var(--white);\n}\n\n.btn {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 41px;\n  padding: var(--button-padding);\n  font-size: var(--button-font-size);\n  color: var(--black);\n  background-color: var(--pink);\n  border: none;\n  border-radius: var(--button-border-radius);\n  cursor: pointer;\n  margin: 10px 0;\n  transition:\n    background-color var(--transition-duration) ease,\n    color var(--transition-duration) ease;\n}\n\n.btn .label {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.btn .icon {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  margin: 10px;\n}\n\n.btn.small {\n  width: 100%;\n  max-width: 195px;\n  min-width: 120px;\n  font-size: 14px;\n  padding: 8px 16px;\n  margin: 5px;\n}\n\n.btn.medium {\n  width: 250px;\n  font-size: 18px;\n  padding: 12px 20px;\n}\n\n.btn.large {\n  width: 100%;\n  font-size: 18px;\n  padding: 12px 20px;\n}\n\n.btn.transparent {\n  background-color: var(--white);\n  color: var(--black);\n  border: 1px solid var(--black);\n}\n\n.btn.pink {\n  background-color: var(--pink);\n  color: var(--black);\n}\n\n.btn:hover {\n  background-color: var(--hover-bg);\n  color: var(--hover-text);\n}\n\n.btn.transparent:hover {\n  background-color: var(--black);\n  color: var(--white);\n}\n\n.btn:disabled {\n  background-color: var(--gray-disabled);\n  color: var(--gray-disabled-text);\n  cursor: not-allowed;\n  pointer-events: none;\n}\n"],sourceRoot:""}]),a.locals={btn:"btn",label:"label",icon:"icon",small:"small",medium:"medium",large:"large",transparent:"transparent",pink:"pink"},e.exports=a},6234:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,".input {\n  padding: 8px;\n  border: 1px solid var(--gray);\n  border-radius: 4px;\n  font-size: 16px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.input:focus {\n  border-color: var(--blue);\n  outline: none;\n}\n","",{version:3,sources:["webpack://./src/ui/Input/input.module.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,6BAA6B;EAC7B,kBAAkB;EAClB,eAAe;EACf,WAAW;EACX,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,aAAa;AACf",sourcesContent:[".input {\n  padding: 8px;\n  border: 1px solid var(--gray);\n  border-radius: 4px;\n  font-size: 16px;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.input:focus {\n  border-color: var(--blue);\n  outline: none;\n}\n"],sourceRoot:""}]),a.locals={input:"input"},e.exports=a},4744:(e,t,n)=>{var r=n(1354),a=n(6314)(r);a.push([e.id,".uiModalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(var(--black-rgb) / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.uiModalContent {\n  background: var(--white);\n  box-shadow: 0 2px 10px rgb(var(--black-rgb) / 10%);\n  border-radius: 6px;\n  padding: 40px 100px;\n  width: 598px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  position: relative;\n}\n\n.uiModalCloseButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: var(--blue-gray);\n}\n","",{version:3,sources:["webpack://./src/ui/Modal/UiModal.module.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,6CAA6C;EAC7C,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,wBAAwB;EACxB,kDAAkD;EAClD,kBAAkB;EAClB,mBAAmB;EACnB,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,eAAe;EACf,eAAe;EACf,uBAAuB;AACzB",sourcesContent:[".uiModalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(var(--black-rgb) / 50%);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.uiModalContent {\n  background: var(--white);\n  box-shadow: 0 2px 10px rgb(var(--black-rgb) / 10%);\n  border-radius: 6px;\n  padding: 40px 100px;\n  width: 598px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  position: relative;\n}\n\n.uiModalCloseButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: var(--blue-gray);\n}\n"],sourceRoot:""}]),a.locals={uiModalOverlay:"uiModalOverlay",uiModalContent:"uiModalContent",uiModalCloseButton:"uiModalCloseButton"},e.exports=a},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(l[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&l[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},1354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},2551:(e,t,n)=>{"use strict";var r=n(6540),a=n(9982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var A={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){A[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];A[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){A[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){A[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){A[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){A[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){A[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){A[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){A[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=A.hasOwnProperty(t)?A[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);A[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);A[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);A[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){A[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),A.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){A[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),x=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),w=Symbol.for("react.profiler"),_=Symbol.for("react.provider"),k=Symbol.for("react.context"),B=Symbol.for("react.forward_ref"),M=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),$=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function O(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var D,T=Object.assign;function I(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var F=!1;function j(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var u="\n"+a[l].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=l&&0<=i);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?I(e):""}function U(e){switch(e.tag){case 5:return I(e.type);case 16:return I("Lazy");case 13:return I("Suspense");case 19:return I("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case x:return"Portal";case w:return"Profiler";case S:return"StrictMode";case M:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case k:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case B:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case P:return null!==(t=e.displayName||null)?t:z(e.type)||"Memo";case $:t=e._payload,e=e._init;try{return z(e(t))}catch(e){}}return null}function Z(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return z(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function V(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return T({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function q(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function Q(e,t){q(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return T({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function oe(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function Ae(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=T({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Ce=null,Se=null;function we(e){if(e=ya(e)){if("function"!=typeof xe)throw Error(o(280));var t=e.stateNode;t&&(t=Ea(t),xe(e.stateNode,e.type,t))}}function _e(e){Ce?Se?Se.push(e):Se=[e]:Ce=e}function ke(){if(Ce){var e=Ce,t=Se;if(Se=Ce=null,we(e),t)for(e=0;e<t.length;e++)we(t[e])}}function Be(e,t){return e(t)}function Me(){}var Le=!1;function Pe(e,t,n){if(Le)return e(t,n);Le=!0;try{return Be(e,t,n)}finally{Le=!1,(null!==Ce||null!==Se)&&(Me(),ke())}}function $e(e,t){var n=e.stateNode;if(null===n)return null;var r=Ea(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){Re=!1}function Oe(e,t,n,r,a,o,l,i,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var De=!1,Te=null,Ie=!1,Fe=null,je={onError:function(e){De=!0,Te=e}};function Ue(e,t,n,r,a,o,l,i,u){De=!1,Te=null,Oe.apply(je,arguments)}function ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(ze(e)!==e)throw Error(o(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=ze(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return He(a),e;if(l===r)return He(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ve(e):null}function Ve(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ve(e);if(null!==t)return t;e=e.sibling}return null}var Ge=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Xe=a.unstable_requestPaint,qe=a.unstable_now,Qe=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/ut|0)|0},it=Math.log,ut=Math.LN2,st=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~a;0!==i?r=dt(i):0!=(o&=l)&&(r=dt(o))}else 0!=(l=n&~a)?r=dt(l):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function At(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var yt=0;function bt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var Et,xt,Ct,St,wt,_t=!1,kt=[],Bt=null,Mt=null,Lt=null,Pt=new Map,$t=new Map,Rt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ot(e,t){switch(e){case"focusin":case"focusout":Bt=null;break;case"dragenter":case"dragleave":Mt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":Pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":$t.delete(t.pointerId)}}function Dt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ya(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Tt(e){var t=ga(e.target);if(null!==t){var n=ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void wt(e.priority,(function(){Ct(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ya(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);be=r,n.target.dispatchEvent(r),be=null,t.shift()}return!0}function Ft(e,t,n){It(e)&&n.delete(t)}function jt(){_t=!1,null!==Bt&&It(Bt)&&(Bt=null),null!==Mt&&It(Mt)&&(Mt=null),null!==Lt&&It(Lt)&&(Lt=null),Pt.forEach(Ft),$t.forEach(Ft)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,_t||(_t=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,jt)))}function zt(e){function t(t){return Ut(t,e)}if(0<kt.length){Ut(kt[0],e);for(var n=1;n<kt.length;n++){var r=kt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Bt&&Ut(Bt,e),null!==Mt&&Ut(Mt,e),null!==Lt&&Ut(Lt,e),Pt.forEach(t),$t.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Tt(n),null===n.blockedOn&&Rt.shift()}var Zt=b.ReactCurrentBatchConfig,Ht=!0;function Wt(e,t,n,r){var a=yt,o=Zt.transition;Zt.transition=null;try{yt=1,Gt(e,t,n,r)}finally{yt=a,Zt.transition=o}}function Vt(e,t,n,r){var a=yt,o=Zt.transition;Zt.transition=null;try{yt=4,Gt(e,t,n,r)}finally{yt=a,Zt.transition=o}}function Gt(e,t,n,r){if(Ht){var a=Yt(e,t,n,r);if(null===a)Hr(e,t,r,Kt,n),Ot(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Bt=Dt(Bt,e,t,n,r,a),!0;case"dragenter":return Mt=Dt(Mt,e,t,n,r,a),!0;case"mouseover":return Lt=Dt(Lt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Pt.set(o,Dt(Pt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,$t.set(o,Dt($t.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Ot(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==a;){var o=ya(a);if(null!==o&&Et(o),null===(o=Yt(e,t,n,r))&&Hr(e,t,r,Kt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Kt=null;function Yt(e,t,n,r){if(Kt=null,null!==(e=ga(e=Ee(r))))if(null===(t=ze(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ze(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var qt=null,Qt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Qt,r=n.length,a="value"in qt?qt.value:qt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return T(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),dn=T({},sn,{view:0,detail:0}),fn=an(dn),pn=T({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:wn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(T({},pn,{dataTransfer:0})),An=an(T({},dn,{relatedTarget:0})),vn=an(T({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=T({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=an(gn),bn=an(T({},sn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function wn(){return Sn}var _n=T({},dn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:wn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),kn=an(_n),Bn=an(T({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mn=an(T({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:wn})),Ln=an(T({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=T({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),$n=an(Pn),Rn=[9,13,27,32],Nn=c&&"CompositionEvent"in window,On=null;c&&"documentMode"in document&&(On=document.documentMode);var Dn=c&&"TextEvent"in window&&!On,Tn=c&&(!Nn||On&&8<On&&11>=On),In=String.fromCharCode(32),Fn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Zn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Zn[e.type]:"textarea"===t}function Wn(e,t,n,r){_e(r),0<(t=Vr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Gn=null;function Kn(e){Ir(e,0)}function Yn(e){if(G(ba(e)))return e}function Xn(e,t){if("change"===e)return t}var qn=!1;if(c){var Qn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Qn=Jn}else Qn=!1;qn=Qn&&(!document.documentMode||9<document.documentMode)}function tr(){Vn&&(Vn.detachEvent("onpropertychange",nr),Gn=Vn=null)}function nr(e){if("value"===e.propertyName&&Yn(Gn)){var t=[];Wn(t,Gn,e,Ee(e)),Pe(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(Vn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Gn)}function or(e,t){if("click"===e)return Yn(t)}function lr(e,t){if("input"===e||"change"===e)return Yn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!ir(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var l=cr(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,Ar=null,vr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==Ar||Ar!==K(r)||(r="selectionStart"in(r=Ar)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Vr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Ar)))}function Er(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:Er("Animation","AnimationEnd"),animationiteration:Er("Animation","AnimationIteration"),animationstart:Er("Animation","AnimationStart"),transitionend:Er("Transition","TransitionEnd")},Cr={},Sr={};function wr(e){if(Cr[e])return Cr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return Cr[e]=n[t];return e}c&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var _r=wr("animationend"),kr=wr("animationiteration"),Br=wr("animationstart"),Mr=wr("transitionend"),Lr=new Map,Pr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function $r(e,t){Lr.set(e,t),u(t,[e])}for(var Rr=0;Rr<Pr.length;Rr++){var Nr=Pr[Rr];$r(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}$r(_r,"onAnimationEnd"),$r(kr,"onAnimationIteration"),$r(Br,"onAnimationStart"),$r("dblclick","onDoubleClick"),$r("focusin","onFocus"),$r("focusout","onBlur"),$r(Mr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Or="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Or));function Tr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,u,s){if(Ue.apply(this,arguments),De){if(!De)throw Error(o(198));var c=Te;De=!1,Te=null,Ie||(Ie=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ir(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;Tr(a,i,s),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;Tr(a,i,s),o=u}}}if(Ie)throw e=Fe,Ie=!1,Fe=null,e}function Fr(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Zr(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),Zr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function zr(e){if(!e[Ur]){e[Ur]=!0,l.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,jr("selectionchange",!1,t))}}function Zr(e,t,n,r){switch(Xt(t)){case 1:var a=Wt;break;case 4:a=Vt;break;default:a=Gt}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=ga(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}Pe((function(){var r=o,a=Ee(n),l=[];e:{var i=Lr.get(e);if(void 0!==i){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=kn;break;case"focusin":s="focus",u=An;break;case"focusout":s="blur",u=An;break;case"beforeblur":case"afterblur":u=An;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Mn;break;case _r:case kr:case Br:u=vn;break;case Mr:u=Ln;break;case"scroll":u=fn;break;case"wheel":u=$n;break;case"copy":case"cut":case"paste":u=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Bn}var c=!!(4&t),d=!c&&"scroll"===e,f=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=$e(h,f))&&c.push(Wr(h,m,p))),d)break;h=h.return}0<c.length&&(i=new u(i,s,null,n,a),l.push({event:i,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===be||!(s=n.relatedTarget||n.fromElement)||!ga(s)&&!s[ha])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ga(s):null)&&(s!==(d=ze(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Bn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==u?i:ba(u),p=null==s?i:ba(s),(i=new c(m,h+"leave",u,n,a)).target=d,i.relatedTarget=p,m=null,ga(a)===r&&((c=new c(f,h+"enter",s,n,a)).target=p,c.relatedTarget=d,m=c),d=m,u&&s)e:{for(f=s,h=0,p=c=u;p;p=Gr(p))h++;for(p=0,m=f;m;m=Gr(m))p++;for(;0<h-p;)c=Gr(c),h--;for(;0<p-h;)f=Gr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Gr(c),f=Gr(f)}c=null}else c=null;null!==u&&Kr(l,i,u,c,!1),null!==s&&null!==d&&Kr(l,d,s,c,!0)}if("select"===(u=(i=r?ba(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var A=Xn;else if(Hn(i))if(qn)A=lr;else{A=ar;var v=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(A=or);switch(A&&(A=A(e,r))?Wn(l,A,n,a):(v&&v(e,i,r),"focusout"===e&&(v=i._wrapperState)&&v.controlled&&"number"===i.type&&ee(i,"number",i.value)),v=r?ba(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(Ar=v,vr=r,gr=null);break;case"focusout":gr=vr=Ar=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(l,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":br(l,n,a)}var g;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else zn?jn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Tn&&"ko"!==n.locale&&(zn||"onCompositionStart"!==y?"onCompositionEnd"===y&&zn&&(g=en()):(Qt="value"in(qt=a)?qt.value:qt.textContent,zn=!0)),0<(v=Vr(r,y)).length&&(y=new bn(y,e,null,n,a),l.push({event:y,listeners:v}),(g||null!==(g=Un(n)))&&(y.data=g))),(g=Dn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Fn=!0,In);case"textInput":return(e=t.data)===In&&Fn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!Nn&&jn(e,t)?(e=en(),Jt=Qt=qt=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Tn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Vr(r,"onBeforeInput")).length&&(a=new bn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=g)}Ir(l,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=$e(e,n))&&r.unshift(Wr(e,o,a)),null!=(o=$e(e,t))&&r.push(Wr(e,o,a))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=$e(n,o))&&l.unshift(Wr(n,u,i)):a||null!=(u=$e(n,o))&&l.push(Wr(n,u,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Yr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function qr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Xr,"")}function Qr(e,t,n){if(t=qr(t),qr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,la="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void zt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);zt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ha="__reactContainer$"+da,ma="__reactEvents$"+da,Aa="__reactListeners$"+da,va="__reactHandles$"+da;function ga(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ya(e){return!(e=e[fa]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ba(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Ea(e){return e[pa]||null}var xa=[],Ca=-1;function Sa(e){return{current:e}}function wa(e){0>Ca||(e.current=xa[Ca],xa[Ca]=null,Ca--)}function _a(e,t){Ca++,xa[Ca]=e.current,e.current=t}var ka={},Ba=Sa(ka),Ma=Sa(!1),La=ka;function Pa(e,t){var n=e.type.contextTypes;if(!n)return ka;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function $a(e){return null!=e.childContextTypes}function Ra(){wa(Ma),wa(Ba)}function Na(e,t,n){if(Ba.current!==ka)throw Error(o(168));_a(Ba,t),_a(Ma,n)}function Oa(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,Z(e)||"Unknown",a));return T({},n,r)}function Da(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ka,La=Ba.current,_a(Ba,e),_a(Ma,Ma.current),!0}function Ta(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Oa(e,t,La),r.__reactInternalMemoizedMergedChildContext=e,wa(Ma),wa(Ba),_a(Ba,e)):wa(Ma),_a(Ma,n)}var Ia=null,Fa=!1,ja=!1;function Ua(e){null===Ia?Ia=[e]:Ia.push(e)}function za(){if(!ja&&null!==Ia){ja=!0;var e=0,t=yt;try{var n=Ia;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ia=null,Fa=!1}catch(t){throw null!==Ia&&(Ia=Ia.slice(e+1)),Ge(Je,za),t}finally{yt=t,ja=!1}}return null}var Za=[],Ha=0,Wa=null,Va=0,Ga=[],Ka=0,Ya=null,Xa=1,qa="";function Qa(e,t){Za[Ha++]=Va,Za[Ha++]=Wa,Wa=e,Va=t}function Ja(e,t,n){Ga[Ka++]=Xa,Ga[Ka++]=qa,Ga[Ka++]=Ya,Ya=e;var r=Xa;e=qa;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var o=32-lt(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Xa=1<<32-lt(t)+a|n<<a|r,qa=o+e}else Xa=1<<o|n<<a|r,qa=e}function eo(e){null!==e.return&&(Qa(e,1),Ja(e,1,0))}function to(e){for(;e===Wa;)Wa=Za[--Ha],Za[Ha]=null,Va=Za[--Ha],Za[Ha]=null;for(;e===Ya;)Ya=Ga[--Ka],Ga[Ka]=null,qa=Ga[--Ka],Ga[Ka]=null,Xa=Ga[--Ka],Ga[Ka]=null}var no=null,ro=null,ao=!1,oo=null;function lo(e,t){var n=Ps(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ya?{id:Xa,overflow:qa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ps(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return!(!(1&e.mode)||128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!io(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&io(e,t)?lo(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)lo(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var Ao=b.ReactCurrentBatchConfig;function vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function yo(e){return(0,e._init)(e._payload)}function bo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Rs(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ts(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===C?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===$&&yo(o)===t.type)?((r=a(t,n.props)).ref=vo(e,t,n),r.return=e,r):((r=Ns(n.type,n.key,n.props,null,e.mode,r)).ref=vo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Is(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Os(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ts(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Ns(t.type,t.key,t.props,null,e.mode,n)).ref=vo(e,null,t),n.return=e,n;case x:return(t=Is(t,e.mode,n)).return=e,t;case $:return f(e,(0,t._init)(t._payload),n)}if(te(t)||O(t))return(t=Os(t,e.mode,n,null)).return=e,t;go(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===a?s(e,t,n,r):null;case x:return n.key===a?c(e,t,n,r):null;case $:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||O(n))return null!==a?null:d(e,t,n,r,null);go(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case $:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||O(r))return d(t,e=e.get(n)||null,r,a,null);go(t,r)}return null}function m(a,o,i,u){for(var s=null,c=null,d=o,m=o=0,A=null;null!==d&&m<i.length;m++){d.index>m?(A=d,d=null):A=d.sibling;var v=p(a,d,i[m],u);if(null===v){null===d&&(d=A);break}e&&d&&null===v.alternate&&t(a,d),o=l(v,o,m),null===c?s=v:c.sibling=v,c=v,d=A}if(m===i.length)return n(a,d),ao&&Qa(a,m),s;if(null===d){for(;m<i.length;m++)null!==(d=f(a,i[m],u))&&(o=l(d,o,m),null===c?s=d:c.sibling=d,c=d);return ao&&Qa(a,m),s}for(d=r(a,d);m<i.length;m++)null!==(A=h(d,a,m,i[m],u))&&(e&&null!==A.alternate&&d.delete(null===A.key?m:A.key),o=l(A,o,m),null===c?s=A:c.sibling=A,c=A);return e&&d.forEach((function(e){return t(a,e)})),ao&&Qa(a,m),s}function A(a,i,u,s){var c=O(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var d=c=null,m=i,A=i=0,v=null,g=u.next();null!==m&&!g.done;A++,g=u.next()){m.index>A?(v=m,m=null):v=m.sibling;var y=p(a,m,g.value,s);if(null===y){null===m&&(m=v);break}e&&m&&null===y.alternate&&t(a,m),i=l(y,i,A),null===d?c=y:d.sibling=y,d=y,m=v}if(g.done)return n(a,m),ao&&Qa(a,A),c;if(null===m){for(;!g.done;A++,g=u.next())null!==(g=f(a,g.value,s))&&(i=l(g,i,A),null===d?c=g:d.sibling=g,d=g);return ao&&Qa(a,A),c}for(m=r(a,m);!g.done;A++,g=u.next())null!==(g=h(m,a,A,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?A:g.key),i=l(g,i,A),null===d?c=g:d.sibling=g,d=g);return e&&m.forEach((function(e){return t(a,e)})),ao&&Qa(a,A),c}return function e(r,o,l,u){if("object"==typeof l&&null!==l&&l.type===C&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case E:e:{for(var s=l.key,c=o;null!==c;){if(c.key===s){if((s=l.type)===C){if(7===c.tag){n(r,c.sibling),(o=a(c,l.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===$&&yo(s)===c.type){n(r,c.sibling),(o=a(c,l.props)).ref=vo(r,c,l),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===C?((o=Os(l.props.children,r.mode,u,l.key)).return=r,r=o):((u=Ns(l.type,l.key,l.props,null,r.mode,u)).ref=vo(r,o,l),u.return=r,r=u)}return i(r);case x:e:{for(c=l.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Is(l,r.mode,u)).return=r,r=o}return i(r);case $:return e(r,o,(c=l._init)(l._payload),u)}if(te(l))return m(r,o,l,u);if(O(l))return A(r,o,l,u);go(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,l)).return=r,r=o):(n(r,o),(o=Ts(l,r.mode,u)).return=r,r=o),i(r)):n(r,o)}}var Eo=bo(!0),xo=bo(!1),Co=Sa(null),So=null,wo=null,_o=null;function ko(){_o=wo=So=null}function Bo(e){var t=Co.current;wa(Co),e._currentValue=t}function Mo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Lo(e,t){So=e,_o=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(yi=!0),e.firstContext=null)}function Po(e){var t=e._currentValue;if(_o!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===So)throw Error(o(308));wo=e,So.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var $o=null;function Ro(e){null===$o?$o=[e]:$o.push(e)}function No(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Ro(t)):(n.next=a.next,a.next=n),t.interleaved=n,Oo(e,r)}function Oo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Do=!1;function To(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Io(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function jo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Bu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Oo(e,n)}return null===(a=r.interleaved)?(t.next=t,Ro(r)):(t.next=a.next,a.next=t),r.interleaved=t,Oo(e,n)}function Uo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function zo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Zo(e,t,n,r){var a=e.updateQueue;Do=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var d=a.baseState;for(l=0,c=s=u=null,i=o;;){var f=i.lane,p=i.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=T({},d,f);break e;case 2:Do=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[i]:f.push(i))}else p={eventTime:p,lane:f,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=d):c=c.next=p,l|=f;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(f=i).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(u=d),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Du|=l,e.lanes=l,e.memoizedState=d}}function Ho(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Wo={},Vo=Sa(Wo),Go=Sa(Wo),Ko=Sa(Wo);function Yo(e){if(e===Wo)throw Error(o(174));return e}function Xo(e,t){switch(_a(Ko,t),_a(Go,e),_a(Vo,Wo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}wa(Vo),_a(Vo,t)}function qo(){wa(Vo),wa(Go),wa(Ko)}function Qo(e){Yo(Ko.current);var t=Yo(Vo.current),n=ue(t,e.type);t!==n&&(_a(Go,e),_a(Vo,n))}function Jo(e){Go.current===e&&(wa(Vo),wa(Go))}var el=Sa(0);function tl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var nl=[];function rl(){for(var e=0;e<nl.length;e++)nl[e]._workInProgressVersionPrimary=null;nl.length=0}var al=b.ReactCurrentDispatcher,ol=b.ReactCurrentBatchConfig,ll=0,il=null,ul=null,sl=null,cl=!1,dl=!1,fl=0,pl=0;function hl(){throw Error(o(321))}function ml(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function Al(e,t,n,r,a,l){if(ll=l,il=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,al.current=null===e||null===e.memoizedState?Jl:ei,e=n(r,a),dl){l=0;do{if(dl=!1,fl=0,25<=l)throw Error(o(301));l+=1,sl=ul=null,t.updateQueue=null,al.current=ti,e=n(r,a)}while(dl)}if(al.current=Ql,t=null!==ul&&null!==ul.next,ll=0,sl=ul=il=null,cl=!1,t)throw Error(o(300));return e}function vl(){var e=0!==fl;return fl=0,e}function gl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===sl?il.memoizedState=sl=e:sl=sl.next=e,sl}function yl(){if(null===ul){var e=il.alternate;e=null!==e?e.memoizedState:null}else e=ul.next;var t=null===sl?il.memoizedState:sl.next;if(null!==t)sl=t,ul=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ul=e).memoizedState,baseState:ul.baseState,baseQueue:ul.baseQueue,queue:ul.queue,next:null},null===sl?il.memoizedState=sl=e:sl=sl.next=e}return sl}function bl(e,t){return"function"==typeof t?t(e):t}function El(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ul,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var u=i=null,s=null,c=l;do{var d=c.lane;if((ll&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=f,i=r):s=s.next=f,il.lanes|=d,Du|=d}c=c.next}while(null!==c&&c!==l);null===s?i=r:s.next=u,ir(r,t.memoizedState)||(yi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,il.lanes|=l,Du|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function xl(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,t.memoizedState)||(yi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Cl(){}function Sl(e,t){var n=il,r=yl(),a=t(),l=!ir(r.memoizedState,a);if(l&&(r.memoizedState=a,yi=!0),r=r.queue,Dl(kl.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==sl&&1&sl.memoizedState.tag){if(n.flags|=2048,Pl(9,_l.bind(null,n,r,a,t),void 0,null),null===Mu)throw Error(o(349));30&ll||wl(n,t,a)}return a}function wl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function _l(e,t,n,r){t.value=n,t.getSnapshot=r,Bl(t)&&Ml(e)}function kl(e,t,n){return n((function(){Bl(t)&&Ml(e)}))}function Bl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Ml(e){var t=Oo(e,1);null!==t&&ns(t,e,1,-1)}function Ll(e){var t=gl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:bl,lastRenderedState:e},t.queue=e,e=e.dispatch=Kl.bind(null,il,e),[t.memoizedState,e]}function Pl(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function $l(){return yl().memoizedState}function Rl(e,t,n,r){var a=gl();il.flags|=e,a.memoizedState=Pl(1|t,n,void 0,void 0===r?null:r)}function Nl(e,t,n,r){var a=yl();r=void 0===r?null:r;var o=void 0;if(null!==ul){var l=ul.memoizedState;if(o=l.destroy,null!==r&&ml(r,l.deps))return void(a.memoizedState=Pl(t,n,o,r))}il.flags|=e,a.memoizedState=Pl(1|t,n,o,r)}function Ol(e,t){return Rl(8390656,8,e,t)}function Dl(e,t){return Nl(2048,8,e,t)}function Tl(e,t){return Nl(4,2,e,t)}function Il(e,t){return Nl(4,4,e,t)}function Fl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function jl(e,t,n){return n=null!=n?n.concat([e]):null,Nl(4,4,Fl.bind(null,t,e),n)}function Ul(){}function zl(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ml(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Zl(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ml(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Hl(e,t,n){return 21&ll?(ir(n,t)||(n=mt(),il.lanes|=n,Du|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,yi=!0),e.memoizedState=n)}function Wl(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=ol.transition;ol.transition={};try{e(!1),t()}finally{yt=n,ol.transition=r}}function Vl(){return yl().memoizedState}function Gl(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Yl(e)?Xl(t,n):null!==(n=No(e,t,n,r))&&(ns(n,e,r,es()),ql(n,t,r))}function Kl(e,t,n){var r=ts(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Yl(e))Xl(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,ir(i,l)){var u=t.interleaved;return null===u?(a.next=a,Ro(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=No(e,t,a,r))&&(ns(n,e,r,a=es()),ql(n,t,r))}}function Yl(e){var t=e.alternate;return e===il||null!==t&&t===il}function Xl(e,t){dl=cl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ql(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Ql={readContext:Po,useCallback:hl,useContext:hl,useEffect:hl,useImperativeHandle:hl,useInsertionEffect:hl,useLayoutEffect:hl,useMemo:hl,useReducer:hl,useRef:hl,useState:hl,useDebugValue:hl,useDeferredValue:hl,useTransition:hl,useMutableSource:hl,useSyncExternalStore:hl,useId:hl,unstable_isNewReconciler:!1},Jl={readContext:Po,useCallback:function(e,t){return gl().memoizedState=[e,void 0===t?null:t],e},useContext:Po,useEffect:Ol,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Rl(4194308,4,Fl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Rl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Rl(4,2,e,t)},useMemo:function(e,t){var n=gl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Gl.bind(null,il,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},gl().memoizedState=e},useState:Ll,useDebugValue:Ul,useDeferredValue:function(e){return gl().memoizedState=e},useTransition:function(){var e=Ll(!1),t=e[0];return e=Wl.bind(null,e[1]),gl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=il,a=gl();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Mu)throw Error(o(349));30&ll||wl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Ol(kl.bind(null,r,l,e),[e]),r.flags|=2048,Pl(9,_l.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=gl(),t=Mu.identifierPrefix;if(ao){var n=qa;t=":"+t+"R"+(n=(Xa&~(1<<32-lt(Xa)-1)).toString(32)+n),0<(n=fl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ei={readContext:Po,useCallback:zl,useContext:Po,useEffect:Dl,useImperativeHandle:jl,useInsertionEffect:Tl,useLayoutEffect:Il,useMemo:Zl,useReducer:El,useRef:$l,useState:function(){return El(bl)},useDebugValue:Ul,useDeferredValue:function(e){return Hl(yl(),ul.memoizedState,e)},useTransition:function(){return[El(bl)[0],yl().memoizedState]},useMutableSource:Cl,useSyncExternalStore:Sl,useId:Vl,unstable_isNewReconciler:!1},ti={readContext:Po,useCallback:zl,useContext:Po,useEffect:Dl,useImperativeHandle:jl,useInsertionEffect:Tl,useLayoutEffect:Il,useMemo:Zl,useReducer:xl,useRef:$l,useState:function(){return xl(bl)},useDebugValue:Ul,useDeferredValue:function(e){var t=yl();return null===ul?t.memoizedState=e:Hl(t,ul.memoizedState,e)},useTransition:function(){return[xl(bl)[0],yl().memoizedState]},useMutableSource:Cl,useSyncExternalStore:Sl,useId:Vl,unstable_isNewReconciler:!1};function ni(e,t){if(e&&e.defaultProps){for(var n in t=T({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ri(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:T({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ai={isMounted:function(e){return!!(e=e._reactInternals)&&ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Fo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,a))&&(ns(t,e,a,r),Uo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Fo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,a))&&(ns(t,e,a,r),Uo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),a=Fo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=jo(e,a,r))&&(ns(t,e,r,n),Uo(t,e,r))}};function oi(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function li(e,t,n){var r=!1,a=ka,o=t.contextType;return"object"==typeof o&&null!==o?o=Po(o):(a=$a(t)?La:Ba.current,o=(r=null!=(r=t.contextTypes))?Pa(e,a):ka),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ai,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ii(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ai.enqueueReplaceState(t,t.state,null)}function ui(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},To(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Po(o):(o=$a(t)?La:Ba.current,a.context=Pa(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ri(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ai.enqueueReplaceState(a,a.state,null),Zo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function si(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function ci(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function di(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fi="function"==typeof WeakMap?WeakMap:Map;function pi(e,t,n){(n=Fo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,Wu=r),di(0,t)},n}function hi(e,t,n){(n=Fo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){di(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){di(0,t),"function"!=typeof r&&(null===Vu?Vu=new Set([this]):Vu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function mi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fi;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=ws.bind(null,e,t,n),t.then(e,e))}function Ai(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vi(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Fo(-1,1)).tag=2,jo(n,t,1))),n.lanes|=1),e)}var gi=b.ReactCurrentOwner,yi=!1;function bi(e,t,n,r){t.child=null===e?xo(t,null,n,r):Eo(t,e.child,n,r)}function Ei(e,t,n,r,a){n=n.render;var o=t.ref;return Lo(t,a),r=Al(e,t,n,r,o,a),n=vl(),null===e||yi?(ao&&n&&eo(t),t.flags|=1,bi(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hi(e,t,a))}function xi(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||$s(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ns(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ci(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(l,r)&&e.ref===t.ref)return Hi(e,t,a)}return t.flags|=1,(e=Rs(o,r)).ref=t.ref,e.return=t,t.child=e}function Ci(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(yi=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,Hi(e,t,a);131072&e.flags&&(yi=!0)}}return _i(e,t,n,r,a)}function Si(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,_a(Ru,$u),$u|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,_a(Ru,$u),$u|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},_a(Ru,$u),$u|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,_a(Ru,$u),$u|=r;return bi(e,t,a,n),t.child}function wi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function _i(e,t,n,r,a){var o=$a(n)?La:Ba.current;return o=Pa(t,o),Lo(t,a),n=Al(e,t,n,r,o,a),r=vl(),null===e||yi?(ao&&r&&eo(t),t.flags|=1,bi(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hi(e,t,a))}function ki(e,t,n,r,a){if($a(n)){var o=!0;Da(t)}else o=!1;if(Lo(t,a),null===t.stateNode)Zi(e,t),li(t,n,r),ui(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var u=l.context,s=n.contextType;s="object"==typeof s&&null!==s?Po(s):Pa(t,s=$a(n)?La:Ba.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==s)&&ii(t,l,r,s),Do=!1;var f=t.memoizedState;l.state=f,Zo(t,r,l,a),u=t.memoizedState,i!==r||f!==u||Ma.current||Do?("function"==typeof c&&(ri(t,n,c,r),u=t.memoizedState),(i=Do||oi(t,n,i,r,f,u,s))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),l.props=r,l.state=u,l.context=s,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Io(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:ni(t.type,i),l.props=s,d=t.pendingProps,f=l.context,u="object"==typeof(u=n.contextType)&&null!==u?Po(u):Pa(t,u=$a(n)?La:Ba.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==d||f!==u)&&ii(t,l,r,u),Do=!1,f=t.memoizedState,l.state=f,Zo(t,r,l,a);var h=t.memoizedState;i!==d||f!==h||Ma.current||Do?("function"==typeof p&&(ri(t,n,p,r),h=t.memoizedState),(s=Do||oi(t,n,s,r,f,h,u)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Bi(e,t,n,r,o,a)}function Bi(e,t,n,r,a,o){wi(e,t);var l=!!(128&t.flags);if(!r&&!l)return a&&Ta(t,n,!1),Hi(e,t,o);r=t.stateNode,gi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=Eo(t,e.child,null,o),t.child=Eo(t,null,i,o)):bi(e,t,i,o),t.memoizedState=r.state,a&&Ta(t,n,!0),t.child}function Mi(e){var t=e.stateNode;t.pendingContext?Na(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Na(0,t.context,!1),Xo(e,t.containerInfo)}function Li(e,t,n,r,a){return ho(),mo(a),t.flags|=256,bi(e,t,n,r),t.child}var Pi,$i,Ri,Ni,Oi={dehydrated:null,treeContext:null,retryLane:0};function Di(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ti(e,t,n){var r,a=t.pendingProps,l=el.current,i=!1,u=!!(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),_a(el,1&l),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(u=a.children,e=a.fallback,i?(a=t.mode,i=t.child,u={mode:"hidden",children:u},1&a||null===i?i=Ds(u,a,0,null):(i.childLanes=0,i.pendingProps=u),e=Os(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Di(n),t.memoizedState=Oi,e):Ii(t,u));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,a,l,i){if(n)return 256&t.flags?(t.flags&=-257,Fi(e,t,i,r=ci(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,a=t.mode,r=Ds({mode:"visible",children:r.children},a,0,null),(l=Os(l,a,i,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,1&t.mode&&Eo(t,e.child,null,i),t.child.memoizedState=Di(i),t.memoizedState=Oi,l);if(!(1&t.mode))return Fi(e,t,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Fi(e,t,i,r=ci(l=Error(o(419)),r,void 0))}if(u=!!(i&e.childLanes),yi||u){if(null!==(r=Mu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|i)?0:a)&&a!==l.retryLane&&(l.retryLane=a,Oo(e,a),ns(r,e,a,-1))}return ms(),Fi(e,t,i,r=ci(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=ks.bind(null,e),a._reactRetry=t,null):(e=l.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Ga[Ka++]=Xa,Ga[Ka++]=qa,Ga[Ka++]=Ya,Xa=e.id,qa=e.overflow,Ya=t),(t=Ii(t,r.children)).flags|=4096,t)}(e,t,u,a,r,l,n);if(i){i=a.fallback,u=t.mode,r=(l=e.child).sibling;var s={mode:"hidden",children:a.children};return 1&u||t.child===l?(a=Rs(l,s)).subtreeFlags=14680064&l.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null),null!==r?i=Rs(r,i):(i=Os(i,u,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,u=null===(u=e.child.memoizedState)?Di(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~n,t.memoizedState=Oi,a}return e=(i=e.child).sibling,a=Rs(i,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ii(e,t){return(t=Ds({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fi(e,t,n,r){return null!==r&&mo(r),Eo(t,e.child,null,n),(e=Ii(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ji(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Mo(e.return,t,n)}function Ui(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function zi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(bi(e,t,r.children,n),2&(r=el.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ji(e,n,t);else if(19===e.tag)ji(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(_a(el,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===tl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ui(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===tl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ui(t,!0,n,null,o);break;case"together":Ui(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Zi(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Du|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Rs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Rs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wi(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Vi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gi(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vi(t),null;case 1:case 17:return $a(t.type)&&Ra(),Vi(t),null;case 3:return r=t.stateNode,qo(),wa(Ma),wa(Ba),rl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(ls(oo),oo=null))),$i(e,t),Vi(t),null;case 5:Jo(t);var a=Yo(Ko.current);if(n=t.type,null!==e&&null!=t.stateNode)Ri(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Vi(t),null}if(e=Yo(Vo.current),fo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[fa]=t,r[pa]=l,e=!!(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Or.length;a++)Fr(Or[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,l),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Fr("invalid",r);break;case"textarea":ae(r,l),Fr("invalid",r)}for(var u in ge(n,l),a=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==l.suppressHydrationWarning&&Qr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==l.suppressHydrationWarning&&Qr(r.textContent,s,e),a=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":V(r),J(r,l,!0);break;case"textarea":V(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fa]=t,e[pa]=r,Pi(e,t,!1,!1),t.stateNode=e;e:{switch(u=ye(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Or.length;a++)Fr(Or[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":X(e,r),a=Y(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=T({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(l in ge(n,a),s=a)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?Ae(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=c&&"onScroll"===l&&Fr("scroll",e):null!=c&&y(e,l,c,u))}switch(n){case"input":V(e),J(e,r,!1);break;case"textarea":V(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Vi(t),null;case 6:if(e&&null!=t.stateNode)Ni(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Yo(Ko.current),Yo(Vo.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(l=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Qr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qr(r.nodeValue,n,!!(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Vi(t),null;case 13:if(wa(el),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))po(),ho(),t.flags|=98560,l=!1;else if(l=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[fa]=t}else ho(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Vi(t),l=!1}else null!==oo&&(ls(oo),oo=null),l=!0;if(!l)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&el.current?0===Nu&&(Nu=3):ms())),null!==t.updateQueue&&(t.flags|=4),Vi(t),null);case 4:return qo(),$i(e,t),null===e&&zr(t.stateNode.containerInfo),Vi(t),null;case 10:return Bo(t.type._context),Vi(t),null;case 19:if(wa(el),null===(l=t.memoizedState))return Vi(t),null;if(r=!!(128&t.flags),null===(u=l.rendering))if(r)Wi(l,!1);else{if(0!==Nu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(u=tl(e))){for(t.flags|=128,Wi(l,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return _a(el,1&el.current|2),t.child}e=e.sibling}null!==l.tail&&qe()>zu&&(t.flags|=128,r=!0,Wi(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=tl(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!u.alternate&&!ao)return Vi(t),null}else 2*qe()-l.renderingStartTime>zu&&1073741824!==n&&(t.flags|=128,r=!0,Wi(l,!1),t.lanes=4194304);l.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=l.last)?n.sibling=u:t.child=u,l.last=u)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=qe(),t.sibling=null,n=el.current,_a(el,r?1&n|2:1&n),t):(Vi(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&$u)&&(Vi(t),6&t.subtreeFlags&&(t.flags|=8192)):Vi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ki(e,t){switch(to(t),t.tag){case 1:return $a(t.type)&&Ra(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return qo(),wa(Ma),wa(Ba),rl(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Jo(t),null;case 13:if(wa(el),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return wa(el),null;case 4:return qo(),null;case 10:return Bo(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Pi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$i=function(){},Ri=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Yo(Vo.current);var o,l=null;switch(n){case"input":a=Y(e,a),r=Y(e,r),l=[];break;case"select":a=T({},a,{value:void 0}),r=T({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ge(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(l||(l=[]),l.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(l=l||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),l||u===s||(l=[])):(l=l||[]).push(c,s))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},Ni=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yi=!1,Xi=!1,qi="function"==typeof WeakSet?WeakSet:Set,Qi=null;function Ji(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ss(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){Ss(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&eu(t,n,o)}a=a.next}while(a!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ou(e){var t=e.alternate;null!==t&&(e.alternate=null,ou(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ma],delete t[Aa],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function iu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,du=!1;function fu(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xi||Ji(n,t);case 6:var r=cu,a=du;cu=null,fu(e,t,n),du=a,null!==(cu=r)&&(du?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(du?(e=cu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),zt(e)):ua(cu,n.stateNode));break;case 4:r=cu,a=du,cu=n.stateNode.containerInfo,du=!0,fu(e,t,n),cu=r,du=a;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,l=o.destroy;o=o.tag,void 0!==l&&(2&o||4&o)&&eu(n,t,l),a=a.next}while(a!==r)}fu(e,t,n);break;case 1:if(!Xi&&(Ji(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ss(n,t,e)}fu(e,t,n);break;case 21:fu(e,t,n);break;case 22:1&n.mode?(Xi=(r=Xi)||null!==n.memoizedState,fu(e,t,n),Xi=r):fu(e,t,n);break;default:fu(e,t,n)}}function hu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new qi),t.forEach((function(t){var r=Bs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,du=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===cu)throw Error(o(160));pu(l,i,a),cu=null,du=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Ss(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)Au(t,e),t=t.sibling}function Au(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),vu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){Ss(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Ss(e,e.return,t)}}break;case 1:mu(t,e),vu(e),512&r&&null!==n&&Ji(n,n.return);break;case 5:if(mu(t,e),vu(e),512&r&&null!==n&&Ji(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){Ss(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===l.type&&null!=l.name&&q(a,l),ye(u,i);var c=ye(u,l);for(i=0;i<s.length;i+=2){var d=s[i],f=s[i+1];"style"===d?Ae(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):y(a,d,f,c)}switch(u){case"input":Q(a,l);break;case"textarea":oe(a,l);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var h=l.value;null!=h?ne(a,!!l.multiple,h,!1):p!==!!l.multiple&&(null!=l.defaultValue?ne(a,!!l.multiple,l.defaultValue,!0):ne(a,!!l.multiple,l.multiple?[]:"",!1))}a[pa]=l}catch(t){Ss(e,e.return,t)}}break;case 6:if(mu(t,e),vu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(t){Ss(e,e.return,t)}}break;case 3:if(mu(t,e),vu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{zt(t.containerInfo)}catch(t){Ss(e,e.return,t)}break;case 4:default:mu(t,e),vu(e);break;case 13:mu(t,e),vu(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||(Uu=qe())),4&r&&hu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xi=(c=Xi)||d,mu(t,e),Xi=c):mu(t,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Qi=e,d=e.child;null!==d;){for(f=Qi=d;null!==Qi;){switch(h=(p=Qi).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Ji(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Ss(r,n,e)}}break;case 5:Ji(p,p.return);break;case 22:if(null!==p.memoizedState){Eu(f);continue}}null!==h?(h.return=p,Qi=h):Eu(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(u=f.stateNode,i=null!=(s=f.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(t){Ss(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Ss(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:mu(t,e),vu(e),4&r&&hu(e);case 21:}}function vu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),su(e,iu(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;uu(e,iu(e),l);break;default:throw Error(o(161))}}catch(t){Ss(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gu(e,t,n){Qi=e,yu(e,t,n)}function yu(e,t,n){for(var r=!!(1&e.mode);null!==Qi;){var a=Qi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Yi;if(!l){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Yi;var s=Xi;if(Yi=l,(Xi=u)&&!s)for(Qi=a;null!==Qi;)u=(l=Qi).child,22===l.tag&&null!==l.memoizedState?xu(a):null!==u?(u.return=l,Qi=u):xu(a);for(;null!==o;)Qi=o,yu(o,t,n),o=o.sibling;Qi=a,Yi=i,Xi=s}bu(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Qi=o):bu(e)}}function bu(e){for(;null!==Qi;){var t=Qi;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Xi||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xi)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:ni(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&Ho(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ho(t,i,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&zt(f)}}}break;default:throw Error(o(163))}Xi||512&t.flags&&au(t)}catch(e){Ss(t,t.return,e)}}if(t===e){Qi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Qi=n;break}Qi=t.return}}function Eu(e){for(;null!==Qi;){var t=Qi;if(t===e){Qi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Qi=n;break}Qi=t.return}}function xu(e){for(;null!==Qi;){var t=Qi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){Ss(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Ss(t,a,e)}}var o=t.return;try{au(t)}catch(e){Ss(t,o,e)}break;case 5:var l=t.return;try{au(t)}catch(e){Ss(t,l,e)}}}catch(e){Ss(t,t.return,e)}if(t===e){Qi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Qi=i;break}Qi=t.return}}var Cu,Su=Math.ceil,wu=b.ReactCurrentDispatcher,_u=b.ReactCurrentOwner,ku=b.ReactCurrentBatchConfig,Bu=0,Mu=null,Lu=null,Pu=0,$u=0,Ru=Sa(0),Nu=0,Ou=null,Du=0,Tu=0,Iu=0,Fu=null,ju=null,Uu=0,zu=1/0,Zu=null,Hu=!1,Wu=null,Vu=null,Gu=!1,Ku=null,Yu=0,Xu=0,qu=null,Qu=-1,Ju=0;function es(){return 6&Bu?qe():-1!==Qu?Qu:Qu=qe()}function ts(e){return 1&e.mode?2&Bu&&0!==Pu?Pu&-Pu:null!==Ao.transition?(0===Ju&&(Ju=mt()),Ju):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Xt(e.type):1}function ns(e,t,n,r){if(50<Xu)throw Xu=0,qu=null,Error(o(185));vt(e,n,r),2&Bu&&e===Mu||(e===Mu&&(!(2&Bu)&&(Tu|=n),4===Nu&&is(e,Pu)),rs(e,r),1===n&&0===Bu&&!(1&t.mode)&&(zu=qe()+500,Fa&&za()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,u=a[l];-1===u?i&n&&!(i&r)||(a[l]=pt(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var r=ft(e,e===Mu?Pu:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Fa=!0,Ua(e)}(us.bind(null,e)):Ua(us.bind(null,e)),la((function(){!(6&Bu)&&za()})),n=null;else{switch(bt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ms(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(Qu=-1,Ju=0,6&Bu)throw Error(o(327));var n=e.callbackNode;if(xs()&&e.callbackNode!==n)return null;var r=ft(e,e===Mu?Pu:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=As(e,r);else{t=r;var a=Bu;Bu|=2;var l=hs();for(Mu===e&&Pu===t||(Zu=null,zu=qe()+500,fs(e,t));;)try{gs();break}catch(t){ps(e,t)}ko(),wu.current=l,Bu=a,null!==Lu?t=0:(Mu=null,Pu=0,t=Nu)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=os(e,a)),1===t)throw n=Ou,fs(e,0),is(e,r),rs(e,qe()),n;if(6===t)is(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!ir(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=As(e,r),2===t&&(l=ht(e),0!==l&&(r=l,t=os(e,l))),1!==t)))throw n=Ou,fs(e,0),is(e,r),rs(e,qe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Es(e,ju,Zu);break;case 3:if(is(e,r),(130023424&r)===r&&10<(t=Uu+500-qe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Es.bind(null,e,ju,Zu),t);break}Es(e,ju,Zu);break;case 4:if(is(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ra(Es.bind(null,e,ju,Zu),r);break}Es(e,ju,Zu);break;default:throw Error(o(329))}}}return rs(e,qe()),e.callbackNode===n?as.bind(null,e):null}function os(e,t){var n=Fu;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=As(e,t))&&(t=ju,ju=n,null!==t&&ls(t)),e}function ls(e){null===ju?ju=e:ju.push.apply(ju,e)}function is(e,t){for(t&=~Iu,t&=~Tu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(6&Bu)throw Error(o(327));xs();var t=ft(e,0);if(!(1&t))return rs(e,qe()),null;var n=As(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=os(e,r))}if(1===n)throw n=Ou,fs(e,0),is(e,t),rs(e,qe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Es(e,ju,Zu),rs(e,qe()),null}function ss(e,t){var n=Bu;Bu|=1;try{return e(t)}finally{0===(Bu=n)&&(zu=qe()+500,Fa&&za())}}function cs(e){null!==Ku&&0===Ku.tag&&!(6&Bu)&&xs();var t=Bu;Bu|=1;var n=ku.transition,r=yt;try{if(ku.transition=null,yt=1,e)return e()}finally{yt=r,ku.transition=n,!(6&(Bu=t))&&za()}}function ds(){$u=Ru.current,wa(Ru)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Lu)for(n=Lu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:qo(),wa(Ma),wa(Ba),rl();break;case 5:Jo(r);break;case 4:qo();break;case 13:case 19:wa(el);break;case 10:Bo(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Mu=e,Lu=e=Rs(e.current,null),Pu=$u=t,Nu=0,Ou=null,Iu=Tu=Du=0,ju=Fu=null,null!==$o){for(t=0;t<$o.length;t++)if(null!==(r=(n=$o[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}n.pending=r}$o=null}return e}function ps(e,t){for(;;){var n=Lu;try{if(ko(),al.current=Ql,cl){for(var r=il.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}cl=!1}if(ll=0,sl=ul=il=null,dl=!1,fl=0,_u.current=null,null===n||null===n.return){Nu=1,Ou=t,Lu=null;break}e:{var l=e,i=n.return,u=n,s=t;if(t=Pu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=Ai(i);if(null!==h){h.flags&=-257,vi(h,i,u,0,t),1&h.mode&&mi(l,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var A=new Set;A.add(s),t.updateQueue=A}else m.add(s);break e}if(!(1&t)){mi(l,c,t),ms();break e}s=Error(o(426))}else if(ao&&1&u.mode){var v=Ai(i);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vi(v,i,u,0,t),mo(si(s,u));break e}}l=s=si(s,u),4!==Nu&&(Nu=2),null===Fu?Fu=[l]:Fu.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,zo(l,pi(0,s,t));break e;case 1:u=s;var g=l.type,y=l.stateNode;if(!(128&l.flags||"function"!=typeof g.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Vu&&Vu.has(y)))){l.flags|=65536,t&=-t,l.lanes|=t,zo(l,hi(l,u,t));break e}}l=l.return}while(null!==l)}bs(n)}catch(e){t=e,Lu===n&&null!==n&&(Lu=n=n.return);continue}break}}function hs(){var e=wu.current;return wu.current=Ql,null===e?Ql:e}function ms(){0!==Nu&&3!==Nu&&2!==Nu||(Nu=4),null===Mu||!(268435455&Du)&&!(268435455&Tu)||is(Mu,Pu)}function As(e,t){var n=Bu;Bu|=2;var r=hs();for(Mu===e&&Pu===t||(Zu=null,fs(e,t));;)try{vs();break}catch(t){ps(e,t)}if(ko(),Bu=n,wu.current=r,null!==Lu)throw Error(o(261));return Mu=null,Pu=0,Nu}function vs(){for(;null!==Lu;)ys(Lu)}function gs(){for(;null!==Lu&&!Ye();)ys(Lu)}function ys(e){var t=Cu(e.alternate,e,$u);e.memoizedProps=e.pendingProps,null===t?bs(e):Lu=t,_u.current=null}function bs(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ki(n,t)))return n.flags&=32767,void(Lu=n);if(null===e)return Nu=6,void(Lu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Gi(n,t,$u)))return void(Lu=n);if(null!==(t=t.sibling))return void(Lu=t);Lu=t=e}while(null!==t);0===Nu&&(Nu=5)}function Es(e,t,n){var r=yt,a=ku.transition;try{ku.transition=null,yt=1,function(e,t,n,r){do{xs()}while(null!==Ku);if(6&Bu)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,l),e===Mu&&(Lu=Mu=null,Pu=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Gu||(Gu=!0,Ms(tt,(function(){return xs(),null}))),l=!!(15990&n.flags),15990&n.subtreeFlags||l){l=ku.transition,ku.transition=null;var i=yt;yt=1;var u=Bu;Bu|=4,_u.current=null,function(e,t){if(ea=Ht,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(u=i+a),f!==l||0!==r&&3!==f.nodeType||(s=i+r),3===f.nodeType&&(i+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++d===r&&(s=i),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Ht=!1,Qi=t;null!==Qi;)if(e=(t=Qi).child,1028&t.subtreeFlags&&null!==e)e.return=t,Qi=e;else for(;null!==Qi;){t=Qi;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var A=m.memoizedProps,v=m.memoizedState,g=t.stateNode,y=g.getSnapshotBeforeUpdate(t.elementType===t.type?A:ni(t.type,A),v);g.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var b=t.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(o(163))}}catch(e){Ss(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Qi=e;break}Qi=t.return}m=tu,tu=!1}(e,n),Au(n,e),hr(ta),Ht=!!ea,ta=ea=null,e.current=n,gu(n,e,a),Xe(),Bu=u,yt=i,ku.transition=l}else e.current=n;if(Gu&&(Gu=!1,Ku=e,Yu=a),0===(l=e.pendingLanes)&&(Vu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,qe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Hu)throw Hu=!1,e=Wu,Wu=null,e;!!(1&Yu)&&0!==e.tag&&xs(),1&(l=e.pendingLanes)?e===qu?Xu++:(Xu=0,qu=e):Xu=0,za()}(e,t,n,r)}finally{ku.transition=a,yt=r}return null}function xs(){if(null!==Ku){var e=bt(Yu),t=ku.transition,n=yt;try{if(ku.transition=null,yt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Yu=0,6&Bu)throw Error(o(331));var a=Bu;for(Bu|=4,Qi=e.current;null!==Qi;){var l=Qi,i=l.child;if(16&Qi.flags){var u=l.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Qi=c;null!==Qi;){var d=Qi;switch(d.tag){case 0:case 11:case 15:nu(8,d,l)}var f=d.child;if(null!==f)f.return=d,Qi=f;else for(;null!==Qi;){var p=(d=Qi).sibling,h=d.return;if(ou(d),d===c){Qi=null;break}if(null!==p){p.return=h,Qi=p;break}Qi=h}}}var m=l.alternate;if(null!==m){var A=m.child;if(null!==A){m.child=null;do{var v=A.sibling;A.sibling=null,A=v}while(null!==A)}}Qi=l}}if(2064&l.subtreeFlags&&null!==i)i.return=l,Qi=i;else e:for(;null!==Qi;){if(2048&(l=Qi).flags)switch(l.tag){case 0:case 11:case 15:nu(9,l,l.return)}var g=l.sibling;if(null!==g){g.return=l.return,Qi=g;break e}Qi=l.return}}var y=e.current;for(Qi=y;null!==Qi;){var b=(i=Qi).child;if(2064&i.subtreeFlags&&null!==b)b.return=i,Qi=b;else e:for(i=y;null!==Qi;){if(2048&(u=Qi).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){Ss(u,u.return,e)}if(u===i){Qi=null;break e}var E=u.sibling;if(null!==E){E.return=u.return,Qi=E;break e}Qi=u.return}}if(Bu=a,za(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{yt=n,ku.transition=t}}return!1}function Cs(e,t,n){e=jo(e,t=pi(0,t=si(n,t),1),1),t=es(),null!==e&&(vt(e,1,t),rs(e,t))}function Ss(e,t,n){if(3===e.tag)Cs(e,e,n);else for(;null!==t;){if(3===t.tag){Cs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vu||!Vu.has(r))){t=jo(t,e=hi(t,e=si(n,e),1),1),e=es(),null!==t&&(vt(t,1,e),rs(t,e));break}}t=t.return}}function ws(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Mu===e&&(Pu&n)===n&&(4===Nu||3===Nu&&(130023424&Pu)===Pu&&500>qe()-Uu?fs(e,0):Iu|=n),rs(e,t)}function _s(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Oo(e,t))&&(vt(e,t,n),rs(e,n))}function ks(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),_s(e,n)}function Bs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),_s(e,n)}function Ms(e,t){return Ge(e,t)}function Ls(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ps(e,t,n,r){return new Ls(e,t,n,r)}function $s(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rs(e,t){var n=e.alternate;return null===n?((n=Ps(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ns(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)$s(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case C:return Os(n.children,a,l,t);case S:i=8,a|=8;break;case w:return(e=Ps(12,n,t,2|a)).elementType=w,e.lanes=l,e;case M:return(e=Ps(13,n,t,a)).elementType=M,e.lanes=l,e;case L:return(e=Ps(19,n,t,a)).elementType=L,e.lanes=l,e;case R:return Ds(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:i=10;break e;case k:i=9;break e;case B:i=11;break e;case P:i=14;break e;case $:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ps(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Os(e,t,n,r){return(e=Ps(7,e,r,t)).lanes=n,e}function Ds(e,t,n,r){return(e=Ps(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Ts(e,t,n){return(e=Ps(6,e,null,t)).lanes=n,e}function Is(e,t,n){return(t=Ps(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fs(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=At(0),this.expirationTimes=At(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=At(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function js(e,t,n,r,a,o,l,i,u){return e=new Fs(e,t,n,i,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ps(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},To(o),e}function Us(e){if(!e)return ka;e:{if(ze(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if($a(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if($a(n))return Oa(e,n,t)}return t}function zs(e,t,n,r,a,o,l,i,u){return(e=js(n,r,!0,e,0,o,0,i,u)).context=Us(null),n=e.current,(o=Fo(r=es(),a=ts(n))).callback=null!=t?t:null,jo(n,o,a),e.current.lanes=a,vt(e,a,r),rs(e,r),e}function Zs(e,t,n,r){var a=t.current,o=es(),l=ts(a);return n=Us(n),null===t.context?t.context=n:t.pendingContext=n,(t=Fo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=jo(a,t,l))&&(ns(e,a,l,o),Uo(e,a,l)),l}function Hs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ws(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vs(e,t){Ws(e,t),(e=e.alternate)&&Ws(e,t)}Cu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ma.current)yi=!0;else{if(!(e.lanes&n||128&t.flags))return yi=!1,function(e,t,n){switch(t.tag){case 3:Mi(t),ho();break;case 5:Qo(t);break;case 1:$a(t.type)&&Da(t);break;case 4:Xo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;_a(Co,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(_a(el,1&el.current),t.flags|=128,null):n&t.child.childLanes?Ti(e,t,n):(_a(el,1&el.current),null!==(e=Hi(e,t,n))?e.sibling:null);_a(el,1&el.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return zi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),_a(el,el.current),r)break;return null;case 22:case 23:return t.lanes=0,Si(e,t,n)}return Hi(e,t,n)}(e,t,n);yi=!!(131072&e.flags)}else yi=!1,ao&&1048576&t.flags&&Ja(t,Va,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Zi(e,t),e=t.pendingProps;var a=Pa(t,Ba.current);Lo(t,n),a=Al(null,t,r,e,a,n);var l=vl();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,$a(r)?(l=!0,Da(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,To(t),a.updater=ai,t.stateNode=a,a._reactInternals=t,ui(t,r,e,n),t=Bi(null,t,r,!0,l,n)):(t.tag=0,ao&&l&&eo(t),bi(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Zi(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return $s(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===P)return 14}return 2}(r),e=ni(r,e),a){case 0:t=_i(null,t,r,e,n);break e;case 1:t=ki(null,t,r,e,n);break e;case 11:t=Ei(null,t,r,e,n);break e;case 14:t=xi(null,t,r,ni(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,_i(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 1:return r=t.type,a=t.pendingProps,ki(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 3:e:{if(Mi(t),null===e)throw Error(o(387));r=t.pendingProps,a=(l=t.memoizedState).element,Io(e,t),Zo(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Li(e,t,r,n,a=si(Error(o(423)),t));break e}if(r!==a){t=Li(e,t,r,n,a=si(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=xo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=Hi(e,t,n);break e}bi(e,t,r,n)}t=t.child}return t;case 5:return Qo(t),null===e&&so(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,na(r,a)?i=null:null!==l&&na(r,l)&&(t.flags|=32),wi(e,t),bi(e,t,i,n),t.child;case 6:return null===e&&so(t),null;case 13:return Ti(e,t,n);case 4:return Xo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Eo(t,null,r,n):bi(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Ei(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 7:return bi(e,t,t.pendingProps,n),t.child;case 8:case 12:return bi(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value,_a(Co,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===a.children&&!Ma.current){t=Hi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){i=l.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===l.tag){(s=Fo(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Mo(l.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Mo(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}bi(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Lo(t,n),r=r(a=Po(a)),t.flags|=1,bi(e,t,r,n),t.child;case 14:return a=ni(r=t.type,t.pendingProps),xi(e,t,r,a=ni(r.type,a),n);case 15:return Ci(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:ni(r,a),Zi(e,t),t.tag=1,$a(r)?(e=!0,Da(t)):e=!1,Lo(t,n),li(t,r,a),ui(t,r,a,n),Bi(null,t,r,!0,e,n);case 19:return zi(e,t,n);case 22:return Si(e,t,n)}throw Error(o(156,t.tag))};var Gs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Ys(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function qs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Qs(){}function Js(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=Hs(l);i.call(e)}}Zs(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Hs(l);o.call(e)}}var l=zs(t,r,e,0,null,!1,0,"",Qs);return e._reactRootContainer=l,e[ha]=l.current,zr(8===e.nodeType?e.parentNode:e),cs(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=Hs(u);i.call(e)}}var u=js(e,0,!1,null,0,!1,0,"",Qs);return e._reactRootContainer=u,e[ha]=u.current,zr(8===e.nodeType?e.parentNode:e),cs((function(){Zs(t,u,n,r)})),u}(n,t,e,a,r);return Hs(l)}Ys.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Zs(e,t,null,null)},Ys.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Zs(null,e,null,null)})),t[ha]=null}},Ys.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Tt(e)}},Et=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(gt(t,1|n),rs(t,qe()),!(6&Bu)&&(zu=qe()+500,za()))}break;case 13:cs((function(){var t=Oo(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Vs(e,1)}},xt=function(e){if(13===e.tag){var t=Oo(e,134217728);null!==t&&ns(t,e,134217728,es()),Vs(e,134217728)}},Ct=function(e){if(13===e.tag){var t=ts(e),n=Oo(e,t);null!==n&&ns(n,e,t,es()),Vs(e,t)}},St=function(){return yt},wt=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},xe=function(e,t,n){switch(t){case"input":if(Q(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Ea(r);if(!a)throw Error(o(90));G(r),Q(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Be=ss,Me=cs;var ec={usingClientEntryPoint:!1,Events:[ya,ba,Ea,_e,ke,ss]},tc={findFiberByHostInstance:ga,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(o(299));var n=!1,r="",a=Gs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=js(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,zr(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!qs(t))throw Error(o(200));return Js(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",i=Gs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=zs(t,null,e,1,null!=n?n:null,a,0,l,i),e[ha]=t.current,zr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ys(t)},t.render=function(e,t,n){if(!qs(t))throw Error(o(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!qs(e))throw Error(o(40));return!!e._reactRootContainer&&(cs((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!qs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Js(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},5338:(e,t,n)=>{"use strict";var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},1020:(e,t,n)=>{"use strict";var r=n(6540),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,o={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)l.call(t,r)&&!u.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:o,_owner:i.current}}t.Fragment=o,t.jsx=s,t.jsxs=s},5287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,A={};function v(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,m(b,v.prototype),b.isPureReactComponent=!0;var E=Array.isArray,x=Object.prototype.hasOwnProperty,C={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function w(e,t,r){var a,o={},l=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)x.call(t,a)&&!S.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:C.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var k=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function M(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return l=l(u=e),e=""===o?"."+B(u,0):o,E(l)?(a="",null!=e&&(a=e.replace(k,"$&/")+"/"),M(l,t,a,"",(function(e){return e}))):null!=l&&(_(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(k,"$&/")+"/")+e)),t.push(l)),1;if(u=0,o=""===o?".":o+":",E(e))for(var s=0;s<e.length;s++){var c=o+B(i=e[s],s);u+=M(i,t,a,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=M(i=i.value,t,a,c=o+B(i,s++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function L(e,t,n){if(null==e)return e;var r=[],a=0;return M(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var $={current:null},R={transition:null},N={ReactCurrentDispatcher:$,ReactCurrentBatchConfig:R,ReactCurrentOwner:C};function O(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:L,forEach:function(e,t,n){L(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=l,t.PureComponent=y,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.act=O,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=C.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)x.call(t,s)&&!S.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:l,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=w,t.createFactory=function(e){var t=w.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=O,t.useCallback=function(e,t){return $.current.useCallback(e,t)},t.useContext=function(e){return $.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return $.current.useDeferredValue(e)},t.useEffect=function(e,t){return $.current.useEffect(e,t)},t.useId=function(){return $.current.useId()},t.useImperativeHandle=function(e,t,n){return $.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return $.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return $.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return $.current.useMemo(e,t)},t.useReducer=function(e,t,n){return $.current.useReducer(e,t,n)},t.useRef=function(e){return $.current.useRef(e)},t.useState=function(e){return $.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return $.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return $.current.useTransition()},t.version="18.3.1"},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},4848:(e,t,n)=>{"use strict";e.exports=n(1020)},7463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],d=1,f=null,p=3,h=!1,m=!1,A=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function E(e){if(A=!1,b(e),!m)if(null!==r(s))m=!0,R(x);else{var t=r(c);null!==t&&N(E,t.startTime-e)}}function x(e,n){m=!1,A&&(A=!1,g(_),_=-1),h=!0;var o=p;try{for(b(n),f=r(s);null!==f&&(!(f.expirationTime>n)||e&&!M());){var l=f.callback;if("function"==typeof l){f.callback=null,p=f.priorityLevel;var i=l(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?f.callback=i:f===r(s)&&a(s),b(n)}else a(s);f=r(s)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&N(E,d.startTime-n),u=!1}return u}finally{f=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,S=!1,w=null,_=-1,k=5,B=-1;function M(){return!(t.unstable_now()-B<k)}function L(){if(null!==w){var e=t.unstable_now();B=e;var n=!0;try{n=w(!0,e)}finally{n?C():(S=!1,w=null)}}else S=!1}if("function"==typeof y)C=function(){y(L)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,$=P.port2;P.port1.onmessage=L,C=function(){$.postMessage(null)}}else C=function(){v(L,0)};function R(e){w=e,S||(S=!0,C())}function N(e,n){_=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,R(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):k=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(A?(g(_),_=-1):A=!0,N(E,o-l))):(e.sortIndex=i,n(s,e),m||h||(m=!0,R(x))),e},t.unstable_shouldYield=M,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},5072:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},l=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=o[s]||0,d="".concat(s," ").concat(c);o[s]=c+1;var f=n(d),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:h,references:1})}l.push(d)}return l}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var i=n(o[l]);t[i].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},7659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},5056:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},1113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4471:(e,t,n)=>{"use strict";n.d(t,{$:()=>x});var r=n(4848),a=n(6942),o=n.n(a),l=n(5072),i=n.n(l),u=n(7825),s=n.n(u),c=n(7659),d=n.n(c),f=n(5056),p=n.n(f),h=n(540),m=n.n(h),A=n(1113),v=n.n(A),g=n(9992),y=n.n(g),b={};b.styleTagTransform=v(),b.setAttributes=p(),b.insert=d().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=m(),i()(y(),b);const E=y()&&y().locals?y().locals:void 0,x=({children:e,onClick:t,className:n,label:a,disabled:l=!1,variant:i="pink"})=>{const u=o()(E.btn,E[`btn-${i}`],n);return(0,r.jsxs)("button",{className:u,onClick:t,disabled:l,children:[a&&(0,r.jsx)("span",{children:a}),e&&(0,r.jsx)("span",{className:E.icon,children:e})]})}},256:(e,t,n)=>{"use strict";n.d(t,{$:()=>r.$});var r=n(4471)},7761:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=qe(n(3752)),o=qe(n(1371)),l=qe(n(855)),i=qe(n(3214)),u=qe(n(700)),s=qe(n(9220)),c=qe(n(2576)),d=qe(n(9517)),f=qe(n(7844)),p=qe(n(3196)),h=qe(n(5372)),m=qe(n(7115)),A=qe(n(7658)),v=qe(n(9013)),g=qe(n(8796)),y=qe(n(1697)),b=qe(n(7071)),E=qe(n(4325)),x=Xe(n(6529)),C=Xe(n(8986)),S=qe(n(1666)),w=qe(n(3442)),_=qe(n(3906)),k=qe(n(7612)),B=qe(n(5577)),M=qe(n(8461)),L=qe(n(4294)),P=qe(n(9666)),$=qe(n(9534)),R=qe(n(1449)),N=qe(n(2830)),O=qe(n(9841)),D=qe(n(3459)),T=qe(n(6084)),I=Xe(n(995)),F=qe(n(5926)),j=qe(n(2002)),U=qe(n(9546)),z=qe(n(3735)),Z=qe(n(4641)),H=qe(n(5467)),W=qe(n(7086)),V=qe(n(1954)),G=Xe(n(3641)),K=qe(n(5259)),Y=qe(n(9745)),X=qe(n(3973)),q=qe(n(9172)),Q=qe(n(5751)),J=qe(n(2056)),ee=qe(n(9285)),te=qe(n(6255)),ne=qe(n(5186)),re=qe(n(1252)),ae=qe(n(1195)),oe=qe(n(6658)),le=qe(n(9266)),ie=qe(n(3609)),ue=qe(n(1062)),se=qe(n(2645)),ce=qe(n(7717)),de=qe(n(2678)),fe=qe(n(9717)),pe=qe(n(604)),he=qe(n(7741)),me=Xe(n(5251)),Ae=qe(n(82)),ve=qe(n(6782)),ge=qe(n(5748)),ye=n(5777),be=qe(n(8033)),Ee=qe(n(6169)),xe=qe(n(1578)),Ce=qe(n(8447)),Se=qe(n(3832)),we=qe(n(8342)),_e=qe(n(7673)),ke=qe(n(6617)),Be=qe(n(8274)),Me=qe(n(3583)),Le=qe(n(7349)),Pe=qe(n(2337)),$e=qe(n(4633)),Re=qe(n(5830)),Ne=Xe(n(3939)),Oe=qe(n(2309)),De=qe(n(2483)),Te=qe(n(317)),Ie=qe(n(9790)),Fe=qe(n(7677)),je=qe(n(561)),Ue=qe(n(1996)),ze=qe(n(410)),Ze=qe(n(629)),He=qe(n(1128)),We=qe(n(9234)),Ve=qe(n(676)),Ge=qe(n(7179)),Ke=qe(n(5366));function Ye(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(Ye=function(e){return e?n:t})(e)}function Xe(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=r(e)&&"function"!=typeof e)return{default:e};var n=Ye(t);if(n&&n.has(e))return n.get(e);var a={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&{}.hasOwnProperty.call(e,l)){var i=o?Object.getOwnPropertyDescriptor(e,l):null;i&&(i.get||i.set)?Object.defineProperty(a,l,i):a[l]=e[l]}return a.default=e,n&&n.set(e,a),a}function qe(e){return e&&e.__esModule?e:{default:e}}var Qe={version:"13.12.0",toDate:a.default,toFloat:o.default,toInt:l.default,toBoolean:i.default,equals:u.default,contains:s.default,matches:c.default,isEmail:d.default,isURL:f.default,isMACAddress:p.default,isIP:h.default,isIPRange:m.default,isFQDN:A.default,isBoolean:y.default,isIBAN:G.default,isBIC:K.default,isAbaRouting:E.default,isAlpha:x.default,isAlphaLocales:x.locales,isAlphanumeric:C.default,isAlphanumericLocales:C.locales,isNumeric:S.default,isPassportNumber:w.default,isPort:_.default,isLowercase:k.default,isUppercase:B.default,isAscii:L.default,isFullWidth:P.default,isHalfWidth:$.default,isVariableWidth:R.default,isMultibyte:N.default,isSemVer:O.default,isSurrogatePair:D.default,isInt:T.default,isIMEI:M.default,isFloat:I.default,isFloatLocales:I.locales,isDecimal:F.default,isHexadecimal:j.default,isOctal:U.default,isDivisibleBy:z.default,isHexColor:Z.default,isRgbColor:H.default,isHSL:W.default,isISRC:V.default,isMD5:Y.default,isHash:X.default,isJWT:q.default,isJSON:Q.default,isEmpty:J.default,isLength:ee.default,isLocale:b.default,isByteLength:te.default,isUUID:ne.default,isMongoId:re.default,isAfter:ae.default,isBefore:oe.default,isIn:le.default,isLuhnNumber:ie.default,isCreditCard:ue.default,isIdentityCard:se.default,isEAN:ce.default,isISIN:de.default,isISBN:fe.default,isISSN:pe.default,isMobilePhone:me.default,isMobilePhoneLocales:me.locales,isPostalCode:Ne.default,isPostalCodeLocales:Ne.locales,isEthereumAddress:Ae.default,isCurrency:ve.default,isBtcAddress:ge.default,isISO6346:ye.isISO6346,isFreightContainerID:ye.isFreightContainerID,isISO6391:be.default,isISO8601:Ee.default,isRFC3339:xe.default,isISO31661Alpha2:Ce.default,isISO31661Alpha3:Se.default,isISO4217:we.default,isBase32:_e.default,isBase58:ke.default,isBase64:Be.default,isDataURI:Me.default,isMagnetURI:Le.default,isMailtoURI:Pe.default,isMimeType:$e.default,isLatLong:Re.default,ltrim:Oe.default,rtrim:De.default,trim:Te.default,escape:Ie.default,unescape:Fe.default,stripLow:je.default,whitelist:Ue.default,blacklist:ze.default,isWhitelisted:Ze.default,normalizeEmail:He.default,toString,isSlug:We.default,isStrongPassword:Ge.default,isTaxID:he.default,isDate:v.default,isTime:g.default,isLicensePlate:Ve.default,isVAT:Ke.default,ibanLocales:G.locales};t.default=Qe,e.exports=t.default,e.exports.default=t.default},3237:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.farsiLocales=t.englishLocales=t.dotDecimal=t.decimal=t.commaDecimal=t.bengaliLocales=t.arabicLocales=t.alphanumeric=t.alpha=void 0;for(var n,r=t.alpha={"en-US":/^[A-Z]+$/i,"az-AZ":/^[A-VXYZÇƏĞİıÖŞÜ]+$/i,"bg-BG":/^[А-Я]+$/i,"cs-CZ":/^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,"da-DK":/^[A-ZÆØÅ]+$/i,"de-DE":/^[A-ZÄÖÜß]+$/i,"el-GR":/^[Α-ώ]+$/i,"es-ES":/^[A-ZÁÉÍÑÓÚÜ]+$/i,"fa-IR":/^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,"fi-FI":/^[A-ZÅÄÖ]+$/i,"fr-FR":/^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,"it-IT":/^[A-ZÀÉÈÌÎÓÒÙ]+$/i,"ja-JP":/^[ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,"nb-NO":/^[A-ZÆØÅ]+$/i,"nl-NL":/^[A-ZÁÉËÏÓÖÜÚ]+$/i,"nn-NO":/^[A-ZÆØÅ]+$/i,"hu-HU":/^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,"pl-PL":/^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,"pt-PT":/^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,"ru-RU":/^[А-ЯЁ]+$/i,"kk-KZ":/^[А-ЯЁ\u04D8\u04B0\u0406\u04A2\u0492\u04AE\u049A\u04E8\u04BA]+$/i,"sl-SI":/^[A-ZČĆĐŠŽ]+$/i,"sk-SK":/^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,"sr-RS@latin":/^[A-ZČĆŽŠĐ]+$/i,"sr-RS":/^[А-ЯЂЈЉЊЋЏ]+$/i,"sv-SE":/^[A-ZÅÄÖ]+$/i,"th-TH":/^[ก-๐\s]+$/i,"tr-TR":/^[A-ZÇĞİıÖŞÜ]+$/i,"uk-UA":/^[А-ЩЬЮЯЄIЇҐі]+$/i,"vi-VN":/^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,"ko-KR":/^[ㄱ-ㅎㅏ-ㅣ가-힣]*$/,"ku-IQ":/^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,ar:/^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,he:/^[א-ת]+$/,fa:/^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,bn:/^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,eo:/^[ABCĈD-GĜHĤIJĴK-PRSŜTUŬVZ]+$/i,"hi-IN":/^[\u0900-\u0961]+[\u0972-\u097F]*$/i,"si-LK":/^[\u0D80-\u0DFF]+$/},a=t.alphanumeric={"en-US":/^[0-9A-Z]+$/i,"az-AZ":/^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,"bg-BG":/^[0-9А-Я]+$/i,"cs-CZ":/^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,"da-DK":/^[0-9A-ZÆØÅ]+$/i,"de-DE":/^[0-9A-ZÄÖÜß]+$/i,"el-GR":/^[0-9Α-ω]+$/i,"es-ES":/^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,"fi-FI":/^[0-9A-ZÅÄÖ]+$/i,"fr-FR":/^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,"it-IT":/^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,"ja-JP":/^[0-9０-９ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,"hu-HU":/^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,"nb-NO":/^[0-9A-ZÆØÅ]+$/i,"nl-NL":/^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,"nn-NO":/^[0-9A-ZÆØÅ]+$/i,"pl-PL":/^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,"pt-PT":/^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,"ru-RU":/^[0-9А-ЯЁ]+$/i,"kk-KZ":/^[0-9А-ЯЁ\u04D8\u04B0\u0406\u04A2\u0492\u04AE\u049A\u04E8\u04BA]+$/i,"sl-SI":/^[0-9A-ZČĆĐŠŽ]+$/i,"sk-SK":/^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,"sr-RS@latin":/^[0-9A-ZČĆŽŠĐ]+$/i,"sr-RS":/^[0-9А-ЯЂЈЉЊЋЏ]+$/i,"sv-SE":/^[0-9A-ZÅÄÖ]+$/i,"th-TH":/^[ก-๙\s]+$/i,"tr-TR":/^[0-9A-ZÇĞİıÖŞÜ]+$/i,"uk-UA":/^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,"ko-KR":/^[0-9ㄱ-ㅎㅏ-ㅣ가-힣]*$/,"ku-IQ":/^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,"vi-VN":/^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,ar:/^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,he:/^[0-9א-ת]+$/,fa:/^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,bn:/^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣ০১২৩৪৫৬৭৮৯ৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,eo:/^[0-9ABCĈD-GĜHĤIJĴK-PRSŜTUŬVZ]+$/i,"hi-IN":/^[\u0900-\u0963]+[\u0966-\u097F]*$/i,"si-LK":/^[0-9\u0D80-\u0DFF]+$/},o=t.decimal={"en-US":".",ar:"٫"},l=t.englishLocales=["AU","GB","HK","IN","NZ","ZA","ZM"],i=0;i<l.length;i++)r[n="en-".concat(l[i])]=r["en-US"],a[n]=a["en-US"],o[n]=o["en-US"];for(var u,s=t.arabicLocales=["AE","BH","DZ","EG","IQ","JO","KW","LB","LY","MA","QM","QA","SA","SD","SY","TN","YE"],c=0;c<s.length;c++)r[u="ar-".concat(s[c])]=r.ar,a[u]=a.ar,o[u]=o.ar;for(var d,f=t.farsiLocales=["IR","AF"],p=0;p<f.length;p++)a[d="fa-".concat(f[p])]=a.fa,o[d]=o.ar;for(var h,m=t.bengaliLocales=["BD","IN"],A=0;A<m.length;A++)r[h="bn-".concat(m[A])]=r.bn,a[h]=a.bn,o[h]=o["en-US"];for(var v=t.dotDecimal=["ar-EG","ar-LB","ar-LY"],g=t.commaDecimal=["bg-BG","cs-CZ","da-DK","de-DE","el-GR","en-ZM","eo","es-ES","fr-CA","fr-FR","id-ID","it-IT","ku-IQ","hi-IN","hu-HU","nb-NO","nn-NO","nl-NL","pl-PL","pt-PT","ru-RU","kk-KZ","si-LK","sl-SI","sr-RS@latin","sr-RS","sv-SE","tr-TR","uk-UA","vi-VN"],y=0;y<v.length;y++)o[v[y]]=o["en-US"];for(var b=0;b<g.length;b++)o[g[b]]=",";r["fr-CA"]=r["fr-FR"],a["fr-CA"]=a["fr-FR"],r["pt-BR"]=r["pt-PT"],a["pt-BR"]=a["pt-PT"],o["pt-BR"]=o["pt-PT"],r["pl-Pl"]=r["pl-PL"],a["pl-Pl"]=a["pl-PL"],o["pl-Pl"]=o["pl-PL"],r["fa-AF"]=r.fa},410:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),e.replace(new RegExp("[".concat(t,"]+"),"g"),"")};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},9220:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){return(0,r.default)(e),(n=(0,o.default)(n,i)).ignoreCase?e.toLowerCase().split((0,a.default)(t).toLowerCase()).length>n.minOccurrences:e.split((0,a.default)(t)).length>n.minOccurrences};var r=l(n(3399)),a=l(n(5772)),o=l(n(3610));function l(e){return e&&e.__esModule?e:{default:e}}var i={ignoreCase:!1,minOccurrences:1};e.exports=t.default,e.exports.default=t.default},700:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),e===t};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},9790:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),e.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\//g,"&#x2F;").replace(/\\/g,"&#x5C;").replace(/`/g,"&#96;")};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},4325:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,a.default)(e),!o.test(e))return!1;for(var t=0,n=0;n<e.length;n++)t+=n%3==0?3*e[n]:n%3==1?7*e[n]:1*e[n];return t%10==0};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(?!(1[3-9])|(20)|(3[3-9])|(4[0-9])|(5[0-9])|(60)|(7[3-9])|(8[1-9])|(9[0-2])|(9[3-9]))[0-9]{9}$/;e.exports=t.default,e.exports.default=t.default},1195:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(null==t?void 0:t.comparisonDate)||t||Date().toString(),r=(0,a.default)(n),o=(0,a.default)(e);return!!(o&&r&&o>r)};var r,a=(r=n(3752))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},6529:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"en-US",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};(0,a.default)(e);var r=e,l=n.ignore;if(l)if(l instanceof RegExp)r=r.replace(l,"");else{if("string"!=typeof l)throw new Error("ignore should be instance of a String or RegExp");r=r.replace(new RegExp("[".concat(l.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g,"\\$&"),"]"),"g"),"")}if(t in o.alpha)return o.alpha[t].test(r);throw new Error("Invalid locale '".concat(t,"'"))},t.locales=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=n(3237);t.locales=Object.keys(o.alpha)},8986:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"en-US",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};(0,a.default)(e);var r=e,l=n.ignore;if(l)if(l instanceof RegExp)r=r.replace(l,"");else{if("string"!=typeof l)throw new Error("ignore should be instance of a String or RegExp");r=r.replace(new RegExp("[".concat(l.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g,"\\$&"),"]"),"g"),"")}if(t in o.alphanumeric)return o.alphanumeric[t].test(r);throw new Error("Invalid locale '".concat(t,"'"))},t.locales=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=n(3237);t.locales=Object.keys(o.alphanumeric)},4294:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[\x00-\x7F]+$/;e.exports=t.default,e.exports.default=t.default},5259:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(e);var t=e.slice(4,6).toUpperCase();return!(!o.CountryCodes.has(t)&&"XK"!==t)&&l.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=n(8447),l=/^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;e.exports=t.default,e.exports.default=t.default},7673:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,r.default)(e),(t=(0,a.default)(t,u)).crockford?i.test(e):!(e.length%8!=0||!l.test(e))};var r=o(n(3399)),a=o(n(3610));function o(e){return e&&e.__esModule?e:{default:e}}var l=/^[A-Z2-7]+=*$/,i=/^[A-HJKMNP-TV-Z0-9]+$/,u={crockford:!1};e.exports=t.default,e.exports.default=t.default},6617:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),!!o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[A-HJ-NP-Za-km-z1-9]*$/;e.exports=t.default,e.exports.default=t.default},8274:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,r.default)(e),t=(0,a.default)(t,u);var n=e.length;if(t.urlSafe)return i.test(e);if(n%4!=0||l.test(e))return!1;var o=e.indexOf("=");return-1===o||o===n-1||o===n-2&&"="===e[n-1]};var r=o(n(3399)),a=o(n(3610));function o(e){return e&&e.__esModule?e:{default:e}}var l=/[^A-Z0-9+\/=]/i,i=/^[A-Z0-9_\-]*$/i,u={urlSafe:!1};e.exports=t.default,e.exports.default=t.default},6658:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:String(new Date);(0,r.default)(e);var n=(0,a.default)(t),o=(0,a.default)(e);return!!(o&&n&&o<n)};var r=o(n(3399)),a=o(n(3752));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default,e.exports.default=t.default},1697:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o;return(0,a.default)(e),t.loose?i.includes(e.toLowerCase()):l.includes(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o={loose:!1},l=["true","false","1","0"],i=[].concat(l,["yes","no"]);e.exports=t.default,e.exports.default=t.default},5748:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)||l.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(bc1)[a-z0-9]{25,39}$/,l=/^(1|3)[A-HJ-NP-Za-km-z1-9]{25,39}$/;e.exports=t.default,e.exports.default=t.default},6255:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n,r;(0,a.default)(e),"object"===o(t)?(n=t.min||0,r=t.max):(n=arguments[1],r=arguments[2]);var l=encodeURI(e).split(/%..|./).length-1;return l>=n&&(void 0===r||l<=r)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}e.exports=t.default,e.exports.default=t.default},1062:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,r.default)(e);var n=t.provider,o=e.replace(/[- ]+/g,"");if(n&&n.toLowerCase()in l){if(!l[n.toLowerCase()].test(o))return!1}else{if(n&&!(n.toLowerCase()in l))throw new Error("".concat(n," is not a valid credit card provider."));if(!i.some((function(e){return e.test(o)})))return!1}return(0,a.default)(e)};var r=o(n(3399)),a=o(n(3609));function o(e){return e&&e.__esModule?e:{default:e}}var l={amex:/^3[47][0-9]{13}$/,dinersclub:/^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,discover:/^6(?:011|5[0-9][0-9])[0-9]{12,15}$/,jcb:/^(?:2131|1800|35\d{3})\d{11}$/,mastercard:/^5[1-5][0-9]{2}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$/,unionpay:/^(6[27][0-9]{14}|^(81[0-9]{14,17}))$/,visa:/^(?:4[0-9]{12})(?:[0-9]{3,6})?$/},i=function(){var e=[];for(var t in l)l.hasOwnProperty(t)&&e.push(l[t]);return e}();e.exports=t.default,e.exports.default=t.default},6782:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),function(e){var t="\\d{".concat(e.digits_after_decimal[0],"}");e.digits_after_decimal.forEach((function(e,n){0!==n&&(t="".concat(t,"|\\d{").concat(e,"}"))}));var n="(".concat(e.symbol.replace(/\W/,(function(e){return"\\".concat(e)})),")").concat(e.require_symbol?"":"?"),r="-?",a="[1-9]\\d{0,2}(\\".concat(e.thousands_separator,"\\d{3})*"),o="(".concat(["0","[1-9]\\d*",a].join("|"),")?"),l="(\\".concat(e.decimal_separator,"(").concat(t,"))").concat(e.require_decimal?"":"?"),i=o+(e.allow_decimal||e.require_decimal?l:"");return e.allow_negatives&&!e.parens_for_negatives&&(e.negative_sign_after_digits?i+=r:e.negative_sign_before_digits&&(i=r+i)),e.allow_negative_sign_placeholder?i="( (?!\\-))?".concat(i):e.allow_space_after_symbol?i=" ?".concat(i):e.allow_space_after_digits&&(i+="( (?!$))?"),e.symbol_after_digits?i+=n:i=n+i,e.allow_negatives&&(e.parens_for_negatives?i="(\\(".concat(i,"\\)|").concat(i,")"):e.negative_sign_before_digits||e.negative_sign_after_digits||(i=r+i)),new RegExp("^(?!-? )(?=.*\\d)".concat(i,"$"))}(t=(0,r.default)(t,l)).test(e)};var r=o(n(3610)),a=o(n(3399));function o(e){return e&&e.__esModule?e:{default:e}}var l={symbol:"$",require_symbol:!1,allow_space_after_symbol:!1,symbol_after_digits:!1,allow_negatives:!0,parens_for_negatives:!1,negative_sign_before_digits:!1,negative_sign_after_digits:!1,allow_negative_sign_placeholder:!1,thousands_separator:",",decimal_separator:".",allow_decimal:!0,require_decimal:!1,digits_after_decimal:[2],allow_space_after_digits:!1};e.exports=t.default,e.exports.default=t.default},3583:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(e);var t=e.split(",");if(t.length<2)return!1;var n=t.shift().trim().split(";"),r=n.shift();if("data:"!==r.slice(0,5))return!1;var u=r.slice(5);if(""!==u&&!o.test(u))return!1;for(var s=0;s<n.length;s++)if((s!==n.length-1||"base64"!==n[s].toLowerCase())&&!l.test(n[s]))return!1;for(var c=0;c<t.length;c++)if(!i.test(t[c]))return!1;return!0};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[a-z]+\/[a-z0-9\-\+\._]+$/i,l=/^[a-z\-]+=[a-z0-9\-]+$/i,i=/^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;e.exports=t.default,e.exports.default=t.default},9013:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t="string"==typeof t?(0,a.default)({format:t},i):(0,a.default)(t,i),"string"==typeof e&&(y=t.format,/(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(y))){var n,r=t.delimiters.find((function(e){return-1!==t.format.indexOf(e)})),l=t.strictMode?r:t.delimiters.find((function(t){return-1!==e.indexOf(t)})),u=function(e,t){for(var n=[],r=Math.min(e.length,t.length),a=0;a<r;a++)n.push([e[a],t[a]]);return n}(e.split(l),t.format.toLowerCase().split(r)),s={},c=function(e){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=o(e))){t&&(e=t);var n=0,r=function(){};return{s:r,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,l=!0,i=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return l=e.done,e},e:function(e){i=!0,a=e},f:function(){try{l||null==t.return||t.return()}finally{if(i)throw a}}}}(u);try{for(c.s();!(n=c.n()).done;){var d=(g=n.value,function(e){if(Array.isArray(e))return e}(g)||function(e){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,r,a,o,l=[],i=!0,u=!1;try{for(a=(t=t.call(e)).next,!2;!(i=(n=a.call(t)).done)&&(l.push(n.value),2!==l.length);i=!0);}catch(e){u=!0,r=e}finally{try{if(!i&&null!=t.return&&(o=t.return(),Object(o)!==o))return}finally{if(u)throw r}}return l}}(g)||o(g,2)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=d[0],p=d[1];if(f.length!==p.length)return!1;s[p.charAt(0)]=f}}catch(e){c.e(e)}finally{c.f()}var h=s.y;if(h.startsWith("-"))return!1;if(2===s.y.length){var m=parseInt(s.y,10);if(isNaN(m))return!1;h=m<(new Date).getFullYear()%100?"20".concat(s.y):"19".concat(s.y)}var A=s.m;1===s.m.length&&(A="0".concat(s.m));var v=s.d;return 1===s.d.length&&(v="0".concat(s.d)),new Date("".concat(h,"-").concat(A,"-").concat(v,"T00:00:00.000Z")).getUTCDate()===+s.d}var g,y;return!t.strictMode&&("[object Date]"===Object.prototype.toString.call(e)&&isFinite(e))};var r,a=(r=n(3610))&&r.__esModule?r:{default:r};function o(e,t){if(e){if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,t):void 0}}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i={format:"YYYY/MM/DD",delimiters:["/","-"],strictMode:!1};e.exports=t.default,e.exports.default=t.default},5926:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,a.default)(e),(t=(0,r.default)(t,u)).locale in l.decimal)return!(0,o.default)(s,e.replace(/ /g,""))&&function(e){return new RegExp("^[-+]?([0-9]+)?(\\".concat(l.decimal[e.locale],"[0-9]{").concat(e.decimal_digits,"})").concat(e.force_decimal?"":"?","$"))}(t).test(e);throw new Error("Invalid locale '".concat(t.locale,"'"))};var r=i(n(3610)),a=i(n(3399)),o=i(n(9265)),l=n(3237);function i(e){return e&&e.__esModule?e:{default:e}}var u={force_decimal:!1,decimal_digits:"1,",locale:"en-US"},s=["","-","+"];e.exports=t.default,e.exports.default=t.default},3735:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,r.default)(e),(0,a.default)(e)%parseInt(t,10)==0};var r=o(n(3399)),a=o(n(1371));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default,e.exports.default=t.default},7717:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(e);var t,n,r=Number(e.slice(-1));return i.test(e)&&r===((n=10-(t=e).slice(0,-1).split("").map((function(e,n){return Number(e)*function(e,t){return e===o||e===l?t%2==0?3:1:t%2==0?1:3}(t.length,n)})).reduce((function(e,t){return e+t}),0)%10)<10?n:0)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=8,l=14,i=/^(\d{8}|\d{13}|\d{14})$/;e.exports=t.default,e.exports.default=t.default},9517:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,r.default)(e),(t=(0,i.default)(t,s)).require_display_name||t.allow_display_name){var n=e.match(c);if(n){var u=n[1];if(e=e.replace(u,"").replace(/(^<|>$)/g,""),u.endsWith(" ")&&(u=u.slice(0,-1)),!function(e){var t=e.replace(/^"(.+)"$/,"$1");if(!t.trim())return!1;if(/[\.";<>]/.test(t)){if(t===e)return!1;if(t.split('"').length!==t.split('\\"').length)return!1}return!0}(u))return!1}else if(t.require_display_name)return!1}if(!t.ignore_max_length&&e.length>A)return!1;var v=e.split("@"),g=v.pop(),y=g.toLowerCase();if(t.host_blacklist.includes(y))return!1;if(t.host_whitelist.length>0&&!t.host_whitelist.includes(y))return!1;var b=v.join("@");if(t.domain_specific_validation&&("gmail.com"===y||"googlemail.com"===y)){var E=(b=b.toLowerCase()).split("+")[0];if(!(0,a.default)(E.replace(/\./g,""),{min:6,max:30}))return!1;for(var x=E.split("."),C=0;C<x.length;C++)if(!f.test(x[C]))return!1}if(!(!1!==t.ignore_max_length||(0,a.default)(b,{max:64})&&(0,a.default)(g,{max:254})))return!1;if(!(0,o.default)(g,{require_tld:t.require_tld,ignore_max_length:t.ignore_max_length,allow_underscores:t.allow_underscores})){if(!t.allow_ip_domain)return!1;if(!(0,l.default)(g)){if(!g.startsWith("[")||!g.endsWith("]"))return!1;var S=g.slice(1,-1);if(0===S.length||!(0,l.default)(S))return!1}}if('"'===b[0])return b=b.slice(1,b.length-1),t.allow_utf8_local_part?m.test(b):p.test(b);for(var w=t.allow_utf8_local_part?h:d,_=b.split("."),k=0;k<_.length;k++)if(!w.test(_[k]))return!1;return!t.blacklisted_chars||-1===b.search(new RegExp("[".concat(t.blacklisted_chars,"]+"),"g"))};var r=u(n(3399)),a=u(n(6255)),o=u(n(7658)),l=u(n(5372)),i=u(n(3610));function u(e){return e&&e.__esModule?e:{default:e}}var s={allow_display_name:!1,allow_underscores:!1,require_display_name:!1,allow_utf8_local_part:!0,require_tld:!0,blacklisted_chars:"",ignore_max_length:!1,host_blacklist:[],host_whitelist:[]},c=/^([^\x00-\x1F\x7F-\x9F\cX]+)</i,d=/^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i,f=/^[a-z\d]+$/,p=/^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i,h=/^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A1-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i,m=/^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i,A=254;e.exports=t.default,e.exports.default=t.default},2056:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,r.default)(e),0===((t=(0,a.default)(t,l)).ignore_whitespace?e.trim().length:e.length)};var r=o(n(3399)),a=o(n(3610));function o(e){return e&&e.__esModule?e:{default:e}}var l={ignore_whitespace:!1};e.exports=t.default,e.exports.default=t.default},82:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(0x)[0-9a-f]{40}$/i;e.exports=t.default,e.exports.default=t.default},7658:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,r.default)(e),(t=(0,a.default)(t,l)).allow_trailing_dot&&"."===e[e.length-1]&&(e=e.substring(0,e.length-1)),!0===t.allow_wildcard&&0===e.indexOf("*.")&&(e=e.substring(2));var n=e.split("."),o=n[n.length-1];if(t.require_tld){if(n.length<2)return!1;if(!t.allow_numeric_tld&&!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(o))return!1;if(/\s/.test(o))return!1}return!(!t.allow_numeric_tld&&/^\d+$/.test(o))&&n.every((function(e){return!(e.length>63&&!t.ignore_max_length||!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(e)||/[\uff01-\uff5e]/.test(e)||/^-|-$/.test(e)||!t.allow_underscores&&/_/.test(e))}))};var r=o(n(3399)),a=o(n(3610));function o(e){return e&&e.__esModule?e:{default:e}}var l={require_tld:!0,allow_underscores:!1,allow_trailing_dot:!1,allow_numeric_tld:!1,allow_wildcard:!1,ignore_max_length:!1};e.exports=t.default,e.exports.default=t.default},995:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(e),t=t||{};var n=new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(t.locale?o.decimal[t.locale]:".","[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));if(""===e||"."===e||","===e||"-"===e||"+"===e)return!1;var r=parseFloat(e.replace(",","."));return n.test(e)&&(!t.hasOwnProperty("min")||r>=t.min)&&(!t.hasOwnProperty("max")||r<=t.max)&&(!t.hasOwnProperty("lt")||r<t.lt)&&(!t.hasOwnProperty("gt")||r>t.gt)},t.locales=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=n(3237);t.locales=Object.keys(o.decimal)},9666:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)},t.fullWidth=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=t.fullWidth=/[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/},7086:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(e);var t=e.replace(/\s+/g," ").replace(/\s?(hsla?\(|\)|,)\s?/gi,"$1");return-1!==t.indexOf(",")?o.test(t):l.test(t)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}(,((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?))?\)$/i,l=/^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(\s(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}\s?(\/\s((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?)\s?)?\)$/i;e.exports=t.default,e.exports.default=t.default},9534:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)},t.halfWidth=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=t.halfWidth=/[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/},3973:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),new RegExp("^[a-fA-F0-9]{".concat(o[t],"}$")).test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o={md5:32,md4:32,sha1:40,sha256:64,sha384:96,sha512:128,ripemd128:32,ripemd160:40,tiger128:32,tiger160:40,tiger192:48,crc32:8,crc32b:8};e.exports=t.default,e.exports.default=t.default},4641:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;e.exports=t.default,e.exports.default=t.default},2002:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(0x|0h)?[0-9A-F]+$/i;e.exports=t.default,e.exports.default=t.default},3641:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,a.default)(e),function(e,t){var n=e.replace(/[\s\-]+/gi,"").toUpperCase(),r=n.slice(0,2).toUpperCase(),a=r in o;if(t.whitelist){if(t.whitelist.filter((function(e){return!(e in o)})).length>0)return!1;if(!t.whitelist.includes(r))return!1}return(!t.blacklist||!t.blacklist.includes(r))&&(a&&o[r].test(n))}(e,t)&&function(e){var t=e.replace(/[^A-Z0-9]+/gi,"").toUpperCase();return 1===(t.slice(4)+t.slice(0,4)).replace(/[A-Z]/g,(function(e){return e.charCodeAt(0)-55})).match(/\d{1,7}/g).reduce((function(e,t){return Number(e+t)%97}),"")}(e)},t.locales=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o={AD:/^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/,AE:/^(AE[0-9]{2})\d{3}\d{16}$/,AL:/^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/,AT:/^(AT[0-9]{2})\d{16}$/,AZ:/^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/,BA:/^(BA[0-9]{2})\d{16}$/,BE:/^(BE[0-9]{2})\d{12}$/,BG:/^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/,BH:/^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,BR:/^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/,BY:/^(BY[0-9]{2})[A-Z0-9]{4}\d{20}$/,CH:/^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/,CR:/^(CR[0-9]{2})\d{18}$/,CY:/^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/,CZ:/^(CZ[0-9]{2})\d{20}$/,DE:/^(DE[0-9]{2})\d{18}$/,DK:/^(DK[0-9]{2})\d{14}$/,DO:/^(DO[0-9]{2})[A-Z]{4}\d{20}$/,DZ:/^(DZ\d{24})$/,EE:/^(EE[0-9]{2})\d{16}$/,EG:/^(EG[0-9]{2})\d{25}$/,ES:/^(ES[0-9]{2})\d{20}$/,FI:/^(FI[0-9]{2})\d{14}$/,FO:/^(FO[0-9]{2})\d{14}$/,FR:/^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,GB:/^(GB[0-9]{2})[A-Z]{4}\d{14}$/,GE:/^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/,GI:/^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,GL:/^(GL[0-9]{2})\d{14}$/,GR:/^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/,GT:/^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,HR:/^(HR[0-9]{2})\d{17}$/,HU:/^(HU[0-9]{2})\d{24}$/,IE:/^(IE[0-9]{2})[A-Z0-9]{4}\d{14}$/,IL:/^(IL[0-9]{2})\d{19}$/,IQ:/^(IQ[0-9]{2})[A-Z]{4}\d{15}$/,IR:/^(IR[0-9]{2})0\d{2}0\d{18}$/,IS:/^(IS[0-9]{2})\d{22}$/,IT:/^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,JO:/^(JO[0-9]{2})[A-Z]{4}\d{22}$/,KW:/^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,KZ:/^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/,LB:/^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/,LC:/^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,LI:/^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/,LT:/^(LT[0-9]{2})\d{16}$/,LU:/^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/,LV:/^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,MA:/^(MA[0-9]{26})$/,MC:/^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,MD:/^(MD[0-9]{2})[A-Z0-9]{20}$/,ME:/^(ME[0-9]{2})\d{18}$/,MK:/^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/,MR:/^(MR[0-9]{2})\d{23}$/,MT:/^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/,MU:/^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/,MZ:/^(MZ[0-9]{2})\d{21}$/,NL:/^(NL[0-9]{2})[A-Z]{4}\d{10}$/,NO:/^(NO[0-9]{2})\d{11}$/,PK:/^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/,PL:/^(PL[0-9]{2})\d{24}$/,PS:/^(PS[0-9]{2})[A-Z0-9]{4}\d{21}$/,PT:/^(PT[0-9]{2})\d{21}$/,QA:/^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,RO:/^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,RS:/^(RS[0-9]{2})\d{18}$/,SA:/^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/,SC:/^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/,SE:/^(SE[0-9]{2})\d{20}$/,SI:/^(SI[0-9]{2})\d{15}$/,SK:/^(SK[0-9]{2})\d{20}$/,SM:/^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,SV:/^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/,TL:/^(TL[0-9]{2})\d{19}$/,TN:/^(TN[0-9]{2})\d{20}$/,TR:/^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/,UA:/^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/,VA:/^(VA[0-9]{2})\d{18}$/,VG:/^(VG[0-9]{2})[A-Z0-9]{4}\d{16}$/,XK:/^(XK[0-9]{2})\d{16}$/};t.locales=Object.keys(o)},8461:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(e);var n=o;if((t=t||{}).allow_hyphens&&(n=l),!n.test(e))return!1;e=e.replace(/-/g,"");for(var r=0,i=2,u=0;u<14;u++){var s=e.substring(14-u-1,14-u),c=parseInt(s,10)*i;r+=c>=10?c%10+1:c,1===i?i+=1:i-=1}return(10-r%10)%10===parseInt(e.substring(14,15),10)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[0-9]{15}$/,l=/^\d{2}-\d{6}-\d{6}-\d{1}$/;e.exports=t.default,e.exports.default=t.default},5372:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return(0,a.default)(t),(n=String(n))?"4"===n?i.test(t):"6"===n&&s.test(t):e(t,4)||e(t,6)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o="(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])",l="(".concat(o,"[.]){3}").concat(o),i=new RegExp("^".concat(l,"$")),u="(?:[0-9a-fA-F]{1,4})",s=new RegExp("^("+"(?:".concat(u,":){7}(?:").concat(u,"|:)|")+"(?:".concat(u,":){6}(?:").concat(l,"|:").concat(u,"|:)|")+"(?:".concat(u,":){5}(?::").concat(l,"|(:").concat(u,"){1,2}|:)|")+"(?:".concat(u,":){4}(?:(:").concat(u,"){0,1}:").concat(l,"|(:").concat(u,"){1,3}|:)|")+"(?:".concat(u,":){3}(?:(:").concat(u,"){0,2}:").concat(l,"|(:").concat(u,"){1,4}|:)|")+"(?:".concat(u,":){2}(?:(:").concat(u,"){0,3}:").concat(l,"|(:").concat(u,"){1,5}|:)|")+"(?:".concat(u,":){1}(?:(:").concat(u,"){0,4}:").concat(l,"|(:").concat(u,"){1,6}|:)|")+"(?::((?::".concat(u,"){0,5}:").concat(l,"|(?::").concat(u,"){1,7}|:))")+")(%[0-9a-zA-Z-.:]{1,})?$");e.exports=t.default,e.exports.default=t.default},7115:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";(0,r.default)(e);var n=e.split("/");if(2!==n.length)return!1;if(!l.test(n[1]))return!1;if(n[1].length>1&&n[1].startsWith("0"))return!1;if(!(0,a.default)(n[0],t))return!1;var o=null;switch(String(t)){case"4":o=i;break;case"6":o=u;break;default:o=(0,a.default)(n[0],"6")?u:i}return n[1]<=o&&n[1]>=0};var r=o(n(3399)),a=o(n(5372));function o(e){return e&&e.__esModule?e:{default:e}}var l=/^\d{1,3}$/,i=32,u=128;e.exports=t.default,e.exports.default=t.default},9717:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t,n){(0,a.default)(t);var r=String((null==n?void 0:n.version)||n);if(!(null!=n&&n.version||n))return e(t,{version:10})||e(t,{version:13});var u=t.replace(/[\s-]+/g,""),s=0;if("10"===r){if(!o.test(u))return!1;for(var c=0;c<r-1;c++)s+=(c+1)*u.charAt(c);if("X"===u.charAt(9)?s+=100:s+=10*u.charAt(9),s%11==0)return!0}else if("13"===r){if(!l.test(u))return!1;for(var d=0;d<12;d++)s+=i[d%2]*u.charAt(d);if(u.charAt(12)-(10-s%10)%10==0)return!0}return!1};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(?:[0-9]{9}X|[0-9]{10})$/,l=/^(?:[0-9]{13})$/,i=[1,3];e.exports=t.default,e.exports.default=t.default},2678:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,a.default)(e),!o.test(e))return!1;for(var t=!0,n=0,r=e.length-2;r>=0;r--)if(e[r]>="A"&&e[r]<="Z")for(var l=e[r].charCodeAt(0)-55,i=0,u=[l%10,Math.trunc(l/10)];i<u.length;i++){var s=u[i];n+=t?s>=5?1+2*(s-5):2*s:s,t=!t}else{var c=e[r].charCodeAt(0)-"0".charCodeAt(0);n+=t?c>=5?1+2*(c-5):2*c:c,t=!t}var d=10*Math.trunc((n+9)/10)-n;return+e[e.length-1]===d};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;e.exports=t.default,e.exports.default=t.default},8447:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CountryCodes=void 0,t.default=function(e){return(0,a.default)(e),o.has(e.toUpperCase())};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=new Set(["AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"]);t.CountryCodes=o},3832:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.has(e.toUpperCase())};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=new Set(["AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BES","BIH","BWA","BVT","BRA","IOT","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","CXR","CCK","COL","COM","COG","COD","COK","CRI","CIV","HRV","CUB","CUW","CYP","CZE","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","ATF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GIN","GNB","GUY","HTI","HMD","VAT","HND","HKG","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","PRK","KOR","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","LUX","MAC","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","NLD","NCL","NZL","NIC","NER","NGA","NIU","NFK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SXM","SVK","SVN","SLB","SOM","ZAF","SGS","SSD","ESP","LKA","SDN","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TLS","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","UGA","UKR","ARE","GBR","USA","UMI","URY","UZB","VUT","VEN","VNM","VGB","VIR","WLF","ESH","YEM","ZMB","ZWE"]);e.exports=t.default,e.exports.default=t.default},8342:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CurrencyCodes=void 0,t.default=function(e){return(0,a.default)(e),o.has(e.toUpperCase())};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=new Set(["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYN","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRU","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLE","SLL","SOS","SRD","SSP","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","UYI","UYU","UYW","UZS","VES","VND","VUV","WST","XAF","XAG","XAU","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XSU","XTS","XUA","XXX","YER","ZAR","ZMW","ZWL"]);t.CurrencyCodes=o},5777:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFreightContainerID=void 0,t.isISO6346=i;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[A-Z]{3}(U[0-9]{7})|([J,Z][0-9]{6,7})$/,l=/^[0-9]$/;function i(e){if((0,a.default)(e),e=e.toUpperCase(),!o.test(e))return!1;if(11===e.length){for(var t=0,n=0;n<e.length-1;n++)if(l.test(e[n]))t+=e[n]*Math.pow(2,n);else{var r=e.charCodeAt(n)-55;t+=(r<11?r:r>=11&&r<=20?12+r%11:r>=21&&r<=30?23+r%21:34+r%31)*Math.pow(2,n)}var i=t%11;return Number(e[e.length-1])===i}return!0}t.isFreightContainerID=i},8033:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.has(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=new Set(["aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","id","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu"]);e.exports=t.default,e.exports.default=t.default},6169:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,a.default)(e);var n=t.strictSeparator?l.test(e):o.test(e);return n&&t.strict?i(e):n};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/,l=/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/,i=function(e){var t=e.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);if(t){var n=Number(t[1]),r=Number(t[2]);return n%4==0&&n%100!=0||n%400==0?r<=366:r<=365}var a=e.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number),o=a[1],l=a[2],i=a[3],u=l?"0".concat(l).slice(-2):l,s=i?"0".concat(i).slice(-2):i,c=new Date("".concat(o,"-").concat(u||"01","-").concat(s||"01"));return!l||!i||c.getUTCFullYear()===o&&c.getUTCMonth()+1===l&&c.getUTCDate()===i};e.exports=t.default,e.exports.default=t.default},1954:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;e.exports=t.default,e.exports.default=t.default},604:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,a.default)(e);var n=o;if(n=t.require_hyphen?n.replace("?",""):n,!(n=t.case_sensitive?new RegExp(n):new RegExp(n,"i")).test(e))return!1;for(var r=e.replace("-","").toUpperCase(),l=0,i=0;i<r.length;i++){var u=r[i];l+=("X"===u?10:+u)*(8-i)}return l%11==0};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o="^\\d{4}-?\\d{3}[\\dX]$";e.exports=t.default,e.exports.default=t.default},2645:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,r.default)(e),t in l)return l[t](e);if("any"===t){for(var n in l)if(l.hasOwnProperty(n)&&(0,l[n])(e))return!0;return!1}throw new Error("Invalid locale '".concat(t,"'"))};var r=o(n(3399)),a=o(n(6084));function o(e){return e&&e.__esModule?e:{default:e}}var l={PL:function(e){(0,r.default)(e);var t={1:1,2:3,3:7,4:9,5:1,6:3,7:7,8:9,9:1,10:3,11:0};if(null!=e&&11===e.length&&(0,a.default)(e,{allow_leading_zeroes:!0})){var n=e.split("").slice(0,-1).reduce((function(e,n,r){return e+Number(n)*t[r+1]}),0)%10,o=Number(e.charAt(e.length-1));if(0===n&&0===o||o===10-n)return!0}return!1},ES:function(e){(0,r.default)(e);var t={X:0,Y:1,Z:2},n=e.trim().toUpperCase();if(!/^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/.test(n))return!1;var a=n.slice(0,-1).replace(/[X,Y,Z]/g,(function(e){return t[e]}));return n.endsWith(["T","R","W","A","G","M","Y","F","P","D","X","B","N","J","Z","S","Q","V","H","L","C","K","E"][a%23])},FI:function(e){return(0,r.default)(e),11===e.length&&(!!e.match(/^\d{6}[\-A\+]\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)&&"0123456789ABCDEFHJKLMNPRSTUVWXY"[(1e3*parseInt(e.slice(0,6),10)+parseInt(e.slice(7,10),10))%31]===e.slice(10,11))},IN:function(e){var t=[[0,1,2,3,4,5,6,7,8,9],[1,2,3,4,0,6,7,8,9,5],[2,3,4,0,1,7,8,9,5,6],[3,4,0,1,2,8,9,5,6,7],[4,0,1,2,3,9,5,6,7,8],[5,9,8,7,6,0,4,3,2,1],[6,5,9,8,7,1,0,4,3,2],[7,6,5,9,8,2,1,0,4,3],[8,7,6,5,9,3,2,1,0,4],[9,8,7,6,5,4,3,2,1,0]],n=[[0,1,2,3,4,5,6,7,8,9],[1,5,7,6,2,8,3,0,9,4],[5,8,0,3,7,9,6,1,4,2],[8,9,1,6,0,4,3,5,2,7],[9,4,5,3,1,2,6,8,7,0],[4,2,8,6,5,7,3,9,0,1],[2,7,9,3,8,0,6,4,1,5],[7,0,4,6,9,1,3,2,5,8]],r=e.trim();if(!/^[1-9]\d{3}\s?\d{4}\s?\d{4}$/.test(r))return!1;var a=0;return r.replace(/\s/g,"").split("").map(Number).reverse().forEach((function(e,r){a=t[a][n[r%8][e]]})),0===a},IR:function(e){if(!e.match(/^\d{10}$/))return!1;if(e="0000".concat(e).slice(e.length-6),0===parseInt(e.slice(3,9),10))return!1;for(var t=parseInt(e.slice(9,10),10),n=0,r=0;r<9;r++)n+=parseInt(e.slice(r,r+1),10)*(10-r);return(n%=11)<2&&t===n||n>=2&&t===11-n},IT:function(e){return 9===e.length&&"CA00000AA"!==e&&e.search(/C[A-Z]\d{5}[A-Z]{2}/i)>-1},NO:function(e){var t=e.trim();if(isNaN(Number(t)))return!1;if(11!==t.length)return!1;if("00000000000"===t)return!1;var n=t.split("").map(Number),r=(11-(3*n[0]+7*n[1]+6*n[2]+1*n[3]+8*n[4]+9*n[5]+4*n[6]+5*n[7]+2*n[8])%11)%11,a=(11-(5*n[0]+4*n[1]+3*n[2]+2*n[3]+7*n[4]+6*n[5]+5*n[6]+4*n[7]+3*n[8]+2*r)%11)%11;return r===n[9]&&a===n[10]},TH:function(e){if(!e.match(/^[1-8]\d{12}$/))return!1;for(var t=0,n=0;n<12;n++)t+=parseInt(e[n],10)*(13-n);return e[12]===((11-t%11)%10).toString()},LK:function(e){return!(10!==e.length||!/^[1-9]\d{8}[vx]$/i.test(e))||!(12!==e.length||!/^[1-9]\d{11}$/i.test(e))},"he-IL":function(e){var t=e.trim();if(!/^\d{9}$/.test(t))return!1;for(var n,r=t,a=0,o=0;o<r.length;o++)a+=(n=Number(r[o])*(o%2+1))>9?n-9:n;return a%10==0},"ar-LY":function(e){var t=e.trim();return!!/^(1|2)\d{11}$/.test(t)},"ar-TN":function(e){var t=e.trim();return!!/^\d{8}$/.test(t)},"zh-CN":function(e){var t,n=["11","12","13","14","15","21","22","23","31","32","33","34","35","36","37","41","42","43","44","45","46","50","51","52","53","54","61","62","63","64","65","71","81","82","91"],r=["7","9","10","5","8","4","2","1","6","3","7","9","10","5","8","4","2"],a=["1","0","X","9","8","7","6","5","4","3","2"],o=function(e){return n.includes(e)},l=function(e){var t=parseInt(e.substring(0,4),10),n=parseInt(e.substring(4,6),10),r=parseInt(e.substring(6),10),a=new Date(t,n-1,r);return!(a>new Date)&&a.getFullYear()===t&&a.getMonth()===n-1&&a.getDate()===r};return!!/^\d{15}|(\d{17}(\d|x|X))$/.test(t=e)&&(15===t.length?function(e){var t=/^[1-9]\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}$/.test(e);if(!t)return!1;var n=e.substring(0,2);if(!(t=o(n)))return!1;var r="19".concat(e.substring(6,12));return!!(t=l(r))}(t):function(e){var t=/^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}(\d|x|X)$/.test(e);if(!t)return!1;var n=e.substring(0,2);if(!(t=o(n)))return!1;var i=e.substring(6,14);return!!(t=l(i))&&function(e){return function(e){for(var t=e.substring(0,17),n=0,o=0;o<17;o++)n+=parseInt(t.charAt(o),10)*parseInt(r[o],10);return a[n%11]}(e)===e.charAt(17).toUpperCase()}(e)}(t))},"zh-HK":function(e){var t=/^[0-9]$/;if(e=(e=e.trim()).toUpperCase(),!/^[A-Z]{1,2}[0-9]{6}((\([0-9A]\))|(\[[0-9A]\])|([0-9A]))$/.test(e))return!1;8===(e=e.replace(/\[|\]|\(|\)/g,"")).length&&(e="3".concat(e));for(var n=0,r=0;r<=7;r++)n+=(t.test(e[r])?e[r]:(e[r].charCodeAt(0)-55)%11)*(9-r);return(0==(n%=11)?"0":1===n?"A":String(11-n))===e[e.length-1]},"zh-TW":function(e){var t={A:10,B:11,C:12,D:13,E:14,F:15,G:16,H:17,I:34,J:18,K:19,L:20,M:21,N:22,O:35,P:23,Q:24,R:25,S:26,T:27,U:28,V:29,W:32,X:30,Y:31,Z:33},n=e.trim().toUpperCase();return!!/^[A-Z][0-9]{9}$/.test(n)&&Array.from(n).reduce((function(e,n,r){if(0===r){var a=t[n];return a%10*9+Math.floor(a/10)}return 9===r?(10-e%10-Number(n))%10==0:e+Number(n)*(9-r)}),0)}};e.exports=t.default,e.exports.default=t.default},9266:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n;if((0,r.default)(e),"[object Array]"===Object.prototype.toString.call(t)){var o=[];for(n in t)({}).hasOwnProperty.call(t,n)&&(o[n]=(0,a.default)(t[n]));return o.indexOf(e)>=0}return"object"===l(t)?t.hasOwnProperty(e):!(!t||"function"!=typeof t.indexOf)&&t.indexOf(e)>=0};var r=o(n(3399)),a=o(n(5772));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}e.exports=t.default,e.exports.default=t.default},6084:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(e);var n=!1===(t=t||{}).allow_leading_zeroes?o:l,r=!t.hasOwnProperty("min")||e>=t.min,i=!t.hasOwnProperty("max")||e<=t.max,u=!t.hasOwnProperty("lt")||e<t.lt,s=!t.hasOwnProperty("gt")||e>t.gt;return n.test(e)&&r&&i&&u&&s};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(?:[-+]?(?:0|[1-9][0-9]*))$/,l=/^[-+]?[0-9]+$/;e.exports=t.default,e.exports.default=t.default},5751:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,r.default)(e);try{t=(0,a.default)(t,i);var n=[];t.allow_primitives&&(n=[null,!1,!0]);var o=JSON.parse(e);return n.includes(o)||!!o&&"object"===l(o)}catch(e){}return!1};var r=o(n(3399)),a=o(n(3610));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}var i={allow_primitives:!1};e.exports=t.default,e.exports.default=t.default},9172:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,r.default)(e);var t=e.split(".");return 3===t.length&&t.reduce((function(e,t){return e&&(0,a.default)(t,{urlSafe:!0})}),!0)};var r=o(n(3399)),a=o(n(8274));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default,e.exports.default=t.default},5830:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,r.default)(e),t=(0,a.default)(t,c),!e.includes(","))return!1;var n=e.split(",");return!(n[0].startsWith("(")&&!n[1].endsWith(")")||n[1].endsWith(")")&&!n[0].startsWith("("))&&(t.checkDMS?u.test(n[0])&&s.test(n[1]):l.test(n[0])&&i.test(n[1]))};var r=o(n(3399)),a=o(n(3610));function o(e){return e&&e.__esModule?e:{default:e}}var l=/^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/,i=/^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/,u=/^(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/i,s=/^\s*([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/i,c={checkDMS:!1};e.exports=t.default,e.exports.default=t.default},9285:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n,r;(0,a.default)(e),"object"===o(t)?(n=t.min||0,r=t.max):(n=arguments[1]||0,r=arguments[2]);var l=e.match(/(\uFE0F|\uFE0E)/g)||[],i=e.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g)||[],u=e.length-l.length-i.length;return u>=n&&(void 0===r||u<=r)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}e.exports=t.default,e.exports.default=t.default},676:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,a.default)(e),t in o)return o[t](e);if("any"===t){for(var n in o)if((0,o[n])(e))return!0;return!1}throw new Error("Invalid locale '".concat(t,"'"))};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o={"cs-CZ":function(e){return/^(([ABCDEFHIJKLMNPRSTUVXYZ]|[0-9])-?){5,8}$/.test(e)},"de-DE":function(e){return/^((A|AA|AB|AC|AE|AH|AK|AM|AN|AÖ|AP|AS|AT|AU|AW|AZ|B|BA|BB|BC|BE|BF|BH|BI|BK|BL|BM|BN|BO|BÖ|BS|BT|BZ|C|CA|CB|CE|CO|CR|CW|D|DA|DD|DE|DH|DI|DL|DM|DN|DO|DU|DW|DZ|E|EA|EB|ED|EE|EF|EG|EH|EI|EL|EM|EN|ER|ES|EU|EW|F|FB|FD|FF|FG|FI|FL|FN|FO|FR|FS|FT|FÜ|FW|FZ|G|GA|GC|GD|GE|GF|GG|GI|GK|GL|GM|GN|GÖ|GP|GR|GS|GT|GÜ|GV|GW|GZ|H|HA|HB|HC|HD|HE|HF|HG|HH|HI|HK|HL|HM|HN|HO|HP|HR|HS|HU|HV|HX|HY|HZ|IK|IL|IN|IZ|J|JE|JL|K|KA|KB|KC|KE|KF|KG|KH|KI|KK|KL|KM|KN|KO|KR|KS|KT|KU|KW|KY|L|LA|LB|LC|LD|LF|LG|LH|LI|LL|LM|LN|LÖ|LP|LR|LU|M|MA|MB|MC|MD|ME|MG|MH|MI|MK|ML|MM|MN|MO|MQ|MR|MS|MÜ|MW|MY|MZ|N|NB|ND|NE|NF|NH|NI|NK|NM|NÖ|NP|NR|NT|NU|NW|NY|NZ|OA|OB|OC|OD|OE|OF|OG|OH|OK|OL|OP|OS|OZ|P|PA|PB|PE|PF|PI|PL|PM|PN|PR|PS|PW|PZ|R|RA|RC|RD|RE|RG|RH|RI|RL|RM|RN|RO|RP|RS|RT|RU|RV|RW|RZ|S|SB|SC|SE|SG|SI|SK|SL|SM|SN|SO|SP|SR|ST|SU|SW|SY|SZ|TE|TF|TG|TO|TP|TR|TS|TT|TÜ|ÜB|UE|UH|UL|UM|UN|V|VB|VG|VK|VR|VS|W|WA|WB|WE|WF|WI|WK|WL|WM|WN|WO|WR|WS|WT|WÜ|WW|WZ|Z|ZE|ZI|ZP|ZR|ZW|ZZ)[- ]?[A-Z]{1,2}[- ]?\d{1,4}|(ABG|ABI|AIB|AIC|ALF|ALZ|ANA|ANG|ANK|APD|ARN|ART|ASL|ASZ|AUR|AZE|BAD|BAR|BBG|BCH|BED|BER|BGD|BGL|BID|BIN|BIR|BIT|BIW|BKS|BLB|BLK|BNA|BOG|BOH|BOR|BOT|BRA|BRB|BRG|BRK|BRL|BRV|BSB|BSK|BTF|BÜD|BUL|BÜR|BÜS|BÜZ|CAS|CHA|CLP|CLZ|COC|COE|CUX|DAH|DAN|DAU|DBR|DEG|DEL|DGF|DIL|DIN|DIZ|DKB|DLG|DON|DUD|DÜW|EBE|EBN|EBS|ECK|EIC|EIL|EIN|EIS|EMD|EMS|ERB|ERH|ERK|ERZ|ESB|ESW|FDB|FDS|FEU|FFB|FKB|FLÖ|FOR|FRG|FRI|FRW|FTL|FÜS|GAN|GAP|GDB|GEL|GEO|GER|GHA|GHC|GLA|GMN|GNT|GOA|GOH|GRA|GRH|GRI|GRM|GRZ|GTH|GUB|GUN|GVM|HAB|HAL|HAM|HAS|HBN|HBS|HCH|HDH|HDL|HEB|HEF|HEI|HER|HET|HGN|HGW|HHM|HIG|HIP|HMÜ|HOG|HOH|HOL|HOM|HOR|HÖS|HOT|HRO|HSK|HST|HVL|HWI|IGB|ILL|JÜL|KEH|KEL|KEM|KIB|KLE|KLZ|KÖN|KÖT|KÖZ|KRU|KÜN|KUS|KYF|LAN|LAU|LBS|LBZ|LDK|LDS|LEO|LER|LEV|LIB|LIF|LIP|LÖB|LOS|LRO|LSZ|LÜN|LUP|LWL|MAB|MAI|MAK|MAL|MED|MEG|MEI|MEK|MEL|MER|MET|MGH|MGN|MHL|MIL|MKK|MOD|MOL|MON|MOS|MSE|MSH|MSP|MST|MTK|MTL|MÜB|MÜR|MYK|MZG|NAB|NAI|NAU|NDH|NEA|NEB|NEC|NEN|NES|NEW|NMB|NMS|NOH|NOL|NOM|NOR|NVP|NWM|OAL|OBB|OBG|OCH|OHA|ÖHR|OHV|OHZ|OPR|OSL|OVI|OVL|OVP|PAF|PAN|PAR|PCH|PEG|PIR|PLÖ|PRÜ|QFT|QLB|RDG|REG|REH|REI|RID|RIE|ROD|ROF|ROK|ROL|ROS|ROT|ROW|RSL|RÜD|RÜG|SAB|SAD|SAN|SAW|SBG|SBK|SCZ|SDH|SDL|SDT|SEB|SEE|SEF|SEL|SFB|SFT|SGH|SHA|SHG|SHK|SHL|SIG|SIM|SLE|SLF|SLK|SLN|SLS|SLÜ|SLZ|SMÜ|SOB|SOG|SOK|SÖM|SON|SPB|SPN|SRB|SRO|STA|STB|STD|STE|STL|SUL|SÜW|SWA|SZB|TBB|TDO|TET|TIR|TÖL|TUT|UEM|UER|UFF|USI|VAI|VEC|VER|VIB|VIE|VIT|VOH|WAF|WAK|WAN|WAR|WAT|WBS|WDA|WEL|WEN|WER|WES|WHV|WIL|WIS|WIT|WIZ|WLG|WMS|WND|WOB|WOH|WOL|WOR|WOS|WRN|WSF|WST|WSW|WTL|WTM|WUG|WÜM|WUN|WUR|WZL|ZEL|ZIG)[- ]?(([A-Z][- ]?\d{1,4})|([A-Z]{2}[- ]?\d{1,3})))[- ]?(E|H)?$/.test(e)},"de-LI":function(e){return/^FL[- ]?\d{1,5}[UZ]?$/.test(e)},"en-IN":function(e){return/^[A-Z]{2}[ -]?[0-9]{1,2}(?:[ -]?[A-Z])(?:[ -]?[A-Z]*)?[ -]?[0-9]{4}$/.test(e)},"es-AR":function(e){return/^(([A-Z]{2} ?[0-9]{3} ?[A-Z]{2})|([A-Z]{3} ?[0-9]{3}))$/.test(e)},"fi-FI":function(e){return/^(?=.{4,7})(([A-Z]{1,3}|[0-9]{1,3})[\s-]?([A-Z]{1,3}|[0-9]{1,5}))$/.test(e)},"hu-HU":function(e){return/^((((?!AAA)(([A-NPRSTVZWXY]{1})([A-PR-Z]{1})([A-HJ-NPR-Z]))|(A[ABC]I)|A[ABC]O|A[A-W]Q|BPI|BPO|UCO|UDO|XAO)-(?!000)\d{3})|(M\d{6})|((CK|DT|CD|HC|H[ABEFIKLMNPRSTVX]|MA|OT|R[A-Z]) \d{2}-\d{2})|(CD \d{3}-\d{3})|(C-(C|X) \d{4})|(X-(A|B|C) \d{4})|(([EPVZ]-\d{5}))|(S A[A-Z]{2} \d{2})|(SP \d{2}-\d{2}))$/.test(e)},"pt-BR":function(e){return/^[A-Z]{3}[ -]?[0-9][A-Z][0-9]{2}|[A-Z]{3}[ -]?[0-9]{4}$/.test(e)},"pt-PT":function(e){return/^([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})$/.test(e)},"sq-AL":function(e){return/^[A-Z]{2}[- ]?((\d{3}[- ]?(([A-Z]{2})|T))|(R[- ]?\d{3}))$/.test(e)},"sv-SE":function(e){return/^[A-HJ-PR-UW-Z]{3} ?[\d]{2}[A-HJ-PR-UW-Z1-9]$|(^[A-ZÅÄÖ ]{2,7}$)/.test(e.trim())},"en-PK":function(e){return/(^[A-Z]{2}((\s|-){0,1})[0-9]{3,4}((\s|-)[0-9]{2}){0,1}$)|(^[A-Z]{3}((\s|-){0,1})[0-9]{3,4}((\s|-)[0-9]{2}){0,1}$)|(^[A-Z]{4}((\s|-){0,1})[0-9]{3,4}((\s|-)[0-9]{2}){0,1}$)|(^[A-Z]((\s|-){0,1})[0-9]{4}((\s|-)[0-9]{2}){0,1}$)/.test(e.trim())}};e.exports=t.default,e.exports.default=t.default},7071:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),d.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o="(([a-zA-Z]{2,3}(-".concat("([A-Za-z]{3}(-[A-Za-z]{3}){0,2})",")?)|([a-zA-Z]{5,8}))"),l="(".concat("(\\d|[A-W]|[Y-Z]|[a-w]|[y-z])","(-[A-Za-z0-9]{2,8})+)"),i="(x(-[A-Za-z0-9]{1,8})+)",u="(".concat("((en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE))","|").concat("((art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang))",")"),s="(-|_)",c="".concat(o,"(").concat(s).concat("([A-Za-z]{4})",")?(").concat(s).concat("([A-Za-z]{2}|\\d{3})",")?(").concat(s).concat("([A-Za-z0-9]{5,8}|(\\d[A-Z-a-z0-9]{3}))",")*(").concat(s).concat(l,")*(").concat(s).concat(i,")?"),d=new RegExp("(^".concat(i,"$)|(^").concat(u,"$)|(^").concat(c,"$)"));e.exports=t.default,e.exports.default=t.default},7612:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),e===e.toLowerCase()};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},3609:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(e);for(var t,n,r,o=e.replace(/[- ]+/g,""),l=0,i=o.length-1;i>=0;i--)t=o.substring(i,i+1),n=parseInt(t,10),l+=r&&(n*=2)>=10?n%10+1:n,r=!r;return!(l%10!=0||!o)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},3196:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t,n){return(0,a.default)(t),null!=n&&n.eui&&(n.eui=String(n.eui)),null!=n&&n.no_colons||null!=n&&n.no_separators?"48"===n.eui?l.test(t):"64"===n.eui?s.test(t):l.test(t)||s.test(t):"48"===(null==n?void 0:n.eui)?o.test(t)||i.test(t):"64"===(null==n?void 0:n.eui)?u.test(t)||c.test(t):e(t,{eui:"48"})||e(t,{eui:"64"})};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){4}([0-9a-fA-F]{2})$/,l=/^([0-9a-fA-F]){12}$/,i=/^([0-9a-fA-F]{4}\.){2}([0-9a-fA-F]{4})$/,u=/^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){6}([0-9a-fA-F]{2})$/,s=/^([0-9a-fA-F]){16}$/,c=/^([0-9a-fA-F]{4}\.){3}([0-9a-fA-F]{4})$/;e.exports=t.default,e.exports.default=t.default},9745:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[a-f0-9]{32}$/;e.exports=t.default,e.exports.default=t.default},7349:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),0===e.indexOf("magnet:?")&&o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/(?:^magnet:\?|[^?&]&)xt(?:\.1)?=urn:(?:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?|btmh:1220[a-z0-9]{64})(?:$|&)/i;e.exports=t.default,e.exports.default=t.default},2337:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,o.default)(e),0!==e.indexOf("mailto:"))return!1;var n=i(e.replace("mailto:","").split("?"),2),l=n[0],s=n[1],c=void 0===s?"":s;if(!l&&!c)return!0;var d=function(e){var t=new Set(["subject","body","cc","bcc"]),n={cc:"",bcc:""},r=!1,a=e.split("&");if(a.length>4)return!1;var o,l=function(e){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=u(e))){t&&(e=t);var n=0,r=function(){};return{s:r,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,l=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return o=e.done,e},e:function(e){l=!0,a=e},f:function(){try{o||null==t.return||t.return()}finally{if(l)throw a}}}}(a);try{for(l.s();!(o=l.n()).done;){var s=i(o.value.split("="),2),c=s[0],d=s[1];if(c&&!t.has(c)){r=!0;break}!d||"cc"!==c&&"bcc"!==c||(n[c]=d),c&&t.delete(c)}}catch(e){l.e(e)}finally{l.f()}return!r&&n}(c);return!!d&&"".concat(l,",").concat(d.cc,",").concat(d.bcc).split(",").every((function(e){return!(e=(0,r.default)(e," "))||(0,a.default)(e,t)}))};var r=l(n(317)),a=l(n(9517)),o=l(n(3399));function l(e){return e&&e.__esModule?e:{default:e}}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||u(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=t.default,e.exports.default=t.default},4633:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)||l.test(e)||i.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+_]{1,100}$/i,l=/^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i,i=/^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i;e.exports=t.default,e.exports.default=t.default},5251:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if((0,a.default)(e),n&&n.strictMode&&!e.startsWith("+"))return!1;if(Array.isArray(t))return t.some((function(t){return!(!o.hasOwnProperty(t)||!o[t].test(e))}));if(t in o)return o[t].test(e);if(!t||"any"===t){for(var r in o)if(o.hasOwnProperty(r)&&o[r].test(e))return!0;return!1}throw new Error("Invalid locale '".concat(t,"'"))},t.locales=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o={"am-AM":/^(\+?374|0)(33|4[134]|55|77|88|9[13-689])\d{6}$/,"ar-AE":/^((\+?971)|0)?5[024568]\d{7}$/,"ar-BH":/^(\+?973)?(3|6)\d{7}$/,"ar-DZ":/^(\+?213|0)(5|6|7)\d{8}$/,"ar-LB":/^(\+?961)?((3|81)\d{6}|7\d{7})$/,"ar-EG":/^((\+?20)|0)?1[0125]\d{8}$/,"ar-IQ":/^(\+?964|0)?7[0-9]\d{8}$/,"ar-JO":/^(\+?962|0)?7[789]\d{7}$/,"ar-KW":/^(\+?965)([569]\d{7}|41\d{6})$/,"ar-LY":/^((\+?218)|0)?(9[1-6]\d{7}|[1-8]\d{7,9})$/,"ar-MA":/^(?:(?:\+|00)212|0)[5-7]\d{8}$/,"ar-OM":/^((\+|00)968)?(9[1-9])\d{6}$/,"ar-PS":/^(\+?970|0)5[6|9](\d{7})$/,"ar-SA":/^(!?(\+?966)|0)?5\d{8}$/,"ar-SD":/^((\+?249)|0)?(9[012369]|1[012])\d{7}$/,"ar-SY":/^(!?(\+?963)|0)?9\d{8}$/,"ar-TN":/^(\+?216)?[2459]\d{7}$/,"az-AZ":/^(\+994|0)(10|5[015]|7[07]|99)\d{7}$/,"bs-BA":/^((((\+|00)3876)|06))((([0-3]|[5-6])\d{6})|(4\d{7}))$/,"be-BY":/^(\+?375)?(24|25|29|33|44)\d{7}$/,"bg-BG":/^(\+?359|0)?8[789]\d{7}$/,"bn-BD":/^(\+?880|0)1[13456789][0-9]{8}$/,"ca-AD":/^(\+376)?[346]\d{5}$/,"cs-CZ":/^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,"da-DK":/^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,"de-DE":/^((\+49|0)1)(5[0-25-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7,9}$/,"de-AT":/^(\+43|0)\d{1,4}\d{3,12}$/,"de-CH":/^(\+41|0)([1-9])\d{1,9}$/,"de-LU":/^(\+352)?((6\d1)\d{6})$/,"dv-MV":/^(\+?960)?(7[2-9]|9[1-9])\d{5}$/,"el-GR":/^(\+?30|0)?6(8[5-9]|9(?![26])[0-9])\d{7}$/,"el-CY":/^(\+?357?)?(9(9|6)\d{6})$/,"en-AI":/^(\+?1|0)264(?:2(35|92)|4(?:6[1-2]|76|97)|5(?:3[6-9]|8[1-4])|7(?:2(4|9)|72))\d{4}$/,"en-AU":/^(\+?61|0)4\d{8}$/,"en-AG":/^(?:\+1|1)268(?:464|7(?:1[3-9]|[28]\d|3[0246]|64|7[0-689]))\d{4}$/,"en-BM":/^(\+?1)?441(((3|7)\d{6}$)|(5[0-3][0-9]\d{4}$)|(59\d{5}$))/,"en-BS":/^(\+?1[-\s]?|0)?\(?242\)?[-\s]?\d{3}[-\s]?\d{4}$/,"en-GB":/^(\+?44|0)7\d{9}$/,"en-GG":/^(\+?44|0)1481\d{6}$/,"en-GH":/^(\+233|0)(20|50|24|54|27|57|26|56|23|28|55|59)\d{7}$/,"en-GY":/^(\+592|0)6\d{6}$/,"en-HK":/^(\+?852[-\s]?)?[456789]\d{3}[-\s]?\d{4}$/,"en-MO":/^(\+?853[-\s]?)?[6]\d{3}[-\s]?\d{4}$/,"en-IE":/^(\+?353|0)8[356789]\d{7}$/,"en-IN":/^(\+?91|0)?[6789]\d{9}$/,"en-JM":/^(\+?876)?\d{7}$/,"en-KE":/^(\+?254|0)(7|1)\d{8}$/,"fr-CF":/^(\+?236| ?)(70|75|77|72|21|22)\d{6}$/,"en-SS":/^(\+?211|0)(9[1257])\d{7}$/,"en-KI":/^((\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,"en-KN":/^(?:\+1|1)869(?:46\d|48[89]|55[6-8]|66\d|76[02-7])\d{4}$/,"en-LS":/^(\+?266)(22|28|57|58|59|27|52)\d{6}$/,"en-MT":/^(\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,"en-MU":/^(\+?230|0)?\d{8}$/,"en-MW":/^(\+?265|0)(((77|88|31|99|98|21)\d{7})|(((111)|1)\d{6})|(32000\d{4}))$/,"en-NA":/^(\+?264|0)(6|8)\d{7}$/,"en-NG":/^(\+?234|0)?[789]\d{9}$/,"en-NZ":/^(\+?64|0)[28]\d{7,9}$/,"en-PG":/^(\+?675|0)?(7\d|8[18])\d{6}$/,"en-PK":/^((00|\+)?92|0)3[0-6]\d{8}$/,"en-PH":/^(09|\+639)\d{9}$/,"en-RW":/^(\+?250|0)?[7]\d{8}$/,"en-SG":/^(\+65)?[3689]\d{7}$/,"en-SL":/^(\+?232|0)\d{8}$/,"en-TZ":/^(\+?255|0)?[67]\d{8}$/,"en-UG":/^(\+?256|0)?[7]\d{8}$/,"en-US":/^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,"en-ZA":/^(\+?27|0)\d{9}$/,"en-ZM":/^(\+?26)?09[567]\d{7}$/,"en-ZW":/^(\+263)[0-9]{9}$/,"en-BW":/^(\+?267)?(7[1-8]{1})\d{6}$/,"es-AR":/^\+?549(11|[2368]\d)\d{8}$/,"es-BO":/^(\+?591)?(6|7)\d{7}$/,"es-CO":/^(\+?57)?3(0(0|1|2|4|5)|1\d|2[0-4]|5(0|1))\d{7}$/,"es-CL":/^(\+?56|0)[2-9]\d{1}\d{7}$/,"es-CR":/^(\+506)?[2-8]\d{7}$/,"es-CU":/^(\+53|0053)?5\d{7}$/,"es-DO":/^(\+?1)?8[024]9\d{7}$/,"es-HN":/^(\+?504)?[9|8|3|2]\d{7}$/,"es-EC":/^(\+?593|0)([2-7]|9[2-9])\d{7}$/,"es-ES":/^(\+?34)?[6|7]\d{8}$/,"es-PE":/^(\+?51)?9\d{8}$/,"es-MX":/^(\+?52)?(1|01)?\d{10,11}$/,"es-NI":/^(\+?505)\d{7,8}$/,"es-PA":/^(\+?507)\d{7,8}$/,"es-PY":/^(\+?595|0)9[9876]\d{7}$/,"es-SV":/^(\+?503)?[67]\d{7}$/,"es-UY":/^(\+598|0)9[1-9][\d]{6}$/,"es-VE":/^(\+?58)?(2|4)\d{9}$/,"et-EE":/^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,"fa-IR":/^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,"fi-FI":/^(\+?358|0)\s?(4[0-6]|50)\s?(\d\s?){4,8}$/,"fj-FJ":/^(\+?679)?\s?\d{3}\s?\d{4}$/,"fo-FO":/^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,"fr-BF":/^(\+226|0)[67]\d{7}$/,"fr-BJ":/^(\+229)\d{8}$/,"fr-CD":/^(\+?243|0)?(8|9)\d{8}$/,"fr-CM":/^(\+?237)6[0-9]{8}$/,"fr-FR":/^(\+?33|0)[67]\d{8}$/,"fr-GF":/^(\+?594|0|00594)[67]\d{8}$/,"fr-GP":/^(\+?590|0|00590)[67]\d{8}$/,"fr-MQ":/^(\+?596|0|00596)[67]\d{8}$/,"fr-PF":/^(\+?689)?8[789]\d{6}$/,"fr-RE":/^(\+?262|0|00262)[67]\d{8}$/,"fr-WF":/^(\+681)?\d{6}$/,"he-IL":/^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,"hu-HU":/^(\+?36|06)(20|30|31|50|70)\d{7}$/,"id-ID":/^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,"ir-IR":/^(\+98|0)?9\d{9}$/,"it-IT":/^(\+?39)?\s?3\d{2} ?\d{6,7}$/,"it-SM":/^((\+378)|(0549)|(\+390549)|(\+3780549))?6\d{5,9}$/,"ja-JP":/^(\+81[ \-]?(\(0\))?|0)[6789]0[ \-]?\d{4}[ \-]?\d{4}$/,"ka-GE":/^(\+?995)?(79\d{7}|5\d{8})$/,"kk-KZ":/^(\+?7|8)?7\d{9}$/,"kl-GL":/^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,"ko-KR":/^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,"ky-KG":/^(\+?7\s?\+?7|0)\s?\d{2}\s?\d{3}\s?\d{4}$/,"lt-LT":/^(\+370|8)\d{8}$/,"lv-LV":/^(\+?371)2\d{7}$/,"mg-MG":/^((\+?261|0)(2|3)\d)?\d{7}$/,"mn-MN":/^(\+|00|011)?976(77|81|88|91|94|95|96|99)\d{6}$/,"my-MM":/^(\+?959|09|9)(2[5-7]|3[1-2]|4[0-5]|6[6-9]|7[5-9]|9[6-9])[0-9]{7}$/,"ms-MY":/^(\+?60|0)1(([0145](-|\s)?\d{7,8})|([236-9](-|\s)?\d{7}))$/,"mz-MZ":/^(\+?258)?8[234567]\d{7}$/,"nb-NO":/^(\+?47)?[49]\d{7}$/,"ne-NP":/^(\+?977)?9[78]\d{8}$/,"nl-BE":/^(\+?32|0)4\d{8}$/,"nl-NL":/^(((\+|00)?31\(0\))|((\+|00)?31)|0)6{1}\d{8}$/,"nl-AW":/^(\+)?297(56|59|64|73|74|99)\d{5}$/,"nn-NO":/^(\+?47)?[49]\d{7}$/,"pl-PL":/^(\+?48)? ?([5-8]\d|45) ?\d{3} ?\d{2} ?\d{2}$/,"pt-BR":/^((\+?55\ ?[1-9]{2}\ ?)|(\+?55\ ?\([1-9]{2}\)\ ?)|(0[1-9]{2}\ ?)|(\([1-9]{2}\)\ ?)|([1-9]{2}\ ?))((\d{4}\-?\d{4})|(9[1-9]{1}\d{3}\-?\d{4}))$/,"pt-PT":/^(\+?351)?9[1236]\d{7}$/,"pt-AO":/^(\+244)\d{9}$/,"ro-MD":/^(\+?373|0)((6(0|1|2|6|7|8|9))|(7(6|7|8|9)))\d{6}$/,"ro-RO":/^(\+?40|0)\s?7\d{2}(\/|\s|\.|-)?\d{3}(\s|\.|-)?\d{3}$/,"ru-RU":/^(\+?7|8)?9\d{9}$/,"si-LK":/^(?:0|94|\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\d{7}$/,"sl-SI":/^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,"sk-SK":/^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,"so-SO":/^(\+?252|0)((6[0-9])\d{7}|(7[1-9])\d{7})$/,"sq-AL":/^(\+355|0)6[789]\d{6}$/,"sr-RS":/^(\+3816|06)[- \d]{5,9}$/,"sv-SE":/^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,"tg-TJ":/^(\+?992)?[5][5]\d{7}$/,"th-TH":/^(\+66|66|0)\d{9}$/,"tr-TR":/^(\+?90|0)?5\d{9}$/,"tk-TM":/^(\+993|993|8)\d{8}$/,"uk-UA":/^(\+?38|8)?0\d{9}$/,"uz-UZ":/^(\+?998)?(6[125-79]|7[1-69]|88|9\d)\d{7}$/,"vi-VN":/^((\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,"zh-CN":/^((\+|00)86)?(1[3-9]|9[28])\d{9}$/,"zh-TW":/^(\+?886\-?|0)?9\d{8}$/,"dz-BT":/^(\+?975|0)?(17|16|77|02)\d{6}$/,"ar-YE":/^(((\+|00)9677|0?7)[0137]\d{7}|((\+|00)967|0)[1-7]\d{6})$/,"ar-EH":/^(\+?212|0)[\s\-]?(5288|5289)[\s\-]?\d{5}$/,"fa-AF":/^(\+93|0)?(2{1}[0-8]{1}|[3-5]{1}[0-4]{1})(\d{7})$/};o["en-CA"]=o["en-US"],o["fr-CA"]=o["en-CA"],o["fr-BE"]=o["nl-BE"],o["zh-HK"]=o["en-HK"],o["zh-MO"]=o["en-MO"],o["ga-IE"]=o["en-IE"],o["fr-CH"]=o["de-CH"],o["it-CH"]=o["fr-CH"],t.locales=Object.keys(o)},1252:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,r.default)(e),(0,a.default)(e)&&24===e.length};var r=o(n(3399)),a=o(n(2002));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default,e.exports.default=t.default},2830:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/[^\x00-\x7F]/;e.exports=t.default,e.exports.default=t.default},1666:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),t&&t.no_symbols?l.test(e):new RegExp("^[+-]?([0-9]*[".concat((t||{}).locale?o.decimal[t.locale]:".","])?[0-9]+$")).test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=n(3237),l=/^[0-9]+$/;e.exports=t.default,e.exports.default=t.default},9546:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^(0o)?[0-7]+$/i;e.exports=t.default,e.exports.default=t.default},3442:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(e);var n=e.replace(/\s/g,"").toUpperCase();return t.toUpperCase()in o&&o[t].test(n)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o={AM:/^[A-Z]{2}\d{7}$/,AR:/^[A-Z]{3}\d{6}$/,AT:/^[A-Z]\d{7}$/,AU:/^[A-Z]\d{7}$/,AZ:/^[A-Z]{1}\d{8}$/,BE:/^[A-Z]{2}\d{6}$/,BG:/^\d{9}$/,BR:/^[A-Z]{2}\d{6}$/,BY:/^[A-Z]{2}\d{7}$/,CA:/^[A-Z]{2}\d{6}$/,CH:/^[A-Z]\d{7}$/,CN:/^G\d{8}$|^E(?![IO])[A-Z0-9]\d{7}$/,CY:/^[A-Z](\d{6}|\d{8})$/,CZ:/^\d{8}$/,DE:/^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,DK:/^\d{9}$/,DZ:/^\d{9}$/,EE:/^([A-Z]\d{7}|[A-Z]{2}\d{7})$/,ES:/^[A-Z0-9]{2}([A-Z0-9]?)\d{6}$/,FI:/^[A-Z]{2}\d{7}$/,FR:/^\d{2}[A-Z]{2}\d{5}$/,GB:/^\d{9}$/,GR:/^[A-Z]{2}\d{7}$/,HR:/^\d{9}$/,HU:/^[A-Z]{2}(\d{6}|\d{7})$/,IE:/^[A-Z0-9]{2}\d{7}$/,IN:/^[A-Z]{1}-?\d{7}$/,ID:/^[A-C]\d{7}$/,IR:/^[A-Z]\d{8}$/,IS:/^(A)\d{7}$/,IT:/^[A-Z0-9]{2}\d{7}$/,JM:/^[Aa]\d{7}$/,JP:/^[A-Z]{2}\d{7}$/,KR:/^[MS]\d{8}$/,KZ:/^[a-zA-Z]\d{7}$/,LI:/^[a-zA-Z]\d{5}$/,LT:/^[A-Z0-9]{8}$/,LU:/^[A-Z0-9]{8}$/,LV:/^[A-Z0-9]{2}\d{7}$/,LY:/^[A-Z0-9]{8}$/,MT:/^\d{7}$/,MZ:/^([A-Z]{2}\d{7})|(\d{2}[A-Z]{2}\d{5})$/,MY:/^[AHK]\d{8}$/,MX:/^\d{10,11}$/,NL:/^[A-Z]{2}[A-Z0-9]{6}\d$/,NZ:/^([Ll]([Aa]|[Dd]|[Ff]|[Hh])|[Ee]([Aa]|[Pp])|[Nn])\d{6}$/,PH:/^([A-Z](\d{6}|\d{7}[A-Z]))|([A-Z]{2}(\d{6}|\d{7}))$/,PK:/^[A-Z]{2}\d{7}$/,PL:/^[A-Z]{2}\d{7}$/,PT:/^[A-Z]\d{6}$/,RO:/^\d{8,9}$/,RU:/^\d{9}$/,SE:/^\d{8}$/,SL:/^(P)[A-Z]\d{7}$/,SK:/^[0-9A-Z]\d{7}$/,TH:/^[A-Z]{1,2}\d{6,7}$/,TR:/^[A-Z]\d{8}$/,UA:/^[A-Z]{2}\d{6}$/,US:/^\d{9}$/,ZA:/^[TAMD]\d{8}$/};e.exports=t.default,e.exports.default=t.default},3906:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e,{allow_leading_zeroes:!1,min:0,max:65535})};var r,a=(r=n(6084))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},3939:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,a.default)(e),t in s)return s[t].test(e);if("any"===t){for(var n in s)if(s.hasOwnProperty(n)&&s[n].test(e))return!0;return!1}throw new Error("Invalid locale '".concat(t,"'"))},t.locales=void 0;var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^\d{3}$/,l=/^\d{4}$/,i=/^\d{5}$/,u=/^\d{6}$/,s={AD:/^AD\d{3}$/,AT:l,AU:l,AZ:/^AZ\d{4}$/,BA:/^([7-8]\d{4}$)/,BE:l,BG:l,BR:/^\d{5}-\d{3}$/,BY:/^2[1-4]\d{4}$/,CA:/^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,CH:l,CN:/^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,CZ:/^\d{3}\s?\d{2}$/,DE:i,DK:l,DO:i,DZ:i,EE:i,ES:/^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,FI:i,FR:/^\d{2}\s?\d{3}$/,GB:/^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,GR:/^\d{3}\s?\d{2}$/,HR:/^([1-5]\d{4}$)/,HT:/^HT\d{4}$/,HU:l,ID:i,IE:/^(?!.*(?:o))[A-Za-z]\d[\dw]\s\w{4}$/i,IL:/^(\d{5}|\d{7})$/,IN:/^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,IR:/^(?!(\d)\1{3})[13-9]{4}[1346-9][013-9]{5}$/,IS:o,IT:i,JP:/^\d{3}\-\d{4}$/,KE:i,KR:/^(\d{5}|\d{6})$/,LI:/^(948[5-9]|949[0-7])$/,LT:/^LT\-\d{5}$/,LU:l,LV:/^LV\-\d{4}$/,LK:i,MG:o,MX:i,MT:/^[A-Za-z]{3}\s{0,1}\d{4}$/,MY:i,NL:/^[1-9]\d{3}\s?(?!sa|sd|ss)[a-z]{2}$/i,NO:l,NP:/^(10|21|22|32|33|34|44|45|56|57)\d{3}$|^(977)$/i,NZ:l,PL:/^\d{2}\-\d{3}$/,PR:/^00[679]\d{2}([ -]\d{4})?$/,PT:/^\d{4}\-\d{3}?$/,RO:u,RU:u,SA:i,SE:/^[1-9]\d{2}\s?\d{2}$/,SG:u,SI:l,SK:/^\d{3}\s?\d{2}$/,TH:i,TN:l,TW:/^\d{3}(\d{2})?$/,UA:i,US:/^\d{5}(-\d{4})?$/,ZA:l,ZM:i};t.locales=Object.keys(s)},1578:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),f.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/([01][0-9]|2[0-3])/,l=/[0-5][0-9]/,i=new RegExp("[-+]".concat(o.source,":").concat(l.source)),u=new RegExp("([zZ]|".concat(i.source,")")),s=new RegExp("".concat(o.source,":").concat(l.source,":").concat(/([0-5][0-9]|60)/.source).concat(/(\.[0-9]+)?/.source)),c=new RegExp("".concat(/[0-9]{4}/.source,"-").concat(/(0[1-9]|1[0-2])/.source,"-").concat(/([12]\d|0[1-9]|3[01])/.source)),d=new RegExp("".concat(s.source).concat(u.source)),f=new RegExp("^".concat(c.source,"[ tT]").concat(d.source,"$"));e.exports=t.default,e.exports.default=t.default},5467:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return(0,a.default)(e),t?o.test(e)||l.test(e)||i.test(e)||u.test(e):o.test(e)||l.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^rgb\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\)$/,l=/^rgba\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/,i=/^rgb\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\)$/,u=/^rgba\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/;e.exports=t.default,e.exports.default=t.default},9841:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,r.default)(e),o.test(e)};var r=a(n(3399));function a(e){return e&&e.__esModule?e:{default:e}}var o=(0,a(n(5730)).default)(["^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)","(?:-((?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*))","?(?:\\+([0-9a-z-]+(?:\\.[0-9a-z-]+)*))?$"],"i");e.exports=t.default,e.exports.default=t.default},9234:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/^[^\s-_](?!.*?[-_]{2,})[a-z0-9-\\][^\s]*[^-_\s]$/;e.exports=t.default,e.exports.default=t.default},7179:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;(0,a.default)(e);var n=function(e){var t=function(e){var t={};return Array.from(e).forEach((function(e){t[e]?t[e]+=1:t[e]=1})),t}(e),n={length:e.length,uniqueChars:Object.keys(t).length,uppercaseCount:0,lowercaseCount:0,numberCount:0,symbolCount:0};return Object.keys(t).forEach((function(e){l.test(e)?n.uppercaseCount+=t[e]:i.test(e)?n.lowercaseCount+=t[e]:u.test(e)?n.numberCount+=t[e]:s.test(e)&&(n.symbolCount+=t[e])})),n}(e);return(t=(0,r.default)(t||{},c)).returnScore?function(e,t){var n=0;return n+=e.uniqueChars*t.pointsPerUnique,n+=(e.length-e.uniqueChars)*t.pointsPerRepeat,e.lowercaseCount>0&&(n+=t.pointsForContainingLower),e.uppercaseCount>0&&(n+=t.pointsForContainingUpper),e.numberCount>0&&(n+=t.pointsForContainingNumber),e.symbolCount>0&&(n+=t.pointsForContainingSymbol),n}(n,t):n.length>=t.minLength&&n.lowercaseCount>=t.minLowercase&&n.uppercaseCount>=t.minUppercase&&n.numberCount>=t.minNumbers&&n.symbolCount>=t.minSymbols};var r=o(n(3610)),a=o(n(3399));function o(e){return e&&e.__esModule?e:{default:e}}var l=/^[A-Z]$/,i=/^[a-z]$/,u=/^[0-9]$/,s=/^[-#!$@£%^&*()_+|~=`{}\[\]:";'<>?,.\/\\ ]$/,c={minLength:8,minLowercase:1,minUppercase:1,minNumbers:1,minSymbols:1,returnScore:!1,pointsPerUnique:1,pointsPerRepeat:.5,pointsForContainingLower:10,pointsForContainingUpper:10,pointsForContainingNumber:10,pointsForContainingSymbol:10};e.exports=t.default,e.exports.default=t.default},3459:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=/[\uD800-\uDBFF][\uDC00-\uDFFF]/;e.exports=t.default,e.exports.default=t.default},7741:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"en-US";(0,a.default)(e);var n=e.slice(0);if(t in f)return t in m&&(n=n.replace(m[t],"")),!!f[t].test(n)&&(!(t in p)||p[t](n));throw new Error("Invalid locale '".concat(t,"'"))};var a=u(n(3399)),o=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=r(e)&&"function"!=typeof e)return{default:e};var n=i(t);if(n&&n.has(e))return n.get(e);var a={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&{}.hasOwnProperty.call(e,l)){var u=o?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(a,l,u):a[l]=e[l]}return a.default=e,n&&n.set(e,a),a}(n(4834)),l=u(n(9013));function i(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(i=function(e){return e?n:t})(e)}function u(e){return e&&e.__esModule?e:{default:e}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var c={andover:["10","12"],atlanta:["60","67"],austin:["50","53"],brookhaven:["01","02","03","04","05","06","11","13","14","16","21","22","23","25","34","51","52","54","55","56","57","58","59","65"],cincinnati:["30","32","35","36","37","38","61"],fresno:["15","24"],internet:["20","26","27","45","46","47"],kansas:["40","44"],memphis:["94","95"],ogden:["80","90"],philadelphia:["33","39","41","42","43","46","48","62","63","64","66","68","71","72","73","74","75","76","77","81","82","83","84","85","86","87","88","91","92","93","98","99"],sba:["31"]};function d(e){for(var t=!1,n=!1,r=0;r<3;r++)if(!t&&/[AEIOU]/.test(e[r]))t=!0;else if(!n&&t&&"X"===e[r])n=!0;else if(r>0){if(t&&!n&&!/[AEIOU]/.test(e[r]))return!1;if(n&&!/X/.test(e[r]))return!1}return!0}var f={"bg-BG":/^\d{10}$/,"cs-CZ":/^\d{6}\/{0,1}\d{3,4}$/,"de-AT":/^\d{9}$/,"de-DE":/^[1-9]\d{10}$/,"dk-DK":/^\d{6}-{0,1}\d{4}$/,"el-CY":/^[09]\d{7}[A-Z]$/,"el-GR":/^([0-4]|[7-9])\d{8}$/,"en-CA":/^\d{9}$/,"en-GB":/^\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\d{6}[ABCD ]$/i,"en-IE":/^\d{7}[A-W][A-IW]{0,1}$/i,"en-US":/^\d{2}[- ]{0,1}\d{7}$/,"es-AR":/(20|23|24|27|30|33|34)[0-9]{8}[0-9]/,"es-ES":/^(\d{0,8}|[XYZKLM]\d{7})[A-HJ-NP-TV-Z]$/i,"et-EE":/^[1-6]\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\d$/,"fi-FI":/^\d{6}[-+A]\d{3}[0-9A-FHJ-NPR-Y]$/i,"fr-BE":/^\d{11}$/,"fr-FR":/^[0-3]\d{12}$|^[0-3]\d\s\d{2}(\s\d{3}){3}$/,"fr-LU":/^\d{13}$/,"hr-HR":/^\d{11}$/,"hu-HU":/^8\d{9}$/,"it-IT":/^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,"lv-LV":/^\d{6}-{0,1}\d{5}$/,"mt-MT":/^\d{3,7}[APMGLHBZ]$|^([1-8])\1\d{7}$/i,"nl-NL":/^\d{9}$/,"pl-PL":/^\d{10,11}$/,"pt-BR":/(?:^\d{11}$)|(?:^\d{14}$)/,"pt-PT":/^\d{9}$/,"ro-RO":/^\d{13}$/,"sk-SK":/^\d{6}\/{0,1}\d{3,4}$/,"sl-SI":/^[1-9]\d{7}$/,"sv-SE":/^(\d{6}[-+]{0,1}\d{4}|(18|19|20)\d{6}[-+]{0,1}\d{4})$/,"uk-UA":/^\d{10}$/};f["lb-LU"]=f["fr-LU"],f["lt-LT"]=f["et-EE"],f["nl-BE"]=f["fr-BE"],f["fr-CA"]=f["en-CA"];var p={"bg-BG":function(e){var t=e.slice(0,2),n=parseInt(e.slice(2,4),10);n>40?(n-=40,t="20".concat(t)):n>20?(n-=20,t="18".concat(t)):t="19".concat(t),n<10&&(n="0".concat(n));var r="".concat(t,"/").concat(n,"/").concat(e.slice(4,6));if(!(0,l.default)(r,"YYYY/MM/DD"))return!1;for(var a=e.split("").map((function(e){return parseInt(e,10)})),o=[2,4,8,5,10,9,7,3,6],i=0,u=0;u<o.length;u++)i+=a[u]*o[u];return(i=i%11==10?0:i%11)===a[9]},"cs-CZ":function(e){e=e.replace(/\W/,"");var t=parseInt(e.slice(0,2),10);if(10===e.length)t=t<54?"20".concat(t):"19".concat(t);else{if("000"===e.slice(6))return!1;if(!(t<54))return!1;t="19".concat(t)}3===t.length&&(t=[t.slice(0,2),"0",t.slice(2)].join(""));var n=parseInt(e.slice(2,4),10);if(n>50&&(n-=50),n>20){if(parseInt(t,10)<2004)return!1;n-=20}n<10&&(n="0".concat(n));var r="".concat(t,"/").concat(n,"/").concat(e.slice(4,6));if(!(0,l.default)(r,"YYYY/MM/DD"))return!1;if(10===e.length&&parseInt(e,10)%11!=0){var a=parseInt(e.slice(0,9),10)%11;if(!(parseInt(t,10)<1986&&10===a))return!1;if(0!==parseInt(e.slice(9),10))return!1}return!0},"de-AT":function(e){return o.luhnCheck(e)},"de-DE":function(e){for(var t=e.split("").map((function(e){return parseInt(e,10)})),n=[],r=0;r<t.length-1;r++){n.push("");for(var a=0;a<t.length-1;a++)t[r]===t[a]&&(n[r]+=a)}if(2!==(n=n.filter((function(e){return e.length>1}))).length&&3!==n.length)return!1;if(3===n[0].length){for(var l=n[0].split("").map((function(e){return parseInt(e,10)})),i=0,u=0;u<l.length-1;u++)l[u]+1===l[u+1]&&(i+=1);if(2===i)return!1}return o.iso7064Check(e)},"dk-DK":function(e){e=e.replace(/\W/,"");var t=parseInt(e.slice(4,6),10);switch(e.slice(6,7)){case"0":case"1":case"2":case"3":t="19".concat(t);break;case"4":case"9":t=t<37?"20".concat(t):"19".concat(t);break;default:if(t<37)t="20".concat(t);else{if(!(t>58))return!1;t="18".concat(t)}}3===t.length&&(t=[t.slice(0,2),"0",t.slice(2)].join(""));var n="".concat(t,"/").concat(e.slice(2,4),"/").concat(e.slice(0,2));if(!(0,l.default)(n,"YYYY/MM/DD"))return!1;for(var r=e.split("").map((function(e){return parseInt(e,10)})),a=0,o=4,i=0;i<9;i++)a+=r[i]*o,1==(o-=1)&&(o=7);return 1!=(a%=11)&&(0===a?0===r[9]:r[9]===11-a)},"el-CY":function(e){for(var t=e.slice(0,8).split("").map((function(e){return parseInt(e,10)})),n=0,r=1;r<t.length;r+=2)n+=t[r];for(var a=0;a<t.length;a+=2)t[a]<2?n+=1-t[a]:(n+=2*(t[a]-2)+5,t[a]>4&&(n+=2));return String.fromCharCode(n%26+65)===e.charAt(8)},"el-GR":function(e){for(var t=e.split("").map((function(e){return parseInt(e,10)})),n=0,r=0;r<8;r++)n+=t[r]*Math.pow(2,8-r);return n%11%10===t[8]},"en-CA":function(e){var t=e.split(""),n=t.filter((function(e,t){return t%2})).map((function(e){return 2*Number(e)})).join("").split("");return t.filter((function(e,t){return!(t%2)})).concat(n).map((function(e){return Number(e)})).reduce((function(e,t){return e+t}))%10==0},"en-IE":function(e){var t=o.reverseMultiplyAndSum(e.split("").slice(0,7).map((function(e){return parseInt(e,10)})),8);return 9===e.length&&"W"!==e[8]&&(t+=9*(e[8].charCodeAt(0)-64)),0==(t%=23)?"W"===e[7].toUpperCase():e[7].toUpperCase()===String.fromCharCode(64+t)},"en-US":function(e){return-1!==function(){var e,t=[];for(var n in c)c.hasOwnProperty(n)&&t.push.apply(t,function(e){if(Array.isArray(e))return s(e)}(e=c[n])||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return t}().indexOf(e.slice(0,2))},"es-AR":function(e){for(var t=0,n=e.split(""),r=parseInt(n.pop(),10),a=0;a<n.length;a++)t+=n[9-a]*(2+a%6);var o=11-t%11;return 11===o?o=0:10===o&&(o=9),r===o},"es-ES":function(e){var t=e.toUpperCase().split("");if(isNaN(parseInt(t[0],10))&&t.length>1){var n=0;switch(t[0]){case"Y":n=1;break;case"Z":n=2}t.splice(0,1,n)}else for(;t.length<9;)t.unshift(0);t=t.join("");var r=parseInt(t.slice(0,8),10)%23;return t[8]===["T","R","W","A","G","M","Y","F","P","D","X","B","N","J","Z","S","Q","V","H","L","C","K","E"][r]},"et-EE":function(e){var t=e.slice(1,3);switch(e.slice(0,1)){case"1":case"2":t="18".concat(t);break;case"3":case"4":t="19".concat(t);break;default:t="20".concat(t)}var n="".concat(t,"/").concat(e.slice(3,5),"/").concat(e.slice(5,7));if(!(0,l.default)(n,"YYYY/MM/DD"))return!1;for(var r=e.split("").map((function(e){return parseInt(e,10)})),a=0,o=1,i=0;i<10;i++)a+=r[i]*o,10===(o+=1)&&(o=1);if(a%11==10){a=0,o=3;for(var u=0;u<10;u++)a+=r[u]*o,10===(o+=1)&&(o=1);if(a%11==10)return 0===r[10]}return a%11===r[10]},"fi-FI":function(e){var t=e.slice(4,6);switch(e.slice(6,7)){case"+":t="18".concat(t);break;case"-":t="19".concat(t);break;default:t="20".concat(t)}var n="".concat(t,"/").concat(e.slice(2,4),"/").concat(e.slice(0,2));if(!(0,l.default)(n,"YYYY/MM/DD"))return!1;var r=parseInt(e.slice(0,6)+e.slice(7,10),10)%31;return r<10?r===parseInt(e.slice(10),10):["A","B","C","D","E","F","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y"][r-=10]===e.slice(10)},"fr-BE":function(e){if("00"!==e.slice(2,4)||"00"!==e.slice(4,6)){var t="".concat(e.slice(0,2),"/").concat(e.slice(2,4),"/").concat(e.slice(4,6));if(!(0,l.default)(t,"YY/MM/DD"))return!1}var n=97-parseInt(e.slice(0,9),10)%97,r=parseInt(e.slice(9,11),10);return n===r||(n=97-parseInt("2".concat(e.slice(0,9)),10)%97)===r},"fr-FR":function(e){return e=e.replace(/\s/g,""),parseInt(e.slice(0,10),10)%511===parseInt(e.slice(10,13),10)},"fr-LU":function(e){var t="".concat(e.slice(0,4),"/").concat(e.slice(4,6),"/").concat(e.slice(6,8));return!!(0,l.default)(t,"YYYY/MM/DD")&&!!o.luhnCheck(e.slice(0,12))&&o.verhoeffCheck("".concat(e.slice(0,11)).concat(e[12]))},"hr-HR":function(e){return o.iso7064Check(e)},"hu-HU":function(e){for(var t=e.split("").map((function(e){return parseInt(e,10)})),n=8,r=1;r<9;r++)n+=t[r]*(r+1);return n%11===t[9]},"it-IT":function(e){var t=e.toUpperCase().split("");if(!d(t.slice(0,3)))return!1;if(!d(t.slice(3,6)))return!1;for(var n={L:"0",M:"1",N:"2",P:"3",Q:"4",R:"5",S:"6",T:"7",U:"8",V:"9"},r=0,a=[6,7,9,10,12,13,14];r<a.length;r++){var o=a[r];t[o]in n&&t.splice(o,1,n[t[o]])}var i={A:"01",B:"02",C:"03",D:"04",E:"05",H:"06",L:"07",M:"08",P:"09",R:"10",S:"11",T:"12"}[t[8]],u=parseInt(t[9]+t[10],10);u>40&&(u-=40),u<10&&(u="0".concat(u));var s="".concat(t[6]).concat(t[7],"/").concat(i,"/").concat(u);if(!(0,l.default)(s,"YY/MM/DD"))return!1;for(var c=0,f=1;f<t.length-1;f+=2){var p=parseInt(t[f],10);isNaN(p)&&(p=t[f].charCodeAt(0)-65),c+=p}for(var h={A:1,B:0,C:5,D:7,E:9,F:13,G:15,H:17,I:19,J:21,K:2,L:4,M:18,N:20,O:11,P:3,Q:6,R:8,S:12,T:14,U:16,V:10,W:22,X:25,Y:24,Z:23,0:1,1:0},m=0;m<t.length-1;m+=2){var A=0;if(t[m]in h)A=h[t[m]];else{var v=parseInt(t[m],10);A=2*v+1,v>4&&(A+=2)}c+=A}return String.fromCharCode(65+c%26)===t[15]},"lv-LV":function(e){var t=(e=e.replace(/\W/,"")).slice(0,2);if("32"!==t){if("00"!==e.slice(2,4)){var n=e.slice(4,6);switch(e[6]){case"0":n="18".concat(n);break;case"1":n="19".concat(n);break;default:n="20".concat(n)}var r="".concat(n,"/").concat(e.slice(2,4),"/").concat(t);if(!(0,l.default)(r,"YYYY/MM/DD"))return!1}for(var a=1101,o=[1,6,3,7,9,10,5,8,4,2],i=0;i<e.length-1;i++)a-=parseInt(e[i],10)*o[i];return parseInt(e[10],10)===a%11}return!0},"mt-MT":function(e){if(9!==e.length){for(var t=e.toUpperCase().split("");t.length<8;)t.unshift(0);switch(e[7]){case"A":case"P":if(0===parseInt(t[6],10))return!1;break;default:var n=parseInt(t.join("").slice(0,5),10);if(n>32e3)return!1;if(n===parseInt(t.join("").slice(5,7),10))return!1}}return!0},"nl-NL":function(e){return o.reverseMultiplyAndSum(e.split("").slice(0,8).map((function(e){return parseInt(e,10)})),9)%11===parseInt(e[8],10)},"pl-PL":function(e){if(10===e.length){for(var t=[6,5,7,2,3,4,5,6,7],n=0,r=0;r<t.length;r++)n+=parseInt(e[r],10)*t[r];return 10!=(n%=11)&&n===parseInt(e[9],10)}var a=e.slice(0,2),o=parseInt(e.slice(2,4),10);o>80?(a="18".concat(a),o-=80):o>60?(a="22".concat(a),o-=60):o>40?(a="21".concat(a),o-=40):o>20?(a="20".concat(a),o-=20):a="19".concat(a),o<10&&(o="0".concat(o));var i="".concat(a,"/").concat(o,"/").concat(e.slice(4,6));if(!(0,l.default)(i,"YYYY/MM/DD"))return!1;for(var u=0,s=1,c=0;c<e.length-1;c++)u+=parseInt(e[c],10)*s%10,(s+=2)>10?s=1:5===s&&(s+=2);return(u=10-u%10)===parseInt(e[10],10)},"pt-BR":function(e){if(11===e.length){var t,n;if(t=0,"11111111111"===e||"22222222222"===e||"33333333333"===e||"44444444444"===e||"55555555555"===e||"66666666666"===e||"77777777777"===e||"88888888888"===e||"99999999999"===e||"00000000000"===e)return!1;for(var r=1;r<=9;r++)t+=parseInt(e.substring(r-1,r),10)*(11-r);if(10==(n=10*t%11)&&(n=0),n!==parseInt(e.substring(9,10),10))return!1;t=0;for(var a=1;a<=10;a++)t+=parseInt(e.substring(a-1,a),10)*(12-a);return 10==(n=10*t%11)&&(n=0),n===parseInt(e.substring(10,11),10)}if("00000000000000"===e||"11111111111111"===e||"22222222222222"===e||"33333333333333"===e||"44444444444444"===e||"55555555555555"===e||"66666666666666"===e||"77777777777777"===e||"88888888888888"===e||"99999999999999"===e)return!1;for(var o=e.length-2,l=e.substring(0,o),i=e.substring(o),u=0,s=o-7,c=o;c>=1;c--)u+=l.charAt(o-c)*s,(s-=1)<2&&(s=9);var d=u%11<2?0:11-u%11;if(d!==parseInt(i.charAt(0),10))return!1;o+=1,l=e.substring(0,o),u=0,s=o-7;for(var f=o;f>=1;f--)u+=l.charAt(o-f)*s,(s-=1)<2&&(s=9);return(d=u%11<2?0:11-u%11)===parseInt(i.charAt(1),10)},"pt-PT":function(e){var t=11-o.reverseMultiplyAndSum(e.split("").slice(0,8).map((function(e){return parseInt(e,10)})),9)%11;return t>9?0===parseInt(e[8],10):t===parseInt(e[8],10)},"ro-RO":function(e){if("9000"!==e.slice(0,4)){var t=e.slice(1,3);switch(e[0]){case"1":case"2":t="19".concat(t);break;case"3":case"4":t="18".concat(t);break;case"5":case"6":t="20".concat(t)}var n="".concat(t,"/").concat(e.slice(3,5),"/").concat(e.slice(5,7));if(8===n.length){if(!(0,l.default)(n,"YY/MM/DD"))return!1}else if(!(0,l.default)(n,"YYYY/MM/DD"))return!1;for(var r=e.split("").map((function(e){return parseInt(e,10)})),a=[2,7,9,1,4,6,3,5,8,2,7,9],o=0,i=0;i<a.length;i++)o+=r[i]*a[i];return o%11==10?1===r[12]:r[12]===o%11}return!0},"sk-SK":function(e){if(9===e.length){if("000"===(e=e.replace(/\W/,"")).slice(6))return!1;var t=parseInt(e.slice(0,2),10);if(t>53)return!1;t=t<10?"190".concat(t):"19".concat(t);var n=parseInt(e.slice(2,4),10);n>50&&(n-=50),n<10&&(n="0".concat(n));var r="".concat(t,"/").concat(n,"/").concat(e.slice(4,6));if(!(0,l.default)(r,"YYYY/MM/DD"))return!1}return!0},"sl-SI":function(e){var t=11-o.reverseMultiplyAndSum(e.split("").slice(0,7).map((function(e){return parseInt(e,10)})),8)%11;return 10===t?0===parseInt(e[7],10):t===parseInt(e[7],10)},"sv-SE":function(e){var t=e.slice(0);e.length>11&&(t=t.slice(2));var n="",r=t.slice(2,4),a=parseInt(t.slice(4,6),10);if(e.length>11)n=e.slice(0,4);else if(n=e.slice(0,2),11===e.length&&a<60){var i=(new Date).getFullYear().toString(),u=parseInt(i.slice(0,2),10);if(i=parseInt(i,10),"-"===e[6])n=parseInt("".concat(u).concat(n),10)>i?"".concat(u-1).concat(n):"".concat(u).concat(n);else if(n="".concat(u-1).concat(n),i-parseInt(n,10)<100)return!1}a>60&&(a-=60),a<10&&(a="0".concat(a));var s="".concat(n,"/").concat(r,"/").concat(a);if(8===s.length){if(!(0,l.default)(s,"YY/MM/DD"))return!1}else if(!(0,l.default)(s,"YYYY/MM/DD"))return!1;return o.luhnCheck(e.replace(/\W/,""))},"uk-UA":function(e){for(var t=e.split("").map((function(e){return parseInt(e,10)})),n=[-1,5,7,9,4,6,10,5,7],r=0,a=0;a<n.length;a++)r+=t[a]*n[a];return r%11==10?0===t[9]:t[9]===r%11}};p["lb-LU"]=p["fr-LU"],p["lt-LT"]=p["et-EE"],p["nl-BE"]=p["fr-BE"],p["fr-CA"]=p["en-CA"];var h=/[-\\\/!@#$%\^&\*\(\)\+\=\[\]]+/g,m={"de-AT":h,"de-DE":/[\/\\]/g,"fr-BE":h};m["nl-BE"]=m["fr-BE"],e.exports=t.default,e.exports.default=t.default},8796:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return t=(0,a.default)(t,o),"string"==typeof e&&l[t.hourFormat][t.mode].test(e)};var r,a=(r=n(3610))&&r.__esModule?r:{default:r},o={hourFormat:"hour24",mode:"default"},l={hour24:{default:/^([01]?[0-9]|2[0-3]):([0-5][0-9])$/,withSeconds:/^([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/},hour12:{default:/^(0?[1-9]|1[0-2]):([0-5][0-9]) (A|P)M$/,withSeconds:/^(0?[1-9]|1[0-2]):([0-5][0-9]):([0-5][0-9]) (A|P)M$/}};e.exports=t.default,e.exports.default=t.default},7844:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,r.default)(e),!e||/[\s<>]/.test(e))return!1;if(0===e.indexOf("mailto:"))return!1;if((t=(0,l.default)(t,s)).validate_length&&e.length>=2083)return!1;if(!t.allow_fragments&&e.includes("#"))return!1;if(!t.allow_query_components&&(e.includes("?")||e.includes("&")))return!1;var n,i,f,p,h,m,A,v,g;if(A=e.split("#"),e=A.shift(),A=e.split("?"),e=A.shift(),(A=e.split("://")).length>1){if(n=A.shift().toLowerCase(),t.require_valid_protocol&&-1===t.protocols.indexOf(n))return!1}else{if(t.require_protocol)return!1;if("//"===e.slice(0,2)){if(!t.allow_protocol_relative_urls)return!1;A[0]=e.slice(2)}}if(""===(e=A.join("://")))return!1;if(A=e.split("/"),""===(e=A.shift())&&!t.require_host)return!0;if((A=e.split("@")).length>1){if(t.disallow_auth)return!1;if(""===A[0])return!1;if((i=A.shift()).indexOf(":")>=0&&i.split(":").length>2)return!1;var y=function(e){if(Array.isArray(e))return e}(g=i.split(":"))||function(e){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,r,a,o,l=[],i=!0,u=!1;try{for(a=(t=t.call(e)).next,!2;!(i=(n=a.call(t)).done)&&(l.push(n.value),2!==l.length);i=!0);}catch(e){u=!0,r=e}finally{try{if(!i&&null!=t.return&&(o=t.return(),Object(o)!==o))return}finally{if(u)throw r}}return l}}(g)||function(e){if(e){if("string"==typeof e)return u(e,2);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?u(e,2):void 0}}(g)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),b=y[0],E=y[1];if(""===b&&""===E)return!1}m=null,v=null;var x=(p=A.join("@")).match(c);if(x?(f="",v=x[1],m=x[2]||null):(f=(A=p.split(":")).shift(),A.length&&(m=A.join(":"))),null!==m&&m.length>0){if(h=parseInt(m,10),!/^[0-9]+$/.test(m)||h<=0||h>65535)return!1}else if(t.require_port)return!1;return t.host_whitelist?d(f,t.host_whitelist):""===f&&!t.require_host||!!((0,o.default)(f)||(0,a.default)(f,t)||v&&(0,o.default)(v,6))&&(f=f||v,!t.host_blacklist||!d(f,t.host_blacklist))};var r=i(n(3399)),a=i(n(7658)),o=i(n(5372)),l=i(n(3610));function i(e){return e&&e.__esModule?e:{default:e}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s={protocols:["http","https","ftp"],require_tld:!0,require_protocol:!1,require_host:!0,require_port:!1,require_valid_protocol:!0,allow_underscores:!1,allow_trailing_dot:!1,allow_protocol_relative_urls:!1,allow_fragments:!0,allow_query_components:!0,validate_length:!0},c=/^\[([^\]]+)\](?::([0-9]+))?$/;function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];if(e===r||(a=r,"[object RegExp]"===Object.prototype.toString.call(a)&&r.test(e)))return!0}var a;return!1}e.exports=t.default,e.exports.default=t.default},5186:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(e);var n=o[[void 0,null].includes(t)?"all":t];return!!n&&n.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o={1:/^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,2:/^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,3:/^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,4:/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,5:/^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,7:/^[0-9A-F]{8}-[0-9A-F]{4}-7[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,all:/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i};e.exports=t.default,e.exports.default=t.default},5577:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),e===e.toUpperCase()};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},5366:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,o.default)(e),(0,o.default)(t),t in u)return u[t](e);throw new Error("Invalid country code: '".concat(t,"'"))},t.vatMatchers=void 0;var a,o=(a=n(3399))&&a.__esModule?a:{default:a},l=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=r(e)&&"function"!=typeof e)return{default:e};var n=i(t);if(n&&n.has(e))return n.get(e);var a={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&{}.hasOwnProperty.call(e,l)){var u=o?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(a,l,u):a[l]=e[l]}return a.default=e,n&&n.set(e,a),a}(n(4834));function i(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(i=function(e){return e?n:t})(e)}var u=t.vatMatchers={AT:function(e){return/^(AT)?U\d{8}$/.test(e)},BE:function(e){return/^(BE)?\d{10}$/.test(e)},BG:function(e){return/^(BG)?\d{9,10}$/.test(e)},HR:function(e){return/^(HR)?\d{11}$/.test(e)},CY:function(e){return/^(CY)?\w{9}$/.test(e)},CZ:function(e){return/^(CZ)?\d{8,10}$/.test(e)},DK:function(e){return/^(DK)?\d{8}$/.test(e)},EE:function(e){return/^(EE)?\d{9}$/.test(e)},FI:function(e){return/^(FI)?\d{8}$/.test(e)},FR:function(e){return/^(FR)?\w{2}\d{9}$/.test(e)},DE:function(e){return/^(DE)?\d{9}$/.test(e)},EL:function(e){return/^(EL)?\d{9}$/.test(e)},HU:function(e){return/^(HU)?\d{8}$/.test(e)},IE:function(e){return/^(IE)?\d{7}\w{1}(W)?$/.test(e)},IT:function(e){return/^(IT)?\d{11}$/.test(e)},LV:function(e){return/^(LV)?\d{11}$/.test(e)},LT:function(e){return/^(LT)?\d{9,12}$/.test(e)},LU:function(e){return/^(LU)?\d{8}$/.test(e)},MT:function(e){return/^(MT)?\d{8}$/.test(e)},NL:function(e){return/^(NL)?\d{9}B\d{2}$/.test(e)},PL:function(e){return/^(PL)?(\d{10}|(\d{3}-\d{3}-\d{2}-\d{2})|(\d{3}-\d{2}-\d{2}-\d{3}))$/.test(e)},PT:function(e){var t=e.match(/^(PT)?(\d{9})$/);if(!t)return!1;var n=t[2],r=11-l.reverseMultiplyAndSum(n.split("").slice(0,8).map((function(e){return parseInt(e,10)})),9)%11;return r>9?0===parseInt(n[8],10):r===parseInt(n[8],10)},RO:function(e){return/^(RO)?\d{2,10}$/.test(e)},SK:function(e){return/^(SK)?\d{10}$/.test(e)},SI:function(e){return/^(SI)?\d{8}$/.test(e)},ES:function(e){return/^(ES)?\w\d{7}[A-Z]$/.test(e)},SE:function(e){return/^(SE)?\d{12}$/.test(e)},AL:function(e){return/^(AL)?\w{9}[A-Z]$/.test(e)},MK:function(e){return/^(MK)?\d{13}$/.test(e)},AU:function(e){if(!e.match(/^(AU)?(\d{11})$/))return!1;var t=[10,1,3,5,7,9,11,13,15,17,19];e=e.replace(/^AU/,"");for(var n=(parseInt(e.slice(0,1),10)-1).toString()+e.slice(1),r=0,a=0;a<11;a++)r+=t[a]*n.charAt(a);return 0!==r&&r%89==0},BY:function(e){return/^(УНП )?\d{9}$/.test(e)},CA:function(e){return/^(CA)?\d{9}$/.test(e)},IS:function(e){return/^(IS)?\d{5,6}$/.test(e)},IN:function(e){return/^(IN)?\d{15}$/.test(e)},ID:function(e){return/^(ID)?(\d{15}|(\d{2}.\d{3}.\d{3}.\d{1}-\d{3}.\d{3}))$/.test(e)},IL:function(e){return/^(IL)?\d{9}$/.test(e)},KZ:function(e){return/^(KZ)?\d{12}$/.test(e)},NZ:function(e){return/^(NZ)?\d{9}$/.test(e)},NG:function(e){return/^(NG)?(\d{12}|(\d{8}-\d{4}))$/.test(e)},NO:function(e){return/^(NO)?\d{9}MVA$/.test(e)},PH:function(e){return/^(PH)?(\d{12}|\d{3} \d{3} \d{3} \d{3})$/.test(e)},RU:function(e){return/^(RU)?(\d{10}|\d{12})$/.test(e)},SM:function(e){return/^(SM)?\d{5}$/.test(e)},SA:function(e){return/^(SA)?\d{15}$/.test(e)},RS:function(e){return/^(RS)?\d{9}$/.test(e)},CH:function(e){var t,n,r;return/^(CHE[- ]?)?(\d{9}|(\d{3}\.\d{3}\.\d{3})|(\d{3} \d{3} \d{3})) ?(TVA|MWST|IVA)?$/.test(e)&&(n=(t=e.match(/\d/g).map((function(e){return+e}))).pop(),r=[5,4,3,2,7,6,5,4],n===(11-t.reduce((function(e,t,n){return e+t*r[n]}),0)%11)%11)},TR:function(e){return/^(TR)?\d{10}$/.test(e)},UA:function(e){return/^(UA)?\d{12}$/.test(e)},GB:function(e){return/^GB((\d{3} \d{4} ([0-8][0-9]|9[0-6]))|(\d{9} \d{3})|(((GD[0-4])|(HA[5-9]))[0-9]{2}))$/.test(e)},UZ:function(e){return/^(UZ)?\d{9}$/.test(e)},AR:function(e){return/^(AR)?\d{11}$/.test(e)},BO:function(e){return/^(BO)?\d{7}$/.test(e)},BR:function(e){return/^(BR)?((\d{2}.\d{3}.\d{3}\/\d{4}-\d{2})|(\d{3}.\d{3}.\d{3}-\d{2}))$/.test(e)},CL:function(e){return/^(CL)?\d{8}-\d{1}$/.test(e)},CO:function(e){return/^(CO)?\d{10}$/.test(e)},CR:function(e){return/^(CR)?\d{9,12}$/.test(e)},EC:function(e){return/^(EC)?\d{13}$/.test(e)},SV:function(e){return/^(SV)?\d{4}-\d{6}-\d{3}-\d{1}$/.test(e)},GT:function(e){return/^(GT)?\d{7}-\d{1}$/.test(e)},HN:function(e){return/^(HN)?$/.test(e)},MX:function(e){return/^(MX)?\w{3,4}\d{6}\w{3}$/.test(e)},NI:function(e){return/^(NI)?\d{3}-\d{6}-\d{4}\w{1}$/.test(e)},PA:function(e){return/^(PA)?$/.test(e)},PY:function(e){return/^(PY)?\d{6,8}-\d{1}$/.test(e)},PE:function(e){return/^(PE)?\d{11}$/.test(e)},DO:function(e){return/^(DO)?(\d{11}|(\d{3}-\d{7}-\d{1})|[1,4,5]{1}\d{8}|([1,4,5]{1})-\d{2}-\d{5}-\d{1})$/.test(e)},UY:function(e){return/^(UY)?\d{12}$/.test(e)},VE:function(e){return/^(VE)?[J,G,V,E]{1}-(\d{9}|(\d{8}-\d{1}))$/.test(e)}}},1449:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),o.fullWidth.test(e)&&l.halfWidth.test(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r},o=n(9666),l=n(9534);e.exports=t.default,e.exports.default=t.default},629:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(e);for(var n=e.length-1;n>=0;n--)if(-1===t.indexOf(e[n]))return!1;return!0};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},2309:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(e);var n=t?new RegExp("^[".concat(t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"]+"),"g"):/^\s+/g;return e.replace(n,"")};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},2576:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){return(0,a.default)(e),"[object RegExp]"!==Object.prototype.toString.call(t)&&(t=new RegExp(t,n)),!!e.match(t)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},1128:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){t=(0,a.default)(t,o);var n=e.split("@"),r=n.pop(),d=[n.join("@"),r];if(d[1]=d[1].toLowerCase(),"gmail.com"===d[1]||"googlemail.com"===d[1]){if(t.gmail_remove_subaddress&&(d[0]=d[0].split("+")[0]),t.gmail_remove_dots&&(d[0]=d[0].replace(/\.+/g,c)),!d[0].length)return!1;(t.all_lowercase||t.gmail_lowercase)&&(d[0]=d[0].toLowerCase()),d[1]=t.gmail_convert_googlemaildotcom?"gmail.com":d[1]}else if(l.indexOf(d[1])>=0){if(t.icloud_remove_subaddress&&(d[0]=d[0].split("+")[0]),!d[0].length)return!1;(t.all_lowercase||t.icloud_lowercase)&&(d[0]=d[0].toLowerCase())}else if(i.indexOf(d[1])>=0){if(t.outlookdotcom_remove_subaddress&&(d[0]=d[0].split("+")[0]),!d[0].length)return!1;(t.all_lowercase||t.outlookdotcom_lowercase)&&(d[0]=d[0].toLowerCase())}else if(u.indexOf(d[1])>=0){if(t.yahoo_remove_subaddress){var f=d[0].split("-");d[0]=f.length>1?f.slice(0,-1).join("-"):f[0]}if(!d[0].length)return!1;(t.all_lowercase||t.yahoo_lowercase)&&(d[0]=d[0].toLowerCase())}else s.indexOf(d[1])>=0?((t.all_lowercase||t.yandex_lowercase)&&(d[0]=d[0].toLowerCase()),d[1]="yandex.ru"):t.all_lowercase&&(d[0]=d[0].toLowerCase());return d.join("@")};var r,a=(r=n(3610))&&r.__esModule?r:{default:r},o={all_lowercase:!0,gmail_lowercase:!0,gmail_remove_dots:!0,gmail_remove_subaddress:!0,gmail_convert_googlemaildotcom:!0,outlookdotcom_lowercase:!0,outlookdotcom_remove_subaddress:!0,yahoo_lowercase:!0,yahoo_remove_subaddress:!0,yandex_lowercase:!0,icloud_lowercase:!0,icloud_remove_subaddress:!0},l=["icloud.com","me.com"],i=["hotmail.at","hotmail.be","hotmail.ca","hotmail.cl","hotmail.co.il","hotmail.co.nz","hotmail.co.th","hotmail.co.uk","hotmail.com","hotmail.com.ar","hotmail.com.au","hotmail.com.br","hotmail.com.gr","hotmail.com.mx","hotmail.com.pe","hotmail.com.tr","hotmail.com.vn","hotmail.cz","hotmail.de","hotmail.dk","hotmail.es","hotmail.fr","hotmail.hu","hotmail.id","hotmail.ie","hotmail.in","hotmail.it","hotmail.jp","hotmail.kr","hotmail.lv","hotmail.my","hotmail.ph","hotmail.pt","hotmail.sa","hotmail.sg","hotmail.sk","live.be","live.co.uk","live.com","live.com.ar","live.com.mx","live.de","live.es","live.eu","live.fr","live.it","live.nl","msn.com","outlook.at","outlook.be","outlook.cl","outlook.co.il","outlook.co.nz","outlook.co.th","outlook.com","outlook.com.ar","outlook.com.au","outlook.com.br","outlook.com.gr","outlook.com.pe","outlook.com.tr","outlook.com.vn","outlook.cz","outlook.de","outlook.dk","outlook.es","outlook.fr","outlook.hu","outlook.id","outlook.ie","outlook.in","outlook.it","outlook.jp","outlook.kr","outlook.lv","outlook.my","outlook.ph","outlook.pt","outlook.sa","outlook.sg","outlook.sk","passport.com"],u=["rocketmail.com","yahoo.ca","yahoo.co.uk","yahoo.com","yahoo.de","yahoo.fr","yahoo.in","yahoo.it","ymail.com"],s=["yandex.ru","yandex.ua","yandex.kz","yandex.com","yandex.by","ya.ru"];function c(e){return e.length>1?e:""}e.exports=t.default,e.exports.default=t.default},2483:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,a.default)(e),t){var n=new RegExp("[".concat(t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"]+$"),"g");return e.replace(n,"")}for(var r=e.length-1;/\s/.test(e.charAt(r));)r-=1;return e.slice(0,r+1)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},561:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,r.default)(e);var n=t?"\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F":"\\x00-\\x1F\\x7F";return(0,a.default)(e,n)};var r=o(n(3399)),a=o(n(410));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default,e.exports.default=t.default},3214:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),t?"1"===e||/^true$/i.test(e):"0"!==e&&!/^false$/i.test(e)&&""!==e};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},3752:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),e=Date.parse(e),isNaN(e)?null:new Date(e)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},1371:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e)?parseFloat(e):NaN};var r,a=(r=n(995))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},855:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),parseInt(e,t||10)};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},317:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,r.default)((0,a.default)(e,t),t)};var r=o(n(2483)),a=o(n(2309));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default,e.exports.default=t.default},7677:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(e),e.replace(/&quot;/g,'"').replace(/&#x27;/g,"'").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&#x2F;/g,"/").replace(/&#x5C;/g,"\\").replace(/&#96;/g,"`").replace(/&amp;/g,"&")};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},4834:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iso7064Check=function(e){for(var t=10,n=0;n<e.length-1;n++)t=(parseInt(e[n],10)+t)%10==0?9:(parseInt(e[n],10)+t)%10*2%11;return(t=1===t?0:11-t)===parseInt(e[10],10)},t.luhnCheck=function(e){for(var t=0,n=!1,r=e.length-1;r>=0;r--){if(n){var a=2*parseInt(e[r],10);t+=a>9?a.toString().split("").map((function(e){return parseInt(e,10)})).reduce((function(e,t){return e+t}),0):a}else t+=parseInt(e[r],10);n=!n}return t%10==0},t.reverseMultiplyAndSum=function(e,t){for(var n=0,r=0;r<e.length;r++)n+=e[r]*(t-r);return n},t.verhoeffCheck=function(e){for(var t=[[0,1,2,3,4,5,6,7,8,9],[1,2,3,4,0,6,7,8,9,5],[2,3,4,0,1,7,8,9,5,6],[3,4,0,1,2,8,9,5,6,7],[4,0,1,2,3,9,5,6,7,8],[5,9,8,7,6,0,4,3,2,1],[6,5,9,8,7,1,0,4,3,2],[7,6,5,9,8,2,1,0,4,3],[8,7,6,5,9,3,2,1,0,4],[9,8,7,6,5,4,3,2,1,0]],n=[[0,1,2,3,4,5,6,7,8,9],[1,5,7,6,2,8,3,0,9,4],[5,8,0,3,7,9,6,1,4,2],[8,9,1,6,0,4,3,5,2,7],[9,4,5,3,1,2,6,8,7,0],[4,2,8,6,5,7,3,9,0,1],[2,7,9,3,8,0,6,4,1,5],[7,0,4,6,9,1,3,2,5,8]],r=e.split("").reverse().join(""),a=0,o=0;o<r.length;o++)a=t[a][n[o%8][parseInt(r[o],10)]];return 0===a}},3399:(e,t)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!("string"==typeof e||e instanceof String)){var t=n(e);throw null===e?t="null":"object"===t&&(t=e.constructor.name),new TypeError("Expected a string but received a ".concat(t))}},e.exports=t.default,e.exports.default=t.default},9265:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=function(e,t){return e.some((function(e){return t===e}))},e.exports=t.default,e.exports.default=t.default},3610:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;for(var n in t)void 0===e[n]&&(e[n]=t[n]);return e},e.exports=t.default,e.exports.default=t.default},5730:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.join("");return new RegExp(n,t)},e.exports=t.default,e.exports.default=t.default},5772:(e,t)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"object"===n(e)&&null!==e?e="function"==typeof e.toString?e.toString():"[object Object]":(null==e||isNaN(e)&&!e.length)&&(e=""),String(e)},e.exports=t.default,e.exports.default=t.default},1996:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,a.default)(e),e.replace(new RegExp("[^".concat(t,"]+"),"g"),"")};var r,a=(r=n(3399))&&r.__esModule?r:{default:r};e.exports=t.default,e.exports.default=t.default},5472:(e,t,n)=>{"use strict";e.exports=n.p+"088b1705af658d45bdc7.png"},6942:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=l(e,o(n)))}return e}function o(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return a.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)r.call(e,n)&&e[n]&&(t=l(t,n));return t}function l(e,t){return t?e?e+" "+t:e+t:e}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()}},o={};function l(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={id:e,exports:{}};return a[e](n,n.exports,l),n.exports}l.m=a,l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);l.r(a);var o={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>o[e]=()=>n[e]));return o.default=()=>n,l.d(a,o),a},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>e+"."+{64:"5bd927b2f6a6262e6889",549:"9a62d247f0005b08c189",645:"f70cc66df9d9fc285c1c",679:"917e492a74c406252e41",682:"4ba26f6572aabef882bb",901:"dd2ed086f3e4fcbfe805"}[e]+".js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="beauty_shop:",l.l=(e,t,a,o)=>{if(n[e])n[e].push(t);else{var i,u;if(void 0!==a)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var d=s[c];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==r+a){i=d;break}}i||(u=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,l.nc&&i.setAttribute("nonce",l.nc),i.setAttribute("data-webpack",r+a),i.src=e),n[e]=[t];var f=(t,r)=>{i.onerror=i.onload=null,clearTimeout(p);var a=n[e];if(delete n[e],i.parentNode&&i.parentNode.removeChild(i),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=f.bind(null,i.onerror),i.onload=f.bind(null,i.onload),u&&document.head.appendChild(i)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e})(),(()=>{var e={792:0};l.f.j=(t,n)=>{var r=l.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var a=new Promise(((n,a)=>r=e[t]=[n,a]));n.push(r[2]=a);var o=l.p+l.u(t),i=new Error;l.l(o,(n=>{if(l.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var a=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+a+": "+o+")",i.name="ChunkLoadError",i.type=a,i.request=o,r[1](i)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,a,o=n[0],i=n[1],u=n[2],s=0;if(o.some((t=>0!==e[t]))){for(r in i)l.o(i,r)&&(l.m[r]=i[r]);u&&u(l)}for(t&&t(n);s<o.length;s++)a=o[s],l.o(e,a)&&e[a]&&e[a][0](),e[a]=0},n=self.webpackChunkbeauty_shop=self.webpackChunkbeauty_shop||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),l.nc=void 0,(()=>{"use strict";var e=l(4848),t=l(6540),n=l.t(t,2),r=l(5338),a=l(5072),o=l.n(a),i=l(7825),u=l.n(i),s=l(7659),c=l.n(s),d=l(5056),f=l.n(d),p=l(540),h=l.n(p),m=l(1113),A=l.n(m),v=l(7199),g=l.n(v),y={};y.styleTagTransform=A(),y.setAttributes=f(),y.insert=c().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=h(),o()(g(),y),g()&&g().locals&&g().locals;var b,E=l(961),x=l.t(E,2);function C(){return C=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},C.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(b||(b={}));const S="popstate";function w(e,t){if(!1===e||null==e)throw new Error(t)}function _(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function k(e,t){return{usr:e.state,key:e.key,idx:t}}function B(e,t,n,r){return void 0===n&&(n=null),C({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?L(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function M(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function L(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var P;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(P||(P={}));const $=new Set(["lazy","caseSensitive","path","id","index","children"]);function R(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,a)=>{let o=[...n,String(a)],l="string"==typeof e.id?e.id:o.join("-");if(w(!0!==e.index||!e.children,"Cannot specify children on an index route"),w(!r[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=C({},e,t(e),{id:l});return r[l]=n,n}{let n=C({},e,t(e),{id:l,children:void 0});return r[l]=n,e.children&&(n.children=R(e.children,t,o,r)),n}}))}function N(e,t,n){return void 0===n&&(n="/"),O(e,t,n,!1)}function O(e,t,n,r){let a=Y(("string"==typeof t?L(t):t).pathname||"/",n);if(null==a)return null;let o=D(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let l=null;for(let e=0;null==l&&e<o.length;++e){let t=K(a);l=V(o[e],t,r)}return l}function D(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(w(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=ee([r,l.relativePath]),u=n.concat(l);e.children&&e.children.length>0&&(w(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),D(e.children,t,u,i)),(null!=e.path||e.index)&&t.push({path:i,score:W(i,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of T(e.path))a(e,t,n);else a(e,t)})),t}function T(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=T(r.join("/")),i=[];return i.push(...l.map((e=>""===e?o:[o,e].join("/")))),a&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}const I=/^:[\w-]+$/,F=3,j=2,U=1,z=10,Z=-2,H=e=>"*"===e;function W(e,t){let n=e.split("/"),r=n.length;return n.some(H)&&(r+=Z),t&&(r+=j),n.filter((e=>!H(e))).reduce(((e,t)=>e+(I.test(t)?F:""===t?U:z)),r)}function V(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",l=[];for(let e=0;e<r.length;++e){let i=r[e],u=e===r.length-1,s="/"===o?t:t.slice(o.length)||"/",c=G({path:i.relativePath,caseSensitive:i.caseSensitive,end:u},s),d=i.route;if(!c&&u&&n&&!r[r.length-1].route.index&&(c=G({path:i.relativePath,caseSensitive:i.caseSensitive,end:!1},s)),!c)return null;Object.assign(a,c.params),l.push({params:a,pathname:ee([o,c.pathname]),pathnameBase:te(ee([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=ee([o,c.pathnameBase]))}return l}function G(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),_("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const u=i[n];return e[r]=a&&!u?void 0:(u||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:l,pattern:e}}function K(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return _(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function Y(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function X(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function q(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function Q(e,t){let n=q(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function J(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=L(e):(a=C({},e),w(!a.pathname||!a.pathname.includes("?"),X("?","pathname","search",a)),w(!a.pathname||!a.pathname.includes("#"),X("#","pathname","hash",a)),w(!a.search||!a.search.includes("#"),X("#","search","hash",a)));let o,l=""===e||""===a.pathname,i=l?"/":a.pathname;if(null==i)o=n;else{let e=t.length-1;if(!r&&i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?L(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:ne(r),hash:re(a)}}(a,o),s=i&&"/"!==i&&i.endsWith("/"),c=(l||"."===i)&&n.endsWith("/");return u.pathname.endsWith("/")||!s&&!c||(u.pathname+="/"),u}const ee=e=>e.join("/").replace(/\/\/+/g,"/"),te=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),ne=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",re=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class ae{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function oe(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const le=["post","put","patch","delete"],ie=new Set(le),ue=["get",...le],se=new Set(ue),ce=new Set([301,302,303,307,308]),de=new Set([307,308]),fe={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},pe={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},he={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},me=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ae=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),ve="remix-router-transitions";function ge(e,t,n,r,a,o,l,i){let u,s;if(l){u=[];for(let e of t)if(u.push(e),e.route.id===l){s=e;break}}else u=t,s=t[t.length-1];let c=J(a||".",Q(u,o),Y(e.pathname,n)||e.pathname,"path"===i);if(null==a&&(c.search=e.search,c.hash=e.hash),(null==a||""===a||"."===a)&&s){let e=Qe(c.search);if(s.route.index&&!e)c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index";else if(!s.route.index&&e){let e=new URLSearchParams(c.search),t=e.getAll("index");e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();c.search=n?"?"+n:""}}return r&&"/"!==n&&(c.pathname="/"===c.pathname?n:ee([n,c.pathname])),M(c)}function ye(e,t,n,r){if(!r||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(r))return{path:n};if(r.formMethod&&(a=r.formMethod,!se.has(a.toLowerCase())))return{path:n,error:Fe(405,{method:r.formMethod})};var a;let o,l,i=()=>({path:n,error:Fe(400,{type:"invalid-body"})}),u=r.formMethod||"get",s=e?u.toUpperCase():u.toLowerCase(),c=Ue(n);if(void 0!==r.body){if("text/plain"===r.formEncType){if(!Ke(s))return i();let e="string"==typeof r.body?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce(((e,t)=>{let[n,r]=t;return""+e+n+"="+r+"\n"}),""):String(r.body);return{path:n,submission:{formMethod:s,formAction:c,formEncType:r.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===r.formEncType){if(!Ke(s))return i();try{let e="string"==typeof r.body?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:s,formAction:c,formEncType:r.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return i()}}}if(w("function"==typeof FormData,"FormData is not available in this environment"),r.formData)o=$e(r.formData),l=r.formData;else if(r.body instanceof FormData)o=$e(r.body),l=r.body;else if(r.body instanceof URLSearchParams)o=r.body,l=Re(o);else if(null==r.body)o=new URLSearchParams,l=new FormData;else try{o=new URLSearchParams(r.body),l=Re(o)}catch(e){return i()}let d={formMethod:s,formAction:c,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:l,json:void 0,text:void 0};if(Ke(d.formMethod))return{path:n,submission:d};let f=L(n);return t&&f.search&&Qe(f.search)&&o.append("index",""),f.search="?"+o,{path:M(f),submission:d}}function be(e,t,n){void 0===n&&(n=!1);let r=e.findIndex((e=>e.route.id===t));return r>=0?e.slice(0,n?r+1:r):e}function Ee(e,t,n,r,a,o,l,i,u,s,c,d,f,p,h,m){let A=m?He(m[1])?m[1].error:m[1].data:void 0,v=e.createURL(t.location),g=e.createURL(a),y=n;o&&t.errors?y=be(n,Object.keys(t.errors)[0],!0):m&&He(m[1])&&(y=be(n,m[0]));let b=m?m[1].statusCode:void 0,E=l&&b&&b>=400,x=y.filter(((e,n)=>{let{route:a}=e;if(a.lazy)return!0;if(null==a.loader)return!1;if(o)return xe(a,t.loaderData,t.errors);if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=void 0===e[n.route.id];return r||a}(t.loaderData,t.matches[n],e)||u.some((t=>t===e.route.id)))return!0;let l=t.matches[n],s=e;return Se(e,C({currentUrl:v,currentParams:l.params,nextUrl:g,nextParams:s.params},r,{actionResult:A,actionStatus:b,defaultShouldRevalidate:!E&&(i||v.pathname+v.search===g.pathname+g.search||v.search!==g.search||Ce(l,s))}))})),S=[];return d.forEach(((e,a)=>{if(o||!n.some((t=>t.route.id===e.routeId))||c.has(a))return;let l=N(p,e.path,h);if(!l)return void S.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let u=t.fetchers.get(a),d=Je(l,e.path),m=!1;f.has(a)?m=!1:s.has(a)?(s.delete(a),m=!0):m=u&&"idle"!==u.state&&void 0===u.data?i:Se(d,C({currentUrl:v,currentParams:t.matches[t.matches.length-1].params,nextUrl:g,nextParams:n[n.length-1].params},r,{actionResult:A,actionStatus:b,defaultShouldRevalidate:!E&&i})),m&&S.push({key:a,routeId:e.routeId,path:e.path,matches:l,match:d,controller:new AbortController})})),[x,S]}function xe(e,t,n){if(e.lazy)return!0;if(!e.loader)return!1;let r=null!=t&&void 0!==t[e.id],a=null!=n&&void 0!==n[e.id];return!(!r&&a)&&("function"==typeof e.loader&&!0===e.loader.hydrate||!r&&!a)}function Ce(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function Se(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}function we(e,t,n,r,a){var o;let l;if(e){let t=r[e];w(t,"No route found to patch children into: routeId = "+e),t.children||(t.children=[]),l=t.children}else l=n;let i=R(t.filter((e=>!l.some((t=>_e(e,t))))),a,[e||"_","patch",String((null==(o=l)?void 0:o.length)||"0")],r);l.push(...i)}function _e(e,t){return"id"in e&&"id"in t&&e.id===t.id||e.index===t.index&&e.path===t.path&&e.caseSensitive===t.caseSensitive&&(!(e.children&&0!==e.children.length||t.children&&0!==t.children.length)||e.children.every(((e,n)=>{var r;return null==(r=t.children)?void 0:r.some((t=>_e(e,t)))})))}async function ke(e){let{matches:t}=e,n=t.filter((e=>e.shouldLoad));return(await Promise.all(n.map((e=>e.resolve())))).reduce(((e,t,r)=>Object.assign(e,{[n[r].route.id]:t})),{})}async function Be(e){let{result:t,type:n}=e;if(Ge(t)){let e;try{let n=t.headers.get("Content-Type");e=n&&/\bapplication\/json\b/.test(n)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:P.error,error:e}}return n===P.error?{type:P.error,error:new ae(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:P.data,data:e,statusCode:t.status,headers:t.headers}}if(n===P.error){if(Ve(t)){var r,a;if(t.data instanceof Error)return{type:P.error,error:t.data,statusCode:null==(a=t.init)?void 0:a.status};t=new ae((null==(r=t.init)?void 0:r.status)||500,void 0,t.data)}return{type:P.error,error:t,statusCode:oe(t)?t.status:void 0}}var o,l,i,u;return function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(t)?{type:P.deferred,deferredData:t,statusCode:null==(o=t.init)?void 0:o.status,headers:(null==(l=t.init)?void 0:l.headers)&&new Headers(t.init.headers)}:Ve(t)?{type:P.data,data:t.data,statusCode:null==(i=t.init)?void 0:i.status,headers:null!=(u=t.init)&&u.headers?new Headers(t.init.headers):void 0}:{type:P.data,data:t}}function Me(e,t,n,r,a,o){let l=e.headers.get("Location");if(w(l,"Redirects returned/thrown from loaders/actions must have a Location header"),!me.test(l)){let i=r.slice(0,r.findIndex((e=>e.route.id===n))+1);l=ge(new URL(t.url),i,a,!0,l,o),e.headers.set("Location",l)}return e}function Le(e,t,n){if(me.test(e)){let r=e,a=r.startsWith("//")?new URL(t.protocol+r):new URL(r),o=null!=Y(a.pathname,n);if(a.origin===t.origin&&o)return a.pathname+a.search+a.hash}return e}function Pe(e,t,n,r){let a=e.createURL(Ue(t)).toString(),o={signal:n};if(r&&Ke(r.formMethod)){let{formMethod:e,formEncType:t}=r;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(r.json)):"text/plain"===t?o.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?o.body=$e(r.formData):o.body=r.formData}return new Request(a,o)}function $e(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function Re(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function Ne(e,t,n,r,a,o,l){let{loaderData:i,errors:u}=function(e,t,n,r,a){let o,l={},i=null,u=!1,s={},c=n&&He(n[1])?n[1].error:void 0;return e.forEach((n=>{if(!(n.route.id in t))return;let d=n.route.id,f=t[d];if(w(!We(f),"Cannot handle redirect results in processLoaderData"),He(f)){let t=f.error;if(void 0!==c&&(t=c,c=void 0),i=i||{},a)i[d]=t;else{let n=Te(e,d);null==i[n.route.id]&&(i[n.route.id]=t)}l[d]=void 0,u||(u=!0,o=oe(f.error)?f.error.status:500),f.headers&&(s[d]=f.headers)}else Ze(f)?(r.set(d,f.deferredData),l[d]=f.deferredData.data,null==f.statusCode||200===f.statusCode||u||(o=f.statusCode),f.headers&&(s[d]=f.headers)):(l[d]=f.data,f.statusCode&&200!==f.statusCode&&!u&&(o=f.statusCode),f.headers&&(s[d]=f.headers))})),void 0!==c&&n&&(i={[n[0]]:c},l[n[0]]=void 0),{loaderData:l,errors:i,statusCode:o||200,loaderHeaders:s}}(t,n,r,l,!1);return a.forEach((t=>{let{key:n,match:r,controller:a}=t,l=o[n];if(w(l,"Did not find corresponding fetcher result"),!a||!a.signal.aborted)if(He(l)){let t=Te(e.matches,null==r?void 0:r.route.id);u&&u[t.route.id]||(u=C({},u,{[t.route.id]:l.error})),e.fetchers.delete(n)}else if(We(l))w(!1,"Unhandled fetcher revalidation redirect");else if(Ze(l))w(!1,"Unhandled fetcher deferred data");else{let t=rt(l.data);e.fetchers.set(n,t)}})),{loaderData:i,errors:u}}function Oe(e,t,n,r){let a=C({},t);for(let o of n){let n=o.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(a[n]=t[n]):void 0!==e[n]&&o.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function De(e){return e?He(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function Te(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Ie(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Fe(e,t){let{pathname:n,routeId:r,method:a,type:o,message:l}=void 0===t?{}:t,i="Unknown Server Error",u="Unknown @remix-run/router error";return 400===e?(i="Bad Request",a&&n&&r?u="You made a "+a+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===o?u="defer() is not supported in actions":"invalid-body"===o&&(u="Unable to encode submission body")):403===e?(i="Forbidden",u='Route "'+r+'" does not match URL "'+n+'"'):404===e?(i="Not Found",u='No route matches URL "'+n+'"'):405===e&&(i="Method Not Allowed",a&&n&&r?u="You made a "+a.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':a&&(u='Invalid request method "'+a.toUpperCase()+'"')),new ae(e||500,i,new Error(u),!0)}function je(e){let t=Object.entries(e);for(let e=t.length-1;e>=0;e--){let[n,r]=t[e];if(We(r))return{key:n,result:r}}}function Ue(e){return M(C({},"string"==typeof e?L(e):e,{hash:""}))}function ze(e){return Ge(e.result)&&ce.has(e.result.status)}function Ze(e){return e.type===P.deferred}function He(e){return e.type===P.error}function We(e){return(e&&e.type)===P.redirect}function Ve(e){return"object"==typeof e&&null!=e&&"type"in e&&"data"in e&&"init"in e&&"DataWithResponseInit"===e.type}function Ge(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function Ke(e){return ie.has(e.toLowerCase())}async function Ye(e,t,n,r,a){let o=Object.entries(t);for(let l=0;l<o.length;l++){let[i,u]=o[l],s=e.find((e=>(null==e?void 0:e.route.id)===i));if(!s)continue;let c=r.find((e=>e.route.id===s.route.id)),d=null!=c&&!Ce(c,s)&&void 0!==(a&&a[s.route.id]);Ze(u)&&d&&await qe(u,n,!1).then((e=>{e&&(t[i]=e)}))}}async function Xe(e,t,n){for(let r=0;r<n.length;r++){let{key:a,routeId:o,controller:l}=n[r],i=t[a];e.find((e=>(null==e?void 0:e.route.id)===o))&&Ze(i)&&(w(l,"Expected an AbortController for revalidating fetcher deferred result"),await qe(i,l.signal,!0).then((e=>{e&&(t[a]=e)})))}}async function qe(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:P.data,data:e.deferredData.unwrappedData}}catch(e){return{type:P.error,error:e}}return{type:P.data,data:e.deferredData.data}}}function Qe(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Je(e,t){let n="string"==typeof t?L(t).search:t.search;if(e[e.length-1].route.index&&Qe(n||""))return e[e.length-1];let r=q(e);return r[r.length-1]}function et(e){let{formMethod:t,formAction:n,formEncType:r,text:a,formData:o,json:l}=e;if(t&&n&&r)return null!=a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:a}:null!=o?{formMethod:t,formAction:n,formEncType:r,formData:o,json:void 0,text:void 0}:void 0!==l?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:l,text:void 0}:void 0}function tt(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function nt(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function rt(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function at(){return at=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},at.apply(this,arguments)}Symbol("deferred");const ot=t.createContext(null),lt=t.createContext(null),it=t.createContext(null),ut=t.createContext(null),st=t.createContext({outlet:null,matches:[],isDataRoute:!1}),ct=t.createContext(null);function dt(){return null!=t.useContext(ut)}function ft(){return dt()||w(!1),t.useContext(ut).location}function pt(e){t.useContext(it).static||t.useLayoutEffect(e)}function ht(){let{isDataRoute:e}=t.useContext(st);return e?function(){let{router:e}=function(){let e=t.useContext(ot);return e||w(!1),e}(xt.UseNavigateStable),n=St(Ct.UseNavigateStable),r=t.useRef(!1);pt((()=>{r.current=!0}));let a=t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,at({fromRouteId:n},a)))}),[e,n]);return a}():function(){dt()||w(!1);let e=t.useContext(ot),{basename:n,future:r,navigator:a}=t.useContext(it),{matches:o}=t.useContext(st),{pathname:l}=ft(),i=JSON.stringify(Q(o,r.v7_relativeSplatPath)),u=t.useRef(!1);pt((()=>{u.current=!0}));let s=t.useCallback((function(t,r){if(void 0===r&&(r={}),!u.current)return;if("number"==typeof t)return void a.go(t);let o=J(t,JSON.parse(i),l,"path"===r.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:ee([n,o.pathname])),(r.replace?a.replace:a.push)(o,r.state,r)}),[n,a,i,l,e]);return s}()}const mt=t.createContext(null);function At(e,n){let{relative:r}=void 0===n?{}:n,{future:a}=t.useContext(it),{matches:o}=t.useContext(st),{pathname:l}=ft(),i=JSON.stringify(Q(o,a.v7_relativeSplatPath));return t.useMemo((()=>J(e,JSON.parse(i),l,"path"===r)),[e,i,l,r])}function vt(e,n,r,a){dt()||w(!1);let{navigator:o}=t.useContext(it),{matches:l}=t.useContext(st),i=l[l.length-1],u=i?i.params:{},s=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let c,d=ft();if(n){var f;let e="string"==typeof n?L(n):n;"/"===s||(null==(f=e.pathname)?void 0:f.startsWith(s))||w(!1),c=e}else c=d;let p=c.pathname||"/",h=p;if("/"!==s){let e=s.replace(/^\//,"").split("/");h="/"+p.replace(/^\//,"").split("/").slice(e.length).join("/")}let m=N(e,{pathname:h}),A=function(e,n,r,a){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===a&&(a=null),null==e){var l;if(!r)return null;if(r.errors)e=r.matches;else{if(!(null!=(l=a)&&l.v7_partialHydration&&0===n.length&&!r.initialized&&r.matches.length>0))return null;e=r.matches}}let i=e,u=null==(o=r)?void 0:o.errors;if(null!=u){let e=i.findIndex((e=>e.route.id&&void 0!==(null==u?void 0:u[e.route.id])));e>=0||w(!1),i=i.slice(0,Math.min(i.length,e+1))}let s=!1,c=-1;if(r&&a&&a.v7_partialHydration)for(let e=0;e<i.length;e++){let t=i[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(c=e),t.route.id){let{loaderData:e,errors:n}=r,a=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||a){s=!0,i=c>=0?i.slice(0,c+1):[i[0]];break}}}return i.reduceRight(((e,a,o)=>{let l,d=!1,f=null,p=null;var h;r&&(l=u&&a.route.id?u[a.route.id]:void 0,f=a.route.errorElement||yt,s&&(c<0&&0===o?(wt[h="route-fallback"]||(wt[h]=!0),d=!0,p=null):c===o&&(d=!0,p=a.route.hydrateFallbackElement||null)));let m=n.concat(i.slice(0,o+1)),A=()=>{let n;return n=l?f:d?p:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(Et,{match:a,routeContext:{outlet:e,matches:m,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(bt,{location:r.location,revalidation:r.revalidation,component:f,error:l,children:A(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):A()}),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:ee([s,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:ee([s,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,r,a);return n&&A?t.createElement(ut.Provider,{value:{location:at({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:b.Pop}},A):A}function gt(){let e=function(){var e;let n=t.useContext(ct),r=function(){let e=t.useContext(lt);return e||w(!1),e}(Ct.UseRouteError),a=St(Ct.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[a]}(),n=oe(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const yt=t.createElement(gt,null);class bt extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(st.Provider,{value:this.props.routeContext},t.createElement(ct.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Et(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(ot);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(st.Provider,{value:n},a)}var xt=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(xt||{}),Ct=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Ct||{});function St(e){let n=function(){let e=t.useContext(st);return e||w(!1),e}(),r=n.matches[n.matches.length-1];return r.route.id||w(!1),r.route.id}const wt={},_t={},kt=(e,t,n)=>{var r;_t[r="⚠️ React Router Future Flag Warning: "+t+". You can use the `"+e+"` future flag to opt-in early. For more information, see "+n+"."]||(_t[r]=!0,console.warn(r))};function Bt(e){return function(e){let n=t.useContext(st).outlet;return n?t.createElement(mt.Provider,{value:e},n):n}(e.context)}function Mt(e){let{basename:n="/",children:r=null,location:a,navigationType:o=b.Pop,navigator:l,static:i=!1,future:u}=e;dt()&&w(!1);let s=n.replace(/^\/*/,"/"),c=t.useMemo((()=>({basename:s,navigator:l,static:i,future:at({v7_relativeSplatPath:!1},u)})),[s,u,l,i]);"string"==typeof a&&(a=L(a));let{pathname:d="/",search:f="",hash:p="",state:h=null,key:m="default"}=a,A=t.useMemo((()=>{let e=Y(d,s);return null==e?null:{location:{pathname:e,search:f,hash:p,state:h,key:m},navigationType:o}}),[s,d,f,p,h,m,o]);return null==A?null:t.createElement(it.Provider,{value:c},t.createElement(ut.Provider,{children:r,value:A}))}function Lt(){return Lt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Lt.apply(this,arguments)}function Pt(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const $t=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"],Rt=["aria-current","caseSensitive","className","end","style","to","viewTransition","children"];try{window.__reactRouterVersion="6"}catch(e){}function Nt(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new ae(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack="",n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}const Ot=t.createContext({isTransitioning:!1}),Dt=t.createContext(new Map),Tt=n.startTransition,It=x.flushSync;function Ft(e){It?It(e):e()}n.useId;class jt{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}}function Ut(e){let{fallbackElement:n,router:r,future:a}=e,[o,l]=t.useState(r.state),[i,u]=t.useState(),[s,c]=t.useState({isTransitioning:!1}),[d,f]=t.useState(),[p,h]=t.useState(),[m,A]=t.useState(),v=t.useRef(new Map),{v7_startTransition:g}=a||{},y=t.useCallback((e=>{g?function(e){Tt?Tt(e):e()}(e):e()}),[g]),b=t.useCallback(((e,t)=>{let{deletedFetchers:n,flushSync:a,viewTransitionOpts:o}=t;n.forEach((e=>v.current.delete(e))),e.fetchers.forEach(((e,t)=>{void 0!==e.data&&v.current.set(t,e.data)}));let i=null==r.window||null==r.window.document||"function"!=typeof r.window.document.startViewTransition;if(o&&!i){if(a){Ft((()=>{p&&(d&&d.resolve(),p.skipTransition()),c({isTransitioning:!0,flushSync:!0,currentLocation:o.currentLocation,nextLocation:o.nextLocation})}));let t=r.window.document.startViewTransition((()=>{Ft((()=>l(e)))}));return t.finished.finally((()=>{Ft((()=>{f(void 0),h(void 0),u(void 0),c({isTransitioning:!1})}))})),void Ft((()=>h(t)))}p?(d&&d.resolve(),p.skipTransition(),A({state:e,currentLocation:o.currentLocation,nextLocation:o.nextLocation})):(u(e),c({isTransitioning:!0,flushSync:!1,currentLocation:o.currentLocation,nextLocation:o.nextLocation}))}else a?Ft((()=>l(e))):y((()=>l(e)))}),[r.window,p,d,v,y]);t.useLayoutEffect((()=>r.subscribe(b)),[r,b]),t.useEffect((()=>{s.isTransitioning&&!s.flushSync&&f(new jt)}),[s]),t.useEffect((()=>{if(d&&i&&r.window){let e=i,t=d.promise,n=r.window.document.startViewTransition((async()=>{y((()=>l(e))),await t}));n.finished.finally((()=>{f(void 0),h(void 0),u(void 0),c({isTransitioning:!1})})),h(n)}}),[y,i,d,r.window]),t.useEffect((()=>{d&&i&&o.location.key===i.location.key&&d.resolve()}),[d,p,o.location,i]),t.useEffect((()=>{!s.isTransitioning&&m&&(u(m.state),c({isTransitioning:!0,flushSync:!1,currentLocation:m.currentLocation,nextLocation:m.nextLocation}),A(void 0))}),[s.isTransitioning,m]),t.useEffect((()=>{}),[]);let E=t.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:e=>r.navigate(e),push:(e,t,n)=>r.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>r.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),x=r.basename||"/",C=t.useMemo((()=>({router:r,navigator:E,static:!1,basename:x})),[r,E,x]),S=t.useMemo((()=>({v7_relativeSplatPath:r.future.v7_relativeSplatPath})),[r.future.v7_relativeSplatPath]);return t.useEffect((()=>function(e,t){null!=e&&e.v7_startTransition||kt("v7_startTransition","React Router will begin wrapping state updates in `React.startTransition` in v7","https://reactrouter.com/v6/upgrading/future#v7_starttransition"),null!=e&&e.v7_relativeSplatPath||t&&t.v7_relativeSplatPath||kt("v7_relativeSplatPath","Relative route resolution within Splat routes is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath"),t&&(t.v7_fetcherPersist||kt("v7_fetcherPersist","The persistence behavior of fetchers is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist"),t.v7_normalizeFormMethod||kt("v7_normalizeFormMethod","Casing of `formMethod` fields is being normalized to uppercase in v7","https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod"),t.v7_partialHydration||kt("v7_partialHydration","`RouterProvider` hydration behavior is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_partialhydration"),t.v7_skipActionErrorRevalidation||kt("v7_skipActionErrorRevalidation","The revalidation behavior after 4xx/5xx `action` responses is changing in v7","https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation"))}(a,r.future)),[a,r.future]),t.createElement(t.Fragment,null,t.createElement(ot.Provider,{value:C},t.createElement(lt.Provider,{value:o},t.createElement(Dt.Provider,{value:v.current},t.createElement(Ot.Provider,{value:s},t.createElement(Mt,{basename:x,location:o.location,navigationType:o.historyAction,navigator:E,future:S},o.initialized||r.future.v7_partialHydration?t.createElement(zt,{routes:r.routes,future:r.future,state:o}):n))))),null)}const zt=t.memo(Zt);function Zt(e){let{routes:t,future:n,state:r}=e;return vt(t,void 0,r,n)}const Ht="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Wt=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Vt=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:l,replace:i,state:u,target:s,to:c,preventScrollReset:d,viewTransition:f}=e,p=Pt(e,$t),{basename:h}=t.useContext(it),m=!1;if("string"==typeof c&&Wt.test(c)&&(r=c,Ht))try{let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=Y(t.pathname,h);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:m=!0}catch(e){}let A=function(e,n){let{relative:r}=void 0===n?{}:n;dt()||w(!1);let{basename:a,navigator:o}=t.useContext(it),{hash:l,pathname:i,search:u}=At(e,{relative:r}),s=i;return"/"!==a&&(s="/"===i?a:ee([a,i])),o.createHref({pathname:s,search:u,hash:l})}(c,{relative:o}),v=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:l,relative:i,viewTransition:u}=void 0===n?{}:n,s=ht(),c=ft(),d=At(e,{relative:i});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:M(c)===M(d);s(e,{replace:n,state:o,preventScrollReset:l,relative:i,viewTransition:u})}}),[c,s,d,a,o,r,e,l,i,u])}(c,{replace:i,state:u,target:s,preventScrollReset:d,relative:o,viewTransition:f});return t.createElement("a",Lt({},p,{href:r||A,onClick:m||l?a:function(e){a&&a(e),e.defaultPrevented||v(e)},ref:n,target:s}))})),Gt=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:a=!1,className:o="",end:l=!1,style:i,to:u,viewTransition:s,children:c}=e,d=Pt(e,Rt),f=At(u,{relative:d.relative}),p=ft(),h=t.useContext(lt),{navigator:m,basename:A}=t.useContext(it),v=null!=h&&function(e,n){void 0===n&&(n={});let r=t.useContext(Ot);null==r&&w(!1);let{basename:a}=function(){let e=t.useContext(ot);return e||w(!1),e}(Kt.useViewTransitionState),o=At(e,{relative:n.relative});if(!r.isTransitioning)return!1;let l=Y(r.currentLocation.pathname,a)||r.currentLocation.pathname,i=Y(r.nextLocation.pathname,a)||r.nextLocation.pathname;return null!=G(o.pathname,i)||null!=G(o.pathname,l)}(f)&&!0===s,g=m.encodeLocation?m.encodeLocation(f).pathname:f.pathname,y=p.pathname,b=h&&h.navigation&&h.navigation.location?h.navigation.location.pathname:null;a||(y=y.toLowerCase(),b=b?b.toLowerCase():null,g=g.toLowerCase()),b&&A&&(b=Y(b,A)||b);const E="/"!==g&&g.endsWith("/")?g.length-1:g.length;let x,C=y===g||!l&&y.startsWith(g)&&"/"===y.charAt(E),S=null!=b&&(b===g||!l&&b.startsWith(g)&&"/"===b.charAt(g.length)),_={isActive:C,isPending:S,isTransitioning:v},k=C?r:void 0;x="function"==typeof o?o(_):[o,C?"active":null,S?"pending":null,v?"transitioning":null].filter(Boolean).join(" ");let B="function"==typeof i?i(_):i;return t.createElement(Vt,Lt({},d,{"aria-current":k,className:x,ref:n,style:B,to:u,viewTransition:s}),"function"==typeof c?c(_):c)}));var Kt,Yt;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Kt||(Kt={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Yt||(Yt={}));var Xt=l(715),qt=l.n(Xt),Qt={};Qt.styleTagTransform=A(),Qt.setAttributes=f(),Qt.insert=c().bind(null,"head"),Qt.domAPI=u(),Qt.insertStyleElement=h(),o()(qt(),Qt);const Jt=qt()&&qt().locals?qt().locals:void 0,en=l.p+"87663a869817a0c46489.svg",tn=l.p+"a4ec522dd247b8f3790e.svg",nn=l.p+"958e54c0f9cf675e19c5.svg";var rn=l(9839),an=l.n(rn),on={};on.styleTagTransform=A(),on.setAttributes=f(),on.insert=c().bind(null,"head"),on.domAPI=u(),on.insertStyleElement=h(),o()(an(),on);const ln=an()&&an().locals?an().locals:void 0;var un=l(452),sn=l.n(un),cn={};cn.styleTagTransform=A(),cn.setAttributes=f(),cn.insert=c().bind(null,"head"),cn.domAPI=u(),cn.insertStyleElement=h(),o()(sn(),cn);const dn=sn()&&sn().locals?sn().locals:void 0,fn=l.p+"b5d5a1cd9850968aecab.png";var pn=l(6942),hn=l.n(pn),mn=l(6234),An=l.n(mn),vn={};vn.styleTagTransform=A(),vn.setAttributes=f(),vn.insert=c().bind(null,"head"),vn.domAPI=u(),vn.insertStyleElement=h(),o()(An(),vn),An()&&An().locals&&An().locals;const gn=t=>{var{classNames:n}=t,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["classNames"]);return(0,e.jsx)("input",Object.assign({className:hn()(mn.input,n)},r))};var yn=l(256),bn=l(4744),En=l.n(bn),xn={};xn.styleTagTransform=A(),xn.setAttributes=f(),xn.insert=c().bind(null,"head"),xn.domAPI=u(),xn.insertStyleElement=h(),o()(En(),xn);const Cn=En()&&En().locals?En().locals:void 0,Sn=e=>{const{children:t,element:n=document.body}=e;return(0,E.createPortal)(t,n)},wn=({children:t,onClose:n})=>(0,e.jsx)(Sn,{children:(0,e.jsx)("div",{className:Cn.uiModalOverlay,children:(0,e.jsxs)("div",{className:Cn.uiModalContent,children:[(0,e.jsx)("button",{className:Cn.uiModalCloseButton,onClick:n,children:"X"}),t]})})});var _n=l(3856),kn=l.n(_n),Bn={};Bn.styleTagTransform=A(),Bn.setAttributes=f(),Bn.insert=c().bind(null,"head"),Bn.domAPI=u(),Bn.insertStyleElement=h(),o()(kn(),Bn);const Mn=kn()&&kn().locals?kn().locals:void 0;var Ln=l(4471),Pn=e=>"checkbox"===e.type,$n=e=>e instanceof Date,Rn=e=>null==e;const Nn=e=>"object"==typeof e;var On=e=>!Rn(e)&&!Array.isArray(e)&&Nn(e)&&!$n(e),Dn="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function Tn(e){let t;const n=Array.isArray(e),r="undefined"!=typeof FileList&&e instanceof FileList;if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else{if(Dn&&(e instanceof Blob||r)||!n&&!On(e))return e;if(t=n?[]:{},n||(e=>{const t=e.constructor&&e.constructor.prototype;return On(t)&&t.hasOwnProperty("isPrototypeOf")})(e))for(const n in e)e.hasOwnProperty(n)&&(t[n]=Tn(e[n]));else t=e}return t}var In=e=>Array.isArray(e)?e.filter(Boolean):[],Fn=e=>void 0===e,jn=(e,t,n)=>{if(!t||!On(e))return n;const r=In(t.split(/[,[\].]+?/)).reduce(((e,t)=>Rn(e)?e:e[t]),e);return Fn(r)||r===e?Fn(e[t])?n:e[t]:r},Un=e=>"boolean"==typeof e,zn=e=>/^\w*$/.test(e),Zn=e=>In(e.replace(/["|']|\]/g,"").split(/\.|\[/)),Hn=(e,t,n)=>{let r=-1;const a=zn(t)?[t]:Zn(t),o=a.length,l=o-1;for(;++r<o;){const t=a[r];let o=n;if(r!==l){const n=e[t];o=On(n)||Array.isArray(n)?n:isNaN(+a[r+1])?{}:[]}if("__proto__"===t||"constructor"===t||"prototype"===t)return;e[t]=o,e=e[t]}return e};const Wn="onChange",Vn="onSubmit",Gn="all",Kn="pattern",Yn="required";t.createContext(null);var Xn=(e,t,n,r=!0)=>{const a={defaultValues:t._defaultValues};for(const o in e)Object.defineProperty(a,o,{get:()=>{const a=o;return t._proxyFormState[a]!==Gn&&(t._proxyFormState[a]=!r||Gn),n&&(n[a]=!0),e[a]}});return a},qn=e=>On(e)&&!Object.keys(e).length,Qn=e=>Array.isArray(e)?e:[e];var Jn=e=>"string"==typeof e,er=(e,t,n,r,a)=>t?{...n[e],types:{...n[e]&&n[e].types?n[e].types:{},[r]:a||!0}}:{},tr=e=>({isOnSubmit:!e||e===Vn,isOnBlur:"onBlur"===e,isOnChange:e===Wn,isOnAll:e===Gn,isOnTouch:"onTouched"===e}),nr=(e,t,n)=>!n&&(t.watchAll||t.watch.has(e)||[...t.watch].some((t=>e.startsWith(t)&&/^\.\w+/.test(e.slice(t.length)))));const rr=(e,t,n,r)=>{for(const a of n||Object.keys(e)){const n=jn(e,a);if(n){const{_f:e,...o}=n;if(e){if(e.refs&&e.refs[0]&&t(e.refs[0],a)&&!r)return!0;if(e.ref&&t(e.ref,e.name)&&!r)return!0;if(rr(o,t))break}else if(On(o)&&rr(o,t))break}}};var ar=(e,t,n)=>{const r=Qn(jn(e,n));return Hn(r,"root",t[n]),Hn(e,n,r),e},or=e=>"file"===e.type,lr=e=>"function"==typeof e,ir=e=>{if(!Dn)return!1;const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},ur=e=>Jn(e),sr=e=>"radio"===e.type,cr=e=>e instanceof RegExp;const dr={value:!1,isValid:!1},fr={value:!0,isValid:!0};var pr=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!Fn(e[0].attributes.value)?Fn(e[0].value)||""===e[0].value?fr:{value:e[0].value,isValid:!0}:fr:dr}return dr};const hr={isValid:!1,value:null};var mr=e=>Array.isArray(e)?e.reduce(((e,t)=>t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e),hr):hr;function Ar(e,t,n="validate"){if(ur(e)||Array.isArray(e)&&e.every(ur)||Un(e)&&!e)return{type:n,message:ur(e)?e:"",ref:t}}var vr=e=>On(e)&&!cr(e)?e:{value:e,message:""},gr=async(e,t,n,r,a)=>{const{ref:o,refs:l,required:i,maxLength:u,minLength:s,min:c,max:d,pattern:f,validate:p,name:h,valueAsNumber:m,mount:A,disabled:v}=e._f,g=jn(t,h);if(!A||v)return{};const y=l?l[0]:o,b=e=>{r&&y.reportValidity&&(y.setCustomValidity(Un(e)?"":e||""),y.reportValidity())},E={},x=sr(o),C=Pn(o),S=x||C,w=(m||or(o))&&Fn(o.value)&&Fn(g)||ir(o)&&""===o.value||""===g||Array.isArray(g)&&!g.length,_=er.bind(null,h,n,E),k=(e,t,n,r="maxLength",a="minLength")=>{const l=e?t:n;E[h]={type:e?r:a,message:l,ref:o,..._(e?r:a,l)}};if(a?!Array.isArray(g)||!g.length:i&&(!S&&(w||Rn(g))||Un(g)&&!g||C&&!pr(l).isValid||x&&!mr(l).isValid)){const{value:e,message:t}=ur(i)?{value:!!i,message:i}:vr(i);if(e&&(E[h]={type:Yn,message:t,ref:y,..._(Yn,t)},!n))return b(t),E}if(!(w||Rn(c)&&Rn(d))){let e,t;const r=vr(d),a=vr(c);if(Rn(g)||isNaN(g)){const n=o.valueAsDate||new Date(g),l=e=>new Date((new Date).toDateString()+" "+e),i="time"==o.type,u="week"==o.type;Jn(r.value)&&g&&(e=i?l(g)>l(r.value):u?g>r.value:n>new Date(r.value)),Jn(a.value)&&g&&(t=i?l(g)<l(a.value):u?g<a.value:n<new Date(a.value))}else{const n=o.valueAsNumber||(g?+g:g);Rn(r.value)||(e=n>r.value),Rn(a.value)||(t=n<a.value)}if((e||t)&&(k(!!e,r.message,a.message,"max","min"),!n))return b(E[h].message),E}if((u||s)&&!w&&(Jn(g)||a&&Array.isArray(g))){const e=vr(u),t=vr(s),r=!Rn(e.value)&&g.length>+e.value,a=!Rn(t.value)&&g.length<+t.value;if((r||a)&&(k(r,e.message,t.message),!n))return b(E[h].message),E}if(f&&!w&&Jn(g)){const{value:e,message:t}=vr(f);if(cr(e)&&!g.match(e)&&(E[h]={type:Kn,message:t,ref:o,..._(Kn,t)},!n))return b(t),E}if(p)if(lr(p)){const e=Ar(await p(g,t),y);if(e&&(E[h]={...e,..._("validate",e.message)},!n))return b(e.message),E}else if(On(p)){let e={};for(const r in p){if(!qn(e)&&!n)break;const a=Ar(await p[r](g,t),y,r);a&&(e={...a,..._(r,a.message)},b(a.message),n&&(E[h]=e))}if(!qn(e)&&(E[h]={ref:y,...e},!n))return E}return b(!0),E};function yr(e,t){const n=Array.isArray(t)?t:zn(t)?[t]:Zn(t),r=1===n.length?e:function(e,t){const n=t.slice(0,-1).length;let r=0;for(;r<n;)e=Fn(e)?r++:e[t[r++]];return e}(e,n),a=n.length-1,o=n[a];return r&&delete r[o],0!==a&&(On(r)&&qn(r)||Array.isArray(r)&&function(e){for(const t in e)if(e.hasOwnProperty(t)&&!Fn(e[t]))return!1;return!0}(r))&&yr(e,n.slice(0,-1)),e}var br=()=>{let e=[];return{get observers(){return e},next:t=>{for(const n of e)n.next&&n.next(t)},subscribe:t=>(e.push(t),{unsubscribe:()=>{e=e.filter((e=>e!==t))}}),unsubscribe:()=>{e=[]}}},Er=e=>Rn(e)||!Nn(e);function xr(e,t){if(Er(e)||Er(t))return e===t;if($n(e)&&$n(t))return e.getTime()===t.getTime();const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const a of n){const n=e[a];if(!r.includes(a))return!1;if("ref"!==a){const e=t[a];if($n(n)&&$n(e)||On(n)&&On(e)||Array.isArray(n)&&Array.isArray(e)?!xr(n,e):n!==e)return!1}}return!0}var Cr=e=>"select-multiple"===e.type,Sr=e=>ir(e)&&e.isConnected,wr=e=>{for(const t in e)if(lr(e[t]))return!0;return!1};function _r(e,t={}){const n=Array.isArray(e);if(On(e)||n)for(const n in e)Array.isArray(e[n])||On(e[n])&&!wr(e[n])?(t[n]=Array.isArray(e[n])?[]:{},_r(e[n],t[n])):Rn(e[n])||(t[n]=!0);return t}function kr(e,t,n){const r=Array.isArray(e);if(On(e)||r)for(const r in e)Array.isArray(e[r])||On(e[r])&&!wr(e[r])?Fn(t)||Er(n[r])?n[r]=Array.isArray(e[r])?_r(e[r],[]):{..._r(e[r])}:kr(e[r],Rn(t)?{}:t[r],n[r]):n[r]=!xr(e[r],t[r]);return n}var Br=(e,t)=>kr(e,t,_r(t)),Mr=(e,{valueAsNumber:t,valueAsDate:n,setValueAs:r})=>Fn(e)?e:t?""===e?NaN:e?+e:e:n&&Jn(e)?new Date(e):r?r(e):e;function Lr(e){const t=e.ref;if(!(e.refs?e.refs.every((e=>e.disabled)):t.disabled))return or(t)?t.files:sr(t)?mr(e.refs).value:Cr(t)?[...t.selectedOptions].map((({value:e})=>e)):Pn(t)?pr(e.refs).value:Mr(Fn(t.value)?e.ref.value:t.value,e)}var Pr=e=>Fn(e)?e:cr(e)?e.source:On(e)?cr(e.value)?e.value.source:e.value:e;const $r="AsyncFunction";function Rr(e,t,n){const r=jn(e,n);if(r||zn(n))return{error:r,name:n};const a=n.split(".");for(;a.length;){const r=a.join("."),o=jn(t,r),l=jn(e,r);if(o&&!Array.isArray(o)&&n!==r)return{name:n};if(l&&l.type)return{name:r,error:l};a.pop()}return{name:n}}const Nr={mode:Vn,reValidateMode:Wn,shouldFocusError:!0};function Or(e={}){let t,n={...Nr,...e},r={submitCount:0,isDirty:!1,isLoading:lr(n.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},validatingFields:{},errors:n.errors||{},disabled:n.disabled||!1},a={},o=(On(n.defaultValues)||On(n.values))&&Tn(n.defaultValues||n.values)||{},l=n.shouldUnregister?{}:Tn(o),i={action:!1,mount:!1,watch:!1},u={mount:new Set,unMount:new Set,array:new Set,watch:new Set},s=0;const c={isDirty:!1,dirtyFields:!1,validatingFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},d={values:br(),array:br(),state:br()},f=tr(n.mode),p=tr(n.reValidateMode),h=n.criteriaMode===Gn,m=async e=>{if(!n.disabled&&(c.isValid||e)){const e=n.resolver?qn((await y()).errors):await b(a,!0);e!==r.isValid&&d.state.next({isValid:e})}},A=(e,t)=>{n.disabled||!c.isValidating&&!c.validatingFields||((e||Array.from(u.mount)).forEach((e=>{e&&(t?Hn(r.validatingFields,e,t):yr(r.validatingFields,e))})),d.state.next({validatingFields:r.validatingFields,isValidating:!qn(r.validatingFields)}))},v=(e,t,n,r)=>{const u=jn(a,e);if(u){const a=jn(l,e,Fn(n)?jn(o,e):n);Fn(a)||r&&r.defaultChecked||t?Hn(l,e,t?a:Lr(u._f)):C(e,a),i.mount&&m()}},g=(e,t,l,i,u)=>{let s=!1,f=!1;const p={name:e};if(!n.disabled){const n=!!(jn(a,e)&&jn(a,e)._f&&jn(a,e)._f.disabled);if(!l||i){c.isDirty&&(f=r.isDirty,r.isDirty=p.isDirty=E(),s=f!==p.isDirty);const a=n||xr(jn(o,e),t);f=!(n||!jn(r.dirtyFields,e)),a||n?yr(r.dirtyFields,e):Hn(r.dirtyFields,e,!0),p.dirtyFields=r.dirtyFields,s=s||c.dirtyFields&&f!==!a}if(l){const t=jn(r.touchedFields,e);t||(Hn(r.touchedFields,e,l),p.touchedFields=r.touchedFields,s=s||c.touchedFields&&t!==l)}s&&u&&d.state.next(p)}return s?p:{}},y=async e=>{A(e,!0);const t=await n.resolver(l,n.context,((e,t,n,r)=>{const a={};for(const n of e){const e=jn(t,n);e&&Hn(a,n,e._f)}return{criteriaMode:n,names:[...e],fields:a,shouldUseNativeValidation:r}})(e||u.mount,a,n.criteriaMode,n.shouldUseNativeValidation));return A(e),t},b=async(e,t,a={valid:!0})=>{for(const i in e){const s=e[i];if(s){const{_f:e,...d}=s;if(e){const d=u.array.has(e.name),f=s._f&&!!(o=s._f)&&!!o.validate&&!!(lr(o.validate)&&o.validate.constructor.name===$r||On(o.validate)&&Object.values(o.validate).find((e=>e.constructor.name===$r)));f&&c.validatingFields&&A([i],!0);const p=await gr(s,l,h,n.shouldUseNativeValidation&&!t,d);if(f&&c.validatingFields&&A([i]),p[e.name]&&(a.valid=!1,t))break;!t&&(jn(p,e.name)?d?ar(r.errors,p,e.name):Hn(r.errors,e.name,p[e.name]):yr(r.errors,e.name))}!qn(d)&&await b(d,t,a)}}var o;return a.valid},E=(e,t)=>!n.disabled&&(e&&t&&Hn(l,e,t),!xr(M(),o)),x=(e,t,n)=>((e,t,n,r,a)=>Jn(e)?(r&&t.watch.add(e),jn(n,e,a)):Array.isArray(e)?e.map((e=>(r&&t.watch.add(e),jn(n,e)))):(r&&(t.watchAll=!0),n))(e,u,{...i.mount?l:Fn(t)?o:Jn(e)?{[e]:t}:t},n,t),C=(e,t,n={})=>{const r=jn(a,e);let o=t;if(r){const n=r._f;n&&(!n.disabled&&Hn(l,e,Mr(t,n)),o=ir(n.ref)&&Rn(t)?"":t,Cr(n.ref)?[...n.ref.options].forEach((e=>e.selected=o.includes(e.value))):n.refs?Pn(n.ref)?n.refs.length>1?n.refs.forEach((e=>(!e.defaultChecked||!e.disabled)&&(e.checked=Array.isArray(o)?!!o.find((t=>t===e.value)):o===e.value))):n.refs[0]&&(n.refs[0].checked=!!o):n.refs.forEach((e=>e.checked=e.value===o)):or(n.ref)?n.ref.value="":(n.ref.value=o,n.ref.type||d.values.next({name:e,values:{...l}})))}(n.shouldDirty||n.shouldTouch)&&g(e,o,n.shouldTouch,n.shouldDirty,!0),n.shouldValidate&&B(e)},S=(e,t,n)=>{for(const r in t){const o=t[r],l=`${e}.${r}`,i=jn(a,l);(u.array.has(e)||On(o)||i&&!i._f)&&!$n(o)?S(l,o,n):C(l,o,n)}},w=(e,t,n={})=>{const s=jn(a,e),f=u.array.has(e),p=Tn(t);Hn(l,e,p),f?(d.array.next({name:e,values:{...l}}),(c.isDirty||c.dirtyFields)&&n.shouldDirty&&d.state.next({name:e,dirtyFields:Br(o,l),isDirty:E(e,p)})):!s||s._f||Rn(p)?C(e,p,n):S(e,p,n),nr(e,u)&&d.state.next({...r}),d.values.next({name:i.mount?e:void 0,values:{...l}})},_=async e=>{i.mount=!0;const o=e.target;let v=o.name,E=!0;const x=jn(a,v),C=e=>{E=Number.isNaN(e)||$n(e)&&isNaN(e.getTime())||xr(e,jn(l,v,e))};if(x){let i,S;const w=o.type?Lr(x._f):(e=>On(e)&&e.target?Pn(e.target)?e.target.checked:e.target.value:e)(e),_="blur"===e.type||"focusout"===e.type,k=!(e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate))(x._f)&&!n.resolver&&!jn(r.errors,v)&&!x._f.deps||((e,t,n,r,a)=>!a.isOnAll&&(!n&&a.isOnTouch?!(t||e):(n?r.isOnBlur:a.isOnBlur)?!e:!(n?r.isOnChange:a.isOnChange)||e))(_,jn(r.touchedFields,v),r.isSubmitted,p,f),M=nr(v,u,_);Hn(l,v,w),_?(x._f.onBlur&&x._f.onBlur(e),t&&t(0)):x._f.onChange&&x._f.onChange(e);const L=g(v,w,_,!1),P=!qn(L)||M;if(!_&&d.values.next({name:v,type:e.type,values:{...l}}),k)return c.isValid&&("onBlur"===n.mode?_&&m():m()),P&&d.state.next({name:v,...M?{}:L});if(!_&&M&&d.state.next({...r}),n.resolver){const{errors:e}=await y([v]);if(C(w),E){const t=Rr(r.errors,a,v),n=Rr(e,a,t.name||v);i=n.error,v=n.name,S=qn(e)}}else A([v],!0),i=(await gr(x,l,h,n.shouldUseNativeValidation))[v],A([v]),C(w),E&&(i?S=!1:c.isValid&&(S=await b(a,!0)));E&&(x._f.deps&&B(x._f.deps),((e,a,o,l)=>{const i=jn(r.errors,e),u=c.isValid&&Un(a)&&r.isValid!==a;var f;if(n.delayError&&o?(f=()=>((e,t)=>{Hn(r.errors,e,t),d.state.next({errors:r.errors})})(e,o),t=e=>{clearTimeout(s),s=setTimeout(f,e)},t(n.delayError)):(clearTimeout(s),t=null,o?Hn(r.errors,e,o):yr(r.errors,e)),(o?!xr(i,o):i)||!qn(l)||u){const t={...l,...u&&Un(a)?{isValid:a}:{},errors:r.errors,name:e};r={...r,...t},d.state.next(t)}})(v,S,i,L))}},k=(e,t)=>{if(jn(r.errors,t)&&e.focus)return e.focus(),1},B=async(e,t={})=>{let o,l;const i=Qn(e);if(n.resolver){const t=await(async e=>{const{errors:t}=await y(e);if(e)for(const n of e){const e=jn(t,n);e?Hn(r.errors,n,e):yr(r.errors,n)}else r.errors=t;return t})(Fn(e)?e:i);o=qn(t),l=e?!i.some((e=>jn(t,e))):o}else e?(l=(await Promise.all(i.map((async e=>{const t=jn(a,e);return await b(t&&t._f?{[e]:t}:t)})))).every(Boolean),(l||r.isValid)&&m()):l=o=await b(a);return d.state.next({...!Jn(e)||c.isValid&&o!==r.isValid?{}:{name:e},...n.resolver||!e?{isValid:o}:{},errors:r.errors}),t.shouldFocus&&!l&&rr(a,k,e?i:u.mount),l},M=e=>{const t={...i.mount?l:o};return Fn(e)?t:Jn(e)?jn(t,e):e.map((e=>jn(t,e)))},L=(e,t)=>({invalid:!!jn((t||r).errors,e),isDirty:!!jn((t||r).dirtyFields,e),error:jn((t||r).errors,e),isValidating:!!jn(r.validatingFields,e),isTouched:!!jn((t||r).touchedFields,e)}),P=(e,t,n)=>{const o=(jn(a,e,{_f:{}})._f||{}).ref,l=jn(r.errors,e)||{},{ref:i,message:u,type:s,...c}=l;Hn(r.errors,e,{...c,...t,ref:o}),d.state.next({name:e,errors:r.errors,isValid:!1}),n&&n.shouldFocus&&o&&o.focus&&o.focus()},$=(e,t={})=>{for(const i of e?Qn(e):u.mount)u.mount.delete(i),u.array.delete(i),t.keepValue||(yr(a,i),yr(l,i)),!t.keepError&&yr(r.errors,i),!t.keepDirty&&yr(r.dirtyFields,i),!t.keepTouched&&yr(r.touchedFields,i),!t.keepIsValidating&&yr(r.validatingFields,i),!n.shouldUnregister&&!t.keepDefaultValue&&yr(o,i);d.values.next({values:{...l}}),d.state.next({...r,...t.keepDirty?{isDirty:E()}:{}}),!t.keepIsValid&&m()},R=({disabled:e,name:t,field:n,fields:r,value:a})=>{if(Un(e)&&i.mount||e){const o=e?void 0:Fn(a)?Lr(n?n._f:jn(r,t)._f):a;(e||!e&&!Fn(o))&&Hn(l,t,o),g(t,o,!1,!1,!0)}},N=(e,t={})=>{let r=jn(a,e);const l=Un(t.disabled)||Un(n.disabled);return Hn(a,e,{...r||{},_f:{...r&&r._f?r._f:{ref:{name:e}},name:e,mount:!0,...t}}),u.mount.add(e),r?R({field:r,disabled:Un(t.disabled)?t.disabled:n.disabled,name:e,value:t.value}):v(e,!0,t.value),{...l?{disabled:t.disabled||n.disabled}:{},...n.progressive?{required:!!t.required,min:Pr(t.min),max:Pr(t.max),minLength:Pr(t.minLength),maxLength:Pr(t.maxLength),pattern:Pr(t.pattern)}:{},name:e,onChange:_,onBlur:_,ref:l=>{if(l){N(e,t),r=jn(a,e);const n=Fn(l.value)&&l.querySelectorAll&&l.querySelectorAll("input,select,textarea")[0]||l,i=(e=>sr(e)||Pn(e))(n),u=r._f.refs||[];if(i?u.find((e=>e===n)):n===r._f.ref)return;Hn(a,e,{_f:{...r._f,...i?{refs:[...u.filter(Sr),n,...Array.isArray(jn(o,e))?[{}]:[]],ref:{type:n.type,name:e}}:{ref:n}}}),v(e,!1,void 0,n)}else r=jn(a,e,{}),r._f&&(r._f.mount=!1),(n.shouldUnregister||t.shouldUnregister)&&(!((e,t)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(t)))(u.array,e)||!i.action)&&u.unMount.add(e)}}},O=()=>n.shouldFocusError&&rr(a,k,u.mount),D=(e,t)=>async o=>{let i;if(o&&(o.preventDefault&&o.preventDefault(),o.persist&&o.persist()),n.disabled)return void(t&&await t({...r.errors},o));let u=Tn(l);if(d.state.next({isSubmitting:!0}),n.resolver){const{errors:e,values:t}=await y();r.errors=e,u=t}else await b(a);if(yr(r.errors,"root"),qn(r.errors)){d.state.next({errors:{}});try{await e(u,o)}catch(e){i=e}}else t&&await t({...r.errors},o),O(),setTimeout(O);if(d.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:qn(r.errors)&&!i,submitCount:r.submitCount+1,errors:r.errors}),i)throw i},T=(e,t={})=>{const s=e?Tn(e):o,f=Tn(s),p=qn(e),h=p?o:f;if(t.keepDefaultValues||(o=s),!t.keepValues){if(t.keepDirtyValues){const e=new Set([...u.mount,...Object.keys(Br(o,l))]);for(const t of Array.from(e))jn(r.dirtyFields,t)?Hn(h,t,jn(l,t)):w(t,jn(h,t))}else{if(Dn&&Fn(e))for(const e of u.mount){const t=jn(a,e);if(t&&t._f){const e=Array.isArray(t._f.refs)?t._f.refs[0]:t._f.ref;if(ir(e)){const t=e.closest("form");if(t){t.reset();break}}}}a={}}l=n.shouldUnregister?t.keepDefaultValues?Tn(o):{}:Tn(h),d.array.next({values:{...h}}),d.values.next({values:{...h}})}u={mount:t.keepDirtyValues?u.mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},i.mount=!c.isValid||!!t.keepIsValid||!!t.keepDirtyValues,i.watch=!!n.shouldUnregister,d.state.next({submitCount:t.keepSubmitCount?r.submitCount:0,isDirty:!p&&(t.keepDirty?r.isDirty:!(!t.keepDefaultValues||xr(e,o))),isSubmitted:!!t.keepIsSubmitted&&r.isSubmitted,dirtyFields:p?{}:t.keepDirtyValues?t.keepDefaultValues&&l?Br(o,l):r.dirtyFields:t.keepDefaultValues&&e?Br(o,e):t.keepDirty?r.dirtyFields:{},touchedFields:t.keepTouched?r.touchedFields:{},errors:t.keepErrors?r.errors:{},isSubmitSuccessful:!!t.keepIsSubmitSuccessful&&r.isSubmitSuccessful,isSubmitting:!1})},I=(e,t)=>T(lr(e)?e(l):e,t);return{control:{register:N,unregister:$,getFieldState:L,handleSubmit:D,setError:P,_executeSchema:y,_getWatch:x,_getDirty:E,_updateValid:m,_removeUnmounted:()=>{for(const e of u.unMount){const t=jn(a,e);t&&(t._f.refs?t._f.refs.every((e=>!Sr(e))):!Sr(t._f.ref))&&$(e)}u.unMount=new Set},_updateFieldArray:(e,t=[],u,s,f=!0,p=!0)=>{if(s&&u&&!n.disabled){if(i.action=!0,p&&Array.isArray(jn(a,e))){const t=u(jn(a,e),s.argA,s.argB);f&&Hn(a,e,t)}if(p&&Array.isArray(jn(r.errors,e))){const t=u(jn(r.errors,e),s.argA,s.argB);f&&Hn(r.errors,e,t),((e,t)=>{!In(jn(e,t)).length&&yr(e,t)})(r.errors,e)}if(c.touchedFields&&p&&Array.isArray(jn(r.touchedFields,e))){const t=u(jn(r.touchedFields,e),s.argA,s.argB);f&&Hn(r.touchedFields,e,t)}c.dirtyFields&&(r.dirtyFields=Br(o,l)),d.state.next({name:e,isDirty:E(e,t),dirtyFields:r.dirtyFields,errors:r.errors,isValid:r.isValid})}else Hn(l,e,t)},_updateDisabledField:R,_getFieldArray:e=>In(jn(i.mount?l:o,e,n.shouldUnregister?jn(o,e,[]):[])),_reset:T,_resetDefaultValues:()=>lr(n.defaultValues)&&n.defaultValues().then((e=>{I(e,n.resetOptions),d.state.next({isLoading:!1})})),_updateFormState:e=>{r={...r,...e}},_disableForm:e=>{Un(e)&&(d.state.next({disabled:e}),rr(a,((t,n)=>{const r=jn(a,n);r&&(t.disabled=r._f.disabled||e,Array.isArray(r._f.refs)&&r._f.refs.forEach((t=>{t.disabled=r._f.disabled||e})))}),0,!1))},_subjects:d,_proxyFormState:c,_setErrors:e=>{r.errors=e,d.state.next({errors:r.errors,isValid:!1})},get _fields(){return a},get _formValues(){return l},get _state(){return i},set _state(e){i=e},get _defaultValues(){return o},get _names(){return u},set _names(e){u=e},get _formState(){return r},set _formState(e){r=e},get _options(){return n},set _options(e){n={...n,...e}}},trigger:B,register:N,handleSubmit:D,watch:(e,t)=>lr(e)?d.values.subscribe({next:n=>e(x(void 0,t),n)}):x(e,t,!0),setValue:w,getValues:M,reset:I,resetField:(e,t={})=>{jn(a,e)&&(Fn(t.defaultValue)?w(e,Tn(jn(o,e))):(w(e,t.defaultValue),Hn(o,e,Tn(t.defaultValue))),t.keepTouched||yr(r.touchedFields,e),t.keepDirty||(yr(r.dirtyFields,e),r.isDirty=t.defaultValue?E(e,Tn(jn(o,e))):E()),t.keepError||(yr(r.errors,e),c.isValid&&m()),d.state.next({...r}))},clearErrors:e=>{e&&Qn(e).forEach((e=>yr(r.errors,e))),d.state.next({errors:e?r.errors:{}})},unregister:$,setError:P,setFocus:(e,t={})=>{const n=jn(a,e),r=n&&n._f;if(r){const e=r.refs?r.refs[0]:r.ref;e.focus&&(e.focus(),t.shouldSelect&&lr(e.select)&&e.select())}},getFieldState:L}}var Dr=l(7761);const Tr=({onClose:n})=>{var r;const{register:a,handleSubmit:o,formState:{errors:l}}=function(e={}){const n=t.useRef(),r=t.useRef(),[a,o]=t.useState({isDirty:!1,isValidating:!1,isLoading:lr(e.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},validatingFields:{},errors:e.errors||{},disabled:e.disabled||!1,defaultValues:lr(e.defaultValues)?void 0:e.defaultValues});n.current||(n.current={...Or(e),formState:a});const l=n.current.control;return l._options=e,function(e){const n=t.useRef(e);n.current=e,t.useEffect((()=>{const t=!e.disabled&&n.current.subject&&n.current.subject.subscribe({next:n.current.next});return()=>{t&&t.unsubscribe()}}),[e.disabled])}({subject:l._subjects.state,next:e=>{((e,t,n,r)=>{n(e);const{name:a,...o}=e;return qn(o)||Object.keys(o).length>=Object.keys(t).length||Object.keys(o).find((e=>t[e]===(!r||Gn)))})(e,l._proxyFormState,l._updateFormState,!0)&&o({...l._formState})}}),t.useEffect((()=>l._disableForm(e.disabled)),[l,e.disabled]),t.useEffect((()=>{if(l._proxyFormState.isDirty){const e=l._getDirty();e!==a.isDirty&&l._subjects.state.next({isDirty:e})}}),[l,a.isDirty]),t.useEffect((()=>{e.values&&!xr(e.values,r.current)?(l._reset(e.values,l._options.resetOptions),r.current=e.values,o((e=>({...e})))):l._resetDefaultValues()}),[e.values,l]),t.useEffect((()=>{e.errors&&l._setErrors(e.errors)}),[e.errors,l]),t.useEffect((()=>{l._state.mount||(l._updateValid(),l._state.mount=!0),l._state.watch&&(l._state.watch=!1,l._subjects.state.next({...l._formState})),l._removeUnmounted()})),t.useEffect((()=>{e.shouldUnregister&&l._subjects.values.next({values:l._getWatch()})}),[e.shouldUnregister,l]),t.useMemo((()=>({...n.current,formState:Xn(a,l)})),[a,l])}();return(0,e.jsx)("div",{className:Mn.modalOverlay,children:(0,e.jsxs)("div",{className:Mn.modalContent,children:[(0,e.jsx)("h2",{className:Mn.modalTitle,children:"Register"}),(0,e.jsx)("p",{className:Mn.modalSubtitle,children:"Please fill in the fields below:"}),(0,e.jsxs)("form",{onSubmit:o((e=>{console.log("Form Data:",e)})),children:[(0,e.jsxs)("div",{className:Mn.modalInputGroup,children:[(0,e.jsx)("input",Object.assign({},a("firstname",{required:"First Name is required"}),{placeholder:"First Name",type:"text"})),l.firstname&&(0,e.jsx)("p",{className:Mn.error,children:l.firstname.message}),(0,e.jsx)("input",Object.assign({},a("lastname",{required:"Last Name is required"}),{placeholder:"Last Name",type:"text"})),l.lastname&&(0,e.jsx)("p",{className:Mn.error,children:l.lastname.message}),(0,e.jsx)("input",Object.assign({},a("email",{required:"Email is required",validate:e=>(0,Dr.isEmail)(e)||"Invalid email address"}),{placeholder:"Email",type:"email"})),l.email&&(0,e.jsx)("p",{className:Mn.error,children:l.email.message}),(0,e.jsx)("input",Object.assign({},a("password",{required:"Password is required",minLength:{value:8,message:"Password must be at least 8 characters"},maxLength:{value:24,message:"Password must be at most 24 characters"}}),{placeholder:"Password",type:"password"})),l.password&&(0,e.jsx)("p",{className:Mn.error,children:l.password.message}),(0,e.jsx)("input",Object.assign({},a("confirm_password",{required:"Confirm Password is required"}),{placeholder:"Confirm password",type:"password"})),l.confirm_password&&(0,e.jsx)("p",{className:Mn.error,children:l.confirm_password.message})]}),(0,e.jsx)(Ln.$,{type:"submit",label:"Register",className:"pink"}),(0,e.jsxs)("div",{className:Mn.subscribe,children:[(0,e.jsx)("input",Object.assign({},a("checkbox"),{type:"checkbox"})),(0,e.jsx)("p",{children:"Yes, I want subscribe to newsletter now"}),(0,e.jsx)("p",{children:null===(r=l.checkbox)||void 0===r?void 0:r.message})]}),(0,e.jsxs)("div",{className:Mn.modalDivider,children:[(0,e.jsx)("span",{className:Mn.dividerLine}),(0,e.jsx)("span",{className:Mn.dividerText,children:"OR"}),(0,e.jsx)("span",{className:Mn.dividerLine})]}),(0,e.jsx)(Ln.$,{type:"submit",label:"Continue With Google",variant:"pink",className:Mn.modalGoogleButton}),(0,e.jsx)("div",{className:Mn.modalFooter,children:(0,e.jsxs)("p",{children:["Already have an account?"," ",(0,e.jsx)("a",{href:"#",className:Mn.modalLink,onClick:n,children:"Back to Log In"})]})})]})]})})},Ir=({onClose:n})=>{const[r,a]=(0,t.useState)(!1);return(0,e.jsxs)(wn,{onClose:n,children:[(0,e.jsx)("h2",{className:dn.modalTitle,children:"Log In"}),(0,e.jsx)("p",{className:dn.modalSubtitle,children:"Please enter your e-mail and password:"}),(0,e.jsxs)("div",{className:dn.modalInputGroup,children:[(0,e.jsx)(gn,{placeholder:"Email",type:"email"}),(0,e.jsx)(gn,{placeholder:"Password",type:"password"})]}),(0,e.jsx)(yn.$,{label:"Log In",className:"pink large"}),(0,e.jsxs)("div",{className:dn.modalDivider,children:[(0,e.jsx)("span",{className:dn.dividerLine}),(0,e.jsx)("span",{className:dn.dividerText,children:"OR"}),(0,e.jsx)("span",{className:dn.dividerLine})]}),(0,e.jsx)(yn.$,{label:"Continue With Google",variant:"transparent",className:dn.modalGoogleButton,children:(0,e.jsx)("img",{src:fn,alt:"Google"})}),(0,e.jsxs)("div",{className:dn.modalFooter,children:[(0,e.jsxs)("p",{children:["Forgot your password?"," ",(0,e.jsx)("a",{href:"/",className:dn.modalLink,children:"Recover password"})]}),(0,e.jsxs)("p",{onClick:()=>{a(!0)},children:["New to Bloom Beauty?"," ",(0,e.jsx)("a",{href:"#",className:dn.modalLink,children:"Create an Account"})]})]}),r&&(0,e.jsx)(Tr,{onClose:()=>{a(!1)}})]})};var Fr=l(8134),jr=l.n(Fr),Ur={};Ur.styleTagTransform=A(),Ur.setAttributes=f(),Ur.insert=c().bind(null,"head"),Ur.domAPI=u(),Ur.insertStyleElement=h(),o()(jr(),Ur);const zr=jr()&&jr().locals?jr().locals:void 0,Zr=({onClose:t})=>(0,e.jsx)("div",{className:zr.overlayModalSearch,children:(0,e.jsx)("div",{className:zr.modalSearchInput,children:(0,e.jsxs)("div",{className:zr.searchInput,children:[(0,e.jsx)(gn,{placeholder:"Search",type:"search",className:zr.styledInput}),(0,e.jsx)("button",{onClick:t,className:zr.closeSearchButton,children:"X"})]})})});function Hr(){const[n,r]=(0,t.useState)(!1),[a,o]=(0,t.useState)(!1);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("header",{className:ln.header,children:(0,e.jsxs)("div",{className:ln.headerContainer,children:[(0,e.jsx)(Gt,{to:"/",className:ln.title,children:(0,e.jsxs)("h3",{className:ln.title,children:["Bloom ",(0,e.jsx)("span",{className:ln.titleSpan,children:"Beauty"})]})}),(0,e.jsxs)("nav",{className:ln.headerNav,children:[(0,e.jsx)(Gt,{to:"/shop-all",className:ln.headerNavLink,children:"SHOP ALL"}),(0,e.jsx)(Gt,{to:"/bestsellers",className:ln.headerNavLink,children:"BESTSELLERS"}),(0,e.jsx)(Gt,{to:"/collection",className:ln.headerNavLink,children:"COLLECTION"}),(0,e.jsx)(Gt,{to:"/about",className:ln.headerNavLink,children:"ABOUT US"}),(0,e.jsx)(Gt,{to:"/blog",className:ln.headerNavLink,children:"BLOG"})]}),(0,e.jsxs)("div",{className:ln.icons,children:[(0,e.jsxs)("div",{className:ln.iconItem,onClick:()=>{o(!0)},children:[(0,e.jsx)("img",{src:en,alt:"search",className:ln.iconItemImg}),(0,e.jsx)("span",{children:"SEARCH"})]}),(0,e.jsxs)("div",{className:ln.iconItem,onClick:()=>{r(!0)},children:[(0,e.jsx)("img",{src:tn,alt:"account",className:ln.iconItemImg}),(0,e.jsx)("span",{children:"ACCOUNT"})]}),(0,e.jsxs)("div",{className:ln.iconItem,children:[(0,e.jsx)("img",{src:nn,alt:"cart",className:ln.iconItemImg}),(0,e.jsx)("span",{children:"CART"})]})]})]})}),n&&(0,e.jsx)(Ir,{onClose:()=>{r(!1)}}),a&&(0,e.jsx)(Zr,{onClose:()=>{o(!1)}})]})}var Wr=l(7811),Vr=l.n(Wr),Gr={};Gr.styleTagTransform=A(),Gr.setAttributes=f(),Gr.insert=c().bind(null,"head"),Gr.domAPI=u(),Gr.insertStyleElement=h(),o()(Vr(),Gr);const Kr=Vr()&&Vr().locals?Vr().locals:void 0,Yr=l.p+"322398bfccbc560dab32.png",Xr=l.p+"e08ccfb5dca8ae414796.png",qr=l.p+"1d47e9d932ba5f159c05.png";var Qr=l(5472);const Jr=l.p+"ecd861c620b05a0f26db.png";function ea(){return(0,e.jsxs)("footer",{className:Kr.footerContainer,children:[(0,e.jsxs)("div",{className:`${Kr.footerSection} ${Kr.socialIcons}`,children:[(0,e.jsx)("a",{href:"https://facebook.com",target:"_blank",rel:"noopener noreferrer",children:(0,e.jsx)("img",{src:Yr,alt:"Facebook"})}),(0,e.jsx)("a",{href:"https://pinterest.com",target:"_blank",rel:"noopener noreferrer",children:(0,e.jsx)("img",{src:Xr,alt:"Pinterest"})}),(0,e.jsx)("a",{href:"https://twitter.com",target:"_blank",rel:"noopener noreferrer",children:(0,e.jsx)("img",{src:qr,alt:"Twitter"})}),(0,e.jsx)("a",{href:"https://instagram.com",target:"_blank",rel:"noopener noreferrer",children:(0,e.jsx)("img",{src:Qr,alt:"Instagram"})}),(0,e.jsx)("a",{href:"https://telegram.org",target:"_blank",rel:"noopener noreferrer",children:(0,e.jsx)("img",{src:Jr,alt:"Telegram"})})]}),(0,e.jsxs)("div",{className:Kr.footerMain,children:[(0,e.jsxs)("div",{className:`${Kr.footerSection} ${Kr.companyInfo}`,children:[(0,e.jsxs)("h3",{children:[(0,e.jsx)("span",{className:Kr.brandName,children:"Bloom"})," Beauty"]}),(0,e.jsx)("p",{children:"Discover nature's beauty with our natural care products."}),(0,e.jsxs)("p",{children:[(0,e.jsx)("span",{children:"📞 +38 050 123 45 67"}),(0,e.jsx)("br",{}),(0,e.jsx)("span",{children:"📧 bloombt@gmail.com"}),(0,e.jsx)("br",{}),(0,e.jsx)("span",{children:"📍 Kyiv, Ukraine"})]})]}),(0,e.jsxs)("div",{className:Kr.footerSection,children:[(0,e.jsx)("h3",{children:"Help"}),(0,e.jsxs)("ul",{children:[(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"#",children:"Contact us"})}),(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"#",children:"FAQ"})}),(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"#",children:"Shipping & Returns"})})]})]}),(0,e.jsxs)("div",{className:Kr.footerSection,children:[(0,e.jsx)("h3",{children:"My Account"}),(0,e.jsxs)("ul",{children:[(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"#",children:"Addresses"})}),(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"#",children:"Order Status"})}),(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"#",children:"Wishlist"})})]})]}),(0,e.jsxs)("div",{className:`${Kr.footerSection} ${Kr.third}`,children:[(0,e.jsx)("h3",{children:"Customer Care"}),(0,e.jsx)("ul",{children:(0,e.jsx)("li",{children:(0,e.jsx)("a",{href:"#",children:"About us"})})})]}),(0,e.jsxs)("div",{className:`${Kr.footerSection} ${Kr.footerSubscribe}`,children:[(0,e.jsx)("h3",{children:"Sign Up for Emails"}),(0,e.jsx)("p",{children:"Stay informed, subscribe to our newsletter now!"}),(0,e.jsxs)("div",{className:Kr.subscribeForm,children:[(0,e.jsx)("input",{type:"email",placeholder:"Email"}),(0,e.jsx)("a",{className:Kr.subscribeFormLink,children:"Subscribe →"})]})]})]}),(0,e.jsxs)("div",{className:Kr.footerBottom,children:[(0,e.jsx)("p",{children:"© 2023 Bloom Beauty"}),(0,e.jsxs)("div",{className:Kr.footerLinks,children:[(0,e.jsx)("a",{className:Kr.footerLink,href:"#",children:"Privacy Policy"}),(0,e.jsx)("a",{className:Kr.footerLink,href:"#",children:"Terms and Conditions"})]})]})]})}var ta=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function l(e){try{u(r.next(e))}catch(e){o(e)}}function i(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}u((r=r.apply(e,t||[])).next())}))};const na=(ra=[{path:"/",element:(0,e.jsx)((()=>(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(Hr,{}),(0,e.jsx)("main",{children:(0,e.jsx)(Bt,{})}),(0,e.jsx)(ea,{})]})),{}),errorElement:(0,e.jsx)((()=>(0,e.jsxs)("div",{className:Jt.errorContainer,children:[(0,e.jsx)("h1",{children:"Sorry dude but page not found 404"}),(0,e.jsx)(Gt,{to:"/",children:"Home Page"})]})),{}),children:[{index:!0,lazy(){return ta(this,void 0,void 0,(function*(){const{HomePage:e}=yield l.e(901).then(l.bind(l,7621));return{Component:e}}))}},{path:"about/",lazy(){return ta(this,void 0,void 0,(function*(){const{AboutUs:e}=yield l.e(682).then(l.bind(l,682));return{Component:e}}))}},{path:"shop-all/",lazy(){return ta(this,void 0,void 0,(function*(){const{ShopAll:e}=yield l.e(64).then(l.bind(l,9064));return{Component:e}}))}},{path:"collection/",lazy(){return ta(this,void 0,void 0,(function*(){const{Collection:e}=yield l.e(645).then(l.bind(l,8645));return{Component:e}}))}},{path:"bestsellers/",lazy(){return ta(this,void 0,void 0,(function*(){const{Bestsellers:e}=yield l.e(679).then(l.bind(l,3679));return{Component:e}}))}},{path:"blog/",lazy(){return ta(this,void 0,void 0,(function*(){const{Blog:e}=yield l.e(549).then(l.bind(l,2549));return{Component:e}}))}}]}],function(e){const t=e.window?e.window:"undefined"!=typeof window?window:void 0,n=void 0!==t&&void 0!==t.document&&void 0!==t.document.createElement,r=!n;let a;if(w(e.routes.length>0,"You must provide a non-empty routes array to createRouter"),e.mapRouteProperties)a=e.mapRouteProperties;else if(e.detectErrorBoundary){let t=e.detectErrorBoundary;a=e=>({hasErrorBoundary:t(e)})}else a=Ae;let o,l,i,u={},s=R(e.routes,a,void 0,u),c=e.basename||"/",d=e.dataStrategy||ke,f=e.patchRoutesOnNavigation,p=C({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,v7_skipActionErrorRevalidation:!1},e.future),h=null,m=new Set,A=null,v=null,g=null,y=null!=e.hydrationData,E=N(s,e.history.location,c),x=null;if(null==E&&!f){let t=Fe(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=Ie(s);E=n,x={[r.id]:t}}if(E&&!e.hydrationData&&ut(E,s,e.history.location.pathname).active&&(E=null),E)if(E.some((e=>e.route.lazy)))l=!1;else if(E.some((e=>e.route.loader)))if(p.v7_partialHydration){let t=e.hydrationData?e.hydrationData.loaderData:null,n=e.hydrationData?e.hydrationData.errors:null;if(n){let e=E.findIndex((e=>void 0!==n[e.route.id]));l=E.slice(0,e+1).every((e=>!xe(e.route,t,n)))}else l=E.every((e=>!xe(e.route,t,n)))}else l=null!=e.hydrationData;else l=!0;else if(l=!1,E=[],p.v7_partialHydration){let t=ut(null,s,e.history.location.pathname);t.active&&t.matches&&(E=t.matches)}let S,k,M={historyAction:e.history.action,location:e.history.location,matches:E,initialized:l,navigation:fe,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||x,fetchers:new Map,blockers:new Map},L=b.Pop,D=!1,T=!1,I=new Map,F=null,j=!1,U=!1,z=[],Z=new Set,H=new Map,W=0,V=-1,G=new Map,K=new Set,X=new Map,q=new Map,Q=new Set,J=new Map,ee=new Map;function te(e,t){void 0===t&&(t={}),M=C({},M,e);let n=[],r=[];p.v7_fetcherPersist&&M.fetchers.forEach(((e,t)=>{"idle"===e.state&&(Q.has(t)?r.push(t):n.push(t))})),[...m].forEach((e=>e(M,{deletedFetchers:r,viewTransitionOpts:t.viewTransitionOpts,flushSync:!0===t.flushSync}))),p.v7_fetcherPersist&&(n.forEach((e=>M.fetchers.delete(e))),r.forEach((e=>Se(e))))}function ne(t,n,r){var a,l;let i,{flushSync:u}=void 0===r?{}:r,c=null!=M.actionData&&null!=M.navigation.formMethod&&Ke(M.navigation.formMethod)&&"loading"===M.navigation.state&&!0!==(null==(a=t.state)?void 0:a._isRedirect);i=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:c?M.actionData:null;let d=n.loaderData?Oe(M.loaderData,n.loaderData,n.matches||[],n.errors):M.loaderData,f=M.blockers;f.size>0&&(f=new Map(f),f.forEach(((e,t)=>f.set(t,he))));let p,h=!0===D||null!=M.navigation.formMethod&&Ke(M.navigation.formMethod)&&!0!==(null==(l=t.state)?void 0:l._isRedirect);if(o&&(s=o,o=void 0),j||L===b.Pop||(L===b.Push?e.history.push(t,t.state):L===b.Replace&&e.history.replace(t,t.state)),L===b.Pop){let e=I.get(M.location.pathname);e&&e.has(t.pathname)?p={currentLocation:M.location,nextLocation:t}:I.has(t.pathname)&&(p={currentLocation:t,nextLocation:M.location})}else if(T){let e=I.get(M.location.pathname);e?e.add(t.pathname):(e=new Set([t.pathname]),I.set(M.location.pathname,e)),p={currentLocation:M.location,nextLocation:t}}te(C({},n,{actionData:i,loaderData:d,historyAction:L,location:t,initialized:!0,navigation:fe,revalidation:"idle",restoreScrollPosition:it(t,n.matches||M.matches),preventScrollReset:h,blockers:f}),{viewTransitionOpts:p,flushSync:!0===u}),L=b.Pop,D=!1,T=!1,j=!1,U=!1,z=[]}async function re(t,n,r){S&&S.abort(),S=null,L=t,j=!0===(r&&r.startUninterruptedRevalidation),function(e,t){if(A&&g){let n=lt(e,t);A[n]=g()}}(M.location,M.matches),D=!0===(r&&r.preventScrollReset),T=!0===(r&&r.enableViewTransition);let a=o||s,l=r&&r.overrideNavigation,i=N(a,n,c),u=!0===(r&&r.flushSync),d=ut(i,a,n.pathname);if(d.active&&d.matches&&(i=d.matches),!i){let{error:e,notFoundMatches:t,route:r}=at(n.pathname);return void ne(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:u})}if(M.initialized&&!U&&(f=M.location,h=n,f.pathname===h.pathname&&f.search===h.search&&(""===f.hash?""!==h.hash:f.hash===h.hash||""!==h.hash))&&!(r&&r.submission&&Ke(r.submission.formMethod)))return void ne(n,{matches:i},{flushSync:u});var f,h;S=new AbortController;let m,v=Pe(e.history,n,S.signal,r&&r.submission);if(r&&r.pendingError)m=[Te(i).route.id,{type:P.error,error:r.pendingError}];else if(r&&r.submission&&Ke(r.submission.formMethod)){let t=await async function(e,t,n,r,a,o){void 0===o&&(o={}),se();let l,i=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(t,n);if(te({navigation:i},{flushSync:!0===o.flushSync}),a){let n=await st(r,t.pathname,e.signal);if("aborted"===n.type)return{shortCircuited:!0};if("error"===n.type){let e=Te(n.partialMatches).route.id;return{matches:n.partialMatches,pendingActionResult:[e,{type:P.error,error:n.error}]}}if(!n.matches){let{notFoundMatches:e,error:n,route:r}=at(t.pathname);return{matches:e,pendingActionResult:[r.id,{type:P.error,error:n}]}}r=n.matches}let u=Je(r,t);if(u.route.action||u.route.lazy){if(l=(await ie("action",M,e,[u],r,null))[u.route.id],e.signal.aborted)return{shortCircuited:!0}}else l={type:P.error,error:Fe(405,{method:e.method,pathname:t.pathname,routeId:u.route.id})};if(We(l)){let t;return t=o&&null!=o.replace?o.replace:Le(l.response.headers.get("Location"),new URL(e.url),c)===M.location.pathname+M.location.search,await le(e,l,!0,{submission:n,replace:t}),{shortCircuited:!0}}if(Ze(l))throw Fe(400,{type:"defer-action"});if(He(l)){let e=Te(r,u.route.id);return!0!==(o&&o.replace)&&(L=b.Push),{matches:r,pendingActionResult:[e.route.id,l]}}return{matches:r,pendingActionResult:[u.route.id,l]}}(v,n,r.submission,i,d.active,{replace:r.replace,flushSync:u});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(He(r)&&oe(r.error)&&404===r.error.status)return S=null,void ne(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}i=t.matches||i,m=t.pendingActionResult,l=tt(n,r.submission),u=!1,d.active=!1,v=Pe(e.history,v.url,v.signal)}let{shortCircuited:y,matches:E,loaderData:x,errors:w}=await async function(t,n,r,a,l,i,u,d,f,h,m){let A=l||tt(n,i),v=i||u||et(A),g=!(j||p.v7_partialHydration&&f);if(a){if(g){let e=ae(m);te(C({navigation:A},void 0!==e?{actionData:e}:{}),{flushSync:h})}let e=await st(r,n.pathname,t.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let t=Te(e.partialMatches).route.id;return{matches:e.partialMatches,loaderData:{},errors:{[t]:e.error}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=at(n.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}r=e.matches}let y=o||s,[b,E]=Ee(e.history,M,r,v,n,p.v7_partialHydration&&!0===f,p.v7_skipActionErrorRevalidation,U,z,Z,Q,X,K,y,c,m);if(ot((e=>!(r&&r.some((t=>t.route.id===e)))||b&&b.some((t=>t.route.id===e)))),V=++W,0===b.length&&0===E.length){let e=Re();return ne(n,C({matches:r,loaderData:{},errors:m&&He(m[1])?{[m[0]]:m[1].error}:null},De(m),e?{fetchers:new Map(M.fetchers)}:{}),{flushSync:h}),{shortCircuited:!0}}if(g){let e={};if(!a){e.navigation=A;let t=ae(m);void 0!==t&&(e.actionData=t)}E.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=M.fetchers.get(e.key),n=nt(void 0,t?t.data:void 0);M.fetchers.set(e.key,n)})),new Map(M.fetchers)}(E)),te(e,{flushSync:h})}E.forEach((e=>{_e(e.key),e.controller&&H.set(e.key,e.controller)}));let x=()=>E.forEach((e=>_e(e.key)));S&&S.signal.addEventListener("abort",x);let{loaderResults:w,fetcherResults:_}=await ue(M,r,b,E,t);if(t.signal.aborted)return{shortCircuited:!0};S&&S.signal.removeEventListener("abort",x),E.forEach((e=>H.delete(e.key)));let k=je(w);if(k)return await le(t,k.result,!0,{replace:d}),{shortCircuited:!0};if(k=je(_),k)return K.add(k.key),await le(t,k.result,!0,{replace:d}),{shortCircuited:!0};let{loaderData:B,errors:L}=Ne(M,r,w,m,E,_,J);J.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&J.delete(t)}))})),p.v7_partialHydration&&f&&M.errors&&(L=C({},M.errors,L));let P=Re(),$=Ue(V),R=P||$||E.length>0;return C({matches:r,loaderData:B,errors:L},R?{fetchers:new Map(M.fetchers)}:{})}(v,n,i,d.active,l,r&&r.submission,r&&r.fetcherSubmission,r&&r.replace,r&&!0===r.initialHydration,u,m);y||(S=null,ne(n,C({matches:E||i},De(m),{loaderData:x,errors:w})))}function ae(e){return e&&!He(e[1])?{[e[0]]:e[1].data}:M.actionData?0===Object.keys(M.actionData).length?null:M.actionData:void 0}async function le(r,a,o,l){let{submission:i,fetcherSubmission:u,preventScrollReset:s,replace:d}=void 0===l?{}:l;a.response.headers.has("X-Remix-Revalidate")&&(U=!0);let f=a.response.headers.get("Location");w(f,"Expected a Location header on the redirect Response"),f=Le(f,new URL(r.url),c);let p=B(M.location,f,{_isRedirect:!0});if(n){let n=!1;if(a.response.headers.has("X-Remix-Reload-Document"))n=!0;else if(me.test(f)){const r=e.history.createURL(f);n=r.origin!==t.location.origin||null==Y(r.pathname,c)}if(n)return void(d?t.location.replace(f):t.location.assign(f))}S=null;let h=!0===d||a.response.headers.has("X-Remix-Replace")?b.Replace:b.Push,{formMethod:m,formAction:A,formEncType:v}=M.navigation;!i&&!u&&m&&A&&v&&(i=et(M.navigation));let g=i||u;if(de.has(a.response.status)&&g&&Ke(g.formMethod))await re(h,p,{submission:C({},g,{formAction:f}),preventScrollReset:s||D,enableViewTransition:o?T:void 0});else{let e=tt(p,i);await re(h,p,{overrideNavigation:e,fetcherSubmission:u,preventScrollReset:s||D,enableViewTransition:o?T:void 0})}}async function ie(e,t,n,r,o,l){let i,s={};try{i=await async function(e,t,n,r,a,o,l,i,u,s){let c=o.map((e=>e.route.lazy?async function(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];w(a,"No route found in manifest");let o={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;_(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||$.has(e)||(o[e]=r[e])}Object.assign(a,o),Object.assign(a,C({},t(a),{lazy:void 0}))}(e.route,u,i):void 0)),d=o.map(((e,n)=>{let o=c[n],l=a.some((t=>t.route.id===e.route.id));return C({},e,{shouldLoad:l,resolve:async n=>(n&&"GET"===r.method&&(e.route.lazy||e.route.loader)&&(l=!0),l?async function(e,t,n,r,a,o){let l,i,u=r=>{let l,u=new Promise(((e,t)=>l=t));i=()=>l(),t.signal.addEventListener("abort",i);let s=a=>"function"!=typeof r?Promise.reject(new Error('You cannot call the handler for a route which defines a boolean "'+e+'" [routeId: '+n.route.id+"]")):r({request:t,params:n.params,context:o},...void 0!==a?[a]:[]),c=(async()=>{try{return{type:"data",result:await(a?a((e=>s(e))):s())}}catch(e){return{type:"error",result:e}}})();return Promise.race([c,u])};try{let a=n.route[e];if(r)if(a){let e,[t]=await Promise.all([u(a).catch((t=>{e=t})),r]);if(void 0!==e)throw e;l=t}else{if(await r,a=n.route[e],!a){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw Fe(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:P.data,result:void 0}}l=await u(a)}else{if(!a){let e=new URL(t.url);throw Fe(404,{pathname:e.pathname+e.search})}l=await u(a)}w(void 0!==l.result,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){return{type:P.error,result:e}}finally{i&&t.signal.removeEventListener("abort",i)}return l}(t,r,e,o,n,s):Promise.resolve({type:P.data,result:void 0}))})})),f=await e({matches:d,request:r,params:o[0].params,fetcherKey:l,context:s});try{await Promise.all(c)}catch(e){}return f}(d,e,0,n,r,o,l,u,a)}catch(e){return r.forEach((t=>{s[t.route.id]={type:P.error,error:e}})),s}for(let[e,t]of Object.entries(i))if(ze(t)){let r=t.result;s[e]={type:P.redirect,response:Me(r,n,e,o,c,p.v7_relativeSplatPath)}}else s[e]=await Be(t);return s}async function ue(t,n,r,a,o){let l=t.matches,i=ie("loader",0,o,r,n,null),u=Promise.all(a.map((async t=>{if(t.matches&&t.match&&t.controller){let n=(await ie("loader",0,Pe(e.history,t.path,t.controller.signal),[t.match],t.matches,t.key))[t.match.route.id];return{[t.key]:n}}return Promise.resolve({[t.key]:{type:P.error,error:Fe(404,{pathname:t.path})}})}))),s=await i,c=(await u).reduce(((e,t)=>Object.assign(e,t)),{});return await Promise.all([Ye(n,s,o.signal,l,t.loaderData),Xe(n,c,a)]),{loaderResults:s,fetcherResults:c}}function se(){U=!0,z.push(...ot()),X.forEach(((e,t)=>{H.has(t)&&Z.add(t),_e(t)}))}function ce(e,t,n){void 0===n&&(n={}),M.fetchers.set(e,t),te({fetchers:new Map(M.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function be(e,t,n,r){void 0===r&&(r={});let a=Te(M.matches,t);Se(e),te({errors:{[a.route.id]:n},fetchers:new Map(M.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function Ce(e){return p.v7_fetcherPersist&&(q.set(e,(q.get(e)||0)+1),Q.has(e)&&Q.delete(e)),M.fetchers.get(e)||pe}function Se(e){let t=M.fetchers.get(e);!H.has(e)||t&&"loading"===t.state&&G.has(e)||_e(e),X.delete(e),G.delete(e),K.delete(e),Q.delete(e),Z.delete(e),M.fetchers.delete(e)}function _e(e){let t=H.get(e);t&&(t.abort(),H.delete(e))}function $e(e){for(let t of e){let e=rt(Ce(t).data);M.fetchers.set(t,e)}}function Re(){let e=[],t=!1;for(let n of K){let r=M.fetchers.get(n);w(r,"Expected fetcher: "+n),"loading"===r.state&&(K.delete(n),e.push(n),t=!0)}return $e(e),t}function Ue(e){let t=[];for(let[n,r]of G)if(r<e){let e=M.fetchers.get(n);w(e,"Expected fetcher: "+n),"loading"===e.state&&(_e(n),G.delete(n),t.push(n))}return $e(t),t.length>0}function Ve(e){M.blockers.delete(e),ee.delete(e)}function Ge(e,t){let n=M.blockers.get(e)||he;w("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state);let r=new Map(M.blockers);r.set(e,t),te({blockers:r})}function Qe(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===ee.size)return;ee.size>1&&_(!1,"A router only supports one blocker at a time");let a=Array.from(ee.entries()),[o,l]=a[a.length-1],i=M.blockers.get(o);return i&&"proceeding"===i.state?void 0:l({currentLocation:t,nextLocation:n,historyAction:r})?o:void 0}function at(e){let t=Fe(404,{pathname:e}),n=o||s,{matches:r,route:a}=Ie(n);return ot(),{notFoundMatches:r,route:a,error:t}}function ot(e){let t=[];return J.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),J.delete(r))})),t}function lt(e,t){return v&&v(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}(e,M.loaderData))))||e.key}function it(e,t){if(A){let n=lt(e,t),r=A[n];if("number"==typeof r)return r}return null}function ut(e,t,n){if(f){if(!e)return{active:!0,matches:O(t,n,c,!0)||[]};if(Object.keys(e[0].params).length>0)return{active:!0,matches:O(t,n,c,!0)}}return{active:!1,matches:null}}async function st(e,t,n){if(!f)return{type:"success",matches:e};let r=e;for(;;){let e=null==o,l=o||s,i=u;try{await f({path:t,matches:r,patch:(e,t)=>{n.aborted||we(e,t,l,i,a)}})}catch(e){return{type:"error",error:e,partialMatches:r}}finally{e&&!n.aborted&&(s=[...s])}if(n.aborted)return{type:"aborted"};let d=N(l,t,c);if(d)return{type:"success",matches:d};let p=O(l,t,c,!0);if(!p||r.length===p.length&&r.every(((e,t)=>e.route.id===p[t].route.id)))return{type:"success",matches:null};r=p}}return i={get basename(){return c},get future(){return p},get state(){return M},get routes(){return s},get window(){return t},initialize:function(){if(h=e.history.listen((t=>{let{action:n,location:r,delta:a}=t;if(k)return k(),void(k=void 0);_(0===ee.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=Qe({currentLocation:M.location,nextLocation:r,historyAction:n});if(o&&null!=a){let t=new Promise((e=>{k=e}));return e.history.go(-1*a),void Ge(o,{state:"blocked",location:r,proceed(){Ge(o,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),t.then((()=>e.history.go(a)))},reset(){let e=new Map(M.blockers);e.set(o,he),te({blockers:e})}})}return re(n,r)})),n){!function(e,t){try{let n=e.sessionStorage.getItem(ve);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(t,I);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(ve,JSON.stringify(n))}catch(e){_(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(t,I);t.addEventListener("pagehide",e),F=()=>t.removeEventListener("pagehide",e)}return M.initialized||re(b.Pop,M.location,{initialHydration:!0}),i},subscribe:function(e){return m.add(e),()=>m.delete(e)},enableScrollRestoration:function(e,t,n){if(A=e,g=t,v=n||null,!y&&M.navigation===fe){y=!0;let e=it(M.location,M.matches);null!=e&&te({restoreScrollPosition:e})}return()=>{A=null,g=null,v=null}},navigate:async function t(n,r){if("number"==typeof n)return void e.history.go(n);let a=ge(M.location,M.matches,c,p.v7_prependBasename,n,p.v7_relativeSplatPath,null==r?void 0:r.fromRouteId,null==r?void 0:r.relative),{path:o,submission:l,error:i}=ye(p.v7_normalizeFormMethod,!1,a,r),u=M.location,s=B(M.location,o,r&&r.state);s=C({},s,e.history.encodeLocation(s));let d=r&&null!=r.replace?r.replace:void 0,f=b.Push;!0===d?f=b.Replace:!1===d||null!=l&&Ke(l.formMethod)&&l.formAction===M.location.pathname+M.location.search&&(f=b.Replace);let h=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0,m=!0===(r&&r.flushSync),A=Qe({currentLocation:u,nextLocation:s,historyAction:f});if(!A)return await re(f,s,{submission:l,pendingError:i,preventScrollReset:h,replace:r&&r.replace,enableViewTransition:r&&r.viewTransition,flushSync:m});Ge(A,{state:"blocked",location:s,proceed(){Ge(A,{state:"proceeding",proceed:void 0,reset:void 0,location:s}),t(n,r)},reset(){let e=new Map(M.blockers);e.set(A,he),te({blockers:e})}})},fetch:function(t,n,a,l){if(r)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");_e(t);let i=!0===(l&&l.flushSync),u=o||s,d=ge(M.location,M.matches,c,p.v7_prependBasename,a,p.v7_relativeSplatPath,n,null==l?void 0:l.relative),f=N(u,d,c),h=ut(f,u,d);if(h.active&&h.matches&&(f=h.matches),!f)return void be(t,n,Fe(404,{pathname:d}),{flushSync:i});let{path:m,submission:A,error:v}=ye(p.v7_normalizeFormMethod,!0,d,l);if(v)return void be(t,n,v,{flushSync:i});let g=Je(f,m),y=!0===(l&&l.preventScrollReset);A&&Ke(A.formMethod)?async function(t,n,r,a,l,i,u,d,f){function h(e){if(!e.route.action&&!e.route.lazy){let e=Fe(405,{method:f.formMethod,pathname:r,routeId:n});return be(t,n,e,{flushSync:u}),!0}return!1}if(se(),X.delete(t),!i&&h(a))return;let m=M.fetchers.get(t);ce(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(f,m),{flushSync:u});let A=new AbortController,v=Pe(e.history,r,A.signal,f);if(i){let e=await st(l,r,v.signal);if("aborted"===e.type)return;if("error"===e.type)return void be(t,n,e.error,{flushSync:u});if(!e.matches)return void be(t,n,Fe(404,{pathname:r}),{flushSync:u});if(h(a=Je(l=e.matches,r)))return}H.set(t,A);let g=W,y=(await ie("action",0,v,[a],l,t))[a.route.id];if(v.signal.aborted)return void(H.get(t)===A&&H.delete(t));if(p.v7_fetcherPersist&&Q.has(t)){if(We(y)||He(y))return void ce(t,rt(void 0))}else{if(We(y))return H.delete(t),V>g?void ce(t,rt(void 0)):(K.add(t),ce(t,nt(f)),le(v,y,!1,{fetcherSubmission:f,preventScrollReset:d}));if(He(y))return void be(t,n,y.error)}if(Ze(y))throw Fe(400,{type:"defer-action"});let b=M.navigation.location||M.location,E=Pe(e.history,b,A.signal),x=o||s,C="idle"!==M.navigation.state?N(x,M.navigation.location,c):M.matches;w(C,"Didn't find any matches after fetcher action");let _=++W;G.set(t,_);let k=nt(f,y.data);M.fetchers.set(t,k);let[B,P]=Ee(e.history,M,C,f,b,!1,p.v7_skipActionErrorRevalidation,U,z,Z,Q,X,K,x,c,[a.route.id,y]);P.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,n=M.fetchers.get(t),r=nt(void 0,n?n.data:void 0);M.fetchers.set(t,r),_e(t),e.controller&&H.set(t,e.controller)})),te({fetchers:new Map(M.fetchers)});let $=()=>P.forEach((e=>_e(e.key)));A.signal.addEventListener("abort",$);let{loaderResults:R,fetcherResults:O}=await ue(M,C,B,P,E);if(A.signal.aborted)return;A.signal.removeEventListener("abort",$),G.delete(t),H.delete(t),P.forEach((e=>H.delete(e.key)));let D=je(R);if(D)return le(E,D.result,!1,{preventScrollReset:d});if(D=je(O),D)return K.add(D.key),le(E,D.result,!1,{preventScrollReset:d});let{loaderData:T,errors:I}=Ne(M,C,R,void 0,P,O,J);if(M.fetchers.has(t)){let e=rt(y.data);M.fetchers.set(t,e)}Ue(_),"loading"===M.navigation.state&&_>V?(w(L,"Expected pending action"),S&&S.abort(),ne(M.navigation.location,{matches:C,loaderData:T,errors:I,fetchers:new Map(M.fetchers)})):(te({errors:I,loaderData:Oe(M.loaderData,T,C,I),fetchers:new Map(M.fetchers)}),U=!1)}(t,n,m,g,f,h.active,i,y,A):(X.set(t,{routeId:n,path:m}),async function(t,n,r,a,o,l,i,u,s){let c=M.fetchers.get(t);ce(t,nt(s,c?c.data:void 0),{flushSync:i});let d=new AbortController,f=Pe(e.history,r,d.signal);if(l){let e=await st(o,r,f.signal);if("aborted"===e.type)return;if("error"===e.type)return void be(t,n,e.error,{flushSync:i});if(!e.matches)return void be(t,n,Fe(404,{pathname:r}),{flushSync:i});a=Je(o=e.matches,r)}H.set(t,d);let p=W,h=(await ie("loader",0,f,[a],o,t))[a.route.id];if(Ze(h)&&(h=await qe(h,f.signal,!0)||h),H.get(t)===d&&H.delete(t),!f.signal.aborted){if(!Q.has(t))return We(h)?V>p?void ce(t,rt(void 0)):(K.add(t),void await le(f,h,!1,{preventScrollReset:u})):void(He(h)?be(t,n,h.error):(w(!Ze(h),"Unhandled fetcher deferred data"),ce(t,rt(h.data))));ce(t,rt(void 0))}}(t,n,m,g,f,h.active,i,y,A))},revalidate:function(){se(),te({revalidation:"loading"}),"submitting"!==M.navigation.state&&("idle"!==M.navigation.state?re(L||M.historyAction,M.navigation.location,{overrideNavigation:M.navigation,enableViewTransition:!0===T}):re(M.historyAction,M.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:Ce,deleteFetcher:function(e){if(p.v7_fetcherPersist){let t=(q.get(e)||0)-1;t<=0?(q.delete(e),Q.add(e)):q.set(e,t)}else Se(e);te({fetchers:new Map(M.fetchers)})},dispose:function(){h&&h(),F&&F(),m.clear(),S&&S.abort(),M.fetchers.forEach(((e,t)=>Se(t))),M.blockers.forEach(((e,t)=>Ve(t)))},getBlocker:function(e,t){let n=M.blockers.get(e)||he;return ee.get(e)!==t&&ee.set(e,t),n},deleteBlocker:Ve,patchRoutes:function(e,t){let n=null==o;we(e,t,o||s,u,a),n&&(s=[...s],te({}))},_internalFetchControllers:H,_internalActiveDeferreds:J,_internalSetRoutes:function(e){u={},o=R(e,a,void 0,u)}},i}({basename:void 0,future:Lt({},void 0,{v7_prependBasename:!0}),history:function(e){return void 0===e&&(e={}),function(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:o=!1}=r,l=a.history,i=b.Pop,u=null,s=c();function c(){return(l.state||{idx:null}).idx}function d(){i=b.Pop;let e=c(),t=null==e?null:e-s;s=e,u&&u({action:i,location:p.location,delta:t})}function f(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:M(e);return n=n.replace(/ $/,"%20"),w(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==s&&(s=0,l.replaceState(C({},l.state,{idx:s}),""));let p={get action(){return i},get location(){return e(a,l)},listen(e){if(u)throw new Error("A history only accepts one active listener");return a.addEventListener(S,d),u=e,()=>{a.removeEventListener(S,d),u=null}},createHref:e=>t(a,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){i=b.Push;let r=B(p.location,e,t);n&&n(r,e),s=c()+1;let d=k(r,s),f=p.createHref(r);try{l.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(f)}o&&u&&u({action:i,location:p.location,delta:1})},replace:function(e,t){i=b.Replace;let r=B(p.location,e,t);n&&n(r,e),s=c();let a=k(r,s),d=p.createHref(r);l.replaceState(a,"",d),o&&u&&u({action:i,location:p.location,delta:0})},go:e=>l.go(e)};return p}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return B("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:M(t)}),null,e)}({window:void 0}),hydrationData:function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Lt({},t,{errors:Nt(t.errors)})),t}(),routes:ra,mapRouteProperties:function(e){let n={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(n,{element:t.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(n,{hydrateFallbackElement:t.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(n,{errorElement:t.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),n},dataStrategy:void 0,patchRoutesOnNavigation:void 0,window:void 0}).initialize());var ra;const aa=()=>(0,e.jsx)(Ut,{router:na,fallbackElement:(0,e.jsx)("p",{children:"Loading..."})});r.createRoot(document.getElementById("root")).render((0,e.jsx)(t.StrictMode,{children:(0,e.jsx)((function(){return(0,e.jsx)(aa,{})}),{})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxN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QU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE9BSzVtQzVDLEVBQU9HLFFBQVVBLEVBQVF5dkMsUUFDekI1dkMsRUFBT0csUUFBUCxRQUF5QkEsRUFBUXl2QyxxQ0NaakN0c0MsT0FBT3NFLGVBQWV6SCxFQUFTLGFBQWMsQ0FDM0MySixPQUFPLElBRVQzSixFQUFB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U0FDcERqckcsUUFBTyxTQUFLLGFBQWtCLENBQUVrRCxVQUFVLFVDRi9DLFdBQ0ksT0FBTyxTQUFLLEdBQWdCLENBQUMsRUFDakMsR0RBeUQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlYXV0eV9zaG9wL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2JlYXV0eV9zaG9wL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9yZXNldC1jc3MvcmVzZXQuY3NzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL2FwcC9BcHAuY3NzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL2FwcC9wcm92aWRlcnMvcm91dGVyL2xheW91dHMvcm9vdC1sYXlvdXQvY29tcG9uZW50cy9Gb290ZXIvRm9vdGVyLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvYXBwL3Byb3ZpZGVycy9yb3V0ZXIvbGF5b3V0cy9yb290LWxheW91dC9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9jb21wb25lbnRzL21vZGFsL01vZGFsLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvY29tcG9uZW50cy9yZWdpc3RyYXRpb25Gb3JtL3JlZ2lzdHJhdGlvbkZvcm0ubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9TZWFyY2gubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9zdHlsZXMvZXJyb3I0MDQubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9zdHlsZXMvaW5kZXguY3NzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL3N0eWxlcy9yZXNldC5jc3MiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvc3R5bGVzL3ZhcmlhYmxlcy9jb2xvcnMuY3NzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL3VpL0J1dHRvbi9idXR0b24ubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy91aS9JbnB1dC9pbnB1dC5tb2R1bGUuY3NzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL3VpL01vZGFsL1VpTW9kYWwubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL3VpL0J1dHRvbi9idXR0b24ubW9kdWxlLmNzcz84ODE0Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL3VpL0J1dHRvbi9CdXR0b24udHN4Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2FscGhhLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvYmxhY2tsaXN0LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9lcXVhbHMuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0FiYVJvdXRpbmcuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0FmdGVyLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNBbHBoYS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzQWxwaGFudW1lcmljLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNBc2NpaS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzQklDLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCYXNlMzIuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0Jhc2U1OC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzQmFzZTY0LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNCZWZvcmUuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0J0Y0FkZHJlc3MuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0J5dGVMZW5ndGguanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0NyZWRpdENhcmQuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0N1cnJlbmN5LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNEYXRhVVJJLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNEYXRlLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNEZWNpbWFsLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNEaXZpc2libGVCeS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzRUFOLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNFbWFpbC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0V0aGVyZXVtQWRkcmVzcy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzRlFETi5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzRmxvYXQuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0Z1bGxXaWR0aC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSFNMLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNIYWxmV2lkdGguanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0hhc2guanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0hleENvbG9yLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNIZXhhZGVjaW1hbC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSUJBTi5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSU1FSS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVAuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lQUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lTQk4uanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lTSU4uanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0lTTzMxNjYxQWxwaGEyLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNJU08zMTY2MUFscGhhMy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNPNDIxNy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNPNjM0Ni5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNPNjM5MS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNPODYwMS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNSQy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSVNTTi5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSWRlbnRpdHlDYXJkLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNJbi5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzSW50LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNKU09OLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNKV1QuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0xhdExvbmcuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTGljZW5zZVBsYXRlLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc0xvd2VyY2FzZS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTHVobk51bWJlci5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTUFDQWRkcmVzcy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTUQ1LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNNYWduZXRVUkkuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc01haWx0b1VSSS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzTWltZVR5cGUuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc01vYmlsZVBob25lLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNNb25nb0lkLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNNdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc09jdGFsLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNQYXNzcG9ydE51bWJlci5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzUG9ydC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzUG9zdGFsQ29kZS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzUkZDMzMzOS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzUmdiQ29sb3IuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1NlbVZlci5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzU2x1Zy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzU3Ryb25nUGFzc3dvcmQuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1N1cnJvZ2F0ZVBhaXIuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1RheElELmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNUaW1lLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNVUkwuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1VVSUQuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc1VwcGVyY2FzZS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2lzVkFULmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNWYXJpYWJsZVdpZHRoLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNXaGl0ZWxpc3RlZC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL2x0cmltLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvbWF0Y2hlcy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL25vcm1hbGl6ZUVtYWlsLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvcnRyaW0uanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9zdHJpcExvdy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3RvQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3RvRGF0ZS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3RvRmxvYXQuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi90b0ludC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3RyaW0uanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi91bmVzY2FwZS5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3V0aWwvYWxnb3JpdGhtcy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3V0aWwvYXNzZXJ0U3RyaW5nLmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvdXRpbC9pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3V0aWwvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi91dGlsL211bHRpbGluZVJlZ2V4LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvdXRpbC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3doaXRlbGlzdC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovL2JlYXV0eV9zaG9wL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JlYXV0eV9zaG9wL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JlYXV0eV9zaG9wL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL2JlYXV0eV9zaG9wL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JlYXV0eV9zaG9wL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3Avd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvYXBwL0FwcC5jc3M/MjY0MSIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvc3R5bGVzL2Vycm9yNDA0Lm1vZHVsZS5jc3M/NzkyMSIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9hcHAvcHJvdmlkZXJzL3JvdXRlci9sYXlvdXRzL3Jvb3QtbGF5b3V0L2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5tb2R1bGUuY3NzP2I5ODUiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvY29tcG9uZW50cy9tb2RhbC9Nb2RhbC5tb2R1bGUuY3NzPzYzZGMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvdWkvSW5wdXQvaW5wdXQubW9kdWxlLmNzcz8yM2E1Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL3VpL0lucHV0L0lucHV0LnRzeCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy91aS9Nb2RhbC9VaU1vZGFsLm1vZHVsZS5jc3M/ZjY2ZCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy91aS9Qb3J0YWwvUG9ydGFsLnRzeCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy91aS9Nb2RhbC9Nb2RhbC50c3giLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvY29tcG9uZW50cy9yZWdpc3RyYXRpb25Gb3JtL3JlZ2lzdHJhdGlvbkZvcm0ubW9kdWxlLmNzcz8yYjJjIiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvb2stZm9ybS9kaXN0L2luZGV4LmVzbS5tanMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvY29tcG9uZW50cy9yZWdpc3RyYXRpb25Gb3JtL1JlZ2lzdHJhdGlvbkZvcm0udHN4Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvTW9kYWwudHN4Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1NlYXJjaC5tb2R1bGUuY3NzPzhmNWMiLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoLnRzeCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9hcHAvcHJvdmlkZXJzL3JvdXRlci9sYXlvdXRzL3Jvb3QtbGF5b3V0L2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci50c3giLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvYXBwL3Byb3ZpZGVycy9yb3V0ZXIvbGF5b3V0cy9yb290LWxheW91dC9jb21wb25lbnRzL0Zvb3Rlci9Gb290ZXIubW9kdWxlLmNzcz9hNGU0Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL2FwcC9wcm92aWRlcnMvcm91dGVyL2xheW91dHMvcm9vdC1sYXlvdXQvY29tcG9uZW50cy9Gb290ZXIvRm9vdGVyLnRzeCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9hcHAvcHJvdmlkZXJzL3JvdXRlci9yb3V0ZXIudHN4Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL2FwcC9wcm92aWRlcnMvcm91dGVyL2xheW91dHMvcm9vdC1sYXlvdXQvaW5kZXgudHN4Iiwid2VicGFjazovL2JlYXV0eV9zaG9wLy4vc3JjL3BhZ2VzL05vdEZvdW5kUGFnZS50c3giLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvYXBwL3Byb3ZpZGVycy9yb3V0ZXIvcm91dGVyLXByb3ZpZGVyLnRzeCIsIndlYnBhY2s6Ly9iZWF1dHlfc2hvcC8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYmVhdXR5X3Nob3AvLi9zcmMvYXBwL0FwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiYmVhdXR5X3Nob3A6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvXG4gICB2NS4wLjEgfCAyMDE5MTAxOVxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcbiovXG5cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWFpbiwgbWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuXHRtYXJnaW46IDA7XG5cdHBhZGRpbmc6IDA7XG5cdGJvcmRlcjogMDtcblx0Zm9udC1zaXplOiAxMDAlO1xuXHRmb250OiBpbmhlcml0O1xuXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWFpbiwgbWVudSwgbmF2LCBzZWN0aW9uIHtcblx0ZGlzcGxheTogYmxvY2s7XG59XG4vKiBIVE1MNSBoaWRkZW4tYXR0cmlidXRlIGZpeCBmb3IgbmV3ZXIgYnJvd3NlcnMgKi9cbipbaGlkZGVuXSB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cbmJvZHkge1xuXHRsaW5lLWhlaWdodDogMTtcbn1cbm1lbnUsIG9sLCB1bCB7XG5cdGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5ibG9ja3F1b3RlLCBxIHtcblx0cXVvdGVzOiBub25lO1xufVxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSwgcTphZnRlciB7XG5cdGNvbnRlbnQ6ICcnO1xuXHRjb250ZW50OiBub25lO1xufVxudGFibGUge1xuXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuXHRib3JkZXItc3BhY2luZzogMDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL3Jlc2V0LWNzcy9yZXNldC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7OztDQUdDOztBQUVEOzs7Ozs7Ozs7Ozs7O0NBYUMsU0FBUztDQUNULFVBQVU7Q0FDVixTQUFTO0NBQ1QsZUFBZTtDQUNmLGFBQWE7Q0FDYix3QkFBd0I7QUFDekI7QUFDQSxnREFBZ0Q7QUFDaEQ7O0NBRUMsY0FBYztBQUNmO0FBQ0Esa0RBQWtEO0FBQ2xEO0lBQ0ksYUFBYTtBQUNqQjtBQUNBO0NBQ0MsY0FBYztBQUNmO0FBQ0E7Q0FDQyxnQkFBZ0I7QUFDakI7QUFDQTtDQUNDLFlBQVk7QUFDYjtBQUNBOztDQUVDLFdBQVc7Q0FDWCxhQUFhO0FBQ2Q7QUFDQTtDQUNDLHlCQUF5QjtDQUN6QixpQkFBaUI7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cXG4gICB2NS4wLjEgfCAyMDE5MTAxOVxcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXFxuKi9cXG5cXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcXG5iLCB1LCBpLCBjZW50ZXIsXFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCxcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsXFxubWFpbiwgbWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcXG5cXHRtYXJnaW46IDA7XFxuXFx0cGFkZGluZzogMDtcXG5cXHRib3JkZXI6IDA7XFxuXFx0Zm9udC1zaXplOiAxMDAlO1xcblxcdGZvbnQ6IGluaGVyaXQ7XFxuXFx0dmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXFxuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtYWluLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xcblxcdGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4vKiBIVE1MNSBoaWRkZW4tYXR0cmlidXRlIGZpeCBmb3IgbmV3ZXIgYnJvd3NlcnMgKi9cXG4qW2hpZGRlbl0ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5ib2R5IHtcXG5cXHRsaW5lLWhlaWdodDogMTtcXG59XFxubWVudSwgb2wsIHVsIHtcXG5cXHRsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5ibG9ja3F1b3RlLCBxIHtcXG5cXHRxdW90ZXM6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxcbnE6YmVmb3JlLCBxOmFmdGVyIHtcXG5cXHRjb250ZW50OiAnJztcXG5cXHRjb250ZW50OiBub25lO1xcbn1cXG50YWJsZSB7XFxuXFx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG5cXHRib3JkZXItc3BhY2luZzogMDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vc3R5bGVzL2luZGV4LmNzc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYm9keSB7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2FwcC9BcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLFNBQVM7RUFDVCxVQUFVO0FBQ1o7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaENcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3N0eWxlcy9pbmRleC5jc3NcXFwiKTtcXG5cXG4qIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmZvb3RlckNvbnRhaW5lciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XG4gIGNvbG9yOiAjZGRkO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbn1cblxuLmZvb3Rlck1haW4ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBtYXgtd2lkdGg6IDEyMDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzQ0NDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmZvb3RlclNlY3Rpb24ge1xuICBmbGV4OiAxIDEgMTgwcHg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4uZm9vdGVyU2VjdGlvbiBoMyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgY29sb3I6ICNmZmY7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG59XG5cbi5mb290ZXJTZWN0aW9uIHAsXG4uZm9vdGVyU2VjdGlvbiB1bCB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbWFyZ2luOiAwO1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uZm9vdGVyU2VjdGlvbiB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi5mb290ZXJTZWN0aW9uIHVsIGxpIHtcbiAgbWFyZ2luOiA1cHggMDtcbn1cblxuLmZvb3RlclNlY3Rpb24gdWwgbGkgYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgY29sb3I6ICNkZGQ7XG59XG5cbi5mb290ZXJTZWN0aW9uIHVsIGxpIGE6aG92ZXIge1xuICBjb2xvcjogcmdiKDI0NSAxNjMgMTgzIC8gMTAwJSk7XG59XG5cbi5icmFuZE5hbWUge1xuICBjb2xvcjogcmdiKDI0NSAxNjMgMTgzIC8gMTAwJSk7XG59XG5cbi5zb2NpYWxJY29ucyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogNjBweDtcbn1cblxuLnNvY2lhbEljb25zIGltZyB7XG4gIHdpZHRoOiAyOXB4O1xuICBoZWlnaHQ6IDI5cHg7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzIGVhc2U7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnNvY2lhbEljb25zIGltZzpob3ZlciB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcbn1cblxuLmZvb3RlclN1YnNjcmliZSB7XG4gIG1heC13aWR0aDogMjAwcHg7XG59XG5cbi5mb290ZXJTdWJzY3JpYmUgaW5wdXQge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogOHB4O1xuICBtYXJnaW46IDEwcHggMDtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5mb290ZXJCb3R0b20ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgY29sb3I6ICNhYWE7XG4gIG1heC13aWR0aDogMTIwMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZy10b3A6IDIwcHg7XG59XG5cbi5mb290ZXJMaW5rcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMjBweDtcbn1cblxuLmZvb3Rlckxpbms6aG92ZXIge1xuICBjb2xvcjogcmdiKDI0NSAxNjMgMTgzIC8gMTAwJSk7XG59XG5cbi5zdWJzY3JpYmVGb3JtTGluazpob3ZlciB7XG4gIGNvbG9yOiByZ2IoMjQ1IDE2MyAxODMgLyAxMDAlKTtcbn1cblxuLnRoaXJkIHtcbiAgbWFyZ2luLXRvcDogLTQwcHg7XG59XG5cbnNwYW4ge1xuICBsaW5lLWhlaWdodDogMS41O1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYXBwL3Byb3ZpZGVycy9yb3V0ZXIvbGF5b3V0cy9yb290LWxheW91dC9jb21wb25lbnRzL0Zvb3Rlci9Gb290ZXIubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHNCQUFzQjtFQUN0QixXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLDhCQUE4QjtBQUNoQzs7QUFFQTtFQUNFLGFBQWE7RUFDYixpQkFBaUI7RUFDakIsY0FBYztFQUNkLG9CQUFvQjtFQUNwQiw2QkFBNkI7RUFDN0IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGVBQWU7RUFDZixXQUFXO0VBQ1gsbUJBQW1CO0FBQ3JCOztBQUVBOztFQUVFLGVBQWU7RUFDZixTQUFTO0VBQ1QsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFVBQVU7QUFDWjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWiwrQkFBK0I7RUFDL0IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osY0FBYztFQUNkLFlBQVk7RUFDWixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2YsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixjQUFjO0VBQ2QsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7QUFDWDs7QUFFQTtFQUNFLDhCQUE4QjtBQUNoQzs7QUFFQTtFQUNFLDhCQUE4QjtBQUNoQzs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZm9vdGVyQ29udGFpbmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XFxuICBjb2xvcjogI2RkZDtcXG4gIHBhZGRpbmc6IDQwcHggMjBweDtcXG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcXG59XFxuXFxuLmZvb3Rlck1haW4ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1heC13aWR0aDogMTIwMHB4O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNDQ0O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmZvb3RlclNlY3Rpb24ge1xcbiAgZmxleDogMSAxIDE4MHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi5mb290ZXJTZWN0aW9uIGgzIHtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmZvb3RlclNlY3Rpb24gcCxcXG4uZm9vdGVyU2VjdGlvbiB1bCB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBtYXJnaW46IDA7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcbn1cXG5cXG4uZm9vdGVyU2VjdGlvbiB1bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLmZvb3RlclNlY3Rpb24gdWwgbGkge1xcbiAgbWFyZ2luOiA1cHggMDtcXG59XFxuXFxuLmZvb3RlclNlY3Rpb24gdWwgbGkgYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjb2xvcjogI2RkZDtcXG59XFxuXFxuLmZvb3RlclNlY3Rpb24gdWwgbGkgYTpob3ZlciB7XFxuICBjb2xvcjogcmdiKDI0NSAxNjMgMTgzIC8gMTAwJSk7XFxufVxcblxcbi5icmFuZE5hbWUge1xcbiAgY29sb3I6IHJnYigyNDUgMTYzIDE4MyAvIDEwMCUpO1xcbn1cXG5cXG4uc29jaWFsSWNvbnMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogNjBweDtcXG59XFxuXFxuLnNvY2lhbEljb25zIGltZyB7XFxuICB3aWR0aDogMjlweDtcXG4gIGhlaWdodDogMjlweDtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzIGVhc2U7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zb2NpYWxJY29ucyBpbWc6aG92ZXIge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xcbn1cXG5cXG4uZm9vdGVyU3Vic2NyaWJlIHtcXG4gIG1heC13aWR0aDogMjAwcHg7XFxufVxcblxcbi5mb290ZXJTdWJzY3JpYmUgaW5wdXQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBtYXJnaW46IDEwcHggMDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXFxuLmZvb3RlckJvdHRvbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjYWFhO1xcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xcbn1cXG5cXG4uZm9vdGVyTGlua3Mge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMjBweDtcXG59XFxuXFxuLmZvb3Rlckxpbms6aG92ZXIge1xcbiAgY29sb3I6IHJnYigyNDUgMTYzIDE4MyAvIDEwMCUpO1xcbn1cXG5cXG4uc3Vic2NyaWJlRm9ybUxpbms6aG92ZXIge1xcbiAgY29sb3I6IHJnYigyNDUgMTYzIDE4MyAvIDEwMCUpO1xcbn1cXG5cXG4udGhpcmQge1xcbiAgbWFyZ2luLXRvcDogLTQwcHg7XFxufVxcblxcbnNwYW4ge1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiZm9vdGVyQ29udGFpbmVyXCI6IGBmb290ZXJDb250YWluZXJgLFxuXHRcImZvb3Rlck1haW5cIjogYGZvb3Rlck1haW5gLFxuXHRcImZvb3RlclNlY3Rpb25cIjogYGZvb3RlclNlY3Rpb25gLFxuXHRcImJyYW5kTmFtZVwiOiBgYnJhbmROYW1lYCxcblx0XCJzb2NpYWxJY29uc1wiOiBgc29jaWFsSWNvbnNgLFxuXHRcImZvb3RlclN1YnNjcmliZVwiOiBgZm9vdGVyU3Vic2NyaWJlYCxcblx0XCJmb290ZXJCb3R0b21cIjogYGZvb3RlckJvdHRvbWAsXG5cdFwiZm9vdGVyTGlua3NcIjogYGZvb3RlckxpbmtzYCxcblx0XCJmb290ZXJMaW5rXCI6IGBmb290ZXJMaW5rYCxcblx0XCJzdWJzY3JpYmVGb3JtTGlua1wiOiBgc3Vic2NyaWJlRm9ybUxpbmtgLFxuXHRcInRoaXJkXCI6IGB0aGlyZGBcbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5oZWFkZXIge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA4MHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNlNWU1ZTU7XG59XG5cbi5oZWFkZXJDb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHdpZHRoOiA3MCU7XG4gIG1heC13aWR0aDogMTkyMHB4O1xufVxuXG4udGl0bGUge1xuICBmb250LXNpemU6IDI0cHg7XG4gIGNvbG9yOiAjZjVhM2I3O1xuICBmb250LXdlaWdodDogNTAwO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbi50aXRsZVNwYW4ge1xuICBjb2xvcjogYmxhY2s7XG59XG5cbi5oZWFkZXJOYXYge1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDQwcHg7XG59XG5cbi5oZWFkZXJOYXZMaW5rIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGNvbG9yOiBibGFjaztcbn1cblxuLmhlYWRlck5hdkxpbms6aG92ZXIge1xuICBjb2xvcjogcmdiKDI0NSAxNjMgMTgzIC8gMTAwJSk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmljb25zIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAyMHB4O1xufVxuXG4uaWNvbkl0ZW0ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IDEwcHg7XG4gIGNvbG9yOiBibGFjaztcbn1cblxuLmljb25JdGVtOmhvdmVyIHtcbiAgY29sb3I6IHJnYigyNDUgMTYzIDE4MyAvIDEwMCUpO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5pY29uSXRlbUltZyB7XG4gIHdpZHRoOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIG1hcmdpbi1ib3R0b206IDRweDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2FwcC9wcm92aWRlcnMvcm91dGVyL2xheW91dHMvcm9vdC1sYXlvdXQvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsOEJBQThCO0VBQzlCLFVBQVU7RUFDVixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLGVBQWU7RUFDZixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSw4QkFBOEI7RUFDOUIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2YsWUFBWTtBQUNkOztBQUVBO0VBQ0UsOEJBQThCO0VBQzlCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGtCQUFrQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaGVhZGVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA4MHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjZTVlNWU1O1xcbn1cXG5cXG4uaGVhZGVyQ29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgd2lkdGg6IDcwJTtcXG4gIG1heC13aWR0aDogMTkyMHB4O1xcbn1cXG5cXG4udGl0bGUge1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgY29sb3I6ICNmNWEzYjc7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4udGl0bGVTcGFuIHtcXG4gIGNvbG9yOiBibGFjaztcXG59XFxuXFxuLmhlYWRlck5hdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiA0MHB4O1xcbn1cXG5cXG4uaGVhZGVyTmF2TGluayB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5oZWFkZXJOYXZMaW5rOmhvdmVyIHtcXG4gIGNvbG9yOiByZ2IoMjQ1IDE2MyAxODMgLyAxMDAlKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmljb25zIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDIwcHg7XFxufVxcblxcbi5pY29uSXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDEwcHg7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5pY29uSXRlbTpob3ZlciB7XFxuICBjb2xvcjogcmdiKDI0NSAxNjMgMTgzIC8gMTAwJSk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5pY29uSXRlbUltZyB7XFxuICB3aWR0aDogMjBweDtcXG4gIGhlaWdodDogMjBweDtcXG4gIG1hcmdpbi1ib3R0b206IDRweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiaGVhZGVyXCI6IGBoZWFkZXJgLFxuXHRcImhlYWRlckNvbnRhaW5lclwiOiBgaGVhZGVyQ29udGFpbmVyYCxcblx0XCJ0aXRsZVwiOiBgdGl0bGVgLFxuXHRcInRpdGxlU3BhblwiOiBgdGl0bGVTcGFuYCxcblx0XCJoZWFkZXJOYXZcIjogYGhlYWRlck5hdmAsXG5cdFwiaGVhZGVyTmF2TGlua1wiOiBgaGVhZGVyTmF2TGlua2AsXG5cdFwiaWNvbnNcIjogYGljb25zYCxcblx0XCJpY29uSXRlbVwiOiBgaWNvbkl0ZW1gLFxuXHRcImljb25JdGVtSW1nXCI6IGBpY29uSXRlbUltZ2Bcbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5tb2RhbE92ZXJsYXkge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogcmdiKDAgMCAwIC8gNTAlKTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHotaW5kZXg6IDEwMDA7XG59XG5cbi5tb2RhbENvbnRlbnQge1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBib3gtc2hhZG93OiAwIDJweCAxMHB4IHJnYigxODUgMTY2IDE4OSAvIDEwJSk7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNDBweCAxMDBweDtcbiAgd2lkdGg6IDU5OHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDIwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmNsb3NlQnV0dG9uIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDIwcHg7XG4gIHJpZ2h0OiAyMHB4O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IG5vbmU7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogIzY5NzU4Njtcbn1cblxuLm1vZGFsVGl0bGUge1xuICBmb250LWZhbWlseTogUG9wcGlucywgc2Fucy1zZXJpZjtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zaXplOiAyNnB4O1xuICBsaW5lLWhlaWdodDogMzlweDtcbiAgY29sb3I6ICMzODM4Mzg7XG4gIG1hcmdpbi1ib3R0b206IC0xMHB4O1xufVxuXG4ubW9kYWxTdWJ0aXRsZSB7XG4gIGZvbnQtZmFtaWx5OiBQb3BwaW5zLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNDAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICBjb2xvcjogI2IwYTZiZDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4ubW9kYWxJbnB1dEdyb3VwIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiAyMHB4O1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1vZGFsSW5wdXRHcm91cCBpbnB1dCB7XG4gIGhlaWdodDogNDFweDtcbiAgcGFkZGluZzogOHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmF5KTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4ubW9kYWxMb2dpbkJ1dHRvbjpob3ZlciB7XG4gIGJhY2tncm91bmQ6ICNmMjgwOTY7XG59XG5cbi5tb2RhbERpdmlkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDEwcHg7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uZGl2aWRlckxpbmUge1xuICBmbGV4OiAxO1xuICBoZWlnaHQ6IDFweDtcbiAgYmFja2dyb3VuZDogI2IwYTZiZDtcbn1cblxuLmRpdmlkZXJUZXh0IHtcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGNvbG9yOiAjYjBhNmJkO1xufVxuXG4ubW9kYWxHb29nbGVCdXR0b24ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBib3JkZXI6IDFweCBzb2xpZCAjYjBhNmJkO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgY29sb3I6ICM2OTc1ODY7XG59XG5cbi5tb2RhbEdvb2dsZUJ1dHRvbjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzUgMjMwIDIzMCAvIDUwJSk7XG59XG5cbi5tb2RhbEdvb2dsZUJ1dHRvbiBpbWcge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDEwcHg7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG59XG5cbi5tb2RhbEZvb3RlciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGNvbG9yOiAjNjk3NTg2O1xufVxuXG4ubW9kYWxGb290ZXIgcCB7XG4gIG1hcmdpbjogMTBweCAwO1xufVxuXG4ubW9kYWxMaW5rIHtcbiAgY29sb3I6ICM2OTc1ODY7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5tb2RhbExpbms6aG92ZXIge1xuICBjb2xvcjogIzM4MzgzODtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvbW9kYWwvTW9kYWwubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGVBQWU7RUFDZixNQUFNO0VBQ04sT0FBTztFQUNQLFdBQVc7RUFDWCxZQUFZO0VBQ1osNEJBQTRCO0VBQzVCLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQiw2Q0FBNkM7RUFDN0Msa0JBQWtCO0VBQ2xCLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsU0FBUztFQUNULGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixZQUFZO0VBQ1osZUFBZTtFQUNmLGVBQWU7RUFDZixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsZ0NBQWdDO0VBQ2hDLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGNBQWM7RUFDZCxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxnQ0FBZ0M7RUFDaEMsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsY0FBYztFQUNkLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsU0FBUztFQUNULFdBQVc7QUFDYjs7QUFFQTtFQUNFLFlBQVk7RUFDWixZQUFZO0VBQ1osNkJBQTZCO0VBQzdCLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2YsV0FBVztFQUNYLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsU0FBUztFQUNULFdBQVc7QUFDYjs7QUFFQTtFQUNFLE9BQU87RUFDUCxXQUFXO0VBQ1gsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZ0NBQWdDO0VBQ2hDLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsbUJBQW1CO0VBQ25CLHVCQUF1QjtFQUN2QixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLGdCQUFnQjtFQUNoQix5QkFBeUI7RUFDekIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixnQ0FBZ0M7RUFDaEMsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixjQUFjO0FBQ2hCOztBQUVBO0VBQ0Usd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixXQUFXO0VBQ1gsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGdDQUFnQztFQUNoQyxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsY0FBYztFQUNkLDBCQUEwQjtFQUMxQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubW9kYWxPdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQ6IHJnYigwIDAgMCAvIDUwJSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgei1pbmRleDogMTAwMDtcXG59XFxuXFxuLm1vZGFsQ29udGVudCB7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2IoMTg1IDE2NiAxODkgLyAxMCUpO1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgcGFkZGluZzogNDBweCAxMDBweDtcXG4gIHdpZHRoOiA1OThweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMjBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmNsb3NlQnV0dG9uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMjBweDtcXG4gIHJpZ2h0OiAyMHB4O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiAjNjk3NTg2O1xcbn1cXG5cXG4ubW9kYWxUaXRsZSB7XFxuICBmb250LWZhbWlseTogUG9wcGlucywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBmb250LXNpemU6IDI2cHg7XFxuICBsaW5lLWhlaWdodDogMzlweDtcXG4gIGNvbG9yOiAjMzgzODM4O1xcbiAgbWFyZ2luLWJvdHRvbTogLTEwcHg7XFxufVxcblxcbi5tb2RhbFN1YnRpdGxlIHtcXG4gIGZvbnQtZmFtaWx5OiBQb3BwaW5zLCBzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgY29sb3I6ICNiMGE2YmQ7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5tb2RhbElucHV0R3JvdXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDIwcHg7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLm1vZGFsSW5wdXRHcm91cCBpbnB1dCB7XFxuICBoZWlnaHQ6IDQxcHg7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmF5KTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLm1vZGFsTG9naW5CdXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZDogI2YyODA5NjtcXG59XFxuXFxuLm1vZGFsRGl2aWRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMTBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uZGl2aWRlckxpbmUge1xcbiAgZmxleDogMTtcXG4gIGhlaWdodDogMXB4O1xcbiAgYmFja2dyb3VuZDogI2IwYTZiZDtcXG59XFxuXFxuLmRpdmlkZXJUZXh0IHtcXG4gIGZvbnQtZmFtaWx5OiBQb3BwaW5zLCBzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgY29sb3I6ICNiMGE2YmQ7XFxufVxcblxcbi5tb2RhbEdvb2dsZUJ1dHRvbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYjBhNmJkO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgY29sb3I6ICM2OTc1ODY7XFxufVxcblxcbi5tb2RhbEdvb2dsZUJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM1IDIzMCAyMzAgLyA1MCUpO1xcbn1cXG5cXG4ubW9kYWxHb29nbGVCdXR0b24gaW1nIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDEwcHg7XFxuICB3aWR0aDogMjRweDtcXG4gIGhlaWdodDogMjRweDtcXG59XFxuXFxuLm1vZGFsRm9vdGVyIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtZmFtaWx5OiBQb3BwaW5zLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBjb2xvcjogIzY5NzU4NjtcXG59XFxuXFxuLm1vZGFsRm9vdGVyIHAge1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxufVxcblxcbi5tb2RhbExpbmsge1xcbiAgY29sb3I6ICM2OTc1ODY7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLm1vZGFsTGluazpob3ZlciB7XFxuICBjb2xvcjogIzM4MzgzODtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibW9kYWxPdmVybGF5XCI6IGBtb2RhbE92ZXJsYXlgLFxuXHRcIm1vZGFsQ29udGVudFwiOiBgbW9kYWxDb250ZW50YCxcblx0XCJjbG9zZUJ1dHRvblwiOiBgY2xvc2VCdXR0b25gLFxuXHRcIm1vZGFsVGl0bGVcIjogYG1vZGFsVGl0bGVgLFxuXHRcIm1vZGFsU3VidGl0bGVcIjogYG1vZGFsU3VidGl0bGVgLFxuXHRcIm1vZGFsSW5wdXRHcm91cFwiOiBgbW9kYWxJbnB1dEdyb3VwYCxcblx0XCJtb2RhbExvZ2luQnV0dG9uXCI6IGBtb2RhbExvZ2luQnV0dG9uYCxcblx0XCJtb2RhbERpdmlkZXJcIjogYG1vZGFsRGl2aWRlcmAsXG5cdFwiZGl2aWRlckxpbmVcIjogYGRpdmlkZXJMaW5lYCxcblx0XCJkaXZpZGVyVGV4dFwiOiBgZGl2aWRlclRleHRgLFxuXHRcIm1vZGFsR29vZ2xlQnV0dG9uXCI6IGBtb2RhbEdvb2dsZUJ1dHRvbmAsXG5cdFwibW9kYWxGb290ZXJcIjogYG1vZGFsRm9vdGVyYCxcblx0XCJtb2RhbExpbmtcIjogYG1vZGFsTGlua2Bcbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5tb2RhbE92ZXJsYXkge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogcmdiKDAgMCAwIC8gNTAlKTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHotaW5kZXg6IDEwMDA7XG59XG5cbi5lcnJvciB7XG4gIGNvbG9yOiAjYmYxNjUwO1xufVxuXG4uZXJyb3I6OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi4pqgIFwiO1xuICBtYXJnaW4tcmlnaHQ6IDVweDtcbn1cblxuLm1vZGFsQ29udGVudCB7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBib3gtc2hhZG93OiAwIDJweCAxMHB4IHJnYigxODUgMTY2IDE4OSAvIDEwJSk7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNDBweCAxMDBweDtcbiAgd2lkdGg6IDYwMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDIwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmNsb3NlQnV0dG9uIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDIwcHg7XG4gIHJpZ2h0OiAyMHB4O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IG5vbmU7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogIzY5NzU4Njtcbn1cblxuLm1vZGFsVGl0bGUge1xuICBmb250LWZhbWlseTogUG9wcGlucywgc2Fucy1zZXJpZjtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zaXplOiAyNnB4O1xuICBsaW5lLWhlaWdodDogMzlweDtcbiAgY29sb3I6ICMzODM4Mzg7XG4gIG1hcmdpbi1ib3R0b206IC0xMHB4O1xufVxuXG4ubW9kYWxTdWJ0aXRsZSB7XG4gIGZvbnQtZmFtaWx5OiBQb3BwaW5zLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNDAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICBjb2xvcjogI2IwYTZiZDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4ubW9kYWxJbnB1dEdyb3VwIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiAyMHB4O1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1vZGFsSW5wdXRHcm91cCBpbnB1dCB7XG4gIGhlaWdodDogNDFweDtcbiAgcGFkZGluZzogOHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmF5KTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4ubW9kYWxMb2dpbkJ1dHRvbiB7XG4gIG1hcmdpbjogMjBweCAwO1xufVxuXG4uc3Vic2NyaWJlIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICBmb250LXNpemU6IDE0cHg7XG59XG5cbi5tb2RhbExvZ2luQnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZDogI2YyODA5Njtcbn1cblxuLm1vZGFsRGl2aWRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMTBweDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogMjBweCAwO1xufVxuXG4uZGl2aWRlckxpbmUge1xuICBmbGV4OiAxO1xuICBoZWlnaHQ6IDFweDtcbiAgYmFja2dyb3VuZDogI2IwYTZiZDtcbn1cblxuLmRpdmlkZXJUZXh0IHtcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGNvbG9yOiAjYjBhNmJkO1xufVxuXG4ubW9kYWxHb29nbGVCdXR0b24ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBib3JkZXI6IDFweCBzb2xpZCAjYjBhNmJkO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgY29sb3I6ICM2OTc1ODY7XG59XG5cbi5tb2RhbEdvb2dsZUJ1dHRvbjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzUgMjMwIDIzMCAvIDUwJSk7XG59XG5cbi5tb2RhbEdvb2dsZUJ1dHRvbiBpbWcge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDEwcHg7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG59XG5cbi5tb2RhbEZvb3RlciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGNvbG9yOiAjNjk3NTg2O1xufVxuXG4ubW9kYWxGb290ZXIgcCB7XG4gIG1hcmdpbjogMTBweCAwO1xufVxuXG4ubW9kYWxMaW5rIHtcbiAgY29sb3I6ICM2OTc1ODY7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5tb2RhbExpbms6aG92ZXIge1xuICBjb2xvcjogIzM4MzgzODtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvcmVnaXN0cmF0aW9uRm9ybS9yZWdpc3RyYXRpb25Gb3JtLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxlQUFlO0VBQ2YsTUFBTTtFQUNOLE9BQU87RUFDUCxXQUFXO0VBQ1gsWUFBWTtFQUNaLDRCQUE0QjtFQUM1QixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsNkNBQTZDO0VBQzdDLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLFNBQVM7RUFDVCxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsU0FBUztFQUNULFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsWUFBWTtFQUNaLGVBQWU7RUFDZixlQUFlO0VBQ2YsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGdDQUFnQztFQUNoQyxnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixjQUFjO0VBQ2Qsb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0UsZ0NBQWdDO0VBQ2hDLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGNBQWM7RUFDZCxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFNBQVM7RUFDVCxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxZQUFZO0VBQ1osWUFBWTtFQUNaLDZCQUE2QjtFQUM3QixrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLFdBQVc7RUFDWCxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsU0FBUztFQUNULFdBQVc7RUFDWCxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsT0FBTztFQUNQLFdBQVc7RUFDWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxnQ0FBZ0M7RUFDaEMsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsZ0JBQWdCO0VBQ2hCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLGdDQUFnQztFQUNoQyxnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSx3Q0FBd0M7QUFDMUM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLFdBQVc7RUFDWCxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0NBQWdDO0VBQ2hDLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsMEJBQTBCO0VBQzFCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tb2RhbE92ZXJsYXkge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZDogcmdiKDAgMCAwIC8gNTAlKTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB6LWluZGV4OiAxMDAwO1xcbn1cXG5cXG4uZXJyb3Ige1xcbiAgY29sb3I6ICNiZjE2NTA7XFxufVxcblxcbi5lcnJvcjo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCLimqAgXFxcIjtcXG4gIG1hcmdpbi1yaWdodDogNXB4O1xcbn1cXG5cXG4ubW9kYWxDb250ZW50IHtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggcmdiKDE4NSAxNjYgMTg5IC8gMTAlKTtcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gIHBhZGRpbmc6IDQwcHggMTAwcHg7XFxuICB3aWR0aDogNjAwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDIwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5jbG9zZUJ1dHRvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDIwcHg7XFxuICByaWdodDogMjBweDtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogIzY5NzU4NjtcXG59XFxuXFxuLm1vZGFsVGl0bGUge1xcbiAgZm9udC1mYW1pbHk6IFBvcHBpbnMsIHNhbnMtc2VyaWY7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgZm9udC1zaXplOiAyNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDM5cHg7XFxuICBjb2xvcjogIzM4MzgzODtcXG4gIG1hcmdpbi1ib3R0b206IC0xMHB4O1xcbn1cXG5cXG4ubW9kYWxTdWJ0aXRsZSB7XFxuICBmb250LWZhbWlseTogUG9wcGlucywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGNvbG9yOiAjYjBhNmJkO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubW9kYWxJbnB1dEdyb3VwIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5tb2RhbElucHV0R3JvdXAgaW5wdXQge1xcbiAgaGVpZ2h0OiA0MXB4O1xcbiAgcGFkZGluZzogOHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JheSk7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5tb2RhbExvZ2luQnV0dG9uIHtcXG4gIG1hcmdpbjogMjBweCAwO1xcbn1cXG5cXG4uc3Vic2NyaWJlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4ubW9kYWxMb2dpbkJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZjI4MDk2O1xcbn1cXG5cXG4ubW9kYWxEaXZpZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW46IDIwcHggMDtcXG59XFxuXFxuLmRpdmlkZXJMaW5lIHtcXG4gIGZsZXg6IDE7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJhY2tncm91bmQ6ICNiMGE2YmQ7XFxufVxcblxcbi5kaXZpZGVyVGV4dCB7XFxuICBmb250LWZhbWlseTogUG9wcGlucywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGNvbG9yOiAjYjBhNmJkO1xcbn1cXG5cXG4ubW9kYWxHb29nbGVCdXR0b24ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2IwYTZiZDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtZmFtaWx5OiBQb3BwaW5zLCBzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGNvbG9yOiAjNjk3NTg2O1xcbn1cXG5cXG4ubW9kYWxHb29nbGVCdXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNSAyMzAgMjMwIC8gNTAlKTtcXG59XFxuXFxuLm1vZGFsR29vZ2xlQnV0dG9uIGltZyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAxMHB4O1xcbiAgd2lkdGg6IDI0cHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxufVxcblxcbi5tb2RhbEZvb3RlciB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LWZhbWlseTogUG9wcGlucywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgY29sb3I6ICM2OTc1ODY7XFxufVxcblxcbi5tb2RhbEZvb3RlciBwIHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbn1cXG5cXG4ubW9kYWxMaW5rIHtcXG4gIGNvbG9yOiAjNjk3NTg2O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5tb2RhbExpbms6aG92ZXIge1xcbiAgY29sb3I6ICMzODM4Mzg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1vZGFsT3ZlcmxheVwiOiBgbW9kYWxPdmVybGF5YCxcblx0XCJlcnJvclwiOiBgZXJyb3JgLFxuXHRcIm1vZGFsQ29udGVudFwiOiBgbW9kYWxDb250ZW50YCxcblx0XCJjbG9zZUJ1dHRvblwiOiBgY2xvc2VCdXR0b25gLFxuXHRcIm1vZGFsVGl0bGVcIjogYG1vZGFsVGl0bGVgLFxuXHRcIm1vZGFsU3VidGl0bGVcIjogYG1vZGFsU3VidGl0bGVgLFxuXHRcIm1vZGFsSW5wdXRHcm91cFwiOiBgbW9kYWxJbnB1dEdyb3VwYCxcblx0XCJtb2RhbExvZ2luQnV0dG9uXCI6IGBtb2RhbExvZ2luQnV0dG9uYCxcblx0XCJzdWJzY3JpYmVcIjogYHN1YnNjcmliZWAsXG5cdFwibW9kYWxEaXZpZGVyXCI6IGBtb2RhbERpdmlkZXJgLFxuXHRcImRpdmlkZXJMaW5lXCI6IGBkaXZpZGVyTGluZWAsXG5cdFwiZGl2aWRlclRleHRcIjogYGRpdmlkZXJUZXh0YCxcblx0XCJtb2RhbEdvb2dsZUJ1dHRvblwiOiBgbW9kYWxHb29nbGVCdXR0b25gLFxuXHRcIm1vZGFsRm9vdGVyXCI6IGBtb2RhbEZvb3RlcmAsXG5cdFwibW9kYWxMaW5rXCI6IGBtb2RhbExpbmtgXG59O1xubW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAub3ZlcmxheU1vZGFsU2VhcmNoIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwIDAgMCAvIDUwJSk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgei1pbmRleDogMTAwMDtcbn1cblxuLm1vZGFsU2VhcmNoSW5wdXQge1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgcGFkZGluZzogMTVweCAyMHB4O1xuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG59XG5cbi5zZWFyY2hJbnB1dCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiA2MCU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNlYWVhZWE7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnN0eWxlZElucHV0IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNDZweDtcbiAgYm9yZGVyOiBub25lO1xuICBwYWRkaW5nOiAwIDE1cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgb3V0bGluZTogbm9uZTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgdHJhbnNpdGlvbjogYm9yZGVyIDAuM3MgZWFzZTtcbn1cblxuLnN0eWxlZElucHV0OjpwbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYjNiM2IzO1xufVxuXG4uY2xvc2VTZWFyY2hCdXR0b24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAxOCU7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiB2YXIoLS1ibHVlLWdyYXkpO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxlQUFlO0VBQ2YsTUFBTTtFQUNOLE9BQU87RUFDUCxXQUFXO0VBQ1gsWUFBWTtFQUNaLGtDQUFrQztFQUNsQyxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLHVCQUF1QjtFQUN2QixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxhQUFhO0VBQ2IsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixVQUFVO0VBQ1YseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLFlBQVk7RUFDWixlQUFlO0VBQ2YsZUFBZTtFQUNmLGFBQWE7RUFDYixnQkFBZ0I7RUFDaEIsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLFlBQVk7RUFDWixlQUFlO0VBQ2YsZUFBZTtFQUNmLHVCQUF1QjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIub3ZlcmxheU1vZGFsU2VhcmNoIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwIDAgMCAvIDUwJSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIHotaW5kZXg6IDEwMDA7XFxufVxcblxcbi5tb2RhbFNlYXJjaElucHV0IHtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgcGFkZGluZzogMTVweCAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxufVxcblxcbi5zZWFyY2hJbnB1dCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA2MCU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZWFlYWVhO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLnN0eWxlZElucHV0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0NnB4O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMCAxNXB4O1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICB0cmFuc2l0aW9uOiBib3JkZXIgMC4zcyBlYXNlO1xcbn1cXG5cXG4uc3R5bGVkSW5wdXQ6OnBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiAjYjNiM2IzO1xcbn1cXG5cXG4uY2xvc2VTZWFyY2hCdXR0b24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDE4JTtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogdmFyKC0tYmx1ZS1ncmF5KTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwib3ZlcmxheU1vZGFsU2VhcmNoXCI6IGBvdmVybGF5TW9kYWxTZWFyY2hgLFxuXHRcIm1vZGFsU2VhcmNoSW5wdXRcIjogYG1vZGFsU2VhcmNoSW5wdXRgLFxuXHRcInNlYXJjaElucHV0XCI6IGBzZWFyY2hJbnB1dGAsXG5cdFwic3R5bGVkSW5wdXRcIjogYHN0eWxlZElucHV0YCxcblx0XCJjbG9zZVNlYXJjaEJ1dHRvblwiOiBgY2xvc2VTZWFyY2hCdXR0b25gXG59O1xubW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuZXJyb3JDb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0b3A6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luOiAxMjBweDtcbiAgZ2FwOiAxMHB4O1xuICBmb250LXNpemU6IDMwcHg7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvZXJyb3I0MDQubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsV0FBVztFQUNYLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsU0FBUztFQUNULGVBQWU7QUFDakJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmVycm9yQ29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgdG9wOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgbWFyZ2luOiAxMjBweDtcXG4gIGdhcDogMTBweDtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiZXJyb3JDb250YWluZXJcIjogYGVycm9yQ29udGFpbmVyYFxufTtcbm1vZHVsZS5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9yZXNldC5jc3NcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fID0gcmVxdWlyZShcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4vdmFyaWFibGVzL2NvbG9ycy5jc3NcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYFxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvcmVzZXQtY3NzL3Jlc2V0LmNzc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290IHtcbiAgLS1ibGFjazogIzM4MzgzODtcbiAgLS1ibGFjay1yZ2I6IDU2IDU2IDU2O1xuICAtLXdoaXRlOiAjZmZmO1xuICAtLXBpbms6ICNmNWEzYjc7XG4gIC0tZ3JheTogIzg0OThhZjtcbiAgLS1ibHVlOiAjMDA3YmZmO1xuICAtLWJsdWUtZ3JheTogIzY5NzU4Njtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJpYWJsZXMvY29sb3JzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGdCQUFnQjtFQUNoQixxQkFBcUI7RUFDckIsYUFBYTtFQUNiLGVBQWU7RUFDZixlQUFlO0VBQ2YsZUFBZTtFQUNmLG9CQUFvQjtBQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAtLWJsYWNrOiAjMzgzODM4O1xcbiAgLS1ibGFjay1yZ2I6IDU2IDU2IDU2O1xcbiAgLS13aGl0ZTogI2ZmZjtcXG4gIC0tcGluazogI2Y1YTNiNztcXG4gIC0tZ3JheTogIzg0OThhZjtcXG4gIC0tYmx1ZTogIzAwN2JmZjtcXG4gIC0tYmx1ZS1ncmF5OiAjNjk3NTg2O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdCB7XG4gIC0tcGluazogI2Y1YTNiNztcbiAgLS1ibGFjazogIzAwMDtcbiAgLS13aGl0ZTogI2ZmZjtcbiAgLS1ncmF5LWRpc2FibGVkOiAjZDZkNmQ2O1xuICAtLWdyYXktZGlzYWJsZWQtdGV4dDogIzk5OTtcbiAgLS1idXR0b24tcGFkZGluZzogMTBweDtcbiAgLS1idXR0b24tZm9udC1zaXplOiAxNnB4O1xuICAtLWJ1dHRvbi1ib3JkZXItcmFkaXVzOiA0cHg7XG4gIC0tdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcbiAgLS1ob3Zlci1iZzogdmFyKC0tYmxhY2spO1xuICAtLWhvdmVyLXRleHQ6IHZhcigtLXdoaXRlKTtcbn1cblxuLmJ0biB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA0MXB4O1xuICBwYWRkaW5nOiB2YXIoLS1idXR0b24tcGFkZGluZyk7XG4gIGZvbnQtc2l6ZTogdmFyKC0tYnV0dG9uLWZvbnQtc2l6ZSk7XG4gIGNvbG9yOiB2YXIoLS1ibGFjayk7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXBpbmspO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJ1dHRvbi1ib3JkZXItcmFkaXVzKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBtYXJnaW46IDEwcHggMDtcbiAgdHJhbnNpdGlvbjpcbiAgICBiYWNrZ3JvdW5kLWNvbG9yIHZhcigtLXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2UsXG4gICAgY29sb3IgdmFyKC0tdHJhbnNpdGlvbi1kdXJhdGlvbikgZWFzZTtcbn1cblxuLmJ0biAubGFiZWwge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDhweDtcbn1cblxuLmJ0biAuaWNvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgd2lkdGg6IDIwcHg7XG4gIGhlaWdodDogMjBweDtcbiAgbWFyZ2luOiAxMHB4O1xufVxuXG4uYnRuLnNtYWxsIHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1heC13aWR0aDogMTk1cHg7XG4gIG1pbi13aWR0aDogMTIwcHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgcGFkZGluZzogOHB4IDE2cHg7XG4gIG1hcmdpbjogNXB4O1xufVxuXG4uYnRuLm1lZGl1bSB7XG4gIHdpZHRoOiAyNTBweDtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBwYWRkaW5nOiAxMnB4IDIwcHg7XG59XG5cbi5idG4ubGFyZ2Uge1xuICB3aWR0aDogMTAwJTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBwYWRkaW5nOiAxMnB4IDIwcHg7XG59XG5cbi5idG4udHJhbnNwYXJlbnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13aGl0ZSk7XG4gIGNvbG9yOiB2YXIoLS1ibGFjayk7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJsYWNrKTtcbn1cblxuLmJ0bi5waW5rIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcGluayk7XG4gIGNvbG9yOiB2YXIoLS1ibGFjayk7XG59XG5cbi5idG46aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ob3Zlci1iZyk7XG4gIGNvbG9yOiB2YXIoLS1ob3Zlci10ZXh0KTtcbn1cblxuLmJ0bi50cmFuc3BhcmVudDpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJsYWNrKTtcbiAgY29sb3I6IHZhcigtLXdoaXRlKTtcbn1cblxuLmJ0bjpkaXNhYmxlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWdyYXktZGlzYWJsZWQpO1xuICBjb2xvcjogdmFyKC0tZ3JheS1kaXNhYmxlZC10ZXh0KTtcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy91aS9CdXR0b24vYnV0dG9uLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLGFBQWE7RUFDYix3QkFBd0I7RUFDeEIsMEJBQTBCO0VBQzFCLHNCQUFzQjtFQUN0Qix3QkFBd0I7RUFDeEIsMkJBQTJCO0VBQzNCLDJCQUEyQjtFQUMzQix3QkFBd0I7RUFDeEIsMEJBQTBCO0FBQzVCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsV0FBVztFQUNYLFlBQVk7RUFDWiw4QkFBOEI7RUFDOUIsa0NBQWtDO0VBQ2xDLG1CQUFtQjtFQUNuQiw2QkFBNkI7RUFDN0IsWUFBWTtFQUNaLDBDQUEwQztFQUMxQyxlQUFlO0VBQ2YsY0FBYztFQUNkOzt5Q0FFdUM7QUFDekM7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLFFBQVE7QUFDVjs7QUFFQTtFQUNFLG9CQUFvQjtFQUNwQixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLFdBQVc7RUFDWCxZQUFZO0VBQ1osWUFBWTtBQUNkOztBQUVBO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxZQUFZO0VBQ1osZUFBZTtFQUNmLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxlQUFlO0VBQ2Ysa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUNuQiw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSw2QkFBNkI7RUFDN0IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsaUNBQWlDO0VBQ2pDLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQ0FBc0M7RUFDdEMsZ0NBQWdDO0VBQ2hDLG1CQUFtQjtFQUNuQixvQkFBb0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgLS1waW5rOiAjZjVhM2I3O1xcbiAgLS1ibGFjazogIzAwMDtcXG4gIC0td2hpdGU6ICNmZmY7XFxuICAtLWdyYXktZGlzYWJsZWQ6ICNkNmQ2ZDY7XFxuICAtLWdyYXktZGlzYWJsZWQtdGV4dDogIzk5OTtcXG4gIC0tYnV0dG9uLXBhZGRpbmc6IDEwcHg7XFxuICAtLWJ1dHRvbi1mb250LXNpemU6IDE2cHg7XFxuICAtLWJ1dHRvbi1ib3JkZXItcmFkaXVzOiA0cHg7XFxuICAtLXRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XFxuICAtLWhvdmVyLWJnOiB2YXIoLS1ibGFjayk7XFxuICAtLWhvdmVyLXRleHQ6IHZhcigtLXdoaXRlKTtcXG59XFxuXFxuLmJ0biB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDQxcHg7XFxuICBwYWRkaW5nOiB2YXIoLS1idXR0b24tcGFkZGluZyk7XFxuICBmb250LXNpemU6IHZhcigtLWJ1dHRvbi1mb250LXNpemUpO1xcbiAgY29sb3I6IHZhcigtLWJsYWNrKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXBpbmspO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYnV0dG9uLWJvcmRlci1yYWRpdXMpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxuICB0cmFuc2l0aW9uOlxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yIHZhcigtLXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2UsXFxuICAgIGNvbG9yIHZhcigtLXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2U7XFxufVxcblxcbi5idG4gLmxhYmVsIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiA4cHg7XFxufVxcblxcbi5idG4gLmljb24ge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogMjBweDtcXG4gIGhlaWdodDogMjBweDtcXG4gIG1hcmdpbjogMTBweDtcXG59XFxuXFxuLmJ0bi5zbWFsbCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogMTk1cHg7XFxuICBtaW4td2lkdGg6IDEyMHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgcGFkZGluZzogOHB4IDE2cHg7XFxuICBtYXJnaW46IDVweDtcXG59XFxuXFxuLmJ0bi5tZWRpdW0ge1xcbiAgd2lkdGg6IDI1MHB4O1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgcGFkZGluZzogMTJweCAyMHB4O1xcbn1cXG5cXG4uYnRuLmxhcmdlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgcGFkZGluZzogMTJweCAyMHB4O1xcbn1cXG5cXG4uYnRuLnRyYW5zcGFyZW50IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdoaXRlKTtcXG4gIGNvbG9yOiB2YXIoLS1ibGFjayk7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ibGFjayk7XFxufVxcblxcbi5idG4ucGluayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1waW5rKTtcXG4gIGNvbG9yOiB2YXIoLS1ibGFjayk7XFxufVxcblxcbi5idG46aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taG92ZXItYmcpO1xcbiAgY29sb3I6IHZhcigtLWhvdmVyLXRleHQpO1xcbn1cXG5cXG4uYnRuLnRyYW5zcGFyZW50OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJsYWNrKTtcXG4gIGNvbG9yOiB2YXIoLS13aGl0ZSk7XFxufVxcblxcbi5idG46ZGlzYWJsZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZ3JheS1kaXNhYmxlZCk7XFxuICBjb2xvcjogdmFyKC0tZ3JheS1kaXNhYmxlZC10ZXh0KTtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiYnRuXCI6IGBidG5gLFxuXHRcImxhYmVsXCI6IGBsYWJlbGAsXG5cdFwiaWNvblwiOiBgaWNvbmAsXG5cdFwic21hbGxcIjogYHNtYWxsYCxcblx0XCJtZWRpdW1cIjogYG1lZGl1bWAsXG5cdFwibGFyZ2VcIjogYGxhcmdlYCxcblx0XCJ0cmFuc3BhcmVudFwiOiBgdHJhbnNwYXJlbnRgLFxuXHRcInBpbmtcIjogYHBpbmtgXG59O1xubW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuaW5wdXQge1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyYXkpO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgd2lkdGg6IDEwMCU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbi5pbnB1dDpmb2N1cyB7XG4gIGJvcmRlci1jb2xvcjogdmFyKC0tYmx1ZSk7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy91aS9JbnB1dC9pbnB1dC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsWUFBWTtFQUNaLDZCQUE2QjtFQUM3QixrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLFdBQVc7RUFDWCxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5pbnB1dCB7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmF5KTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmlucHV0OmZvY3VzIHtcXG4gIGJvcmRlci1jb2xvcjogdmFyKC0tYmx1ZSk7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJpbnB1dFwiOiBgaW5wdXRgXG59O1xubW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAudWlNb2RhbE92ZXJsYXkge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKHZhcigtLWJsYWNrLXJnYikgLyA1MCUpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgei1pbmRleDogMTAwMDtcbn1cblxuLnVpTW9kYWxDb250ZW50IHtcbiAgYmFja2dyb3VuZDogdmFyKC0td2hpdGUpO1xuICBib3gtc2hhZG93OiAwIDJweCAxMHB4IHJnYih2YXIoLS1ibGFjay1yZ2IpIC8gMTAlKTtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBwYWRkaW5nOiA0MHB4IDEwMHB4O1xuICB3aWR0aDogNTk4cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMTVweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4udWlNb2RhbENsb3NlQnV0dG9uIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDIwcHg7XG4gIHJpZ2h0OiAyMHB4O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IG5vbmU7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogdmFyKC0tYmx1ZS1ncmF5KTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3VpL01vZGFsL1VpTW9kYWwubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGVBQWU7RUFDZixNQUFNO0VBQ04sT0FBTztFQUNQLFdBQVc7RUFDWCxZQUFZO0VBQ1osNkNBQTZDO0VBQzdDLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixrREFBa0Q7RUFDbEQsa0JBQWtCO0VBQ2xCLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1osYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsU0FBUztFQUNULGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixZQUFZO0VBQ1osZUFBZTtFQUNmLGVBQWU7RUFDZix1QkFBdUI7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnVpTW9kYWxPdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYih2YXIoLS1ibGFjay1yZ2IpIC8gNTAlKTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB6LWluZGV4OiAxMDAwO1xcbn1cXG5cXG4udWlNb2RhbENvbnRlbnQge1xcbiAgYmFja2dyb3VuZDogdmFyKC0td2hpdGUpO1xcbiAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2IodmFyKC0tYmxhY2stcmdiKSAvIDEwJSk7XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICBwYWRkaW5nOiA0MHB4IDEwMHB4O1xcbiAgd2lkdGg6IDU5OHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxNXB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4udWlNb2RhbENsb3NlQnV0dG9uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMjBweDtcXG4gIHJpZ2h0OiAyMHB4O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiB2YXIoLS1ibHVlLWdyYXkpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ1aU1vZGFsT3ZlcmxheVwiOiBgdWlNb2RhbE92ZXJsYXlgLFxuXHRcInVpTW9kYWxDb250ZW50XCI6IGB1aU1vZGFsQ29udGVudGAsXG5cdFwidWlNb2RhbENsb3NlQnV0dG9uXCI6IGB1aU1vZGFsQ2xvc2VCdXR0b25gXG59O1xubW9kdWxlLmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztcbmZ1bmN0aW9uIExnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gTWcoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gTmcoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIE9nKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVBnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9UWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmTmcoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1MZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9UmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9TGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1TZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9UWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9UmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1MZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9U2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPVRnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO01nKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7TWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7TWcoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmTmcoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPUxnKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1UZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9UmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9TGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9U2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7TWcoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD1RZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBVZz1PZyghMCksVmc9T2coITEpLFdnPVVmKG51bGwpLFhnPW51bGwsWWc9bnVsbCxaZz1udWxsO2Z1bmN0aW9uICRnKCl7Wmc9WWc9WGc9bnVsbH1mdW5jdGlvbiBhaChhKXt2YXIgYj1XZy5jdXJyZW50O0UoV2cpO2EuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIGJoKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBjaChhLGIpe1hnPWE7Wmc9WWc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihkaD0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24gZWgoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFpnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PVlnKXtpZihudWxsPT09WGcpdGhyb3cgRXJyb3IocCgzMDgpKTtZZz1hO1hnLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBZZz1ZZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIGZoPW51bGw7ZnVuY3Rpb24gZ2goYSl7bnVsbD09PWZoP2ZoPVthXTpmaC5wdXNoKGEpfVxuZnVuY3Rpb24gaGgoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsZ2goYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIGloKGEsZCl9ZnVuY3Rpb24gaWgoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciBqaD0hMTtmdW5jdGlvbiBraChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gbGgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gbWgoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBuaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gaWgoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLGdoKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBpaChhLGMpfWZ1bmN0aW9uIG9oKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBwaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTtqaD0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjpqaD0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7cmh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIHRoPXt9LHVoPVVmKHRoKSx2aD1VZih0aCksd2g9VWYodGgpO2Z1bmN0aW9uIHhoKGEpe2lmKGE9PT10aCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24geWgoYSxiKXtHKHdoLGIpO0codmgsYSk7Ryh1aCx0aCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKHVoKTtHKHVoLGIpfWZ1bmN0aW9uIHpoKCl7RSh1aCk7RSh2aCk7RSh3aCl9ZnVuY3Rpb24gQWgoYSl7eGgod2guY3VycmVudCk7dmFyIGI9eGgodWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyh2aCxhKSxHKHVoLGMpKX1mdW5jdGlvbiBCaChhKXt2aC5jdXJyZW50PT09YSYmKEUodWgpLEUodmgpKX12YXIgTD1VZigwKTtcbmZ1bmN0aW9uIENoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBEaD1bXTtcbmZ1bmN0aW9uIEVoKCl7Zm9yKHZhciBhPTA7YTxEaC5sZW5ndGg7YSsrKURoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7RGgubGVuZ3RoPTB9dmFyIEZoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsR2g9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSGg9MCxNPW51bGwsTj1udWxsLE89bnVsbCxJaD0hMSxKaD0hMSxLaD0wLExoPTA7ZnVuY3Rpb24gUCgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIE1oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBOaChhLGIsYyxkLGUsZil7SGg9ZjtNPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtGaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP09oOlBoO2E9YyhkLGUpO2lmKEpoKXtmPTA7ZG97Smg9ITE7S2g9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Tz1OPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO0ZoLmN1cnJlbnQ9UWg7YT1jKGQsZSl9d2hpbGUoSmgpfUZoLmN1cnJlbnQ9Umg7Yj1udWxsIT09TiYmbnVsbCE9PU4ubmV4dDtIaD0wO089Tj1NPW51bGw7SWg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKCl7dmFyIGE9MCE9PUtoO0toPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBUaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZT1PPWE6Tz1PLm5leHQ9YTtyZXR1cm4gT31mdW5jdGlvbiBVaCgpe2lmKG51bGw9PT1OKXt2YXIgYT1NLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1OLm5leHQ7dmFyIGI9bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlOk8ubmV4dDtpZihudWxsIT09YilPPWIsTj1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtOPWE7YT17bWVtb2l6ZWRTdGF0ZTpOLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk4uYmFzZVN0YXRlLGJhc2VRdWV1ZTpOLmJhc2VRdWV1ZSxxdWV1ZTpOLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlPU89YTpPPU8ubmV4dD1hfXJldHVybiBPfVxuZnVuY3Rpb24gVmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBXaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU4sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKEhoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7TS5sYW5lc3w9bTtyaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChkaD0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxNLmxhbmVzfD1mLHJofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gWGgoYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KGRoPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gWWgoKXt9XG5mdW5jdGlvbiBaaChhLGIpe3ZhciBjPU0sZD1VaCgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsZGg9ITApO2Q9ZC5xdWV1ZTskaChhaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1PJiZPLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1RKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShIaCYzMCl8fGRpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBkaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBjaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2VpKGIpJiZmaShhKX1mdW5jdGlvbiBhaShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtlaShiKSYmZmkoYSl9KX1mdW5jdGlvbiBlaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1paChhLDEpO251bGwhPT1iJiZnaShiLGEsMSwtMSl9XG5mdW5jdGlvbiBoaShhKXt2YXIgYj1UaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOlZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9aWkuYmluZChudWxsLE0sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBqaSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24ga2koYSxiLGMsZCl7dmFyIGU9VGgoKTtNLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7dmFyIGU9VWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Til7dmFyIGc9Ti5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZNaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1iaShiLGMsZixkKTtyZXR1cm59fU0uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLGYsZCl9ZnVuY3Rpb24gbWkoYSxiKXtyZXR1cm4ga2koODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gJGgoYSxiKXtyZXR1cm4gbGkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gbmkoYSxiKXtyZXR1cm4gbGkoNCwyLGEsYil9ZnVuY3Rpb24gb2koYSxiKXtyZXR1cm4gbGkoNCw0LGEsYil9XG5mdW5jdGlvbiBwaShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHFpKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gbGkoNCw0LHBpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIHJpKCl7fWZ1bmN0aW9uIHNpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gdGkoYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gdWkoYSxiLGMpe2lmKDA9PT0oSGgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLGRoPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE0ubGFuZXN8PWMscmh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIHZpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLEdoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gd2koKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24geGkoYSxiLGMpe3ZhciBkPXlpKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKHppKGEpKUFpKGIsYyk7ZWxzZSBpZihjPWhoKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1SKCk7Z2koYyxhLGQsZSk7QmkoYyxiLGQpfX1cbmZ1bmN0aW9uIGlpKGEsYixjKXt2YXIgZD15aShhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih6aShhKSlBaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxnaChiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPWhoKGEsYixlLGQpO251bGwhPT1jJiYoZT1SKCksZ2koYyxhLGQsZSksQmkoYyxiLGQpKX19XG5mdW5jdGlvbiB6aShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU18fG51bGwhPT1iJiZiPT09TX1mdW5jdGlvbiBBaShhLGIpe0poPUloPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gQmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBSaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6UCx1c2VDb250ZXh0OlAsdXNlRWZmZWN0OlAsdXNlSW1wZXJhdGl2ZUhhbmRsZTpQLHVzZUluc2VydGlvbkVmZmVjdDpQLHVzZUxheW91dEVmZmVjdDpQLHVzZU1lbW86UCx1c2VSZWR1Y2VyOlAsdXNlUmVmOlAsdXNlU3RhdGU6UCx1c2VEZWJ1Z1ZhbHVlOlAsdXNlRGVmZXJyZWRWYWx1ZTpQLHVzZVRyYW5zaXRpb246UCx1c2VNdXRhYmxlU291cmNlOlAsdXNlU3luY0V4dGVybmFsU3RvcmU6UCx1c2VJZDpQLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sT2g9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7VGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6bWksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGtpKDQxOTQzMDgsXG40LHBpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2koNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBraSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9eGkuYmluZChudWxsLE0sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuVGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6aGksdXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBUaCgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWhpKCExKSxiPWFbMF07YT12aS5iaW5kKG51bGwsYVsxXSk7VGgoKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1NLGU9VGgoKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09USl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO21pKGFpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPVRoKCksYj1RLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPUtoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1MaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUGg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOnNpLHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6cWksdXNlSW5zZXJ0aW9uRWZmZWN0Om5pLHVzZUxheW91dEVmZmVjdDpvaSx1c2VNZW1vOnRpLHVzZVJlZHVjZXI6V2gsdXNlUmVmOmppLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFdoKFZoKX0sXG51c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gdWkoYixOLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1XaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6d2ksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxRaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6c2ksdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6JGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpxaSx1c2VJbnNlcnRpb25FZmZlY3Q6bmksdXNlTGF5b3V0RWZmZWN0Om9pLHVzZU1lbW86dGksdXNlUmVkdWNlcjpYaCx1c2VSZWY6amksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gWGgoVmgpfSx1c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gbnVsbD09PVxuTj9iLm1lbW9pemVkU3RhdGU9YTp1aShiLE4ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVhoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp3aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIENpKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifWZ1bmN0aW9uIERpKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBFaT17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9bmgoYSxmLGUpO251bGwhPT1iJiYoZ2koYixhLGUsZCksb2goYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1uaChhLGYsZSk7bnVsbCE9PWImJihnaShiLGEsZSxkKSxvaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPVIoKSxkPVxueWkoYSksZT1taChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9bmgoYSxlLGQpO251bGwhPT1iJiYoZ2koYixhLGQsYyksb2goYixhLGQpKX19O2Z1bmN0aW9uIEZpKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9ZWgoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUVpO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gSGkoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gSWkoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz17fTtraChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PWVoKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKERpKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHFoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfWZ1bmN0aW9uIEppKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1cbmZ1bmN0aW9uIEtpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fWZ1bmN0aW9uIExpKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBNaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBOaShhLGIsYyl7Yz1taCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtPaXx8KE9pPSEwLFBpPWQpO0xpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUWkoYSxiLGMpe2M9bWgoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Umk/Umk9bmV3IFNldChbdGhpc10pOlJpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE1pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VGkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVWkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmkoYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1taCgtMSwxKSxiLnRhZz0yLG5oKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBXaT11YS5SZWFjdEN1cnJlbnRPd25lcixkaD0hMTtmdW5jdGlvbiBYaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1ZnKGIsbnVsbCxjLGQpOlVnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWWkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO2NoKGIsZSk7ZD1OaChhLGIsYyxkLGYsZSk7Yz1TaCgpO2lmKG51bGwhPT1hJiYhZGgpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRpKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWFqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGJqKGEsYixmLGQsZSk7YT1SZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gWmkoYSxiLGUpfWIuZmxhZ3N8PTE7YT1QZyhmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGJqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKGRoPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihkaD0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLFppKGEsYixlKX1yZXR1cm4gY2ooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGRqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhlaixmaiksZmp8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhlaixmaiksZmp8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGVqLGZqKTtmanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZWosZmopLGZqfD1kO1hpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGdqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtjaChiLGUpO2M9TmgoYSxiLGMsZCxmLGUpO2Q9U2goKTtpZihudWxsIT09YSYmIWRoKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7Y2goYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpaWooYSxiKSxHaShiLGMsZCksSWkoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9ZWgobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJkhpKGIsZyxkLGwpO2poPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7cWgoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihEaShiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9amh8fEZpKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2xoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6Q2koYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9ZWgoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJkhpKGIsZyxkLGspO2poPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtxaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihEaShiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9amh8fEZpKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBqaihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUsZil7Z2ooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksWmkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7V2kuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1VZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVVnKGIsbnVsbCxoLGYpKTpYaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO3loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIGxqKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WGkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG1qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gbmooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gb2ooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TC5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKEwsZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXBqKGcsZCwwLG51bGwpLGE9VGcoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooYyksYi5tZW1vaXplZFN0YXRlPW1qLGEpOnFqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHJqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD1QZyhlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPVBnKGgsZik6KGY9VGcoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9uaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bWo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9UGcoZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcWooYSxiKXtiPXBqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiBzaihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7VWcoYixhLmNoaWxkLG51bGwsYyk7YT1xaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gcmooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1LaShFcnJvcihwKDQyMikpKSxzaihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cGooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9VGcoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZVZyhiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooZyk7Yi5tZW1vaXplZFN0YXRlPW1qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiBzaihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUtpKGYsZCx2b2lkIDApO3JldHVybiBzaihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKGRofHxoKXtkPVE7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxpaChhLGUpLGdpKGQsYSxlLC0xKSl9dGooKTtkPUtpKEVycm9yKHAoNDIxKSkpO3JldHVybiBzaihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj11ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cWooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHZqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7YmgoYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHdqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB4aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1hpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnZqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpdmooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKEwsZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PUNoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7d2ooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1DaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9d2ooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6d2ooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gWmkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3JofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1QZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9UGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHlqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpraihiKTtJZygpO2JyZWFrO2Nhc2UgNTpBaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OnloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhXZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTCxMLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIG9qKGEsYixjKTtHKEwsTC5jdXJyZW50JjEpO2E9WmkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKEwsTC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB4aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhMLEwuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGRqKGEsYixjKX1yZXR1cm4gWmkoYSxiLGMpfXZhciB6aixBaixCaixDajtcbnpqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtBaj1mdW5jdGlvbigpe307XG5Caj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7eGgodWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0NqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRGooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTt6aCgpO0UoV2YpO0UoSCk7RWgoKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEZqKHpnKSx6Zz1udWxsKSk7QWooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpCaChiKTt2YXIgZT14aCh3aC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlCaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPXhoKHVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDt6aihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9eGgod2guY3VycmVudCk7eGgodWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShMKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoRmooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KEwuY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dGooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksXG5BaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKEwpO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRGooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPUNoKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RGooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKEwsTC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+R2omJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1DaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLERqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5HaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TC5jdXJyZW50LEcoTCxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShmaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSWooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIHpoKCksRShXZiksRShIKSxFaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIEJoKGIpLG51bGw7Y2FzZSAxMzpFKEwpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKEwpLG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgSmo9ITEsVT0hMSxLaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTGooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE1qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgTmo9ITE7XG5mdW5jdGlvbiBPaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkNpKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49Tmo7Tmo9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBQaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZNaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBRaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gUmooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxTaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFRqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVWooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VGooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFZqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihWaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVZqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxYaj0hMTtmdW5jdGlvbiBZaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspWmooYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gWmooYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxMaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WGo7WD1udWxsO1lqKGEsYixjKTtYPWQ7WGo9ZTtudWxsIT09WCYmKFhqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihYaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVhqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDtcbllqKGEsYixjKTtYPWQ7WGo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP01qKGMsYixnKTowIT09KGYmNCkmJk1qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVlqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihMaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxZaihhLGIsYyksVT1kKTpZaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpZaihhLGIsYyl9fWZ1bmN0aW9uIGFrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEtqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9YmsuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtYaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO1pqKGYsZyxlKTtYPW51bGw7WGo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOylkayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2soYixhKTtlayhhKTtpZihkJjQpe3RyeXtQaigzLGEsYS5yZXR1cm4pLFFqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtQaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmNrKGIsYSk7ZWsoYSk7ZCY1MTImJm51bGwhPT1jJiZMaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6Y2soYixhKTtlayhhKTtkJjUxMiYmbnVsbCE9PWMmJkxqKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmNrKGIsYSk7ZWsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmNrKGIsYSk7ZWsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmNrKGIsYSk7ZWsoYSk7YnJlYWs7Y2FzZSAxMzpjayhiLGEpO2VrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZms9QigpKSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sY2soYixhKSxVPWwpOmNrKGIsYSk7ZWsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlBqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOkxqKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TGoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtnayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpnayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmNrKGIsYSk7ZWsoYSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6Y2soYixcbmEpLGVrKGEpfX1mdW5jdGlvbiBlayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFRqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVVqKGEpO1dqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1VaihhKTtWaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBoayhhLGIsYyl7Vj1hO2lrKGEsYixjKX1cbmZ1bmN0aW9uIGlrKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxKajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUpqO3ZhciBsPVU7Smo9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2prKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6amsoZSk7Zm9yKDtudWxsIT09ZjspVj1mLGlrKGYsYixjKSxmPWYuc2libGluZztWPWU7Smo9aDtVPWx9a2soYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTprayhhLGIsYyl9fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxRaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkNpKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJnNoKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1zaChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmUmooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gZ2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGprKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1FqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7UmooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtSaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIGxrPU1hdGguY2VpbCxtaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG5rPXVhLlJlYWN0Q3VycmVudE93bmVyLG9rPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxRPW51bGwsWT1udWxsLFo9MCxmaj0wLGVqPVVmKDApLFQ9MCxwaz1udWxsLHJoPTAscWs9MCxyaz0wLHNrPW51bGwsdGs9bnVsbCxmaz0wLEdqPUluZmluaXR5LHVrPW51bGwsT2k9ITEsUGk9bnVsbCxSaT1udWxsLHZrPSExLHdrPW51bGwseGs9MCx5az0wLHprPW51bGwsQWs9LTEsQms9MDtmdW5jdGlvbiBSKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Baz9BazpBaz1CKCl9XG5mdW5jdGlvbiB5aShhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09QmsmJihCaz15YygpKSxCazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2koYSxiLGMsZCl7aWYoNTA8eWspdGhyb3cgeWs9MCx6az1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVEpYT09PVEmJigwPT09KEsmMikmJihxa3w9YyksND09PVQmJkNrKGEsWikpLERrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEdqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRGsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRWsuYmluZChudWxsLGEpKTpoZyhFay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1GayhjLEdrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBHayhhLGIpe0FrPS0xO0JrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSGsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SWsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9SmsoKTtpZihRIT09YXx8WiE9PWIpdWs9bnVsbCxHaj1CKCkrNTAwLEtrKGEsYik7ZG8gdHJ5e0xrKCk7YnJlYWt9Y2F0Y2goaCl7TWsoYSxoKX13aGlsZSgxKTskZygpO21rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihRPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU5rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxkKSxEayhhLEIoKSksYztpZig2PT09YilDayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIU9rKGUpJiYoYj1JayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU5rKGEsZikpKSwxPT09YikpdGhyb3cgYz1wayxLayhhLDApLENrKGEsZCksRGsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpQayhhLHRrLHVrKTticmVhaztjYXNlIDM6Q2soYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9ZmsrNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUGsuYmluZChudWxsLGEsdGssdWspLGIpO2JyZWFrfVBrKGEsdGssdWspO2JyZWFrO2Nhc2UgNDpDayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmxrKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFBrLmJpbmQobnVsbCxhLHRrLHVrKSxkKTticmVha31QayhhLHRrLHVrKTticmVhaztjYXNlIDU6UGsoYSx0ayx1ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fURrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0drLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gTmsoYSxiKXt2YXIgYz1zazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihLayhhLGIpLmZsYWdzfD0yNTYpO2E9SWsoYSxiKTsyIT09YSYmKGI9dGssdGs9YyxudWxsIT09YiYmRmooYikpO3JldHVybiBhfWZ1bmN0aW9uIEZqKGEpe251bGw9PT10az90az1hOnRrLnB1c2guYXBwbHkodGssYSl9XG5mdW5jdGlvbiBPayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gQ2soYSxiKXtiJj1+cms7YiY9fnFrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEVrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0hrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIERrKGEsQigpKSxudWxsO3ZhciBjPUlrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1OayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxiKSxEayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UGsoYSx0ayx1ayk7RGsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUWsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoR2o9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFJrKGEpe251bGwhPT13ayYmMD09PXdrLnRhZyYmMD09PShLJjYpJiZIaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1vay50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYob2sudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQsb2sudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIEhqKCl7Zmo9ZWouY3VycmVudDtFKGVqKX1cbmZ1bmN0aW9uIEtrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOnpoKCk7RShXZik7RShIKTtFaCgpO2JyZWFrO2Nhc2UgNTpCaChkKTticmVhaztjYXNlIDQ6emgoKTticmVhaztjYXNlIDEzOkUoTCk7YnJlYWs7Y2FzZSAxOTpFKEwpO2JyZWFrO2Nhc2UgMTA6YWgoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SGooKX1jPWMucmV0dXJufVE9YTtZPWE9UGcoYS5jdXJyZW50LG51bGwpO1o9Zmo9YjtUPTA7cGs9bnVsbDtyaz1xaz1yaD0wO3RrPXNrPW51bGw7aWYobnVsbCE9PWZoKXtmb3IoYj1cbjA7YjxmaC5sZW5ndGg7YisrKWlmKGM9ZmhbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9Zmg9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1rKGEsYil7ZG97dmFyIGM9WTt0cnl7JGcoKTtGaC5jdXJyZW50PVJoO2lmKEloKXtmb3IodmFyIGQ9TS5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1JaD0hMX1IaD0wO089Tj1NPW51bGw7Smg9ITE7S2g9MDtuay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3BrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVVpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1ZpKHksZyxoLGYsYik7eS5tb2RlJjEmJlNpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7U2koZixsLGIpO3RqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVVpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtWaShKLGcsaCxmLGIpO0pnKEppKGssaCkpO2JyZWFrIGF9fWY9az1KaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09c2s/c2s9W2ZdOnNrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1OaShmLGssYik7cGgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVFpKGYsaCxiKTtwaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVNrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gSmsoKXt2YXIgYT1tay5jdXJyZW50O21rLmN1cnJlbnQ9Umg7cmV0dXJuIG51bGw9PT1hP1JoOmF9XG5mdW5jdGlvbiB0aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1RfHwwPT09KHJoJjI2ODQzNTQ1NSkmJjA9PT0ocWsmMjY4NDM1NDU1KXx8Q2soUSxaKX1mdW5jdGlvbiBJayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1KaygpO2lmKFEhPT1hfHxaIT09Yil1az1udWxsLEtrKGEsYik7ZG8gdHJ5e1RrKCk7YnJlYWt9Y2F0Y2goZSl7TWsoYSxlKX13aGlsZSgxKTskZygpO0s9Yzttay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtRPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFRrKCl7Zm9yKDtudWxsIT09WTspVWsoWSl9ZnVuY3Rpb24gTGsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVWsoWSl9ZnVuY3Rpb24gVWsoYSl7dmFyIGI9VmsoYS5hbHRlcm5hdGUsYSxmaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1NrKGEpOlk9Yjtuay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBTayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1FaihjLGIsZmopLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SWooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBQayhhLGIsYyl7dmFyIGQ9QyxlPW9rLnRyYW5zaXRpb247dHJ5e29rLnRyYW5zaXRpb249bnVsbCxDPTEsV2soYSxiLGMsZCl9ZmluYWxseXtvay50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gV2soYSxiLGMsZCl7ZG8gSGsoKTt3aGlsZShudWxsIT09d2spO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09USYmKFk9UT1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx2a3x8KHZrPSEwLEZrKGhjLGZ1bmN0aW9uKCl7SGsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9b2sudHJhbnNpdGlvbjtvay50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7bmsuY3VycmVudD1udWxsO09qKGEsYyk7ZGsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2hrKGMsYSxlKTtkYygpO0s9aDtDPWc7b2sudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7dmsmJih2az0hMSx3az1hLHhrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihSaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtEayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoT2kpdGhyb3cgT2k9ITEsYT1QaSxQaT1udWxsLGE7MCE9PSh4ayYxKSYmMCE9PWEudGFnJiZIaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT16az95aysrOih5az0wLHprPWEpOnlrPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEhrKCl7aWYobnVsbCE9PXdrKXt2YXIgYT1EYyh4ayksYj1vay50cmFuc2l0aW9uLGM9Qzt0cnl7b2sudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT13ayl2YXIgZD0hMTtlbHNle2E9d2s7d2s9bnVsbDt4az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlBqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtTaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpQaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLG9rLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWGsoYSxiLGMpe2I9SmkoYyxiKTtiPU5pKGEsYiwxKTthPW5oKGEsYiwxKTtiPVIoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxEayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylYayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtYayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyhkKSkpe2E9SmkoYyxhKTthPVFpKGIsYSwxKTtiPW5oKGIsYSwxKTthPVIoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxEayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztRPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1maz9LayhhLDApOnJrfD1jKTtEayhhLGIpfWZ1bmN0aW9uIFlrKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9UigpO2E9aWgoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxEayhhLGMpKX1mdW5jdGlvbiB1aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WWsoYSxjKX1cbmZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1lrKGEsYyl9dmFyIFZrO1xuVms9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KWRoPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gZGg9ITEseWooYSxiLGMpO2RoPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgZGg9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7aWooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtjaChiLGMpO2U9TmgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPVNoKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxraChiKSxlLnVwZGF0ZXI9RWksYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLElpKGIsZCxhLGMpLGI9amoobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWGkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntpaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVprKGQpO2E9Q2koZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9Y2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWhqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WWkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj0kaShudWxsLGIsZCxDaShkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksY2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksaGooYSxiLGQsZSxjKTtjYXNlIDM6YTp7a2ooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2xoKGEsYik7cWgoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9SmkoRXJyb3IocCg0MjMpKSxiKTtiPWxqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUppKEVycm9yKHAoNDI0KSksYik7Yj1saihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPVZnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9WmkoYSxiLGMpO2JyZWFrIGF9WGkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQWgoYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5naihhLGIpLFhpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBvaihhLGIsYyk7Y2FzZSA0OnJldHVybiB5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1VZyhiLG51bGwsZCxjKTpYaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksWWkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coV2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9WmkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9bWgoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO2JoKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO2JoKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31YaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGNoKGIsYyksZT1laChlKSxkPWQoZSksYi5mbGFnc3w9MSxYaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1DaShkLGIucGVuZGluZ1Byb3BzKSxlPUNpKGQudHlwZSxlKSwkaShhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGJqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxpaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsY2goYixjKSxHaShiLGQsZSksSWkoYixkLGUsYyksamoobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB4aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZGooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBGayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gJGsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyAkayhhLGIsYyxkKX1mdW5jdGlvbiBhaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gWmsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGFqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFBnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFJnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlhaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gVGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHBqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gVGcoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiBRZyhhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGJsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBhbChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07a2goZik7cmV0dXJuIGF9ZnVuY3Rpb24gY2woYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGRsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZWwoYSxiLGMsZCxlLGYsZyxoLGspe2E9YmwoYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZGwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1SKCk7ZT15aShjKTtmPW1oKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7bmgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtEayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGZsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVIoKSxnPXlpKGUpO2M9ZGwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1taChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPW5oKGUsYixnKTtudWxsIT09YSYmKGdpKGEsZSxnLGYpLG9oKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBnbChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGhsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBpbChhLGIpe2hsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZobChhLGIpfWZ1bmN0aW9uIGpsKCl7cmV0dXJuIG51bGx9dmFyIGtsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBsbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm1sLnByb3RvdHlwZS5yZW5kZXI9bGwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtmbChhLGIsbnVsbCxudWxsKX07bWwucHJvdG90eXBlLnVubW91bnQ9bGwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztSayhmdW5jdGlvbigpe2ZsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubWwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBubChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHBsKCl7fVxuZnVuY3Rpb24gcWwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7Zi5jYWxsKGEpfX12YXIgZz1lbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixwbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtSaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woayk7aC5jYWxsKGEpfX12YXIgaz1ibChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscGwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UmsoZnVuY3Rpb24oKXtmbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7aC5jYWxsKGEpfX1mbChiLGcsYSxlKX1lbHNlIGc9cWwoYyxiLGEsZSxkKTtyZXR1cm4gZ2woZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRGsoYixCKCkpLDA9PT0oSyY2KSYmKEdqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6UmsoZnVuY3Rpb24oKXt2YXIgYj1paChhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEsYyl9fSksaWwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aWgoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEzNDIxNzcyOCxjKX1pbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj15aShhKSxjPWloKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPVIoKTtnaShjLGEsYixkKX1pbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1RaztIYj1SaztcbnZhciBzbD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUWtdfSx0bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4zLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHVsPXtidW5kbGVUeXBlOnRsLmJ1bmRsZVR5cGUsdmVyc2lvbjp0bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dGwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp0bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmpsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4zLjEtbmV4dC1mMTMzOGY4MDgwLTIwMjQwNDI2XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgdmw9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF2bC5pc0Rpc2FibGVkJiZ2bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz12bC5pbmplY3QodWwpLGxjPXZsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1zbDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW5sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGNsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighbmwoYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1rbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9YmwoYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IGxsKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBSayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1rbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZWwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbWwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFJrKGZ1bmN0aW9uKCl7cmwobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9UWs7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFvbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gcmwoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjMuMS1uZXh0LWYxMzM4ZjgwODAtMjAyNDA0MjZcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZnVuY3Rpb24gWCgpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fVxuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtleHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O1xuZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO2V4cG9ydHMuYWN0PVg7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9WDtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O2V4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtcbmV4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtleHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL2J1dHRvbi5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL2J1dHRvbi5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBjbiBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9idXR0b24ubW9kdWxlLmNzc1wiO1xuZXhwb3J0IGNvbnN0IEJ1dHRvbiA9ICh7IGNoaWxkcmVuLCBvbkNsaWNrLCBjbGFzc05hbWUsIGxhYmVsLCBkaXNhYmxlZCA9IGZhbHNlLCB2YXJpYW50ID0gXCJwaW5rXCIsIH0pID0+IHtcbiAgICBjb25zdCBidXR0b25DbGFzcyA9IGNuKHN0eWxlcy5idG4sIHN0eWxlc1tgYnRuLSR7dmFyaWFudH1gXSwgY2xhc3NOYW1lKTtcbiAgICByZXR1cm4gKF9qc3hzKFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBidXR0b25DbGFzcywgb25DbGljazogb25DbGljaywgZGlzYWJsZWQ6IGRpc2FibGVkLCBjaGlsZHJlbjogW2xhYmVsICYmIF9qc3goXCJzcGFuXCIsIHsgY2hpbGRyZW46IGxhYmVsIH0pLCBjaGlsZHJlbiAmJiBfanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogc3R5bGVzLmljb24sIGNoaWxkcmVuOiBjaGlsZHJlbiB9KV0gfSkpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF90b0RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi90b0RhdGVcIikpO1xudmFyIF90b0Zsb2F0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvdG9GbG9hdFwiKSk7XG52YXIgX3RvSW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvdG9JbnRcIikpO1xudmFyIF90b0Jvb2xlYW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi90b0Jvb2xlYW5cIikpO1xudmFyIF9lcXVhbHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9lcXVhbHNcIikpO1xudmFyIF9jb250YWlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2NvbnRhaW5zXCIpKTtcbnZhciBfbWF0Y2hlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL21hdGNoZXNcIikpO1xudmFyIF9pc0VtYWlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNFbWFpbFwiKSk7XG52YXIgX2lzVVJMID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNVUkxcIikpO1xudmFyIF9pc01BQ0FkZHJlc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc01BQ0FkZHJlc3NcIikpO1xudmFyIF9pc0lQID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJUFwiKSk7XG52YXIgX2lzSVBSYW5nZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSVBSYW5nZVwiKSk7XG52YXIgX2lzRlFETiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRlFETlwiKSk7XG52YXIgX2lzRGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRGF0ZVwiKSk7XG52YXIgX2lzVGltZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzVGltZVwiKSk7XG52YXIgX2lzQm9vbGVhbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzQm9vbGVhblwiKSk7XG52YXIgX2lzTG9jYWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNMb2NhbGVcIikpO1xudmFyIF9pc0FiYVJvdXRpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0FiYVJvdXRpbmdcIikpO1xudmFyIF9pc0FscGhhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vbGliL2lzQWxwaGFcIikpO1xudmFyIF9pc0FscGhhbnVtZXJpYyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2xpYi9pc0FscGhhbnVtZXJpY1wiKSk7XG52YXIgX2lzTnVtZXJpYyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzTnVtZXJpY1wiKSk7XG52YXIgX2lzUGFzc3BvcnROdW1iZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc1Bhc3Nwb3J0TnVtYmVyXCIpKTtcbnZhciBfaXNQb3J0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNQb3J0XCIpKTtcbnZhciBfaXNMb3dlcmNhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0xvd2VyY2FzZVwiKSk7XG52YXIgX2lzVXBwZXJjYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNVcHBlcmNhc2VcIikpO1xudmFyIF9pc0lNRUkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lNRUlcIikpO1xudmFyIF9pc0FzY2lpID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNBc2NpaVwiKSk7XG52YXIgX2lzRnVsbFdpZHRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNGdWxsV2lkdGhcIikpO1xudmFyIF9pc0hhbGZXaWR0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSGFsZldpZHRoXCIpKTtcbnZhciBfaXNWYXJpYWJsZVdpZHRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNWYXJpYWJsZVdpZHRoXCIpKTtcbnZhciBfaXNNdWx0aWJ5dGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc011bHRpYnl0ZVwiKSk7XG52YXIgX2lzU2VtVmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNTZW1WZXJcIikpO1xudmFyIF9pc1N1cnJvZ2F0ZVBhaXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc1N1cnJvZ2F0ZVBhaXJcIikpO1xudmFyIF9pc0ludCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSW50XCIpKTtcbnZhciBfaXNGbG9hdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2xpYi9pc0Zsb2F0XCIpKTtcbnZhciBfaXNEZWNpbWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNEZWNpbWFsXCIpKTtcbnZhciBfaXNIZXhhZGVjaW1hbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSGV4YWRlY2ltYWxcIikpO1xudmFyIF9pc09jdGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNPY3RhbFwiKSk7XG52YXIgX2lzRGl2aXNpYmxlQnkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0RpdmlzaWJsZUJ5XCIpKTtcbnZhciBfaXNIZXhDb2xvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSGV4Q29sb3JcIikpO1xudmFyIF9pc1JnYkNvbG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNSZ2JDb2xvclwiKSk7XG52YXIgX2lzSFNMID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNIU0xcIikpO1xudmFyIF9pc0lTUkMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lTUkNcIikpO1xudmFyIF9pc0lCQU4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9saWIvaXNJQkFOXCIpKTtcbnZhciBfaXNCSUMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0JJQ1wiKSk7XG52YXIgX2lzTUQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc01ENVwiKSk7XG52YXIgX2lzSGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSGFzaFwiKSk7XG52YXIgX2lzSldUID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNKV1RcIikpO1xudmFyIF9pc0pTT04gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0pTT05cIikpO1xudmFyIF9pc0VtcHR5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNFbXB0eVwiKSk7XG52YXIgX2lzTGVuZ3RoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNMZW5ndGhcIikpO1xudmFyIF9pc0J5dGVMZW5ndGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0J5dGVMZW5ndGhcIikpO1xudmFyIF9pc1VVSUQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc1VVSURcIikpO1xudmFyIF9pc01vbmdvSWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc01vbmdvSWRcIikpO1xudmFyIF9pc0FmdGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNBZnRlclwiKSk7XG52YXIgX2lzQmVmb3JlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNCZWZvcmVcIikpO1xudmFyIF9pc0luID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJblwiKSk7XG52YXIgX2lzTHVobk51bWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzTHVobk51bWJlclwiKSk7XG52YXIgX2lzQ3JlZGl0Q2FyZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzQ3JlZGl0Q2FyZFwiKSk7XG52YXIgX2lzSWRlbnRpdHlDYXJkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJZGVudGl0eUNhcmRcIikpO1xudmFyIF9pc0VBTiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRUFOXCIpKTtcbnZhciBfaXNJU0lOID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJU0lOXCIpKTtcbnZhciBfaXNJU0JOID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJU0JOXCIpKTtcbnZhciBfaXNJU1NOID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJU1NOXCIpKTtcbnZhciBfaXNUYXhJRCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzVGF4SURcIikpO1xudmFyIF9pc01vYmlsZVBob25lID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vbGliL2lzTW9iaWxlUGhvbmVcIikpO1xudmFyIF9pc0V0aGVyZXVtQWRkcmVzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzRXRoZXJldW1BZGRyZXNzXCIpKTtcbnZhciBfaXNDdXJyZW5jeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzQ3VycmVuY3lcIikpO1xudmFyIF9pc0J0Y0FkZHJlc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0J0Y0FkZHJlc3NcIikpO1xudmFyIF9pc0lTTyA9IHJlcXVpcmUoXCIuL2xpYi9pc0lTTzYzNDZcIik7XG52YXIgX2lzSVNPMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSVNPNjM5MVwiKSk7XG52YXIgX2lzSVNPMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzSVNPODYwMVwiKSk7XG52YXIgX2lzUkZDID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNSRkMzMzM5XCIpKTtcbnZhciBfaXNJU08zMTY2MUFscGhhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJU08zMTY2MUFscGhhMlwiKSk7XG52YXIgX2lzSVNPMzE2NjFBbHBoYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0lTTzMxNjYxQWxwaGEzXCIpKTtcbnZhciBfaXNJU080ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNJU080MjE3XCIpKTtcbnZhciBfaXNCYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNCYXNlMzJcIikpO1xudmFyIF9pc0Jhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNCYXNlNThcIikpO1xudmFyIF9pc0Jhc2UzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNCYXNlNjRcIikpO1xudmFyIF9pc0RhdGFVUkkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc0RhdGFVUklcIikpO1xudmFyIF9pc01hZ25ldFVSSSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzTWFnbmV0VVJJXCIpKTtcbnZhciBfaXNNYWlsdG9VUkkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc01haWx0b1VSSVwiKSk7XG52YXIgX2lzTWltZVR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc01pbWVUeXBlXCIpKTtcbnZhciBfaXNMYXRMb25nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNMYXRMb25nXCIpKTtcbnZhciBfaXNQb3N0YWxDb2RlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vbGliL2lzUG9zdGFsQ29kZVwiKSk7XG52YXIgX2x0cmltID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvbHRyaW1cIikpO1xudmFyIF9ydHJpbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3J0cmltXCIpKTtcbnZhciBfdHJpbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3RyaW1cIikpO1xudmFyIF9lc2NhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9lc2NhcGVcIikpO1xudmFyIF91bmVzY2FwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3VuZXNjYXBlXCIpKTtcbnZhciBfc3RyaXBMb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9zdHJpcExvd1wiKSk7XG52YXIgX3doaXRlbGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL3doaXRlbGlzdFwiKSk7XG52YXIgX2JsYWNrbGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2JsYWNrbGlzdFwiKSk7XG52YXIgX2lzV2hpdGVsaXN0ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9pc1doaXRlbGlzdGVkXCIpKTtcbnZhciBfbm9ybWFsaXplRW1haWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi9ub3JtYWxpemVFbWFpbFwiKSk7XG52YXIgX2lzU2x1ZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2lzU2x1Z1wiKSk7XG52YXIgX2lzTGljZW5zZVBsYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNMaWNlbnNlUGxhdGVcIikpO1xudmFyIF9pc1N0cm9uZ1Bhc3N3b3JkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNTdHJvbmdQYXNzd29yZFwiKSk7XG52YXIgX2lzVkFUID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saWIvaXNWQVRcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcCkgcmV0dXJuIG51bGw7IHZhciByID0gbmV3IFdlYWtNYXAoKSwgdCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgcmV0dXJuIGUgPyB0IDogcjsgfSkoZSk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHIpIHsgaWYgKCFyICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSBfdHlwZW9mKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIHt9Lmhhc093blByb3BlcnR5LmNhbGwoZSwgdSkpIHsgdmFyIGkgPSBhID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB1KSA6IG51bGw7IGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCB1LCBpKSA6IG5bdV0gPSBlW3VdOyB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIHZlcnNpb24gPSAnMTMuMTIuMCc7XG52YXIgdmFsaWRhdG9yID0ge1xuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICB0b0RhdGU6IF90b0RhdGUuZGVmYXVsdCxcbiAgdG9GbG9hdDogX3RvRmxvYXQuZGVmYXVsdCxcbiAgdG9JbnQ6IF90b0ludC5kZWZhdWx0LFxuICB0b0Jvb2xlYW46IF90b0Jvb2xlYW4uZGVmYXVsdCxcbiAgZXF1YWxzOiBfZXF1YWxzLmRlZmF1bHQsXG4gIGNvbnRhaW5zOiBfY29udGFpbnMuZGVmYXVsdCxcbiAgbWF0Y2hlczogX21hdGNoZXMuZGVmYXVsdCxcbiAgaXNFbWFpbDogX2lzRW1haWwuZGVmYXVsdCxcbiAgaXNVUkw6IF9pc1VSTC5kZWZhdWx0LFxuICBpc01BQ0FkZHJlc3M6IF9pc01BQ0FkZHJlc3MuZGVmYXVsdCxcbiAgaXNJUDogX2lzSVAuZGVmYXVsdCxcbiAgaXNJUFJhbmdlOiBfaXNJUFJhbmdlLmRlZmF1bHQsXG4gIGlzRlFETjogX2lzRlFETi5kZWZhdWx0LFxuICBpc0Jvb2xlYW46IF9pc0Jvb2xlYW4uZGVmYXVsdCxcbiAgaXNJQkFOOiBfaXNJQkFOLmRlZmF1bHQsXG4gIGlzQklDOiBfaXNCSUMuZGVmYXVsdCxcbiAgaXNBYmFSb3V0aW5nOiBfaXNBYmFSb3V0aW5nLmRlZmF1bHQsXG4gIGlzQWxwaGE6IF9pc0FscGhhLmRlZmF1bHQsXG4gIGlzQWxwaGFMb2NhbGVzOiBfaXNBbHBoYS5sb2NhbGVzLFxuICBpc0FscGhhbnVtZXJpYzogX2lzQWxwaGFudW1lcmljLmRlZmF1bHQsXG4gIGlzQWxwaGFudW1lcmljTG9jYWxlczogX2lzQWxwaGFudW1lcmljLmxvY2FsZXMsXG4gIGlzTnVtZXJpYzogX2lzTnVtZXJpYy5kZWZhdWx0LFxuICBpc1Bhc3Nwb3J0TnVtYmVyOiBfaXNQYXNzcG9ydE51bWJlci5kZWZhdWx0LFxuICBpc1BvcnQ6IF9pc1BvcnQuZGVmYXVsdCxcbiAgaXNMb3dlcmNhc2U6IF9pc0xvd2VyY2FzZS5kZWZhdWx0LFxuICBpc1VwcGVyY2FzZTogX2lzVXBwZXJjYXNlLmRlZmF1bHQsXG4gIGlzQXNjaWk6IF9pc0FzY2lpLmRlZmF1bHQsXG4gIGlzRnVsbFdpZHRoOiBfaXNGdWxsV2lkdGguZGVmYXVsdCxcbiAgaXNIYWxmV2lkdGg6IF9pc0hhbGZXaWR0aC5kZWZhdWx0LFxuICBpc1ZhcmlhYmxlV2lkdGg6IF9pc1ZhcmlhYmxlV2lkdGguZGVmYXVsdCxcbiAgaXNNdWx0aWJ5dGU6IF9pc011bHRpYnl0ZS5kZWZhdWx0LFxuICBpc1NlbVZlcjogX2lzU2VtVmVyLmRlZmF1bHQsXG4gIGlzU3Vycm9nYXRlUGFpcjogX2lzU3Vycm9nYXRlUGFpci5kZWZhdWx0LFxuICBpc0ludDogX2lzSW50LmRlZmF1bHQsXG4gIGlzSU1FSTogX2lzSU1FSS5kZWZhdWx0LFxuICBpc0Zsb2F0OiBfaXNGbG9hdC5kZWZhdWx0LFxuICBpc0Zsb2F0TG9jYWxlczogX2lzRmxvYXQubG9jYWxlcyxcbiAgaXNEZWNpbWFsOiBfaXNEZWNpbWFsLmRlZmF1bHQsXG4gIGlzSGV4YWRlY2ltYWw6IF9pc0hleGFkZWNpbWFsLmRlZmF1bHQsXG4gIGlzT2N0YWw6IF9pc09jdGFsLmRlZmF1bHQsXG4gIGlzRGl2aXNpYmxlQnk6IF9pc0RpdmlzaWJsZUJ5LmRlZmF1bHQsXG4gIGlzSGV4Q29sb3I6IF9pc0hleENvbG9yLmRlZmF1bHQsXG4gIGlzUmdiQ29sb3I6IF9pc1JnYkNvbG9yLmRlZmF1bHQsXG4gIGlzSFNMOiBfaXNIU0wuZGVmYXVsdCxcbiAgaXNJU1JDOiBfaXNJU1JDLmRlZmF1bHQsXG4gIGlzTUQ1OiBfaXNNRC5kZWZhdWx0LFxuICBpc0hhc2g6IF9pc0hhc2guZGVmYXVsdCxcbiAgaXNKV1Q6IF9pc0pXVC5kZWZhdWx0LFxuICBpc0pTT046IF9pc0pTT04uZGVmYXVsdCxcbiAgaXNFbXB0eTogX2lzRW1wdHkuZGVmYXVsdCxcbiAgaXNMZW5ndGg6IF9pc0xlbmd0aC5kZWZhdWx0LFxuICBpc0xvY2FsZTogX2lzTG9jYWxlLmRlZmF1bHQsXG4gIGlzQnl0ZUxlbmd0aDogX2lzQnl0ZUxlbmd0aC5kZWZhdWx0LFxuICBpc1VVSUQ6IF9pc1VVSUQuZGVmYXVsdCxcbiAgaXNNb25nb0lkOiBfaXNNb25nb0lkLmRlZmF1bHQsXG4gIGlzQWZ0ZXI6IF9pc0FmdGVyLmRlZmF1bHQsXG4gIGlzQmVmb3JlOiBfaXNCZWZvcmUuZGVmYXVsdCxcbiAgaXNJbjogX2lzSW4uZGVmYXVsdCxcbiAgaXNMdWhuTnVtYmVyOiBfaXNMdWhuTnVtYmVyLmRlZmF1bHQsXG4gIGlzQ3JlZGl0Q2FyZDogX2lzQ3JlZGl0Q2FyZC5kZWZhdWx0LFxuICBpc0lkZW50aXR5Q2FyZDogX2lzSWRlbnRpdHlDYXJkLmRlZmF1bHQsXG4gIGlzRUFOOiBfaXNFQU4uZGVmYXVsdCxcbiAgaXNJU0lOOiBfaXNJU0lOLmRlZmF1bHQsXG4gIGlzSVNCTjogX2lzSVNCTi5kZWZhdWx0LFxuICBpc0lTU046IF9pc0lTU04uZGVmYXVsdCxcbiAgaXNNb2JpbGVQaG9uZTogX2lzTW9iaWxlUGhvbmUuZGVmYXVsdCxcbiAgaXNNb2JpbGVQaG9uZUxvY2FsZXM6IF9pc01vYmlsZVBob25lLmxvY2FsZXMsXG4gIGlzUG9zdGFsQ29kZTogX2lzUG9zdGFsQ29kZS5kZWZhdWx0LFxuICBpc1Bvc3RhbENvZGVMb2NhbGVzOiBfaXNQb3N0YWxDb2RlLmxvY2FsZXMsXG4gIGlzRXRoZXJldW1BZGRyZXNzOiBfaXNFdGhlcmV1bUFkZHJlc3MuZGVmYXVsdCxcbiAgaXNDdXJyZW5jeTogX2lzQ3VycmVuY3kuZGVmYXVsdCxcbiAgaXNCdGNBZGRyZXNzOiBfaXNCdGNBZGRyZXNzLmRlZmF1bHQsXG4gIGlzSVNPNjM0NjogX2lzSVNPLmlzSVNPNjM0NixcbiAgaXNGcmVpZ2h0Q29udGFpbmVySUQ6IF9pc0lTTy5pc0ZyZWlnaHRDb250YWluZXJJRCxcbiAgaXNJU082MzkxOiBfaXNJU08yLmRlZmF1bHQsXG4gIGlzSVNPODYwMTogX2lzSVNPMy5kZWZhdWx0LFxuICBpc1JGQzMzMzk6IF9pc1JGQy5kZWZhdWx0LFxuICBpc0lTTzMxNjYxQWxwaGEyOiBfaXNJU08zMTY2MUFscGhhLmRlZmF1bHQsXG4gIGlzSVNPMzE2NjFBbHBoYTM6IF9pc0lTTzMxNjYxQWxwaGEyLmRlZmF1bHQsXG4gIGlzSVNPNDIxNzogX2lzSVNPNC5kZWZhdWx0LFxuICBpc0Jhc2UzMjogX2lzQmFzZS5kZWZhdWx0LFxuICBpc0Jhc2U1ODogX2lzQmFzZTIuZGVmYXVsdCxcbiAgaXNCYXNlNjQ6IF9pc0Jhc2UzLmRlZmF1bHQsXG4gIGlzRGF0YVVSSTogX2lzRGF0YVVSSS5kZWZhdWx0LFxuICBpc01hZ25ldFVSSTogX2lzTWFnbmV0VVJJLmRlZmF1bHQsXG4gIGlzTWFpbHRvVVJJOiBfaXNNYWlsdG9VUkkuZGVmYXVsdCxcbiAgaXNNaW1lVHlwZTogX2lzTWltZVR5cGUuZGVmYXVsdCxcbiAgaXNMYXRMb25nOiBfaXNMYXRMb25nLmRlZmF1bHQsXG4gIGx0cmltOiBfbHRyaW0uZGVmYXVsdCxcbiAgcnRyaW06IF9ydHJpbS5kZWZhdWx0LFxuICB0cmltOiBfdHJpbS5kZWZhdWx0LFxuICBlc2NhcGU6IF9lc2NhcGUuZGVmYXVsdCxcbiAgdW5lc2NhcGU6IF91bmVzY2FwZS5kZWZhdWx0LFxuICBzdHJpcExvdzogX3N0cmlwTG93LmRlZmF1bHQsXG4gIHdoaXRlbGlzdDogX3doaXRlbGlzdC5kZWZhdWx0LFxuICBibGFja2xpc3Q6IF9ibGFja2xpc3QuZGVmYXVsdCxcbiAgaXNXaGl0ZWxpc3RlZDogX2lzV2hpdGVsaXN0ZWQuZGVmYXVsdCxcbiAgbm9ybWFsaXplRW1haWw6IF9ub3JtYWxpemVFbWFpbC5kZWZhdWx0LFxuICB0b1N0cmluZzogdG9TdHJpbmcsXG4gIGlzU2x1ZzogX2lzU2x1Zy5kZWZhdWx0LFxuICBpc1N0cm9uZ1Bhc3N3b3JkOiBfaXNTdHJvbmdQYXNzd29yZC5kZWZhdWx0LFxuICBpc1RheElEOiBfaXNUYXhJRC5kZWZhdWx0LFxuICBpc0RhdGU6IF9pc0RhdGUuZGVmYXVsdCxcbiAgaXNUaW1lOiBfaXNUaW1lLmRlZmF1bHQsXG4gIGlzTGljZW5zZVBsYXRlOiBfaXNMaWNlbnNlUGxhdGUuZGVmYXVsdCxcbiAgaXNWQVQ6IF9pc1ZBVC5kZWZhdWx0LFxuICBpYmFuTG9jYWxlczogX2lzSUJBTi5sb2NhbGVzXG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gdmFsaWRhdG9yO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5mYXJzaUxvY2FsZXMgPSBleHBvcnRzLmVuZ2xpc2hMb2NhbGVzID0gZXhwb3J0cy5kb3REZWNpbWFsID0gZXhwb3J0cy5kZWNpbWFsID0gZXhwb3J0cy5jb21tYURlY2ltYWwgPSBleHBvcnRzLmJlbmdhbGlMb2NhbGVzID0gZXhwb3J0cy5hcmFiaWNMb2NhbGVzID0gZXhwb3J0cy5hbHBoYW51bWVyaWMgPSBleHBvcnRzLmFscGhhID0gdm9pZCAwO1xudmFyIGFscGhhID0gZXhwb3J0cy5hbHBoYSA9IHtcbiAgJ2VuLVVTJzogL15bQS1aXSskL2ksXG4gICdhei1BWic6IC9eW0EtVlhZWsOHxo/EnsSwxLHDlsWew5xdKyQvaSxcbiAgJ2JnLUJHJzogL15b0JAt0K9dKyQvaSxcbiAgJ2NzLUNaJzogL15bQS1aw4HEjMSOw4nEmsONxYfDk8WYxaDFpMOaxa7DncW9XSskL2ksXG4gICdkYS1ESyc6IC9eW0EtWsOGw5jDhV0rJC9pLFxuICAnZGUtREUnOiAvXltBLVrDhMOWw5zDn10rJC9pLFxuICAnZWwtR1InOiAvXlvOkS3Pjl0rJC9pLFxuICAnZXMtRVMnOiAvXltBLVrDgcOJw43DkcOTw5rDnF0rJC9pLFxuICAnZmEtSVInOiAvXlvYp9io2b7Yqtir2Kzahtit2K7Yr9iw2LHYstqY2LPYtNi12LbYt9i42LnYutmB2YLaqdqv2YTZhdmG2YjZh9uMXSskL2ksXG4gICdmaS1GSSc6IC9eW0EtWsOFw4TDll0rJC9pLFxuICAnZnItRlInOiAvXltBLVrDgMOCw4bDh8OJw4jDisOLw4/DjsOUxZLDmcObw5zFuF0rJC9pLFxuICAnaXQtSVQnOiAvXltBLVrDgMOJw4jDjMOOw5PDksOZXSskL2ksXG4gICdqYS1KUCc6IC9eW+OBgS3jgpPjgqEt44O2772mLe++n+S4gC3pvqDjg7zjg7vjgILjgIFdKyQvaSxcbiAgJ25iLU5PJzogL15bQS1aw4bDmMOFXSskL2ksXG4gICdubC1OTCc6IC9eW0EtWsOBw4nDi8OPw5PDlsOcw5pdKyQvaSxcbiAgJ25uLU5PJzogL15bQS1aw4bDmMOFXSskL2ksXG4gICdodS1IVSc6IC9eW0EtWsOBw4nDjcOTw5bFkMOaw5zFsF0rJC9pLFxuICAncGwtUEwnOiAvXltBLVrEhMSGxJjFmsWBxYPDk8W7xbldKyQvaSxcbiAgJ3B0LVBUJzogL15bQS1aw4PDgcOAw4LDhMOHw4nDisOLw43Dj8OVw5PDlMOWw5rDnF0rJC9pLFxuICAncnUtUlUnOiAvXlvQkC3Qr9CBXSskL2ksXG4gICdray1LWic6IC9eW9CQLdCv0IFcXHUwNEQ4XFx1MDRCMFxcdTA0MDZcXHUwNEEyXFx1MDQ5MlxcdTA0QUVcXHUwNDlBXFx1MDRFOFxcdTA0QkFdKyQvaSxcbiAgJ3NsLVNJJzogL15bQS1axIzEhsSQxaDFvV0rJC9pLFxuICAnc2stU0snOiAvXltBLVrDgcSMxI7DicONxYfDk8WgxaTDmsOdxb3EucWUxL3DhMOUXSskL2ksXG4gICdzci1SU0BsYXRpbic6IC9eW0EtWsSMxIbFvcWgxJBdKyQvaSxcbiAgJ3NyLVJTJzogL15b0JAt0K/QgtCI0InQitCL0I9dKyQvaSxcbiAgJ3N2LVNFJzogL15bQS1aw4XDhMOWXSskL2ksXG4gICd0aC1USCc6IC9eW+C4gS3guZBcXHNdKyQvaSxcbiAgJ3RyLVRSJzogL15bQS1aw4fEnsSwxLHDlsWew5xdKyQvaSxcbiAgJ3VrLVVBJzogL15b0JAt0KnQrNCu0K/QhEnQh9KQ0ZZdKyQvaSxcbiAgJ3ZpLVZOJzogL15bQS1aw4DDgeG6oOG6osODw4LhuqbhuqThuqzhuqjhuqrEguG6sOG6ruG6tuG6suG6tMSQw4jDieG6uOG6uuG6vMOK4buA4bq+4buG4buC4buEw4zDjeG7iuG7iMSow5LDk+G7jOG7jsOVw5Thu5Lhu5Dhu5jhu5Thu5bGoOG7nOG7muG7ouG7nuG7oMOZw5rhu6Thu6bFqMav4buq4buo4buw4bus4buu4buyw53hu7Thu7bhu7hdKyQvaSxcbiAgJ2tvLUtSJzogL15b44SxLeOFjuOFjy3jhaPqsIAt7Z6jXSokLyxcbiAgJ2t1LUlRJzogL15b2KbYp9io2b7Yqtis2obYrdiu2K/YsdqV2LLamNiz2LTYudi62YHapNmC2qnar9mE2rXZhdmG2Yjbhtq+25XbjNuO2YrYt9ik2KvYotil2KPZg9i22LXYqdi42LBdKyQvaSxcbiAgYXI6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0rJC8sXG4gIGhlOiAvXlvXkC3Xql0rJC8sXG4gIGZhOiAvXlsn2KLYp9ih2KPYpNim2KjZvtiq2KvYrNqG2K3Yrtiv2LDYsdiy2pjYs9i02LXYtti32LjYudi62YHZgtqp2q/ZhNmF2YbZiNmH2KnbjCddKyQvaSxcbiAgYm46IC9eWyfgpoDgpoHgpoLgpoPgpoXgpobgpofgpojgpongporgpovgpozgpo/gppDgppPgppTgppXgppbgppfgppjgppngpprgppvgppzgpp3gpp7gpp/gpqDgpqHgpqLgpqPgpqTgpqXgpqbgpqfgpqjgpqrgpqvgpqzgpq3gpq7gpq/gprDgprLgprbgprfgprjgprngprzgpr3gpr7gpr/gp4Dgp4Hgp4Lgp4Pgp4Tgp4fgp4jgp4vgp4zgp43gp47gp5fgp5zgp53gp5/gp6Dgp6Hgp6Lgp6Pgp7Dgp7Hgp7Lgp7Pgp7Tgp7Xgp7bgp7fgp7jgp7ngp7rgp7snXSskLyxcbiAgZW86IC9eW0FCQ8SIRC1HxJxIxKRJSsS0Sy1QUlPFnFRVxaxWWl0rJC9pLFxuICAnaGktSU4nOiAvXltcXHUwOTAwLVxcdTA5NjFdK1tcXHUwOTcyLVxcdTA5N0ZdKiQvaSxcbiAgJ3NpLUxLJzogL15bXFx1MEQ4MC1cXHUwREZGXSskL1xufTtcbnZhciBhbHBoYW51bWVyaWMgPSBleHBvcnRzLmFscGhhbnVtZXJpYyA9IHtcbiAgJ2VuLVVTJzogL15bMC05QS1aXSskL2ksXG4gICdhei1BWic6IC9eWzAtOUEtVlhZWsOHxo/EnsSwxLHDlsWew5xdKyQvaSxcbiAgJ2JnLUJHJzogL15bMC050JAt0K9dKyQvaSxcbiAgJ2NzLUNaJzogL15bMC05QS1aw4HEjMSOw4nEmsONxYfDk8WYxaDFpMOaxa7DncW9XSskL2ksXG4gICdkYS1ESyc6IC9eWzAtOUEtWsOGw5jDhV0rJC9pLFxuICAnZGUtREUnOiAvXlswLTlBLVrDhMOWw5zDn10rJC9pLFxuICAnZWwtR1InOiAvXlswLTnOkS3PiV0rJC9pLFxuICAnZXMtRVMnOiAvXlswLTlBLVrDgcOJw43DkcOTw5rDnF0rJC9pLFxuICAnZmktRkknOiAvXlswLTlBLVrDhcOEw5ZdKyQvaSxcbiAgJ2ZyLUZSJzogL15bMC05QS1aw4DDgsOGw4fDicOIw4rDi8OPw47DlMWSw5nDm8OcxbhdKyQvaSxcbiAgJ2l0LUlUJzogL15bMC05QS1aw4DDicOIw4zDjsOTw5LDmV0rJC9pLFxuICAnamEtSlAnOiAvXlswLTnvvJAt77yZ44GBLeOCk+OCoS3jg7bvvaYt776f5LiALem+oOODvOODu+OAguOAgV0rJC9pLFxuICAnaHUtSFUnOiAvXlswLTlBLVrDgcOJw43Dk8OWxZDDmsOcxbBdKyQvaSxcbiAgJ25iLU5PJzogL15bMC05QS1aw4bDmMOFXSskL2ksXG4gICdubC1OTCc6IC9eWzAtOUEtWsOBw4nDi8OPw5PDlsOcw5pdKyQvaSxcbiAgJ25uLU5PJzogL15bMC05QS1aw4bDmMOFXSskL2ksXG4gICdwbC1QTCc6IC9eWzAtOUEtWsSExIbEmMWaxYHFg8OTxbvFuV0rJC9pLFxuICAncHQtUFQnOiAvXlswLTlBLVrDg8OBw4DDgsOEw4fDicOKw4vDjcOPw5XDk8OUw5bDmsOcXSskL2ksXG4gICdydS1SVSc6IC9eWzAtOdCQLdCv0IFdKyQvaSxcbiAgJ2trLUtaJzogL15bMC050JAt0K/QgVxcdTA0RDhcXHUwNEIwXFx1MDQwNlxcdTA0QTJcXHUwNDkyXFx1MDRBRVxcdTA0OUFcXHUwNEU4XFx1MDRCQV0rJC9pLFxuICAnc2wtU0knOiAvXlswLTlBLVrEjMSGxJDFoMW9XSskL2ksXG4gICdzay1TSyc6IC9eWzAtOUEtWsOBxIzEjsOJw43Fh8OTxaDFpMOaw53FvcS5xZTEvcOEw5RdKyQvaSxcbiAgJ3NyLVJTQGxhdGluJzogL15bMC05QS1axIzEhsW9xaDEkF0rJC9pLFxuICAnc3ItUlMnOiAvXlswLTnQkC3Qr9CC0IjQidCK0IvQj10rJC9pLFxuICAnc3YtU0UnOiAvXlswLTlBLVrDhcOEw5ZdKyQvaSxcbiAgJ3RoLVRIJzogL15b4LiBLeC5mVxcc10rJC9pLFxuICAndHItVFInOiAvXlswLTlBLVrDh8SexLDEscOWxZ7DnF0rJC9pLFxuICAndWstVUEnOiAvXlswLTnQkC3QqdCs0K7Qr9CESdCH0pDRll0rJC9pLFxuICAna28tS1InOiAvXlswLTnjhLEt44WO44WPLeOFo+qwgC3tnqNdKiQvLFxuICAna3UtSVEnOiAvXlvZoNmh2aLZo9mk2aXZptmn2ajZqTAtOdim2KfYqNm+2KrYrNqG2K3Yrtiv2LHaldiy2pjYs9i02LnYutmB2qTZgtqp2q/ZhNq12YXZhtmI24bavtuV24zbjtmK2LfYpNir2KLYpdij2YPYtti12KnYuNiwXSskL2ksXG4gICd2aS1WTic6IC9eWzAtOUEtWsOAw4HhuqDhuqLDg8OC4bqm4bqk4bqs4bqo4bqqxILhurDhuq7hurbhurLhurTEkMOIw4nhurjhurrhurzDiuG7gOG6vuG7huG7guG7hMOMw43hu4rhu4jEqMOSw5Phu4zhu47DlcOU4buS4buQ4buY4buU4buWxqDhu5zhu5rhu6Lhu57hu6DDmcOa4buk4bumxajGr+G7quG7qOG7sOG7rOG7ruG7ssOd4bu04bu24bu4XSskL2ksXG4gIGFyOiAvXlvZoNmh2aLZo9mk2aXZptmn2ajZqTAtOdih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0rJC8sXG4gIGhlOiAvXlswLTnXkC3Xql0rJC8sXG4gIGZhOiAvXlsnMC052KLYp9ih2KPYpNim2KjZvtiq2KvYrNqG2K3Yrtiv2LDYsdiy2pjYs9i02LXYtti32LjYudi62YHZgtqp2q/ZhNmF2YbZiNmH2KnbjNux27Lbs9u027Xbttu327jbuduwJ10rJC9pLFxuICBibjogL15bJ+CmgOCmgeCmguCmg+CmheCmhuCmh+CmiOCmieCmiuCmi+CmjOCmj+CmkOCmk+CmlOCmleCmluCml+CmmOCmmeCmmuCmm+CmnOCmneCmnuCmn+CmoOCmoeCmouCmo+CmpOCmpeCmpuCmp+CmqOCmquCmq+CmrOCmreCmruCmr+CmsOCmsuCmtuCmt+CmuOCmueCmvOCmveCmvuCmv+CngOCngeCnguCng+CnhOCnh+CniOCni+CnjOCnjeCnjuCnl+CnnOCnneCnn+CnoOCnoeCnouCno+CnpuCnp+CnqOCnqeCnquCnq+CnrOCnreCnruCnr+CnsOCnseCnsuCns+CntOCnteCntuCnt+CnuOCnueCnuuCnuyddKyQvLFxuICBlbzogL15bMC05QUJDxIhELUfEnEjEpElKxLRLLVBSU8WcVFXFrFZaXSskL2ksXG4gICdoaS1JTic6IC9eW1xcdTA5MDAtXFx1MDk2M10rW1xcdTA5NjYtXFx1MDk3Rl0qJC9pLFxuICAnc2ktTEsnOiAvXlswLTlcXHUwRDgwLVxcdTBERkZdKyQvXG59O1xudmFyIGRlY2ltYWwgPSBleHBvcnRzLmRlY2ltYWwgPSB7XG4gICdlbi1VUyc6ICcuJyxcbiAgYXI6ICfZqydcbn07XG52YXIgZW5nbGlzaExvY2FsZXMgPSBleHBvcnRzLmVuZ2xpc2hMb2NhbGVzID0gWydBVScsICdHQicsICdISycsICdJTicsICdOWicsICdaQScsICdaTSddO1xuZm9yICh2YXIgbG9jYWxlLCBpID0gMDsgaSA8IGVuZ2xpc2hMb2NhbGVzLmxlbmd0aDsgaSsrKSB7XG4gIGxvY2FsZSA9IFwiZW4tXCIuY29uY2F0KGVuZ2xpc2hMb2NhbGVzW2ldKTtcbiAgYWxwaGFbbG9jYWxlXSA9IGFscGhhWydlbi1VUyddO1xuICBhbHBoYW51bWVyaWNbbG9jYWxlXSA9IGFscGhhbnVtZXJpY1snZW4tVVMnXTtcbiAgZGVjaW1hbFtsb2NhbGVdID0gZGVjaW1hbFsnZW4tVVMnXTtcbn1cblxuLy8gU291cmNlOiBodHRwOi8vd3d3LmxvY2FsZXBsYW5ldC5jb20vamF2YS9cbnZhciBhcmFiaWNMb2NhbGVzID0gZXhwb3J0cy5hcmFiaWNMb2NhbGVzID0gWydBRScsICdCSCcsICdEWicsICdFRycsICdJUScsICdKTycsICdLVycsICdMQicsICdMWScsICdNQScsICdRTScsICdRQScsICdTQScsICdTRCcsICdTWScsICdUTicsICdZRSddO1xuZm9yICh2YXIgX2xvY2FsZSwgX2kgPSAwOyBfaSA8IGFyYWJpY0xvY2FsZXMubGVuZ3RoOyBfaSsrKSB7XG4gIF9sb2NhbGUgPSBcImFyLVwiLmNvbmNhdChhcmFiaWNMb2NhbGVzW19pXSk7XG4gIGFscGhhW19sb2NhbGVdID0gYWxwaGEuYXI7XG4gIGFscGhhbnVtZXJpY1tfbG9jYWxlXSA9IGFscGhhbnVtZXJpYy5hcjtcbiAgZGVjaW1hbFtfbG9jYWxlXSA9IGRlY2ltYWwuYXI7XG59XG52YXIgZmFyc2lMb2NhbGVzID0gZXhwb3J0cy5mYXJzaUxvY2FsZXMgPSBbJ0lSJywgJ0FGJ107XG5mb3IgKHZhciBfbG9jYWxlMiwgX2kyID0gMDsgX2kyIDwgZmFyc2lMb2NhbGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgX2xvY2FsZTIgPSBcImZhLVwiLmNvbmNhdChmYXJzaUxvY2FsZXNbX2kyXSk7XG4gIGFscGhhbnVtZXJpY1tfbG9jYWxlMl0gPSBhbHBoYW51bWVyaWMuZmE7XG4gIGRlY2ltYWxbX2xvY2FsZTJdID0gZGVjaW1hbC5hcjtcbn1cbnZhciBiZW5nYWxpTG9jYWxlcyA9IGV4cG9ydHMuYmVuZ2FsaUxvY2FsZXMgPSBbJ0JEJywgJ0lOJ107XG5mb3IgKHZhciBfbG9jYWxlMywgX2kzID0gMDsgX2kzIDwgYmVuZ2FsaUxvY2FsZXMubGVuZ3RoOyBfaTMrKykge1xuICBfbG9jYWxlMyA9IFwiYm4tXCIuY29uY2F0KGJlbmdhbGlMb2NhbGVzW19pM10pO1xuICBhbHBoYVtfbG9jYWxlM10gPSBhbHBoYS5ibjtcbiAgYWxwaGFudW1lcmljW19sb2NhbGUzXSA9IGFscGhhbnVtZXJpYy5ibjtcbiAgZGVjaW1hbFtfbG9jYWxlM10gPSBkZWNpbWFsWydlbi1VUyddO1xufVxuXG4vLyBTb3VyY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlY2ltYWxfbWFya1xudmFyIGRvdERlY2ltYWwgPSBleHBvcnRzLmRvdERlY2ltYWwgPSBbJ2FyLUVHJywgJ2FyLUxCJywgJ2FyLUxZJ107XG52YXIgY29tbWFEZWNpbWFsID0gZXhwb3J0cy5jb21tYURlY2ltYWwgPSBbJ2JnLUJHJywgJ2NzLUNaJywgJ2RhLURLJywgJ2RlLURFJywgJ2VsLUdSJywgJ2VuLVpNJywgJ2VvJywgJ2VzLUVTJywgJ2ZyLUNBJywgJ2ZyLUZSJywgJ2lkLUlEJywgJ2l0LUlUJywgJ2t1LUlRJywgJ2hpLUlOJywgJ2h1LUhVJywgJ25iLU5PJywgJ25uLU5PJywgJ25sLU5MJywgJ3BsLVBMJywgJ3B0LVBUJywgJ3J1LVJVJywgJ2trLUtaJywgJ3NpLUxLJywgJ3NsLVNJJywgJ3NyLVJTQGxhdGluJywgJ3NyLVJTJywgJ3N2LVNFJywgJ3RyLVRSJywgJ3VrLVVBJywgJ3ZpLVZOJ107XG5mb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBkb3REZWNpbWFsLmxlbmd0aDsgX2k0KyspIHtcbiAgZGVjaW1hbFtkb3REZWNpbWFsW19pNF1dID0gZGVjaW1hbFsnZW4tVVMnXTtcbn1cbmZvciAodmFyIF9pNSA9IDA7IF9pNSA8IGNvbW1hRGVjaW1hbC5sZW5ndGg7IF9pNSsrKSB7XG4gIGRlY2ltYWxbY29tbWFEZWNpbWFsW19pNV1dID0gJywnO1xufVxuYWxwaGFbJ2ZyLUNBJ10gPSBhbHBoYVsnZnItRlInXTtcbmFscGhhbnVtZXJpY1snZnItQ0EnXSA9IGFscGhhbnVtZXJpY1snZnItRlInXTtcbmFscGhhWydwdC1CUiddID0gYWxwaGFbJ3B0LVBUJ107XG5hbHBoYW51bWVyaWNbJ3B0LUJSJ10gPSBhbHBoYW51bWVyaWNbJ3B0LVBUJ107XG5kZWNpbWFsWydwdC1CUiddID0gZGVjaW1hbFsncHQtUFQnXTtcblxuLy8gc2VlICM4NjJcbmFscGhhWydwbC1QbCddID0gYWxwaGFbJ3BsLVBMJ107XG5hbHBoYW51bWVyaWNbJ3BsLVBsJ10gPSBhbHBoYW51bWVyaWNbJ3BsLVBMJ107XG5kZWNpbWFsWydwbC1QbCddID0gZGVjaW1hbFsncGwtUEwnXTtcblxuLy8gc2VlICMxNDU1XG5hbHBoYVsnZmEtQUYnXSA9IGFscGhhLmZhOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYmxhY2tsaXN0O1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBibGFja2xpc3Qoc3RyLCBjaGFycykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChcIltcIi5jb25jYXQoY2hhcnMsIFwiXStcIiksICdnJyksICcnKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvbnRhaW5zO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfdG9TdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvdG9TdHJpbmdcIikpO1xudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9tZXJnZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIGRlZmF1bENvbnRhaW5zT3B0aW9ucyA9IHtcbiAgaWdub3JlQ2FzZTogZmFsc2UsXG4gIG1pbk9jY3VycmVuY2VzOiAxXG59O1xuZnVuY3Rpb24gY29udGFpbnMoc3RyLCBlbGVtLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bENvbnRhaW5zT3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmlnbm9yZUNhc2UpIHtcbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkuc3BsaXQoKDAsIF90b1N0cmluZy5kZWZhdWx0KShlbGVtKS50b0xvd2VyQ2FzZSgpKS5sZW5ndGggPiBvcHRpb25zLm1pbk9jY3VycmVuY2VzO1xuICB9XG4gIHJldHVybiBzdHIuc3BsaXQoKDAsIF90b1N0cmluZy5kZWZhdWx0KShlbGVtKSkubGVuZ3RoID4gb3B0aW9ucy5taW5PY2N1cnJlbmNlcztcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGVxdWFscztcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gZXF1YWxzKHN0ciwgY29tcGFyaXNvbikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gc3RyID09PSBjb21wYXJpc29uO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXNjYXBlO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvJy9nLCAnJiN4Mjc7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKS5yZXBsYWNlKC9cXC8vZywgJyYjeDJGOycpLnJlcGxhY2UoL1xcXFwvZywgJyYjeDVDOycpLnJlcGxhY2UoL2AvZywgJyYjOTY7Jyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0FiYVJvdXRpbmc7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbi8vIGh0dHA6Ly93d3cuYnJhaW5qYXIuY29tL2pzL3ZhbGlkYXRpb24vXG4vLyBodHRwczovL3d3dy5hYmEuY29tL25ld3MtcmVzZWFyY2gvcmVzZWFyY2gtYW5hbHlzaXMvcm91dGluZy1udW1iZXItcG9saWN5LXByb2NlZHVyZXNcbi8vIHNlcmllcyByZXNlcnZlZCBmb3IgZnV0dXJlIHVzZSBhcmUgZXhjbHVkZWRcbnZhciBpc1JvdXRpbmdSZWcgPSAvXig/ISgxWzMtOV0pfCgyMCl8KDNbMy05XSl8KDRbMC05XSl8KDVbMC05XSl8KDYwKXwoN1szLTldKXwoOFsxLTldKXwoOVswLTJdKXwoOVszLTldKSlbMC05XXs5fSQvO1xuZnVuY3Rpb24gaXNBYmFSb3V0aW5nKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBpZiAoIWlzUm91dGluZ1JlZy50ZXN0KHN0cikpIHJldHVybiBmYWxzZTtcbiAgdmFyIGNoZWNrU3VtVmFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaSAlIDMgPT09IDApIGNoZWNrU3VtVmFsICs9IHN0cltpXSAqIDM7ZWxzZSBpZiAoaSAlIDMgPT09IDEpIGNoZWNrU3VtVmFsICs9IHN0cltpXSAqIDc7ZWxzZSBjaGVja1N1bVZhbCArPSBzdHJbaV0gKiAxO1xuICB9XG4gIHJldHVybiBjaGVja1N1bVZhbCAlIDEwID09PSAwO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNBZnRlcjtcbnZhciBfdG9EYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b0RhdGVcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIGlzQWZ0ZXIoZGF0ZSwgb3B0aW9ucykge1xuICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHk6XG4gIC8vIGlzQWZ0ZXIoc3RyIFssIGRhdGVdKSwgaS5lLiBgb3B0aW9uc2AgY291bGQgYmUgdXNlZCBhcyBhcmd1bWVudCBmb3IgdGhlIGxlZ2FjeSBgZGF0ZWBcbiAgdmFyIGNvbXBhcmlzb25EYXRlID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb21wYXJpc29uRGF0ZSkgfHwgb3B0aW9ucyB8fCBEYXRlKCkudG9TdHJpbmcoKTtcbiAgdmFyIGNvbXBhcmlzb24gPSAoMCwgX3RvRGF0ZS5kZWZhdWx0KShjb21wYXJpc29uRGF0ZSk7XG4gIHZhciBvcmlnaW5hbCA9ICgwLCBfdG9EYXRlLmRlZmF1bHQpKGRhdGUpO1xuICByZXR1cm4gISEob3JpZ2luYWwgJiYgY29tcGFyaXNvbiAmJiBvcmlnaW5hbCA+IGNvbXBhcmlzb24pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNBbHBoYTtcbmV4cG9ydHMubG9jYWxlcyA9IHZvaWQgMDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2FscGhhID0gcmVxdWlyZShcIi4vYWxwaGFcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gaXNBbHBoYShfc3RyKSB7XG4gIHZhciBsb2NhbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdlbi1VUyc7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoX3N0cik7XG4gIHZhciBzdHIgPSBfc3RyO1xuICB2YXIgaWdub3JlID0gb3B0aW9ucy5pZ25vcmU7XG4gIGlmIChpZ25vcmUpIHtcbiAgICBpZiAoaWdub3JlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShpZ25vcmUsICcnKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpZ25vcmUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiW1wiLmNvbmNhdChpZ25vcmUucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXFxcc10vZywgJ1xcXFwkJicpLCBcIl1cIiksICdnJyksICcnKTsgLy8gZXNjYXBlIHJlZ2V4IGZvciBpZ25vcmVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZ25vcmUgc2hvdWxkIGJlIGluc3RhbmNlIG9mIGEgU3RyaW5nIG9yIFJlZ0V4cCcpO1xuICAgIH1cbiAgfVxuICBpZiAobG9jYWxlIGluIF9hbHBoYS5hbHBoYSkge1xuICAgIHJldHVybiBfYWxwaGEuYWxwaGFbbG9jYWxlXS50ZXN0KHN0cik7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59XG52YXIgbG9jYWxlcyA9IGV4cG9ydHMubG9jYWxlcyA9IE9iamVjdC5rZXlzKF9hbHBoYS5hbHBoYSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0FscGhhbnVtZXJpYztcbmV4cG9ydHMubG9jYWxlcyA9IHZvaWQgMDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2FscGhhID0gcmVxdWlyZShcIi4vYWxwaGFcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gaXNBbHBoYW51bWVyaWMoX3N0cikge1xuICB2YXIgbG9jYWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZW4tVVMnO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKF9zdHIpO1xuICB2YXIgc3RyID0gX3N0cjtcbiAgdmFyIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xuICBpZiAoaWdub3JlKSB7XG4gICAgaWYgKGlnbm9yZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoaWdub3JlLCAnJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaWdub3JlID09PSAnc3RyaW5nJykge1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChcIltcIi5jb25jYXQoaWdub3JlLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxcXHNdL2csICdcXFxcJCYnKSwgXCJdXCIpLCAnZycpLCAnJyk7IC8vIGVzY2FwZSByZWdleCBmb3IgaWdub3JlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaWdub3JlIHNob3VsZCBiZSBpbnN0YW5jZSBvZiBhIFN0cmluZyBvciBSZWdFeHAnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGxvY2FsZSBpbiBfYWxwaGEuYWxwaGFudW1lcmljKSB7XG4gICAgcmV0dXJuIF9hbHBoYS5hbHBoYW51bWVyaWNbbG9jYWxlXS50ZXN0KHN0cik7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59XG52YXIgbG9jYWxlcyA9IGV4cG9ydHMubG9jYWxlcyA9IE9iamVjdC5rZXlzKF9hbHBoYS5hbHBoYW51bWVyaWMpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNBc2NpaTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xudmFyIGFzY2lpID0gL15bXFx4MDAtXFx4N0ZdKyQvO1xuLyogZXNsaW50LWVuYWJsZSBuby1jb250cm9sLXJlZ2V4ICovXG5cbmZ1bmN0aW9uIGlzQXNjaWkoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBhc2NpaS50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0JJQztcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2lzSVNPMzE2NjFBbHBoYSA9IHJlcXVpcmUoXCIuL2lzSVNPMzE2NjFBbHBoYTJcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzkzNjJcbnZhciBpc0JJQ1JlZyA9IC9eW0EtWmEtel17Nn1bQS1aYS16MC05XXsyfShbQS1aYS16MC05XXszfSk/JC87XG5mdW5jdGlvbiBpc0JJQyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICAvLyB0b1VwcGVyQ2FzZSgpIHNob3VsZCBiZSByZW1vdmVkIHdoZW4gYSBuZXcgbWFqb3IgdmVyc2lvbiBnb2VzIG91dCB0aGF0IGNoYW5nZXNcbiAgLy8gdGhlIHJlZ2V4IHRvIFtBLVpdIChwZXIgdGhlIHNwZWMpLlxuICB2YXIgY291bnRyeUNvZGUgPSBzdHIuc2xpY2UoNCwgNikudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFfaXNJU08zMTY2MUFscGhhLkNvdW50cnlDb2Rlcy5oYXMoY291bnRyeUNvZGUpICYmIGNvdW50cnlDb2RlICE9PSAnWEsnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0JJQ1JlZy50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Jhc2UzMjtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgYmFzZTMyID0gL15bQS1aMi03XSs9KiQvO1xudmFyIGNyb2NrZm9yZEJhc2UzMiA9IC9eW0EtSEpLTU5QLVRWLVowLTldKyQvO1xudmFyIGRlZmF1bHRCYXNlMzJPcHRpb25zID0ge1xuICBjcm9ja2ZvcmQ6IGZhbHNlXG59O1xuZnVuY3Rpb24gaXNCYXNlMzIoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRCYXNlMzJPcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMuY3JvY2tmb3JkKSB7XG4gICAgcmV0dXJuIGNyb2NrZm9yZEJhc2UzMi50ZXN0KHN0cik7XG4gIH1cbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIGlmIChsZW4gJSA4ID09PSAwICYmIGJhc2UzMi50ZXN0KHN0cikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Jhc2U1ODtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLy8gQWNjZXB0ZWQgY2hhcnMgLSAxMjM0NTY3ODlBQkNERUZHSCBKS0xNTiBQUVJTVFVWV1hZWmFiY2RlZmdoaWprIG1ub3BxcnN0dXZ3eHl6XG52YXIgYmFzZTU4UmVnID0gL15bQS1ISi1OUC1aYS1rbS16MS05XSokLztcbmZ1bmN0aW9uIGlzQmFzZTU4KHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBpZiAoYmFzZTU4UmVnLnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQmFzZTY0O1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBub3RCYXNlNjQgPSAvW15BLVowLTkrXFwvPV0vaTtcbnZhciB1cmxTYWZlQmFzZTY0ID0gL15bQS1aMC05X1xcLV0qJC9pO1xudmFyIGRlZmF1bHRCYXNlNjRPcHRpb25zID0ge1xuICB1cmxTYWZlOiBmYWxzZVxufTtcbmZ1bmN0aW9uIGlzQmFzZTY0KHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0QmFzZTY0T3B0aW9ucyk7XG4gIHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuICBpZiAob3B0aW9ucy51cmxTYWZlKSB7XG4gICAgcmV0dXJuIHVybFNhZmVCYXNlNjQudGVzdChzdHIpO1xuICB9XG4gIGlmIChsZW4gJSA0ICE9PSAwIHx8IG5vdEJhc2U2NC50ZXN0KHN0cikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGZpcnN0UGFkZGluZ0NoYXIgPSBzdHIuaW5kZXhPZignPScpO1xuICByZXR1cm4gZmlyc3RQYWRkaW5nQ2hhciA9PT0gLTEgfHwgZmlyc3RQYWRkaW5nQ2hhciA9PT0gbGVuIC0gMSB8fCBmaXJzdFBhZGRpbmdDaGFyID09PSBsZW4gLSAyICYmIHN0cltsZW4gLSAxXSA9PT0gJz0nO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCZWZvcmU7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xudmFyIF90b0RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RvRGF0ZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gaXNCZWZvcmUoc3RyKSB7XG4gIHZhciBkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBTdHJpbmcobmV3IERhdGUoKSk7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBjb21wYXJpc29uID0gKDAsIF90b0RhdGUuZGVmYXVsdCkoZGF0ZSk7XG4gIHZhciBvcmlnaW5hbCA9ICgwLCBfdG9EYXRlLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiAhIShvcmlnaW5hbCAmJiBjb21wYXJpc29uICYmIG9yaWdpbmFsIDwgY29tcGFyaXNvbik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Jvb2xlYW47XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgbG9vc2U6IGZhbHNlXG59O1xudmFyIHN0cmljdEJvb2xlYW5zID0gWyd0cnVlJywgJ2ZhbHNlJywgJzEnLCAnMCddO1xudmFyIGxvb3NlQm9vbGVhbnMgPSBbXS5jb25jYXQoc3RyaWN0Qm9vbGVhbnMsIFsneWVzJywgJ25vJ10pO1xuZnVuY3Rpb24gaXNCb29sZWFuKHN0cikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdE9wdGlvbnM7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIGlmIChvcHRpb25zLmxvb3NlKSB7XG4gICAgcmV0dXJuIGxvb3NlQm9vbGVhbnMuaW5jbHVkZXMoc3RyLnRvTG93ZXJDYXNlKCkpO1xuICB9XG4gIHJldHVybiBzdHJpY3RCb29sZWFucy5pbmNsdWRlcyhzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCdGNBZGRyZXNzO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgYmVjaDMyID0gL14oYmMxKVthLXowLTldezI1LDM5fSQvO1xudmFyIGJhc2U1OCA9IC9eKDF8MylbQS1ISi1OUC1aYS1rbS16MS05XXsyNSwzOX0kLztcbmZ1bmN0aW9uIGlzQnRjQWRkcmVzcyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGJlY2gzMi50ZXN0KHN0cikgfHwgYmFzZTU4LnRlc3Qoc3RyKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQnl0ZUxlbmd0aDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG5mdW5jdGlvbiBpc0J5dGVMZW5ndGgoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBtaW47XG4gIHZhciBtYXg7XG4gIGlmIChfdHlwZW9mKG9wdGlvbnMpID09PSAnb2JqZWN0Jykge1xuICAgIG1pbiA9IG9wdGlvbnMubWluIHx8IDA7XG4gICAgbWF4ID0gb3B0aW9ucy5tYXg7XG4gIH0gZWxzZSB7XG4gICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHk6IGlzQnl0ZUxlbmd0aChzdHIsIG1pbiBbLCBtYXhdKVxuICAgIG1pbiA9IGFyZ3VtZW50c1sxXTtcbiAgICBtYXggPSBhcmd1bWVudHNbMl07XG4gIH1cbiAgdmFyIGxlbiA9IGVuY29kZVVSSShzdHIpLnNwbGl0KC8lLi58Li8pLmxlbmd0aCAtIDE7XG4gIHJldHVybiBsZW4gPj0gbWluICYmICh0eXBlb2YgbWF4ID09PSAndW5kZWZpbmVkJyB8fCBsZW4gPD0gbWF4KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQ3JlZGl0Q2FyZDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2lzTHVobk51bWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNMdWhuTnVtYmVyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgY2FyZHMgPSB7XG4gIGFtZXg6IC9eM1s0N11bMC05XXsxM30kLyxcbiAgZGluZXJzY2x1YjogL14zKD86MFswLTVdfFs2OF1bMC05XSlbMC05XXsxMX0kLyxcbiAgZGlzY292ZXI6IC9eNig/OjAxMXw1WzAtOV1bMC05XSlbMC05XXsxMiwxNX0kLyxcbiAgamNiOiAvXig/OjIxMzF8MTgwMHwzNVxcZHszfSlcXGR7MTF9JC8sXG4gIG1hc3RlcmNhcmQ6IC9eNVsxLTVdWzAtOV17Mn18KDIyMlsxLTldfDIyWzMtOV1bMC05XXwyWzMtNl1bMC05XXsyfXwyN1swMV1bMC05XXwyNzIwKVswLTldezEyfSQvLFxuICAvLyAvXlsyNV1bMS03XVswLTldezE0fSQvO1xuICB1bmlvbnBheTogL14oNlsyN11bMC05XXsxNH18Xig4MVswLTldezE0LDE3fSkpJC8sXG4gIHZpc2E6IC9eKD86NFswLTldezEyfSkoPzpbMC05XXszLDZ9KT8kL1xufTtcbnZhciBhbGxDYXJkcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRtcENhcmRzQXJyYXkgPSBbXTtcbiAgZm9yICh2YXIgY2FyZFByb3ZpZGVyIGluIGNhcmRzKSB7XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICBpZiAoY2FyZHMuaGFzT3duUHJvcGVydHkoY2FyZFByb3ZpZGVyKSkge1xuICAgICAgdG1wQ2FyZHNBcnJheS5wdXNoKGNhcmRzW2NhcmRQcm92aWRlcl0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG1wQ2FyZHNBcnJheTtcbn0oKTtcbmZ1bmN0aW9uIGlzQ3JlZGl0Q2FyZChjYXJkKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoY2FyZCk7XG4gIHZhciBwcm92aWRlciA9IG9wdGlvbnMucHJvdmlkZXI7XG4gIHZhciBzYW5pdGl6ZWQgPSBjYXJkLnJlcGxhY2UoL1stIF0rL2csICcnKTtcbiAgaWYgKHByb3ZpZGVyICYmIHByb3ZpZGVyLnRvTG93ZXJDYXNlKCkgaW4gY2FyZHMpIHtcbiAgICAvLyBzcGVjaWZpYyBwcm92aWRlciBpbiB0aGUgbGlzdFxuICAgIGlmICghY2FyZHNbcHJvdmlkZXIudG9Mb3dlckNhc2UoKV0udGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb3ZpZGVyICYmICEocHJvdmlkZXIudG9Mb3dlckNhc2UoKSBpbiBjYXJkcykpIHtcbiAgICAvKiBzcGVjaWZpYyBwcm92aWRlciBub3QgaW4gdGhlIGxpc3QgKi9cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQocHJvdmlkZXIsIFwiIGlzIG5vdCBhIHZhbGlkIGNyZWRpdCBjYXJkIHByb3ZpZGVyLlwiKSk7XG4gIH0gZWxzZSBpZiAoIWFsbENhcmRzLnNvbWUoZnVuY3Rpb24gKGNhcmRQcm92aWRlcikge1xuICAgIHJldHVybiBjYXJkUHJvdmlkZXIudGVzdChzYW5pdGl6ZWQpO1xuICB9KSkge1xuICAgIC8vIG5vIHNwZWNpZmljIHByb3ZpZGVyXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoMCwgX2lzTHVobk51bWJlci5kZWZhdWx0KShjYXJkKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQ3VycmVuY3k7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gY3VycmVuY3lSZWdleChvcHRpb25zKSB7XG4gIHZhciBkZWNpbWFsX2RpZ2l0cyA9IFwiXFxcXGR7XCIuY29uY2F0KG9wdGlvbnMuZGlnaXRzX2FmdGVyX2RlY2ltYWxbMF0sIFwifVwiKTtcbiAgb3B0aW9ucy5kaWdpdHNfYWZ0ZXJfZGVjaW1hbC5mb3JFYWNoKGZ1bmN0aW9uIChkaWdpdCwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggIT09IDApIGRlY2ltYWxfZGlnaXRzID0gXCJcIi5jb25jYXQoZGVjaW1hbF9kaWdpdHMsIFwifFxcXFxke1wiKS5jb25jYXQoZGlnaXQsIFwifVwiKTtcbiAgfSk7XG4gIHZhciBzeW1ib2wgPSBcIihcIi5jb25jYXQob3B0aW9ucy5zeW1ib2wucmVwbGFjZSgvXFxXLywgZnVuY3Rpb24gKG0pIHtcbiAgICAgIHJldHVybiBcIlxcXFxcIi5jb25jYXQobSk7XG4gICAgfSksIFwiKVwiKS5jb25jYXQob3B0aW9ucy5yZXF1aXJlX3N5bWJvbCA/ICcnIDogJz8nKSxcbiAgICBuZWdhdGl2ZSA9ICctPycsXG4gICAgd2hvbGVfZG9sbGFyX2Ftb3VudF93aXRob3V0X3NlcCA9ICdbMS05XVxcXFxkKicsXG4gICAgd2hvbGVfZG9sbGFyX2Ftb3VudF93aXRoX3NlcCA9IFwiWzEtOV1cXFxcZHswLDJ9KFxcXFxcIi5jb25jYXQob3B0aW9ucy50aG91c2FuZHNfc2VwYXJhdG9yLCBcIlxcXFxkezN9KSpcIiksXG4gICAgdmFsaWRfd2hvbGVfZG9sbGFyX2Ftb3VudHMgPSBbJzAnLCB3aG9sZV9kb2xsYXJfYW1vdW50X3dpdGhvdXRfc2VwLCB3aG9sZV9kb2xsYXJfYW1vdW50X3dpdGhfc2VwXSxcbiAgICB3aG9sZV9kb2xsYXJfYW1vdW50ID0gXCIoXCIuY29uY2F0KHZhbGlkX3dob2xlX2RvbGxhcl9hbW91bnRzLmpvaW4oJ3wnKSwgXCIpP1wiKSxcbiAgICBkZWNpbWFsX2Ftb3VudCA9IFwiKFxcXFxcIi5jb25jYXQob3B0aW9ucy5kZWNpbWFsX3NlcGFyYXRvciwgXCIoXCIpLmNvbmNhdChkZWNpbWFsX2RpZ2l0cywgXCIpKVwiKS5jb25jYXQob3B0aW9ucy5yZXF1aXJlX2RlY2ltYWwgPyAnJyA6ICc/Jyk7XG4gIHZhciBwYXR0ZXJuID0gd2hvbGVfZG9sbGFyX2Ftb3VudCArIChvcHRpb25zLmFsbG93X2RlY2ltYWwgfHwgb3B0aW9ucy5yZXF1aXJlX2RlY2ltYWwgPyBkZWNpbWFsX2Ftb3VudCA6ICcnKTtcblxuICAvLyBkZWZhdWx0IGlzIG5lZ2F0aXZlIHNpZ24gYmVmb3JlIHN5bWJvbCwgYnV0IHRoZXJlIGFyZSB0d28gb3RoZXIgb3B0aW9ucyAoYmVzaWRlcyBwYXJlbnMpXG4gIGlmIChvcHRpb25zLmFsbG93X25lZ2F0aXZlcyAmJiAhb3B0aW9ucy5wYXJlbnNfZm9yX25lZ2F0aXZlcykge1xuICAgIGlmIChvcHRpb25zLm5lZ2F0aXZlX3NpZ25fYWZ0ZXJfZGlnaXRzKSB7XG4gICAgICBwYXR0ZXJuICs9IG5lZ2F0aXZlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5uZWdhdGl2ZV9zaWduX2JlZm9yZV9kaWdpdHMpIHtcbiAgICAgIHBhdHRlcm4gPSBuZWdhdGl2ZSArIHBhdHRlcm47XG4gICAgfVxuICB9XG5cbiAgLy8gU291dGggQWZyaWNhbiBSYW5kLCBmb3IgZXhhbXBsZSwgdXNlcyBSIDEyMyAoc3BhY2UpIGFuZCBSLTEyMyAobm8gc3BhY2UpXG4gIGlmIChvcHRpb25zLmFsbG93X25lZ2F0aXZlX3NpZ25fcGxhY2Vob2xkZXIpIHtcbiAgICBwYXR0ZXJuID0gXCIoICg/IVxcXFwtKSk/XCIuY29uY2F0KHBhdHRlcm4pO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuYWxsb3dfc3BhY2VfYWZ0ZXJfc3ltYm9sKSB7XG4gICAgcGF0dGVybiA9IFwiID9cIi5jb25jYXQocGF0dGVybik7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5hbGxvd19zcGFjZV9hZnRlcl9kaWdpdHMpIHtcbiAgICBwYXR0ZXJuICs9ICcoICg/ISQpKT8nO1xuICB9XG4gIGlmIChvcHRpb25zLnN5bWJvbF9hZnRlcl9kaWdpdHMpIHtcbiAgICBwYXR0ZXJuICs9IHN5bWJvbDtcbiAgfSBlbHNlIHtcbiAgICBwYXR0ZXJuID0gc3ltYm9sICsgcGF0dGVybjtcbiAgfVxuICBpZiAob3B0aW9ucy5hbGxvd19uZWdhdGl2ZXMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnNfZm9yX25lZ2F0aXZlcykge1xuICAgICAgcGF0dGVybiA9IFwiKFxcXFwoXCIuY29uY2F0KHBhdHRlcm4sIFwiXFxcXCl8XCIpLmNvbmNhdChwYXR0ZXJuLCBcIilcIik7XG4gICAgfSBlbHNlIGlmICghKG9wdGlvbnMubmVnYXRpdmVfc2lnbl9iZWZvcmVfZGlnaXRzIHx8IG9wdGlvbnMubmVnYXRpdmVfc2lnbl9hZnRlcl9kaWdpdHMpKSB7XG4gICAgICBwYXR0ZXJuID0gbmVnYXRpdmUgKyBwYXR0ZXJuO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVuc3VyZSB0aGVyZSdzIGEgZG9sbGFyIGFuZC9vciBkZWNpbWFsIGFtb3VudCwgYW5kIHRoYXRcbiAgLy8gaXQgZG9lc24ndCBzdGFydCB3aXRoIGEgc3BhY2Ugb3IgYSBuZWdhdGl2ZSBzaWduIGZvbGxvd2VkIGJ5IGEgc3BhY2VcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD8hLT8gKSg/PS4qXFxcXGQpXCIuY29uY2F0KHBhdHRlcm4sIFwiJFwiKSk7XG59XG52YXIgZGVmYXVsdF9jdXJyZW5jeV9vcHRpb25zID0ge1xuICBzeW1ib2w6ICckJyxcbiAgcmVxdWlyZV9zeW1ib2w6IGZhbHNlLFxuICBhbGxvd19zcGFjZV9hZnRlcl9zeW1ib2w6IGZhbHNlLFxuICBzeW1ib2xfYWZ0ZXJfZGlnaXRzOiBmYWxzZSxcbiAgYWxsb3dfbmVnYXRpdmVzOiB0cnVlLFxuICBwYXJlbnNfZm9yX25lZ2F0aXZlczogZmFsc2UsXG4gIG5lZ2F0aXZlX3NpZ25fYmVmb3JlX2RpZ2l0czogZmFsc2UsXG4gIG5lZ2F0aXZlX3NpZ25fYWZ0ZXJfZGlnaXRzOiBmYWxzZSxcbiAgYWxsb3dfbmVnYXRpdmVfc2lnbl9wbGFjZWhvbGRlcjogZmFsc2UsXG4gIHRob3VzYW5kc19zZXBhcmF0b3I6ICcsJyxcbiAgZGVjaW1hbF9zZXBhcmF0b3I6ICcuJyxcbiAgYWxsb3dfZGVjaW1hbDogdHJ1ZSxcbiAgcmVxdWlyZV9kZWNpbWFsOiBmYWxzZSxcbiAgZGlnaXRzX2FmdGVyX2RlY2ltYWw6IFsyXSxcbiAgYWxsb3dfc3BhY2VfYWZ0ZXJfZGlnaXRzOiBmYWxzZVxufTtcbmZ1bmN0aW9uIGlzQ3VycmVuY3koc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRfY3VycmVuY3lfb3B0aW9ucyk7XG4gIHJldHVybiBjdXJyZW5jeVJlZ2V4KG9wdGlvbnMpLnRlc3Qoc3RyKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRGF0YVVSSTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIHZhbGlkTWVkaWFUeXBlID0gL15bYS16XStcXC9bYS16MC05XFwtXFwrXFwuX10rJC9pO1xudmFyIHZhbGlkQXR0cmlidXRlID0gL15bYS16XFwtXSs9W2EtejAtOVxcLV0rJC9pO1xudmFyIHZhbGlkRGF0YSA9IC9eW2EtejAtOSFcXCQmJ1xcKFxcKVxcKlxcKyw7PVxcLVxcLl9+OkBcXC9cXD8lXFxzXSokL2k7XG5mdW5jdGlvbiBpc0RhdGFVUkkoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBkYXRhID0gc3RyLnNwbGl0KCcsJyk7XG4gIGlmIChkYXRhLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGF0dHJpYnV0ZXMgPSBkYXRhLnNoaWZ0KCkudHJpbSgpLnNwbGl0KCc7Jyk7XG4gIHZhciBzY2hlbWVBbmRNZWRpYVR5cGUgPSBhdHRyaWJ1dGVzLnNoaWZ0KCk7XG4gIGlmIChzY2hlbWVBbmRNZWRpYVR5cGUuc2xpY2UoMCwgNSkgIT09ICdkYXRhOicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIG1lZGlhVHlwZSA9IHNjaGVtZUFuZE1lZGlhVHlwZS5zbGljZSg1KTtcbiAgaWYgKG1lZGlhVHlwZSAhPT0gJycgJiYgIXZhbGlkTWVkaWFUeXBlLnRlc3QobWVkaWFUeXBlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIShpID09PSBhdHRyaWJ1dGVzLmxlbmd0aCAtIDEgJiYgYXR0cmlidXRlc1tpXS50b0xvd2VyQ2FzZSgpID09PSAnYmFzZTY0JykgJiYgIXZhbGlkQXR0cmlidXRlLnRlc3QoYXR0cmlidXRlc1tpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGRhdGEubGVuZ3RoOyBfaSsrKSB7XG4gICAgaWYgKCF2YWxpZERhdGEudGVzdChkYXRhW19pXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0RhdGU7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAobykgdGhyb3cgbjsgfSB9IHJldHVybiBhOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsgcmV0dXJuIGFycjI7IH1cbnZhciBkZWZhdWx0X2RhdGVfb3B0aW9ucyA9IHtcbiAgZm9ybWF0OiAnWVlZWS9NTS9ERCcsXG4gIGRlbGltaXRlcnM6IFsnLycsICctJ10sXG4gIHN0cmljdE1vZGU6IGZhbHNlXG59O1xuZnVuY3Rpb24gaXNWYWxpZEZvcm1hdChmb3JtYXQpIHtcbiAgcmV0dXJuIC8oXih5ezR9fHl7Mn0pWy5cXC8tXShtezEsMn0pWy5cXC8tXShkezEsMn0pJCl8KF4obXsxLDJ9KVsuXFwvLV0oZHsxLDJ9KVsuXFwvLV0oKHl7NH18eXsyfSkkKSl8KF4oZHsxLDJ9KVsuXFwvLV0obXsxLDJ9KVsuXFwvLV0oKHl7NH18eXsyfSkkKSkvZ2kudGVzdChmb3JtYXQpO1xufVxuZnVuY3Rpb24gemlwKGRhdGUsIGZvcm1hdCkge1xuICB2YXIgemlwcGVkQXJyID0gW10sXG4gICAgbGVuID0gTWF0aC5taW4oZGF0ZS5sZW5ndGgsIGZvcm1hdC5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgemlwcGVkQXJyLnB1c2goW2RhdGVbaV0sIGZvcm1hdFtpXV0pO1xuICB9XG4gIHJldHVybiB6aXBwZWRBcnI7XG59XG5mdW5jdGlvbiBpc0RhdGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIC8vIEFsbG93IGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIG9sZCBmb3JtYXQgaXNEYXRlKGlucHV0IFssIGZvcm1hdF0pXG4gICAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkoe1xuICAgICAgZm9ybWF0OiBvcHRpb25zXG4gICAgfSwgZGVmYXVsdF9kYXRlX29wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMsIGRlZmF1bHRfZGF0ZV9vcHRpb25zKTtcbiAgfVxuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyAmJiBpc1ZhbGlkRm9ybWF0KG9wdGlvbnMuZm9ybWF0KSkge1xuICAgIHZhciBmb3JtYXREZWxpbWl0ZXIgPSBvcHRpb25zLmRlbGltaXRlcnMuZmluZChmdW5jdGlvbiAoZGVsaW1pdGVyKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5mb3JtYXQuaW5kZXhPZihkZWxpbWl0ZXIpICE9PSAtMTtcbiAgICB9KTtcbiAgICB2YXIgZGF0ZURlbGltaXRlciA9IG9wdGlvbnMuc3RyaWN0TW9kZSA/IGZvcm1hdERlbGltaXRlciA6IG9wdGlvbnMuZGVsaW1pdGVycy5maW5kKGZ1bmN0aW9uIChkZWxpbWl0ZXIpIHtcbiAgICAgIHJldHVybiBpbnB1dC5pbmRleE9mKGRlbGltaXRlcikgIT09IC0xO1xuICAgIH0pO1xuICAgIHZhciBkYXRlQW5kRm9ybWF0ID0gemlwKGlucHV0LnNwbGl0KGRhdGVEZWxpbWl0ZXIpLCBvcHRpb25zLmZvcm1hdC50b0xvd2VyQ2FzZSgpLnNwbGl0KGZvcm1hdERlbGltaXRlcikpO1xuICAgIHZhciBkYXRlT2JqID0ge307XG4gICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGVBbmRGb3JtYXQpLFxuICAgICAgX3N0ZXA7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfc3RlcCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwLnZhbHVlLCAyKSxcbiAgICAgICAgICBkYXRlV29yZCA9IF9zdGVwJHZhbHVlWzBdLFxuICAgICAgICAgIGZvcm1hdFdvcmQgPSBfc3RlcCR2YWx1ZVsxXTtcbiAgICAgICAgaWYgKGRhdGVXb3JkLmxlbmd0aCAhPT0gZm9ybWF0V29yZC5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGF0ZU9ialtmb3JtYXRXb3JkLmNoYXJBdCgwKV0gPSBkYXRlV29yZDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuICAgIHZhciBmdWxsWWVhciA9IGRhdGVPYmoueTtcblxuICAgIC8vIENoZWNrIGlmIHRoZSB5ZWFyIHN0YXJ0cyB3aXRoIGEgaHlwaGVuXG4gICAgaWYgKGZ1bGxZZWFyLnN0YXJ0c1dpdGgoJy0nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyBIeXBoZW4gYmVmb3JlIHllYXIgaXMgbm90IGFsbG93ZWRcbiAgICB9XG4gICAgaWYgKGRhdGVPYmoueS5sZW5ndGggPT09IDIpIHtcbiAgICAgIHZhciBwYXJzZWRZZWFyID0gcGFyc2VJbnQoZGF0ZU9iai55LCAxMCk7XG4gICAgICBpZiAoaXNOYU4ocGFyc2VkWWVhcikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRZZWFyTGFzdFR3b0RpZ2l0cyA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMDtcbiAgICAgIGlmIChwYXJzZWRZZWFyIDwgY3VycmVudFllYXJMYXN0VHdvRGlnaXRzKSB7XG4gICAgICAgIGZ1bGxZZWFyID0gXCIyMFwiLmNvbmNhdChkYXRlT2JqLnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsbFllYXIgPSBcIjE5XCIuY29uY2F0KGRhdGVPYmoueSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtb250aCA9IGRhdGVPYmoubTtcbiAgICBpZiAoZGF0ZU9iai5tLmxlbmd0aCA9PT0gMSkge1xuICAgICAgbW9udGggPSBcIjBcIi5jb25jYXQoZGF0ZU9iai5tKTtcbiAgICB9XG4gICAgdmFyIGRheSA9IGRhdGVPYmouZDtcbiAgICBpZiAoZGF0ZU9iai5kLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZGF5ID0gXCIwXCIuY29uY2F0KGRhdGVPYmouZCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShcIlwiLmNvbmNhdChmdWxsWWVhciwgXCItXCIpLmNvbmNhdChtb250aCwgXCItXCIpLmNvbmNhdChkYXksIFwiVDAwOjAwOjAwLjAwMFpcIikpLmdldFVUQ0RhdGUoKSA9PT0gK2RhdGVPYmouZDtcbiAgfVxuICBpZiAoIW9wdGlvbnMuc3RyaWN0TW9kZSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXScgJiYgaXNGaW5pdGUoaW5wdXQpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRGVjaW1hbDtcbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfaW5jbHVkZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaW5jbHVkZXNcIikpO1xudmFyIF9hbHBoYSA9IHJlcXVpcmUoXCIuL2FscGhhXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIGRlY2ltYWxSZWdFeHAob3B0aW9ucykge1xuICB2YXIgcmVnRXhwID0gbmV3IFJlZ0V4cChcIl5bLStdPyhbMC05XSspPyhcXFxcXCIuY29uY2F0KF9hbHBoYS5kZWNpbWFsW29wdGlvbnMubG9jYWxlXSwgXCJbMC05XXtcIikuY29uY2F0KG9wdGlvbnMuZGVjaW1hbF9kaWdpdHMsIFwifSlcIikuY29uY2F0KG9wdGlvbnMuZm9yY2VfZGVjaW1hbCA/ICcnIDogJz8nLCBcIiRcIikpO1xuICByZXR1cm4gcmVnRXhwO1xufVxudmFyIGRlZmF1bHRfZGVjaW1hbF9vcHRpb25zID0ge1xuICBmb3JjZV9kZWNpbWFsOiBmYWxzZSxcbiAgZGVjaW1hbF9kaWdpdHM6ICcxLCcsXG4gIGxvY2FsZTogJ2VuLVVTJ1xufTtcbnZhciBibGFja2xpc3QgPSBbJycsICctJywgJysnXTtcbmZ1bmN0aW9uIGlzRGVjaW1hbChzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdF9kZWNpbWFsX29wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5sb2NhbGUgaW4gX2FscGhhLmRlY2ltYWwpIHtcbiAgICByZXR1cm4gISgwLCBfaW5jbHVkZXMuZGVmYXVsdCkoYmxhY2tsaXN0LCBzdHIucmVwbGFjZSgvIC9nLCAnJykpICYmIGRlY2ltYWxSZWdFeHAob3B0aW9ucykudGVzdChzdHIpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9jYWxlICdcIi5jb25jYXQob3B0aW9ucy5sb2NhbGUsIFwiJ1wiKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0RpdmlzaWJsZUJ5O1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfdG9GbG9hdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdG9GbG9hdFwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gaXNEaXZpc2libGVCeShzdHIsIG51bSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gKDAsIF90b0Zsb2F0LmRlZmF1bHQpKHN0cikgJSBwYXJzZUludChudW0sIDEwKSA9PT0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRUFOO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vKipcbiAqIFRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgRUFOIHN0YW5kYXJkIGlzXG4gKiB0aGUgdGhpcnRlZW4tZGlnaXQgRUFOLTEzLCB3aGlsZSB0aGVcbiAqIGxlc3MgY29tbW9ubHkgdXNlZCA4LWRpZ2l0IEVBTi04IGJhcmNvZGUgd2FzXG4gKiBpbnRyb2R1Y2VkIGZvciB1c2Ugb24gc21hbGwgcGFja2FnZXMuXG4gKiBBbHNvIEVBTi9VQ0MtMTQgaXMgdXNlZCBmb3IgR3JvdXBpbmcgb2YgaW5kaXZpZHVhbFxuICogdHJhZGUgaXRlbXMgYWJvdmUgdW5pdCBsZXZlbChJbnRlcm1lZGlhdGUsIENhcnRvbiBvciBQYWxsZXQpLlxuICogRm9yIG1vcmUgaW5mbyBhYm91dCBFQU4tMTQgY2hlY2tvdXQ6IGh0dHBzOi8vd3d3Lmd0aW4uaW5mby9pdGYtMTQtYmFyY29kZXMvXG4gKiBFQU4gY29uc2lzdHMgb2Y6XG4gKiBHUzEgcHJlZml4LCBtYW51ZmFjdHVyZXIgY29kZSwgcHJvZHVjdCBjb2RlIGFuZCBjaGVjayBkaWdpdFxuICogUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnRlcm5hdGlvbmFsX0FydGljbGVfTnVtYmVyXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmd0aW4uaW5mby9cbiAqL1xuXG4vKipcbiAqIERlZmluZSBFQU4gTGVuZ2h0czsgOCBmb3IgRUFOLTg7IDEzIGZvciBFQU4tMTM7IDE0IGZvciBFQU4tMTRcbiAqIGFuZCBSZWd1bGFyIEV4cHJlc3Npb24gZm9yIHZhbGlkIEVBTnMgKEVBTi04LCBFQU4tMTMsIEVBTi0xNCksXG4gKiB3aXRoIGV4YWN0IG51bWJlcmljIG1hdGNoaW5nIG9mIDggb3IgMTMgb3IgMTQgZGlnaXRzIFswLTldXG4gKi9cbnZhciBMRU5HVEhfRUFOXzggPSA4O1xudmFyIExFTkdUSF9FQU5fMTQgPSAxNDtcbnZhciB2YWxpZEVhblJlZ2V4ID0gL14oXFxkezh9fFxcZHsxM318XFxkezE0fSkkLztcblxuLyoqXG4gKiBHZXQgcG9zaXRpb24gd2VpZ2h0IGdpdmVuOlxuICogRUFOIGxlbmd0aCBhbmQgZGlnaXQgaW5kZXgvcG9zaXRpb25cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0UG9zaXRpb25XZWlnaHRUaHJvdWdoTGVuZ3RoQW5kSW5kZXgobGVuZ3RoLCBpbmRleCkge1xuICBpZiAobGVuZ3RoID09PSBMRU5HVEhfRUFOXzggfHwgbGVuZ3RoID09PSBMRU5HVEhfRUFOXzE0KSB7XG4gICAgcmV0dXJuIGluZGV4ICUgMiA9PT0gMCA/IDMgOiAxO1xuICB9XG4gIHJldHVybiBpbmRleCAlIDIgPT09IDAgPyAxIDogMztcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgRUFOIENoZWNrIERpZ2l0XG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQXJ0aWNsZV9OdW1iZXIjQ2FsY3VsYXRpb25fb2ZfY2hlY2tzdW1fZGlnaXRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZWFuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNoZWNrRGlnaXQoZWFuKSB7XG4gIHZhciBjaGVja3N1bSA9IGVhbi5zbGljZSgwLCAtMSkuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoY2hhciwgaW5kZXgpIHtcbiAgICByZXR1cm4gTnVtYmVyKGNoYXIpICogZ2V0UG9zaXRpb25XZWlnaHRUaHJvdWdoTGVuZ3RoQW5kSW5kZXgoZWFuLmxlbmd0aCwgaW5kZXgpO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGFydGlhbFN1bSkge1xuICAgIHJldHVybiBhY2MgKyBwYXJ0aWFsU3VtO1xuICB9LCAwKTtcbiAgdmFyIHJlbWFpbmRlciA9IDEwIC0gY2hlY2tzdW0gJSAxMDtcbiAgcmV0dXJuIHJlbWFpbmRlciA8IDEwID8gcmVtYWluZGVyIDogMDtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBzdHJpbmcgaXMgdmFsaWQgRUFOOlxuICogTWF0Y2hlcyBFQU4tOC9FQU4tMTMvRUFOLTE0IHJlZ2V4XG4gKiBIYXMgdmFsaWQgY2hlY2sgZGlnaXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNFQU4oc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBhY3R1YWxDaGVja0RpZ2l0ID0gTnVtYmVyKHN0ci5zbGljZSgtMSkpO1xuICByZXR1cm4gdmFsaWRFYW5SZWdleC50ZXN0KHN0cikgJiYgYWN0dWFsQ2hlY2tEaWdpdCA9PT0gY2FsY3VsYXRlQ2hlY2tEaWdpdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNFbWFpbDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2lzQnl0ZUxlbmd0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNCeXRlTGVuZ3RoXCIpKTtcbnZhciBfaXNGUUROID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0ZRRE5cIikpO1xudmFyIF9pc0lQID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0lQXCIpKTtcbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBkZWZhdWx0X2VtYWlsX29wdGlvbnMgPSB7XG4gIGFsbG93X2Rpc3BsYXlfbmFtZTogZmFsc2UsXG4gIGFsbG93X3VuZGVyc2NvcmVzOiBmYWxzZSxcbiAgcmVxdWlyZV9kaXNwbGF5X25hbWU6IGZhbHNlLFxuICBhbGxvd191dGY4X2xvY2FsX3BhcnQ6IHRydWUsXG4gIHJlcXVpcmVfdGxkOiB0cnVlLFxuICBibGFja2xpc3RlZF9jaGFyczogJycsXG4gIGlnbm9yZV9tYXhfbGVuZ3RoOiBmYWxzZSxcbiAgaG9zdF9ibGFja2xpc3Q6IFtdLFxuICBob3N0X3doaXRlbGlzdDogW11cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cbnZhciBzcGxpdE5hbWVBZGRyZXNzID0gL14oW15cXHgwMC1cXHgxRlxceDdGLVxceDlGXFxjWF0rKTwvaTtcbnZhciBlbWFpbFVzZXJQYXJ0ID0gL15bYS16XFxkISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dKyQvaTtcbnZhciBnbWFpbFVzZXJQYXJ0ID0gL15bYS16XFxkXSskLztcbnZhciBxdW90ZWRFbWFpbFVzZXIgPSAvXihbXFxzXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3ZlxceDIxXFx4MjMtXFx4NWJcXHg1ZC1cXHg3ZV18KFxcXFxbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdKSkqJC9pO1xudmFyIGVtYWlsVXNlclV0ZjhQYXJ0ID0gL15bYS16XFxkISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5cXHUwMEExLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKyQvaTtcbnZhciBxdW90ZWRFbWFpbFVzZXJVdGY4ID0gL14oW1xcc1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZcXHgyMVxceDIzLVxceDViXFx4NWQtXFx4N2VcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdfChcXFxcW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKiQvaTtcbnZhciBkZWZhdWx0TWF4RW1haWxMZW5ndGggPSAyNTQ7XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbi8qIGVzbGludC1lbmFibGUgbm8tY29udHJvbC1yZWdleCAqL1xuXG4vKipcbiAqIFZhbGlkYXRlIGRpc3BsYXkgbmFtZSBhY2NvcmRpbmcgdG8gdGhlIFJGQzI4MjI6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI2FwcGVuZGl4LUEuMS4yXG4gKiBAcGFyYW0ge1N0cmluZ30gZGlzcGxheV9uYW1lXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRGlzcGxheU5hbWUoZGlzcGxheV9uYW1lKSB7XG4gIHZhciBkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMgPSBkaXNwbGF5X25hbWUucmVwbGFjZSgvXlwiKC4rKVwiJC8sICckMScpO1xuICAvLyBkaXNwbGF5IG5hbWUgd2l0aCBvbmx5IHNwYWNlcyBpcyBub3QgdmFsaWRcbiAgaWYgKCFkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMudHJpbSgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gY2hlY2sgd2hldGhlciBkaXNwbGF5IG5hbWUgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJcbiAgdmFyIGNvbnRhaW5zX2lsbGVnYWwgPSAvW1xcLlwiOzw+XS8udGVzdChkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMpO1xuICBpZiAoY29udGFpbnNfaWxsZWdhbCkge1xuICAgIC8vIGlmIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyxcbiAgICAvLyBtdXN0IHRvIGJlIGVuY2xvc2VkIGluIGRvdWJsZS1xdW90ZXMsIG90aGVyd2lzZSBpdCdzIG5vdCBhIHZhbGlkIGRpc3BsYXkgbmFtZVxuICAgIGlmIChkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMgPT09IGRpc3BsYXlfbmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHRoZSBxdW90ZXMgaW4gZGlzcGxheSBuYW1lIG11c3Qgc3RhcnQgd2l0aCBjaGFyYWN0ZXIgc3ltYm9sIFxcXG4gICAgdmFyIGFsbF9zdGFydF93aXRoX2JhY2tfc2xhc2ggPSBkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMuc3BsaXQoJ1wiJykubGVuZ3RoID09PSBkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMuc3BsaXQoJ1xcXFxcIicpLmxlbmd0aDtcbiAgICBpZiAoIWFsbF9zdGFydF93aXRoX2JhY2tfc2xhc2gpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBpc0VtYWlsKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X2VtYWlsX29wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5yZXF1aXJlX2Rpc3BsYXlfbmFtZSB8fCBvcHRpb25zLmFsbG93X2Rpc3BsYXlfbmFtZSkge1xuICAgIHZhciBkaXNwbGF5X2VtYWlsID0gc3RyLm1hdGNoKHNwbGl0TmFtZUFkZHJlc3MpO1xuICAgIGlmIChkaXNwbGF5X2VtYWlsKSB7XG4gICAgICB2YXIgZGlzcGxheV9uYW1lID0gZGlzcGxheV9lbWFpbFsxXTtcblxuICAgICAgLy8gUmVtb3ZlIGRpc3BsYXkgbmFtZSBhbmQgYW5nbGUgYnJhY2tldHMgdG8gZ2V0IGVtYWlsIGFkZHJlc3NcbiAgICAgIC8vIENhbiBiZSBkb25lIGluIHRoZSByZWdleCBidXQgd2lsbCBpbnRyb2R1Y2UgYSBSZURPUyAoU2VlICAjMTU5NyBmb3IgbW9yZSBpbmZvKVxuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoZGlzcGxheV9uYW1lLCAnJykucmVwbGFjZSgvKF48fD4kKS9nLCAnJyk7XG5cbiAgICAgIC8vIHNvbWV0aW1lcyBuZWVkIHRvIHRyaW0gdGhlIGxhc3Qgc3BhY2UgdG8gZ2V0IHRoZSBkaXNwbGF5IG5hbWVcbiAgICAgIC8vIGJlY2F1c2UgdGhlcmUgbWF5IGJlIGEgc3BhY2UgYmV0d2VlbiBkaXNwbGF5IG5hbWUgYW5kIGVtYWlsIGFkZHJlc3NcbiAgICAgIC8vIGVnLiBteW5hbWUgPGFkZHJlc3NAZ21haWwuY29tPlxuICAgICAgLy8gdGhlIGRpc3BsYXkgbmFtZSBpcyBgbXluYW1lYCBpbnN0ZWFkIG9mIGBteW5hbWUgYCwgc28gbmVlZCB0byB0cmltIHRoZSBsYXN0IHNwYWNlXG4gICAgICBpZiAoZGlzcGxheV9uYW1lLmVuZHNXaXRoKCcgJykpIHtcbiAgICAgICAgZGlzcGxheV9uYW1lID0gZGlzcGxheV9uYW1lLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsaWRhdGVEaXNwbGF5TmFtZShkaXNwbGF5X25hbWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmVxdWlyZV9kaXNwbGF5X25hbWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKCFvcHRpb25zLmlnbm9yZV9tYXhfbGVuZ3RoICYmIHN0ci5sZW5ndGggPiBkZWZhdWx0TWF4RW1haWxMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCdAJyk7XG4gIHZhciBkb21haW4gPSBwYXJ0cy5wb3AoKTtcbiAgdmFyIGxvd2VyX2RvbWFpbiA9IGRvbWFpbi50b0xvd2VyQ2FzZSgpO1xuICBpZiAob3B0aW9ucy5ob3N0X2JsYWNrbGlzdC5pbmNsdWRlcyhsb3dlcl9kb21haW4pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChvcHRpb25zLmhvc3Rfd2hpdGVsaXN0Lmxlbmd0aCA+IDAgJiYgIW9wdGlvbnMuaG9zdF93aGl0ZWxpc3QuaW5jbHVkZXMobG93ZXJfZG9tYWluKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdXNlciA9IHBhcnRzLmpvaW4oJ0AnKTtcbiAgaWYgKG9wdGlvbnMuZG9tYWluX3NwZWNpZmljX3ZhbGlkYXRpb24gJiYgKGxvd2VyX2RvbWFpbiA9PT0gJ2dtYWlsLmNvbScgfHwgbG93ZXJfZG9tYWluID09PSAnZ29vZ2xlbWFpbC5jb20nKSkge1xuICAgIC8qXG4gICAgICBQcmV2aW91c2x5IHdlIHJlbW92ZWQgZG90cyBmb3IgZ21haWwgYWRkcmVzc2VzIGJlZm9yZSB2YWxpZGF0aW5nLlxuICAgICAgVGhpcyB3YXMgcmVtb3ZlZCBiZWNhdXNlIGl0IGFsbG93cyBgbXVsdGlwbGUuLmRvdHNAZ21haWwuY29tYFxuICAgICAgdG8gYmUgcmVwb3J0ZWQgYXMgdmFsaWQsIGJ1dCBpdCBpcyBub3QuXG4gICAgICBHbWFpbCBvbmx5IG5vcm1hbGl6ZXMgc2luZ2xlIGRvdHMsIHJlbW92aW5nIHRoZW0gZnJvbSBoZXJlIGlzIHBvaW50bGVzcyxcbiAgICAgIHNob3VsZCBiZSBkb25lIGluIG5vcm1hbGl6ZUVtYWlsXG4gICAgKi9cbiAgICB1c2VyID0gdXNlci50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gUmVtb3Zpbmcgc3ViLWFkZHJlc3MgZnJvbSB1c2VybmFtZSBiZWZvcmUgZ21haWwgdmFsaWRhdGlvblxuICAgIHZhciB1c2VybmFtZSA9IHVzZXIuc3BsaXQoJysnKVswXTtcblxuICAgIC8vIERvdHMgYXJlIG5vdCBpbmNsdWRlZCBpbiBnbWFpbCBsZW5ndGggcmVzdHJpY3Rpb25cbiAgICBpZiAoISgwLCBfaXNCeXRlTGVuZ3RoLmRlZmF1bHQpKHVzZXJuYW1lLnJlcGxhY2UoL1xcLi9nLCAnJyksIHtcbiAgICAgIG1pbjogNixcbiAgICAgIG1heDogMzBcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgX3VzZXJfcGFydHMgPSB1c2VybmFtZS5zcGxpdCgnLicpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3VzZXJfcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZ21haWxVc2VyUGFydC50ZXN0KF91c2VyX3BhcnRzW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmlnbm9yZV9tYXhfbGVuZ3RoID09PSBmYWxzZSAmJiAoISgwLCBfaXNCeXRlTGVuZ3RoLmRlZmF1bHQpKHVzZXIsIHtcbiAgICBtYXg6IDY0XG4gIH0pIHx8ICEoMCwgX2lzQnl0ZUxlbmd0aC5kZWZhdWx0KShkb21haW4sIHtcbiAgICBtYXg6IDI1NFxuICB9KSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCEoMCwgX2lzRlFETi5kZWZhdWx0KShkb21haW4sIHtcbiAgICByZXF1aXJlX3RsZDogb3B0aW9ucy5yZXF1aXJlX3RsZCxcbiAgICBpZ25vcmVfbWF4X2xlbmd0aDogb3B0aW9ucy5pZ25vcmVfbWF4X2xlbmd0aCxcbiAgICBhbGxvd191bmRlcnNjb3Jlczogb3B0aW9ucy5hbGxvd191bmRlcnNjb3Jlc1xuICB9KSkge1xuICAgIGlmICghb3B0aW9ucy5hbGxvd19pcF9kb21haW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCEoMCwgX2lzSVAuZGVmYXVsdCkoZG9tYWluKSkge1xuICAgICAgaWYgKCFkb21haW4uc3RhcnRzV2l0aCgnWycpIHx8ICFkb21haW4uZW5kc1dpdGgoJ10nKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbm9CcmFja2V0ZG9tYWluID0gZG9tYWluLnNsaWNlKDEsIC0xKTtcbiAgICAgIGlmIChub0JyYWNrZXRkb21haW4ubGVuZ3RoID09PSAwIHx8ICEoMCwgX2lzSVAuZGVmYXVsdCkobm9CcmFja2V0ZG9tYWluKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh1c2VyWzBdID09PSAnXCInKSB7XG4gICAgdXNlciA9IHVzZXIuc2xpY2UoMSwgdXNlci5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gb3B0aW9ucy5hbGxvd191dGY4X2xvY2FsX3BhcnQgPyBxdW90ZWRFbWFpbFVzZXJVdGY4LnRlc3QodXNlcikgOiBxdW90ZWRFbWFpbFVzZXIudGVzdCh1c2VyKTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IG9wdGlvbnMuYWxsb3dfdXRmOF9sb2NhbF9wYXJ0ID8gZW1haWxVc2VyVXRmOFBhcnQgOiBlbWFpbFVzZXJQYXJ0O1xuICB2YXIgdXNlcl9wYXJ0cyA9IHVzZXIuc3BsaXQoJy4nKTtcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHVzZXJfcGFydHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgaWYgKCFwYXR0ZXJuLnRlc3QodXNlcl9wYXJ0c1tfaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmJsYWNrbGlzdGVkX2NoYXJzKSB7XG4gICAgaWYgKHVzZXIuc2VhcmNoKG5ldyBSZWdFeHAoXCJbXCIuY29uY2F0KG9wdGlvbnMuYmxhY2tsaXN0ZWRfY2hhcnMsIFwiXStcIiksICdnJykpICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNFbXB0eTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgZGVmYXVsdF9pc19lbXB0eV9vcHRpb25zID0ge1xuICBpZ25vcmVfd2hpdGVzcGFjZTogZmFsc2Vcbn07XG5mdW5jdGlvbiBpc0VtcHR5KHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X2lzX2VtcHR5X29wdGlvbnMpO1xuICByZXR1cm4gKG9wdGlvbnMuaWdub3JlX3doaXRlc3BhY2UgPyBzdHIudHJpbSgpLmxlbmd0aCA6IHN0ci5sZW5ndGgpID09PSAwO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNFdGhlcmV1bUFkZHJlc3M7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBldGggPSAvXigweClbMC05YS1mXXs0MH0kL2k7XG5mdW5jdGlvbiBpc0V0aGVyZXVtQWRkcmVzcyhzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGV0aC50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0ZRRE47XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9tZXJnZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIGRlZmF1bHRfZnFkbl9vcHRpb25zID0ge1xuICByZXF1aXJlX3RsZDogdHJ1ZSxcbiAgYWxsb3dfdW5kZXJzY29yZXM6IGZhbHNlLFxuICBhbGxvd190cmFpbGluZ19kb3Q6IGZhbHNlLFxuICBhbGxvd19udW1lcmljX3RsZDogZmFsc2UsXG4gIGFsbG93X3dpbGRjYXJkOiBmYWxzZSxcbiAgaWdub3JlX21heF9sZW5ndGg6IGZhbHNlXG59O1xuZnVuY3Rpb24gaXNGUUROKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X2ZxZG5fb3B0aW9ucyk7XG5cbiAgLyogUmVtb3ZlIHRoZSBvcHRpb25hbCB0cmFpbGluZyBkb3QgYmVmb3JlIGNoZWNraW5nIHZhbGlkaXR5ICovXG4gIGlmIChvcHRpb25zLmFsbG93X3RyYWlsaW5nX2RvdCAmJiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSAnLicpIHtcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIC8qIFJlbW92ZSB0aGUgb3B0aW9uYWwgd2lsZGNhcmQgYmVmb3JlIGNoZWNraW5nIHZhbGlkaXR5ICovXG4gIGlmIChvcHRpb25zLmFsbG93X3dpbGRjYXJkID09PSB0cnVlICYmIHN0ci5pbmRleE9mKCcqLicpID09PSAwKSB7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygyKTtcbiAgfVxuICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoJy4nKTtcbiAgdmFyIHRsZCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICBpZiAob3B0aW9ucy5yZXF1aXJlX3RsZCkge1xuICAgIC8vIGRpc2FsbG93IGZxZG5zIHdpdGhvdXQgdGxkXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmFsbG93X251bWVyaWNfdGxkICYmICEvXihbYS16XFx1MDBBMS1cXHUwMEE4XFx1MDBBQS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXXsyLH18eG5bYS16MC05LV17Mix9KSQvaS50ZXN0KHRsZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBkaXNhbGxvdyBzcGFjZXNcbiAgICBpZiAoL1xccy8udGVzdCh0bGQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gcmVqZWN0IG51bWVyaWMgVExEc1xuICBpZiAoIW9wdGlvbnMuYWxsb3dfbnVtZXJpY190bGQgJiYgL15cXGQrJC8udGVzdCh0bGQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBwYXJ0cy5ldmVyeShmdW5jdGlvbiAocGFydCkge1xuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDYzICYmICFvcHRpb25zLmlnbm9yZV9tYXhfbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghL15bYS16X1xcdTAwYTEtXFx1ZmZmZjAtOS1dKyQvaS50ZXN0KHBhcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZGlzYWxsb3cgZnVsbC13aWR0aCBjaGFyc1xuICAgIGlmICgvW1xcdWZmMDEtXFx1ZmY1ZV0vLnRlc3QocGFydCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBkaXNhbGxvdyBwYXJ0cyBzdGFydGluZyBvciBlbmRpbmcgd2l0aCBoeXBoZW5cbiAgICBpZiAoL14tfC0kLy50ZXN0KHBhcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5hbGxvd191bmRlcnNjb3JlcyAmJiAvXy8udGVzdChwYXJ0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Zsb2F0O1xuZXhwb3J0cy5sb2NhbGVzID0gdm9pZCAwO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfYWxwaGEgPSByZXF1aXJlKFwiLi9hbHBoYVwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBpc0Zsb2F0KHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGZsb2F0ID0gbmV3IFJlZ0V4cChcIl4oPzpbLStdKT8oPzpbMC05XSspPyg/OlxcXFxcIi5jb25jYXQob3B0aW9ucy5sb2NhbGUgPyBfYWxwaGEuZGVjaW1hbFtvcHRpb25zLmxvY2FsZV0gOiAnLicsIFwiWzAtOV0qKT8oPzpbZUVdW1xcXFwrXFxcXC1dPyg/OlswLTldKykpPyRcIikpO1xuICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09ICcuJyB8fCBzdHIgPT09ICcsJyB8fCBzdHIgPT09ICctJyB8fCBzdHIgPT09ICcrJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHN0ci5yZXBsYWNlKCcsJywgJy4nKSk7XG4gIHJldHVybiBmbG9hdC50ZXN0KHN0cikgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdtaW4nKSB8fCB2YWx1ZSA+PSBvcHRpb25zLm1pbikgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdtYXgnKSB8fCB2YWx1ZSA8PSBvcHRpb25zLm1heCkgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdsdCcpIHx8IHZhbHVlIDwgb3B0aW9ucy5sdCkgJiYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdndCcpIHx8IHZhbHVlID4gb3B0aW9ucy5ndCk7XG59XG52YXIgbG9jYWxlcyA9IGV4cG9ydHMubG9jYWxlcyA9IE9iamVjdC5rZXlzKF9hbHBoYS5kZWNpbWFsKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRnVsbFdpZHRoO1xuZXhwb3J0cy5mdWxsV2lkdGggPSB2b2lkIDA7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBmdWxsV2lkdGggPSBleHBvcnRzLmZ1bGxXaWR0aCA9IC9bXlxcdTAwMjAtXFx1MDA3RVxcdUZGNjEtXFx1RkY5RlxcdUZGQTAtXFx1RkZEQ1xcdUZGRTgtXFx1RkZFRTAtOWEtekEtWl0vO1xuZnVuY3Rpb24gaXNGdWxsV2lkdGgoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBmdWxsV2lkdGgudGVzdChzdHIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNIU0w7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBoc2xDb21tYSA9IC9eaHNsYT9cXCgoKFxcK3xcXC0pPyhbMC05XSsoXFwuWzAtOV0rKT8oZShcXCt8XFwtKT9bMC05XSspP3xcXC5bMC05XSsoZShcXCt8XFwtKT9bMC05XSspPykpKGRlZ3xncmFkfHJhZHx0dXJuKT8oLChcXCt8XFwtKT8oWzAtOV0rKFxcLlswLTldKyk/KGUoXFwrfFxcLSk/WzAtOV0rKT98XFwuWzAtOV0rKGUoXFwrfFxcLSk/WzAtOV0rKT8pJSl7Mn0oLCgoXFwrfFxcLSk/KFswLTldKyhcXC5bMC05XSspPyhlKFxcK3xcXC0pP1swLTldKyk/fFxcLlswLTldKyhlKFxcK3xcXC0pP1swLTldKyk/KSU/KSk/XFwpJC9pO1xudmFyIGhzbFNwYWNlID0gL15oc2xhP1xcKCgoXFwrfFxcLSk/KFswLTldKyhcXC5bMC05XSspPyhlKFxcK3xcXC0pP1swLTldKyk/fFxcLlswLTldKyhlKFxcK3xcXC0pP1swLTldKyk/KSkoZGVnfGdyYWR8cmFkfHR1cm4pPyhcXHMoXFwrfFxcLSk/KFswLTldKyhcXC5bMC05XSspPyhlKFxcK3xcXC0pP1swLTldKyk/fFxcLlswLTldKyhlKFxcK3xcXC0pP1swLTldKyk/KSUpezJ9XFxzPyhcXC9cXHMoKFxcK3xcXC0pPyhbMC05XSsoXFwuWzAtOV0rKT8oZShcXCt8XFwtKT9bMC05XSspP3xcXC5bMC05XSsoZShcXCt8XFwtKT9bMC05XSspPyklPylcXHM/KT9cXCkkL2k7XG5mdW5jdGlvbiBpc0hTTChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICAvLyBTdHJpcCBkdXBsaWNhdGUgc3BhY2VzIGJlZm9yZSBjYWxsaW5nIHRoZSB2YWxpZGF0aW9uIHJlZ2V4IChTZWUgICMxNTk4IGZvciBtb3JlIGluZm8pXG4gIHZhciBzdHJpcHBlZFN0ciA9IHN0ci5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXFxzPyhoc2xhP1xcKHxcXCl8LClcXHM/L2lnLCAnJDEnKTtcbiAgaWYgKHN0cmlwcGVkU3RyLmluZGV4T2YoJywnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gaHNsQ29tbWEudGVzdChzdHJpcHBlZFN0cik7XG4gIH1cbiAgcmV0dXJuIGhzbFNwYWNlLnRlc3Qoc3RyaXBwZWRTdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNIYWxmV2lkdGg7XG5leHBvcnRzLmhhbGZXaWR0aCA9IHZvaWQgMDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIGhhbGZXaWR0aCA9IGV4cG9ydHMuaGFsZldpZHRoID0gL1tcXHUwMDIwLVxcdTAwN0VcXHVGRjYxLVxcdUZGOUZcXHVGRkEwLVxcdUZGRENcXHVGRkU4LVxcdUZGRUUwLTlhLXpBLVpdLztcbmZ1bmN0aW9uIGlzSGFsZldpZHRoKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gaGFsZldpZHRoLnRlc3Qoc3RyKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSGFzaDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIGxlbmd0aHMgPSB7XG4gIG1kNTogMzIsXG4gIG1kNDogMzIsXG4gIHNoYTE6IDQwLFxuICBzaGEyNTY6IDY0LFxuICBzaGEzODQ6IDk2LFxuICBzaGE1MTI6IDEyOCxcbiAgcmlwZW1kMTI4OiAzMixcbiAgcmlwZW1kMTYwOiA0MCxcbiAgdGlnZXIxMjg6IDMyLFxuICB0aWdlcjE2MDogNDAsXG4gIHRpZ2VyMTkyOiA0OCxcbiAgY3JjMzI6IDgsXG4gIGNyYzMyYjogOFxufTtcbmZ1bmN0aW9uIGlzSGFzaChzdHIsIGFsZ29yaXRobSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgaGFzaCA9IG5ldyBSZWdFeHAoXCJeW2EtZkEtRjAtOV17XCIuY29uY2F0KGxlbmd0aHNbYWxnb3JpdGhtXSwgXCJ9JFwiKSk7XG4gIHJldHVybiBoYXNoLnRlc3Qoc3RyKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSGV4Q29sb3I7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBoZXhjb2xvciA9IC9eIz8oWzAtOUEtRl17M318WzAtOUEtRl17NH18WzAtOUEtRl17Nn18WzAtOUEtRl17OH0pJC9pO1xuZnVuY3Rpb24gaXNIZXhDb2xvcihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGhleGNvbG9yLnRlc3Qoc3RyKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSGV4YWRlY2ltYWw7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBoZXhhZGVjaW1hbCA9IC9eKDB4fDBoKT9bMC05QS1GXSskL2k7XG5mdW5jdGlvbiBpc0hleGFkZWNpbWFsKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gaGV4YWRlY2ltYWwudGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJQkFOO1xuZXhwb3J0cy5sb2NhbGVzID0gdm9pZCAwO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vKipcbiAqIExpc3Qgb2YgY291bnRyeSBjb2RlcyB3aXRoXG4gKiBjb3JyZXNwb25kaW5nIElCQU4gcmVndWxhciBleHByZXNzaW9uXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQmFua19BY2NvdW50X051bWJlclxuICovXG52YXIgaWJhblJlZ2V4VGhyb3VnaENvdW50cnlDb2RlID0ge1xuICBBRDogL14oQURbMC05XXsyfSlcXGR7OH1bQS1aMC05XXsxMn0kLyxcbiAgQUU6IC9eKEFFWzAtOV17Mn0pXFxkezN9XFxkezE2fSQvLFxuICBBTDogL14oQUxbMC05XXsyfSlcXGR7OH1bQS1aMC05XXsxNn0kLyxcbiAgQVQ6IC9eKEFUWzAtOV17Mn0pXFxkezE2fSQvLFxuICBBWjogL14oQVpbMC05XXsyfSlbQS1aMC05XXs0fVxcZHsyMH0kLyxcbiAgQkE6IC9eKEJBWzAtOV17Mn0pXFxkezE2fSQvLFxuICBCRTogL14oQkVbMC05XXsyfSlcXGR7MTJ9JC8sXG4gIEJHOiAvXihCR1swLTldezJ9KVtBLVpdezR9XFxkezZ9W0EtWjAtOV17OH0kLyxcbiAgQkg6IC9eKEJIWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsxNH0kLyxcbiAgQlI6IC9eKEJSWzAtOV17Mn0pXFxkezIzfVtBLVpdezF9W0EtWjAtOV17MX0kLyxcbiAgQlk6IC9eKEJZWzAtOV17Mn0pW0EtWjAtOV17NH1cXGR7MjB9JC8sXG4gIENIOiAvXihDSFswLTldezJ9KVxcZHs1fVtBLVowLTldezEyfSQvLFxuICBDUjogL14oQ1JbMC05XXsyfSlcXGR7MTh9JC8sXG4gIENZOiAvXihDWVswLTldezJ9KVxcZHs4fVtBLVowLTldezE2fSQvLFxuICBDWjogL14oQ1pbMC05XXsyfSlcXGR7MjB9JC8sXG4gIERFOiAvXihERVswLTldezJ9KVxcZHsxOH0kLyxcbiAgREs6IC9eKERLWzAtOV17Mn0pXFxkezE0fSQvLFxuICBETzogL14oRE9bMC05XXsyfSlbQS1aXXs0fVxcZHsyMH0kLyxcbiAgRFo6IC9eKERaXFxkezI0fSkkLyxcbiAgRUU6IC9eKEVFWzAtOV17Mn0pXFxkezE2fSQvLFxuICBFRzogL14oRUdbMC05XXsyfSlcXGR7MjV9JC8sXG4gIEVTOiAvXihFU1swLTldezJ9KVxcZHsyMH0kLyxcbiAgRkk6IC9eKEZJWzAtOV17Mn0pXFxkezE0fSQvLFxuICBGTzogL14oRk9bMC05XXsyfSlcXGR7MTR9JC8sXG4gIEZSOiAvXihGUlswLTldezJ9KVxcZHsxMH1bQS1aMC05XXsxMX1cXGR7Mn0kLyxcbiAgR0I6IC9eKEdCWzAtOV17Mn0pW0EtWl17NH1cXGR7MTR9JC8sXG4gIEdFOiAvXihHRVswLTldezJ9KVtBLVowLTldezJ9XFxkezE2fSQvLFxuICBHSTogL14oR0lbMC05XXsyfSlbQS1aXXs0fVtBLVowLTldezE1fSQvLFxuICBHTDogL14oR0xbMC05XXsyfSlcXGR7MTR9JC8sXG4gIEdSOiAvXihHUlswLTldezJ9KVxcZHs3fVtBLVowLTldezE2fSQvLFxuICBHVDogL14oR1RbMC05XXsyfSlbQS1aMC05XXs0fVtBLVowLTldezIwfSQvLFxuICBIUjogL14oSFJbMC05XXsyfSlcXGR7MTd9JC8sXG4gIEhVOiAvXihIVVswLTldezJ9KVxcZHsyNH0kLyxcbiAgSUU6IC9eKElFWzAtOV17Mn0pW0EtWjAtOV17NH1cXGR7MTR9JC8sXG4gIElMOiAvXihJTFswLTldezJ9KVxcZHsxOX0kLyxcbiAgSVE6IC9eKElRWzAtOV17Mn0pW0EtWl17NH1cXGR7MTV9JC8sXG4gIElSOiAvXihJUlswLTldezJ9KTBcXGR7Mn0wXFxkezE4fSQvLFxuICBJUzogL14oSVNbMC05XXsyfSlcXGR7MjJ9JC8sXG4gIElUOiAvXihJVFswLTldezJ9KVtBLVpdezF9XFxkezEwfVtBLVowLTldezEyfSQvLFxuICBKTzogL14oSk9bMC05XXsyfSlbQS1aXXs0fVxcZHsyMn0kLyxcbiAgS1c6IC9eKEtXWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsyMn0kLyxcbiAgS1o6IC9eKEtaWzAtOV17Mn0pXFxkezN9W0EtWjAtOV17MTN9JC8sXG4gIExCOiAvXihMQlswLTldezJ9KVxcZHs0fVtBLVowLTldezIwfSQvLFxuICBMQzogL14oTENbMC05XXsyfSlbQS1aXXs0fVtBLVowLTldezI0fSQvLFxuICBMSTogL14oTElbMC05XXsyfSlcXGR7NX1bQS1aMC05XXsxMn0kLyxcbiAgTFQ6IC9eKExUWzAtOV17Mn0pXFxkezE2fSQvLFxuICBMVTogL14oTFVbMC05XXsyfSlcXGR7M31bQS1aMC05XXsxM30kLyxcbiAgTFY6IC9eKExWWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsxM30kLyxcbiAgTUE6IC9eKE1BWzAtOV17MjZ9KSQvLFxuICBNQzogL14oTUNbMC05XXsyfSlcXGR7MTB9W0EtWjAtOV17MTF9XFxkezJ9JC8sXG4gIE1EOiAvXihNRFswLTldezJ9KVtBLVowLTldezIwfSQvLFxuICBNRTogL14oTUVbMC05XXsyfSlcXGR7MTh9JC8sXG4gIE1LOiAvXihNS1swLTldezJ9KVxcZHszfVtBLVowLTldezEwfVxcZHsyfSQvLFxuICBNUjogL14oTVJbMC05XXsyfSlcXGR7MjN9JC8sXG4gIE1UOiAvXihNVFswLTldezJ9KVtBLVpdezR9XFxkezV9W0EtWjAtOV17MTh9JC8sXG4gIE1VOiAvXihNVVswLTldezJ9KVtBLVpdezR9XFxkezE5fVtBLVpdezN9JC8sXG4gIE1aOiAvXihNWlswLTldezJ9KVxcZHsyMX0kLyxcbiAgTkw6IC9eKE5MWzAtOV17Mn0pW0EtWl17NH1cXGR7MTB9JC8sXG4gIE5POiAvXihOT1swLTldezJ9KVxcZHsxMX0kLyxcbiAgUEs6IC9eKFBLWzAtOV17Mn0pW0EtWjAtOV17NH1cXGR7MTZ9JC8sXG4gIFBMOiAvXihQTFswLTldezJ9KVxcZHsyNH0kLyxcbiAgUFM6IC9eKFBTWzAtOV17Mn0pW0EtWjAtOV17NH1cXGR7MjF9JC8sXG4gIFBUOiAvXihQVFswLTldezJ9KVxcZHsyMX0kLyxcbiAgUUE6IC9eKFFBWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsyMX0kLyxcbiAgUk86IC9eKFJPWzAtOV17Mn0pW0EtWl17NH1bQS1aMC05XXsxNn0kLyxcbiAgUlM6IC9eKFJTWzAtOV17Mn0pXFxkezE4fSQvLFxuICBTQTogL14oU0FbMC05XXsyfSlcXGR7Mn1bQS1aMC05XXsxOH0kLyxcbiAgU0M6IC9eKFNDWzAtOV17Mn0pW0EtWl17NH1cXGR7MjB9W0EtWl17M30kLyxcbiAgU0U6IC9eKFNFWzAtOV17Mn0pXFxkezIwfSQvLFxuICBTSTogL14oU0lbMC05XXsyfSlcXGR7MTV9JC8sXG4gIFNLOiAvXihTS1swLTldezJ9KVxcZHsyMH0kLyxcbiAgU006IC9eKFNNWzAtOV17Mn0pW0EtWl17MX1cXGR7MTB9W0EtWjAtOV17MTJ9JC8sXG4gIFNWOiAvXihTVlswLTldezJ9KVtBLVowLTldezR9XFxkezIwfSQvLFxuICBUTDogL14oVExbMC05XXsyfSlcXGR7MTl9JC8sXG4gIFROOiAvXihUTlswLTldezJ9KVxcZHsyMH0kLyxcbiAgVFI6IC9eKFRSWzAtOV17Mn0pXFxkezV9W0EtWjAtOV17MTd9JC8sXG4gIFVBOiAvXihVQVswLTldezJ9KVxcZHs2fVtBLVowLTldezE5fSQvLFxuICBWQTogL14oVkFbMC05XXsyfSlcXGR7MTh9JC8sXG4gIFZHOiAvXihWR1swLTldezJ9KVtBLVowLTldezR9XFxkezE2fSQvLFxuICBYSzogL14oWEtbMC05XXsyfSlcXGR7MTZ9JC9cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGNvdW50cnkgY29kZXMgcGFzc2VkIGFyZSB2YWxpZCB1c2luZyB0aGVcbiAqIGliYW5SZWdleFRocm91Z2hDb3VudHJ5Q29kZSBhcyBhIHJlZmVyZW5jZVxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGNvdW50cnlDb2RlQXJyYXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gaGFzT25seVZhbGlkQ291bnRyeUNvZGVzKGNvdW50cnlDb2RlQXJyYXkpIHtcbiAgdmFyIGNvdW50cnlDb2RlQXJyYXlGaWx0ZXJlZFdpdGhPYmplY3RJYmFuQ29kZSA9IGNvdW50cnlDb2RlQXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChjb3VudHJ5Q29kZSkge1xuICAgIHJldHVybiAhKGNvdW50cnlDb2RlIGluIGliYW5SZWdleFRocm91Z2hDb3VudHJ5Q29kZSk7XG4gIH0pO1xuICBpZiAoY291bnRyeUNvZGVBcnJheUZpbHRlcmVkV2l0aE9iamVjdEliYW5Db2RlLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBzdHJpbmcgaGFzIGNvcnJlY3QgdW5pdmVyc2FsIElCQU4gZm9ybWF0XG4gKiBUaGUgSUJBTiBjb25zaXN0cyBvZiB1cCB0byAzNCBhbHBoYW51bWVyaWMgY2hhcmFjdGVycywgYXMgZm9sbG93czpcbiAqIENvdW50cnkgQ29kZSB1c2luZyBJU08gMzE2Ni0xIGFscGhhLTIsIHR3byBsZXR0ZXJzXG4gKiBjaGVjayBkaWdpdHMsIHR3byBkaWdpdHMgYW5kXG4gKiBCYXNpYyBCYW5rIEFjY291bnQgTnVtYmVyIChCQkFOKSwgdXAgdG8gMzAgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuXG4gKiBOT1RFOiBQZXJtaXR0ZWQgSUJBTiBjaGFyYWN0ZXJzIGFyZTogZGlnaXRzIFswLTldIGFuZCB0aGUgMjYgbGF0aW4gYWxwaGFiZXRpYyBbQS1aXVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBzdHJpbmcgdW5kZXIgdmFsaWRhdGlvblxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBvYmplY3QgdG8gcGFzcyB0aGUgY291bnRyaWVzIHRvIGJlIGVpdGhlciB3aGl0ZWxpc3RlZCBvciBibGFja2xpc3RlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzVmFsaWRJYmFuRm9ybWF0KHN0ciwgb3B0aW9ucykge1xuICAvLyBTdHJpcCB3aGl0ZSBzcGFjZXMgYW5kIGh5cGhlbnNcbiAgdmFyIHN0cmlwcGVkU3RyID0gc3RyLnJlcGxhY2UoL1tcXHNcXC1dKy9naSwgJycpLnRvVXBwZXJDYXNlKCk7XG4gIHZhciBpc29Db3VudHJ5Q29kZSA9IHN0cmlwcGVkU3RyLnNsaWNlKDAsIDIpLnRvVXBwZXJDYXNlKCk7XG4gIHZhciBpc29Db3VudHJ5Q29kZUluSWJhblJlZ2V4Q29kZU9iamVjdCA9IChpc29Db3VudHJ5Q29kZSBpbiBpYmFuUmVnZXhUaHJvdWdoQ291bnRyeUNvZGUpO1xuICBpZiAob3B0aW9ucy53aGl0ZWxpc3QpIHtcbiAgICBpZiAoIWhhc09ubHlWYWxpZENvdW50cnlDb2RlcyhvcHRpb25zLndoaXRlbGlzdCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGlzb0NvdW50cnlDb2RlSW5XaGl0ZUxpc3QgPSBvcHRpb25zLndoaXRlbGlzdC5pbmNsdWRlcyhpc29Db3VudHJ5Q29kZSk7XG4gICAgaWYgKCFpc29Db3VudHJ5Q29kZUluV2hpdGVMaXN0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmJsYWNrbGlzdCkge1xuICAgIHZhciBpc29Db3VudHJ5Q29kZUluQmxhY2tMaXN0ID0gb3B0aW9ucy5ibGFja2xpc3QuaW5jbHVkZXMoaXNvQ291bnRyeUNvZGUpO1xuICAgIGlmIChpc29Db3VudHJ5Q29kZUluQmxhY2tMaXN0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBpc29Db3VudHJ5Q29kZUluSWJhblJlZ2V4Q29kZU9iamVjdCAmJiBpYmFuUmVnZXhUaHJvdWdoQ291bnRyeUNvZGVbaXNvQ291bnRyeUNvZGVdLnRlc3Qoc3RyaXBwZWRTdHIpO1xufVxuXG4vKipcbiAgICogQ2hlY2sgd2hldGhlciBzdHJpbmcgaGFzIHZhbGlkIElCQU4gQ2hlY2tzdW1cbiAgICogYnkgcGVyZm9ybWluZyBiYXNpYyBtb2QtOTcgb3BlcmF0aW9uIGFuZFxuICAgKiB0aGUgcmVtYWluZGVyIHNob3VsZCBlcXVhbCAxXG4gICAqIC0tIFN0YXJ0IGJ5IHJlYXJyYW5naW5nIHRoZSBJQkFOIGJ5IG1vdmluZyB0aGUgZm91ciBpbml0aWFsIGNoYXJhY3RlcnMgdG8gdGhlIGVuZCBvZiB0aGUgc3RyaW5nXG4gICAqIC0tIFJlcGxhY2UgZWFjaCBsZXR0ZXIgaW4gdGhlIHN0cmluZyB3aXRoIHR3byBkaWdpdHMsIEEgLT4gMTAsIEIgPSAxMSwgWiA9IDM1XG4gICAqIC0tIEludGVycHJldCB0aGUgc3RyaW5nIGFzIGEgZGVjaW1hbCBpbnRlZ2VyIGFuZFxuICAgKiAtLSBjb21wdXRlIHRoZSByZW1haW5kZXIgb24gZGl2aXNpb24gYnkgOTcgKG1vZCA5NylcbiAgICogUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnRlcm5hdGlvbmFsX0JhbmtfQWNjb3VudF9OdW1iZXJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbmZ1bmN0aW9uIGhhc1ZhbGlkSWJhbkNoZWNrc3VtKHN0cikge1xuICB2YXIgc3RyaXBwZWRTdHIgPSBzdHIucmVwbGFjZSgvW15BLVowLTldKy9naSwgJycpLnRvVXBwZXJDYXNlKCk7IC8vIEtlZXAgb25seSBkaWdpdHMgYW5kIEEtWiBsYXRpbiBhbHBoYWJldGljXG4gIHZhciByZWFycmFuZ2VkID0gc3RyaXBwZWRTdHIuc2xpY2UoNCkgKyBzdHJpcHBlZFN0ci5zbGljZSgwLCA0KTtcbiAgdmFyIGFscGhhQ2Fwc1JlcGxhY2VkV2l0aERpZ2l0cyA9IHJlYXJyYW5nZWQucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKGNoYXIpIHtcbiAgICByZXR1cm4gY2hhci5jaGFyQ29kZUF0KDApIC0gNTU7XG4gIH0pO1xuICB2YXIgcmVtYWluZGVyID0gYWxwaGFDYXBzUmVwbGFjZWRXaXRoRGlnaXRzLm1hdGNoKC9cXGR7MSw3fS9nKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdmFsdWUpIHtcbiAgICByZXR1cm4gTnVtYmVyKGFjYyArIHZhbHVlKSAlIDk3O1xuICB9LCAnJyk7XG4gIHJldHVybiByZW1haW5kZXIgPT09IDE7XG59XG5mdW5jdGlvbiBpc0lCQU4oc3RyKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIGhhc1ZhbGlkSWJhbkZvcm1hdChzdHIsIG9wdGlvbnMpICYmIGhhc1ZhbGlkSWJhbkNoZWNrc3VtKHN0cik7XG59XG52YXIgbG9jYWxlcyA9IGV4cG9ydHMubG9jYWxlcyA9IE9iamVjdC5rZXlzKGliYW5SZWdleFRocm91Z2hDb3VudHJ5Q29kZSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lNRUk7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBpbWVpUmVnZXhXaXRob3V0SHlwZW5zID0gL15bMC05XXsxNX0kLztcbnZhciBpbWVpUmVnZXhXaXRoSHlwZW5zID0gL15cXGR7Mn0tXFxkezZ9LVxcZHs2fS1cXGR7MX0kLztcbmZ1bmN0aW9uIGlzSU1FSShzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gZGVmYXVsdCByZWdleCBmb3IgY2hlY2tpbmcgaW1laSBpcyB0aGUgb25lIHdpdGhvdXQgaHlwaGVuc1xuXG4gIHZhciBpbWVpUmVnZXggPSBpbWVpUmVnZXhXaXRob3V0SHlwZW5zO1xuICBpZiAob3B0aW9ucy5hbGxvd19oeXBoZW5zKSB7XG4gICAgaW1laVJlZ2V4ID0gaW1laVJlZ2V4V2l0aEh5cGVucztcbiAgfVxuICBpZiAoIWltZWlSZWdleC50ZXN0KHN0cikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RyID0gc3RyLnJlcGxhY2UoLy0vZywgJycpO1xuICB2YXIgc3VtID0gMCxcbiAgICBtdWwgPSAyLFxuICAgIGwgPSAxNDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgZGlnaXQgPSBzdHIuc3Vic3RyaW5nKGwgLSBpIC0gMSwgbCAtIGkpO1xuICAgIHZhciB0cCA9IHBhcnNlSW50KGRpZ2l0LCAxMCkgKiBtdWw7XG4gICAgaWYgKHRwID49IDEwKSB7XG4gICAgICBzdW0gKz0gdHAgJSAxMCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1bSArPSB0cDtcbiAgICB9XG4gICAgaWYgKG11bCA9PT0gMSkge1xuICAgICAgbXVsICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG11bCAtPSAxO1xuICAgIH1cbiAgfVxuICB2YXIgY2hrID0gKDEwIC0gc3VtICUgMTApICUgMTA7XG4gIGlmIChjaGsgIT09IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoMTQsIDE1KSwgMTApKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJUDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLyoqXG4xMS4zLiAgRXhhbXBsZXNcblxuICAgVGhlIGZvbGxvd2luZyBhZGRyZXNzZXNcblxuICAgICAgICAgICAgIGZlODA6OjEyMzQgKG9uIHRoZSAxc3QgbGluayBvZiB0aGUgbm9kZSlcbiAgICAgICAgICAgICBmZjAyOjo1Njc4IChvbiB0aGUgNXRoIGxpbmsgb2YgdGhlIG5vZGUpXG4gICAgICAgICAgICAgZmYwODo6OWFiYyAob24gdGhlIDEwdGggb3JnYW5pemF0aW9uIG9mIHRoZSBub2RlKVxuXG4gICB3b3VsZCBiZSByZXByZXNlbnRlZCBhcyBmb2xsb3dzOlxuXG4gICAgICAgICAgICAgZmU4MDo6MTIzNCUxXG4gICAgICAgICAgICAgZmYwMjo6NTY3OCU1XG4gICAgICAgICAgICAgZmYwODo6OWFiYyUxMFxuXG4gICAoSGVyZSB3ZSBhc3N1bWUgYSBuYXR1cmFsIHRyYW5zbGF0aW9uIGZyb20gYSB6b25lIGluZGV4IHRvIHRoZVxuICAgPHpvbmVfaWQ+IHBhcnQsIHdoZXJlIHRoZSBOdGggem9uZSBvZiBhbnkgc2NvcGUgaXMgdHJhbnNsYXRlZCBpbnRvXG4gICBcIk5cIi4pXG5cbiAgIElmIHdlIHVzZSBpbnRlcmZhY2UgbmFtZXMgYXMgPHpvbmVfaWQ+LCB0aG9zZSBhZGRyZXNzZXMgY291bGQgYWxzbyBiZVxuICAgcmVwcmVzZW50ZWQgYXMgZm9sbG93czpcblxuICAgICAgICAgICAgZmU4MDo6MTIzNCVuZTBcbiAgICAgICAgICAgIGZmMDI6OjU2NzglcHZjMS4zXG4gICAgICAgICAgICBmZjA4Ojo5YWJjJWludGVyZmFjZTEwXG5cbiAgIHdoZXJlIHRoZSBpbnRlcmZhY2UgXCJuZTBcIiBiZWxvbmdzIHRvIHRoZSAxc3QgbGluaywgXCJwdmMxLjNcIiBiZWxvbmdzXG4gICB0byB0aGUgNXRoIGxpbmssIGFuZCBcImludGVyZmFjZTEwXCIgYmVsb25ncyB0byB0aGUgMTB0aCBvcmdhbml6YXRpb24uXG4gKiAqICovXG52YXIgSVB2NFNlZ21lbnRGb3JtYXQgPSAnKD86WzAtOV18WzEtOV1bMC05XXwxWzAtOV1bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKSc7XG52YXIgSVB2NEFkZHJlc3NGb3JtYXQgPSBcIihcIi5jb25jYXQoSVB2NFNlZ21lbnRGb3JtYXQsIFwiWy5dKXszfVwiKS5jb25jYXQoSVB2NFNlZ21lbnRGb3JtYXQpO1xudmFyIElQdjRBZGRyZXNzUmVnRXhwID0gbmV3IFJlZ0V4cChcIl5cIi5jb25jYXQoSVB2NEFkZHJlc3NGb3JtYXQsIFwiJFwiKSk7XG52YXIgSVB2NlNlZ21lbnRGb3JtYXQgPSAnKD86WzAtOWEtZkEtRl17MSw0fSknO1xudmFyIElQdjZBZGRyZXNzUmVnRXhwID0gbmV3IFJlZ0V4cCgnXignICsgXCIoPzpcIi5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiOil7N30oPzpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcInw6KXxcIikgKyBcIig/OlwiLmNvbmNhdChJUHY2U2VnbWVudEZvcm1hdCwgXCI6KXs2fSg/OlwiKS5jb25jYXQoSVB2NEFkZHJlc3NGb3JtYXQsIFwifDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcInw6KXxcIikgKyBcIig/OlwiLmNvbmNhdChJUHY2U2VnbWVudEZvcm1hdCwgXCI6KXs1fSg/OjpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDJ9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezR9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCwxfTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDN9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezN9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCwyfTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDR9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezJ9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCwzfTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDV9fDopfFwiKSArIFwiKD86XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIjopezF9KD86KDpcIikuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCw0fTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoOlwiKS5jb25jYXQoSVB2NlNlZ21lbnRGb3JtYXQsIFwiKXsxLDZ9fDopfFwiKSArIFwiKD86OigoPzo6XCIuY29uY2F0KElQdjZTZWdtZW50Rm9ybWF0LCBcIil7MCw1fTpcIikuY29uY2F0KElQdjRBZGRyZXNzRm9ybWF0LCBcInwoPzo6XCIpLmNvbmNhdChJUHY2U2VnbWVudEZvcm1hdCwgXCIpezEsN318OikpXCIpICsgJykoJVswLTlhLXpBLVotLjpdezEsfSk/JCcpO1xuZnVuY3Rpb24gaXNJUChzdHIpIHtcbiAgdmFyIHZlcnNpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2ZXJzaW9uID0gU3RyaW5nKHZlcnNpb24pO1xuICBpZiAoIXZlcnNpb24pIHtcbiAgICByZXR1cm4gaXNJUChzdHIsIDQpIHx8IGlzSVAoc3RyLCA2KTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gJzQnKSB7XG4gICAgcmV0dXJuIElQdjRBZGRyZXNzUmVnRXhwLnRlc3Qoc3RyKTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gJzYnKSB7XG4gICAgcmV0dXJuIElQdjZBZGRyZXNzUmVnRXhwLnRlc3Qoc3RyKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lQUmFuZ2U7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xudmFyIF9pc0lQID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0lQXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgc3VibmV0TWF5YmUgPSAvXlxcZHsxLDN9JC87XG52YXIgdjRTdWJuZXQgPSAzMjtcbnZhciB2NlN1Ym5ldCA9IDEyODtcbmZ1bmN0aW9uIGlzSVBSYW5nZShzdHIpIHtcbiAgdmFyIHZlcnNpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoJy8nKTtcblxuICAvLyBwYXJ0c1swXSAtPiBpcCwgcGFydHNbMV0gLT4gc3VibmV0XG4gIGlmIChwYXJ0cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFzdWJuZXRNYXliZS50ZXN0KHBhcnRzWzFdKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERpc2FsbG93IHByZWNlZGluZyAwIGkuZS4gMDEsIDAyLCAuLi5cbiAgaWYgKHBhcnRzWzFdLmxlbmd0aCA+IDEgJiYgcGFydHNbMV0uc3RhcnRzV2l0aCgnMCcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpc1ZhbGlkSVAgPSAoMCwgX2lzSVAuZGVmYXVsdCkocGFydHNbMF0sIHZlcnNpb24pO1xuICBpZiAoIWlzVmFsaWRJUCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERlZmluZSB2YWxpZCBzdWJuZXQgYWNjb3JkaW5nIHRvIElQJ3MgdmVyc2lvblxuICB2YXIgZXhwZWN0ZWRTdWJuZXQgPSBudWxsO1xuICBzd2l0Y2ggKFN0cmluZyh2ZXJzaW9uKSkge1xuICAgIGNhc2UgJzQnOlxuICAgICAgZXhwZWN0ZWRTdWJuZXQgPSB2NFN1Ym5ldDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzYnOlxuICAgICAgZXhwZWN0ZWRTdWJuZXQgPSB2NlN1Ym5ldDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBleHBlY3RlZFN1Ym5ldCA9ICgwLCBfaXNJUC5kZWZhdWx0KShwYXJ0c1swXSwgJzYnKSA/IHY2U3VibmV0IDogdjRTdWJuZXQ7XG4gIH1cbiAgcmV0dXJuIHBhcnRzWzFdIDw9IGV4cGVjdGVkU3VibmV0ICYmIHBhcnRzWzFdID49IDA7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lTQk47XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBwb3NzaWJsZUlzYm4xMCA9IC9eKD86WzAtOV17OX1YfFswLTldezEwfSkkLztcbnZhciBwb3NzaWJsZUlzYm4xMyA9IC9eKD86WzAtOV17MTN9KSQvO1xudmFyIGZhY3RvciA9IFsxLCAzXTtcbmZ1bmN0aW9uIGlzSVNCTihpc2JuLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKGlzYm4pO1xuXG4gIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eTpcbiAgLy8gaXNJU0JOKHN0ciBbLCB2ZXJzaW9uXSksIGkuZS4gYG9wdGlvbnNgIGNvdWxkIGJlIHVzZWQgYXMgYXJndW1lbnQgZm9yIHRoZSBsZWdhY3kgYHZlcnNpb25gXG4gIHZhciB2ZXJzaW9uID0gU3RyaW5nKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudmVyc2lvbikgfHwgb3B0aW9ucyk7XG4gIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudmVyc2lvbiB8fCBvcHRpb25zKSkge1xuICAgIHJldHVybiBpc0lTQk4oaXNibiwge1xuICAgICAgdmVyc2lvbjogMTBcbiAgICB9KSB8fCBpc0lTQk4oaXNibiwge1xuICAgICAgdmVyc2lvbjogMTNcbiAgICB9KTtcbiAgfVxuICB2YXIgc2FuaXRpemVkSXNibiA9IGlzYm4ucmVwbGFjZSgvW1xccy1dKy9nLCAnJyk7XG4gIHZhciBjaGVja3N1bSA9IDA7XG4gIGlmICh2ZXJzaW9uID09PSAnMTAnKSB7XG4gICAgaWYgKCFwb3NzaWJsZUlzYm4xMC50ZXN0KHNhbml0aXplZElzYm4pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVyc2lvbiAtIDE7IGkrKykge1xuICAgICAgY2hlY2tzdW0gKz0gKGkgKyAxKSAqIHNhbml0aXplZElzYm4uY2hhckF0KGkpO1xuICAgIH1cbiAgICBpZiAoc2FuaXRpemVkSXNibi5jaGFyQXQoOSkgPT09ICdYJykge1xuICAgICAgY2hlY2tzdW0gKz0gMTAgKiAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tzdW0gKz0gMTAgKiBzYW5pdGl6ZWRJc2JuLmNoYXJBdCg5KTtcbiAgICB9XG4gICAgaWYgKGNoZWNrc3VtICUgMTEgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2ZXJzaW9uID09PSAnMTMnKSB7XG4gICAgaWYgKCFwb3NzaWJsZUlzYm4xMy50ZXN0KHNhbml0aXplZElzYm4pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCAxMjsgX2krKykge1xuICAgICAgY2hlY2tzdW0gKz0gZmFjdG9yW19pICUgMl0gKiBzYW5pdGl6ZWRJc2JuLmNoYXJBdChfaSk7XG4gICAgfVxuICAgIGlmIChzYW5pdGl6ZWRJc2JuLmNoYXJBdCgxMikgLSAoMTAgLSBjaGVja3N1bSAlIDEwKSAlIDEwID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJU0lOO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgaXNpbiA9IC9eW0EtWl17Mn1bMC05QS1aXXs5fVswLTldJC87XG5cbi8vIHRoaXMgbGluayBkZXRhaWxzIGhvdyB0aGUgY2hlY2sgZGlnaXQgaXMgY2FsY3VsYXRlZDpcbi8vIGh0dHBzOi8vd3d3LmlzaW4ub3JnL2lzaW4tZm9ybWF0Ly4gaXQgaXMgYSBsaXR0bGUgYml0XG4vLyBvZGQgaW4gdGhhdCBpdCB3b3JrcyB3aXRoIGRpZ2l0cywgbm90IG51bWJlcnMuIGluIG9yZGVyXG4vLyB0byBtYWtlIG9ubHkgb25lIHBhc3MgdGhyb3VnaCB0aGUgSVNJTiBjaGFyYWN0ZXJzLCB0aGVcbi8vIGVhY2ggYWxwaGEgY2hhcmFjdGVyIGlzIGhhbmRsZWQgYXMgMiBjaGFyYWN0ZXJzIHdpdGhpblxuLy8gdGhlIGxvb3AuXG5cbmZ1bmN0aW9uIGlzSVNJTihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgaWYgKCFpc2luLnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZG91YmxlID0gdHJ1ZTtcbiAgdmFyIHN1bSA9IDA7XG4gIC8vIGNvbnZlcnQgdmFsdWVzXG4gIGZvciAodmFyIGkgPSBzdHIubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoc3RyW2ldID49ICdBJyAmJiBzdHJbaV0gPD0gJ1onKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHJbaV0uY2hhckNvZGVBdCgwKSAtIDU1O1xuICAgICAgdmFyIGxvID0gdmFsdWUgJSAxMDtcbiAgICAgIHZhciBoaSA9IE1hdGgudHJ1bmModmFsdWUgLyAxMCk7XG4gICAgICAvLyBsZXR0ZXJzIGhhdmUgdHdvIGRpZ2l0cywgc28gaGFuZGxlIHRoZSBsb3cgb3JkZXJcbiAgICAgIC8vIGFuZCBoaWdoIG9yZGVyIGRpZ2l0cyBzZXBhcmF0ZWx5LlxuICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gW2xvLCBoaV07IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGRpZ2l0ID0gX2FycltfaV07XG4gICAgICAgIGlmIChkb3VibGUpIHtcbiAgICAgICAgICBpZiAoZGlnaXQgPj0gNSkge1xuICAgICAgICAgICAgc3VtICs9IDEgKyAoZGlnaXQgLSA1KSAqIDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1bSArPSBkaWdpdCAqIDI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1bSArPSBkaWdpdDtcbiAgICAgICAgfVxuICAgICAgICBkb3VibGUgPSAhZG91YmxlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RpZ2l0ID0gc3RyW2ldLmNoYXJDb2RlQXQoMCkgLSAnMCcuY2hhckNvZGVBdCgwKTtcbiAgICAgIGlmIChkb3VibGUpIHtcbiAgICAgICAgaWYgKF9kaWdpdCA+PSA1KSB7XG4gICAgICAgICAgc3VtICs9IDEgKyAoX2RpZ2l0IC0gNSkgKiAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1bSArPSBfZGlnaXQgKiAyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdW0gKz0gX2RpZ2l0O1xuICAgICAgfVxuICAgICAgZG91YmxlID0gIWRvdWJsZTtcbiAgICB9XG4gIH1cbiAgdmFyIGNoZWNrID0gTWF0aC50cnVuYygoc3VtICsgOSkgLyAxMCkgKiAxMCAtIHN1bTtcbiAgcmV0dXJuICtzdHJbc3RyLmxlbmd0aCAtIDFdID09PSBjaGVjaztcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ291bnRyeUNvZGVzID0gdm9pZCAwO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJU08zMTY2MUFscGhhMjtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLy8gZnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fMzE2Ni0xX2FscGhhLTJcbnZhciB2YWxpZElTTzMxNjYxQWxwaGEyQ291bnRyaWVzQ29kZXMgPSBuZXcgU2V0KFsnQUQnLCAnQUUnLCAnQUYnLCAnQUcnLCAnQUknLCAnQUwnLCAnQU0nLCAnQU8nLCAnQVEnLCAnQVInLCAnQVMnLCAnQVQnLCAnQVUnLCAnQVcnLCAnQVgnLCAnQVonLCAnQkEnLCAnQkInLCAnQkQnLCAnQkUnLCAnQkYnLCAnQkcnLCAnQkgnLCAnQkknLCAnQkonLCAnQkwnLCAnQk0nLCAnQk4nLCAnQk8nLCAnQlEnLCAnQlInLCAnQlMnLCAnQlQnLCAnQlYnLCAnQlcnLCAnQlknLCAnQlonLCAnQ0EnLCAnQ0MnLCAnQ0QnLCAnQ0YnLCAnQ0cnLCAnQ0gnLCAnQ0knLCAnQ0snLCAnQ0wnLCAnQ00nLCAnQ04nLCAnQ08nLCAnQ1InLCAnQ1UnLCAnQ1YnLCAnQ1cnLCAnQ1gnLCAnQ1knLCAnQ1onLCAnREUnLCAnREonLCAnREsnLCAnRE0nLCAnRE8nLCAnRFonLCAnRUMnLCAnRUUnLCAnRUcnLCAnRUgnLCAnRVInLCAnRVMnLCAnRVQnLCAnRkknLCAnRkonLCAnRksnLCAnRk0nLCAnRk8nLCAnRlInLCAnR0EnLCAnR0InLCAnR0QnLCAnR0UnLCAnR0YnLCAnR0cnLCAnR0gnLCAnR0knLCAnR0wnLCAnR00nLCAnR04nLCAnR1AnLCAnR1EnLCAnR1InLCAnR1MnLCAnR1QnLCAnR1UnLCAnR1cnLCAnR1knLCAnSEsnLCAnSE0nLCAnSE4nLCAnSFInLCAnSFQnLCAnSFUnLCAnSUQnLCAnSUUnLCAnSUwnLCAnSU0nLCAnSU4nLCAnSU8nLCAnSVEnLCAnSVInLCAnSVMnLCAnSVQnLCAnSkUnLCAnSk0nLCAnSk8nLCAnSlAnLCAnS0UnLCAnS0cnLCAnS0gnLCAnS0knLCAnS00nLCAnS04nLCAnS1AnLCAnS1InLCAnS1cnLCAnS1knLCAnS1onLCAnTEEnLCAnTEInLCAnTEMnLCAnTEknLCAnTEsnLCAnTFInLCAnTFMnLCAnTFQnLCAnTFUnLCAnTFYnLCAnTFknLCAnTUEnLCAnTUMnLCAnTUQnLCAnTUUnLCAnTUYnLCAnTUcnLCAnTUgnLCAnTUsnLCAnTUwnLCAnTU0nLCAnTU4nLCAnTU8nLCAnTVAnLCAnTVEnLCAnTVInLCAnTVMnLCAnTVQnLCAnTVUnLCAnTVYnLCAnTVcnLCAnTVgnLCAnTVknLCAnTVonLCAnTkEnLCAnTkMnLCAnTkUnLCAnTkYnLCAnTkcnLCAnTkknLCAnTkwnLCAnTk8nLCAnTlAnLCAnTlInLCAnTlUnLCAnTlonLCAnT00nLCAnUEEnLCAnUEUnLCAnUEYnLCAnUEcnLCAnUEgnLCAnUEsnLCAnUEwnLCAnUE0nLCAnUE4nLCAnUFInLCAnUFMnLCAnUFQnLCAnUFcnLCAnUFknLCAnUUEnLCAnUkUnLCAnUk8nLCAnUlMnLCAnUlUnLCAnUlcnLCAnU0EnLCAnU0InLCAnU0MnLCAnU0QnLCAnU0UnLCAnU0cnLCAnU0gnLCAnU0knLCAnU0onLCAnU0snLCAnU0wnLCAnU00nLCAnU04nLCAnU08nLCAnU1InLCAnU1MnLCAnU1QnLCAnU1YnLCAnU1gnLCAnU1knLCAnU1onLCAnVEMnLCAnVEQnLCAnVEYnLCAnVEcnLCAnVEgnLCAnVEonLCAnVEsnLCAnVEwnLCAnVE0nLCAnVE4nLCAnVE8nLCAnVFInLCAnVFQnLCAnVFYnLCAnVFcnLCAnVFonLCAnVUEnLCAnVUcnLCAnVU0nLCAnVVMnLCAnVVknLCAnVVonLCAnVkEnLCAnVkMnLCAnVkUnLCAnVkcnLCAnVkknLCAnVk4nLCAnVlUnLCAnV0YnLCAnV1MnLCAnWUUnLCAnWVQnLCAnWkEnLCAnWk0nLCAnWlcnXSk7XG5mdW5jdGlvbiBpc0lTTzMxNjYxQWxwaGEyKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gdmFsaWRJU08zMTY2MUFscGhhMkNvdW50cmllc0NvZGVzLmhhcyhzdHIudG9VcHBlckNhc2UoKSk7XG59XG52YXIgQ291bnRyeUNvZGVzID0gZXhwb3J0cy5Db3VudHJ5Q29kZXMgPSB2YWxpZElTTzMxNjYxQWxwaGEyQ291bnRyaWVzQ29kZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lTTzMxNjYxQWxwaGEzO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vLyBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTFfYWxwaGEtM1xudmFyIHZhbGlkSVNPMzE2NjFBbHBoYTNDb3VudHJpZXNDb2RlcyA9IG5ldyBTZXQoWydBRkcnLCAnQUxBJywgJ0FMQicsICdEWkEnLCAnQVNNJywgJ0FORCcsICdBR08nLCAnQUlBJywgJ0FUQScsICdBVEcnLCAnQVJHJywgJ0FSTScsICdBQlcnLCAnQVVTJywgJ0FVVCcsICdBWkUnLCAnQkhTJywgJ0JIUicsICdCR0QnLCAnQlJCJywgJ0JMUicsICdCRUwnLCAnQkxaJywgJ0JFTicsICdCTVUnLCAnQlROJywgJ0JPTCcsICdCRVMnLCAnQklIJywgJ0JXQScsICdCVlQnLCAnQlJBJywgJ0lPVCcsICdCUk4nLCAnQkdSJywgJ0JGQScsICdCREknLCAnS0hNJywgJ0NNUicsICdDQU4nLCAnQ1BWJywgJ0NZTScsICdDQUYnLCAnVENEJywgJ0NITCcsICdDSE4nLCAnQ1hSJywgJ0NDSycsICdDT0wnLCAnQ09NJywgJ0NPRycsICdDT0QnLCAnQ09LJywgJ0NSSScsICdDSVYnLCAnSFJWJywgJ0NVQicsICdDVVcnLCAnQ1lQJywgJ0NaRScsICdETksnLCAnREpJJywgJ0RNQScsICdET00nLCAnRUNVJywgJ0VHWScsICdTTFYnLCAnR05RJywgJ0VSSScsICdFU1QnLCAnRVRIJywgJ0ZMSycsICdGUk8nLCAnRkpJJywgJ0ZJTicsICdGUkEnLCAnR1VGJywgJ1BZRicsICdBVEYnLCAnR0FCJywgJ0dNQicsICdHRU8nLCAnREVVJywgJ0dIQScsICdHSUInLCAnR1JDJywgJ0dSTCcsICdHUkQnLCAnR0xQJywgJ0dVTScsICdHVE0nLCAnR0dZJywgJ0dJTicsICdHTkInLCAnR1VZJywgJ0hUSScsICdITUQnLCAnVkFUJywgJ0hORCcsICdIS0cnLCAnSFVOJywgJ0lTTCcsICdJTkQnLCAnSUROJywgJ0lSTicsICdJUlEnLCAnSVJMJywgJ0lNTicsICdJU1InLCAnSVRBJywgJ0pBTScsICdKUE4nLCAnSkVZJywgJ0pPUicsICdLQVonLCAnS0VOJywgJ0tJUicsICdQUksnLCAnS09SJywgJ0tXVCcsICdLR1onLCAnTEFPJywgJ0xWQScsICdMQk4nLCAnTFNPJywgJ0xCUicsICdMQlknLCAnTElFJywgJ0xUVScsICdMVVgnLCAnTUFDJywgJ01LRCcsICdNREcnLCAnTVdJJywgJ01ZUycsICdNRFYnLCAnTUxJJywgJ01MVCcsICdNSEwnLCAnTVRRJywgJ01SVCcsICdNVVMnLCAnTVlUJywgJ01FWCcsICdGU00nLCAnTURBJywgJ01DTycsICdNTkcnLCAnTU5FJywgJ01TUicsICdNQVInLCAnTU9aJywgJ01NUicsICdOQU0nLCAnTlJVJywgJ05QTCcsICdOTEQnLCAnTkNMJywgJ05aTCcsICdOSUMnLCAnTkVSJywgJ05HQScsICdOSVUnLCAnTkZLJywgJ01OUCcsICdOT1InLCAnT01OJywgJ1BBSycsICdQTFcnLCAnUFNFJywgJ1BBTicsICdQTkcnLCAnUFJZJywgJ1BFUicsICdQSEwnLCAnUENOJywgJ1BPTCcsICdQUlQnLCAnUFJJJywgJ1FBVCcsICdSRVUnLCAnUk9VJywgJ1JVUycsICdSV0EnLCAnQkxNJywgJ1NITicsICdLTkEnLCAnTENBJywgJ01BRicsICdTUE0nLCAnVkNUJywgJ1dTTScsICdTTVInLCAnU1RQJywgJ1NBVScsICdTRU4nLCAnU1JCJywgJ1NZQycsICdTTEUnLCAnU0dQJywgJ1NYTScsICdTVksnLCAnU1ZOJywgJ1NMQicsICdTT00nLCAnWkFGJywgJ1NHUycsICdTU0QnLCAnRVNQJywgJ0xLQScsICdTRE4nLCAnU1VSJywgJ1NKTScsICdTV1onLCAnU1dFJywgJ0NIRScsICdTWVInLCAnVFdOJywgJ1RKSycsICdUWkEnLCAnVEhBJywgJ1RMUycsICdUR08nLCAnVEtMJywgJ1RPTicsICdUVE8nLCAnVFVOJywgJ1RVUicsICdUS00nLCAnVENBJywgJ1RVVicsICdVR0EnLCAnVUtSJywgJ0FSRScsICdHQlInLCAnVVNBJywgJ1VNSScsICdVUlknLCAnVVpCJywgJ1ZVVCcsICdWRU4nLCAnVk5NJywgJ1ZHQicsICdWSVInLCAnV0xGJywgJ0VTSCcsICdZRU0nLCAnWk1CJywgJ1pXRSddKTtcbmZ1bmN0aW9uIGlzSVNPMzE2NjFBbHBoYTMoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiB2YWxpZElTTzMxNjYxQWxwaGEzQ291bnRyaWVzQ29kZXMuaGFzKHN0ci50b1VwcGVyQ2FzZSgpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ3VycmVuY3lDb2RlcyA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSVNPNDIxNztcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLy8gZnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fNDIxN1xudmFyIHZhbGlkSVNPNDIxN0N1cnJlbmN5Q29kZXMgPSBuZXcgU2V0KFsnQUVEJywgJ0FGTicsICdBTEwnLCAnQU1EJywgJ0FORycsICdBT0EnLCAnQVJTJywgJ0FVRCcsICdBV0cnLCAnQVpOJywgJ0JBTScsICdCQkQnLCAnQkRUJywgJ0JHTicsICdCSEQnLCAnQklGJywgJ0JNRCcsICdCTkQnLCAnQk9CJywgJ0JPVicsICdCUkwnLCAnQlNEJywgJ0JUTicsICdCV1AnLCAnQllOJywgJ0JaRCcsICdDQUQnLCAnQ0RGJywgJ0NIRScsICdDSEYnLCAnQ0hXJywgJ0NMRicsICdDTFAnLCAnQ05ZJywgJ0NPUCcsICdDT1UnLCAnQ1JDJywgJ0NVQycsICdDVVAnLCAnQ1ZFJywgJ0NaSycsICdESkYnLCAnREtLJywgJ0RPUCcsICdEWkQnLCAnRUdQJywgJ0VSTicsICdFVEInLCAnRVVSJywgJ0ZKRCcsICdGS1AnLCAnR0JQJywgJ0dFTCcsICdHSFMnLCAnR0lQJywgJ0dNRCcsICdHTkYnLCAnR1RRJywgJ0dZRCcsICdIS0QnLCAnSE5MJywgJ0hSSycsICdIVEcnLCAnSFVGJywgJ0lEUicsICdJTFMnLCAnSU5SJywgJ0lRRCcsICdJUlInLCAnSVNLJywgJ0pNRCcsICdKT0QnLCAnSlBZJywgJ0tFUycsICdLR1MnLCAnS0hSJywgJ0tNRicsICdLUFcnLCAnS1JXJywgJ0tXRCcsICdLWUQnLCAnS1pUJywgJ0xBSycsICdMQlAnLCAnTEtSJywgJ0xSRCcsICdMU0wnLCAnTFlEJywgJ01BRCcsICdNREwnLCAnTUdBJywgJ01LRCcsICdNTUsnLCAnTU5UJywgJ01PUCcsICdNUlUnLCAnTVVSJywgJ01WUicsICdNV0snLCAnTVhOJywgJ01YVicsICdNWVInLCAnTVpOJywgJ05BRCcsICdOR04nLCAnTklPJywgJ05PSycsICdOUFInLCAnTlpEJywgJ09NUicsICdQQUInLCAnUEVOJywgJ1BHSycsICdQSFAnLCAnUEtSJywgJ1BMTicsICdQWUcnLCAnUUFSJywgJ1JPTicsICdSU0QnLCAnUlVCJywgJ1JXRicsICdTQVInLCAnU0JEJywgJ1NDUicsICdTREcnLCAnU0VLJywgJ1NHRCcsICdTSFAnLCAnU0xFJywgJ1NMTCcsICdTT1MnLCAnU1JEJywgJ1NTUCcsICdTVE4nLCAnU1ZDJywgJ1NZUCcsICdTWkwnLCAnVEhCJywgJ1RKUycsICdUTVQnLCAnVE5EJywgJ1RPUCcsICdUUlknLCAnVFREJywgJ1RXRCcsICdUWlMnLCAnVUFIJywgJ1VHWCcsICdVU0QnLCAnVVNOJywgJ1VZSScsICdVWVUnLCAnVVlXJywgJ1VaUycsICdWRVMnLCAnVk5EJywgJ1ZVVicsICdXU1QnLCAnWEFGJywgJ1hBRycsICdYQVUnLCAnWEJBJywgJ1hCQicsICdYQkMnLCAnWEJEJywgJ1hDRCcsICdYRFInLCAnWE9GJywgJ1hQRCcsICdYUEYnLCAnWFBUJywgJ1hTVScsICdYVFMnLCAnWFVBJywgJ1hYWCcsICdZRVInLCAnWkFSJywgJ1pNVycsICdaV0wnXSk7XG5mdW5jdGlvbiBpc0lTTzQyMTcoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiB2YWxpZElTTzQyMTdDdXJyZW5jeUNvZGVzLmhhcyhzdHIudG9VcHBlckNhc2UoKSk7XG59XG52YXIgQ3VycmVuY3lDb2RlcyA9IGV4cG9ydHMuQ3VycmVuY3lDb2RlcyA9IHZhbGlkSVNPNDIxN0N1cnJlbmN5Q29kZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzRnJlaWdodENvbnRhaW5lcklEID0gdm9pZCAwO1xuZXhwb3J0cy5pc0lTTzYzNDYgPSBpc0lTTzYzNDY7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT182MzQ2XG4vLyBhY2NvcmRpbmcgdG8gSVNPNjM0NiBzdGFuZGFyZCwgY2hlY2tzdW0gZGlnaXQgaXMgbWFuZGF0b3J5IGZvciBmcmVpZ2h0IGNvbnRhaW5lciBidXQgcmVjb21tZW5kZWRcbi8vIGZvciBvdGhlciBjb250YWluZXIgdHlwZXMgKEogYW5kIFopXG52YXIgaXNJU082MzQ2U3RyID0gL15bQS1aXXszfShVWzAtOV17N30pfChbSixaXVswLTldezYsN30pJC87XG52YXIgaXNEaWdpdCA9IC9eWzAtOV0kLztcbmZ1bmN0aW9uIGlzSVNPNjM0NihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgc3RyID0gc3RyLnRvVXBwZXJDYXNlKCk7XG4gIGlmICghaXNJU082MzQ2U3RyLnRlc3Qoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoc3RyLmxlbmd0aCA9PT0gMTEpIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGlmICghaXNEaWdpdC50ZXN0KHN0cltpXSkpIHtcbiAgICAgICAgdmFyIGNvbnZlcnRlZENvZGUgPSB2b2lkIDA7XG4gICAgICAgIHZhciBsZXR0ZXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA1NTtcbiAgICAgICAgaWYgKGxldHRlckNvZGUgPCAxMSkgY29udmVydGVkQ29kZSA9IGxldHRlckNvZGU7ZWxzZSBpZiAobGV0dGVyQ29kZSA+PSAxMSAmJiBsZXR0ZXJDb2RlIDw9IDIwKSBjb252ZXJ0ZWRDb2RlID0gMTIgKyBsZXR0ZXJDb2RlICUgMTE7ZWxzZSBpZiAobGV0dGVyQ29kZSA+PSAyMSAmJiBsZXR0ZXJDb2RlIDw9IDMwKSBjb252ZXJ0ZWRDb2RlID0gMjMgKyBsZXR0ZXJDb2RlICUgMjE7ZWxzZSBjb252ZXJ0ZWRDb2RlID0gMzQgKyBsZXR0ZXJDb2RlICUgMzE7XG4gICAgICAgIHN1bSArPSBjb252ZXJ0ZWRDb2RlICogTWF0aC5wb3coMiwgaSk7XG4gICAgICB9IGVsc2Ugc3VtICs9IHN0cltpXSAqIE1hdGgucG93KDIsIGkpO1xuICAgIH1cbiAgICB2YXIgY2hlY2tTdW1EaWdpdCA9IHN1bSAlIDExO1xuICAgIHJldHVybiBOdW1iZXIoc3RyW3N0ci5sZW5ndGggLSAxXSkgPT09IGNoZWNrU3VtRGlnaXQ7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG52YXIgaXNGcmVpZ2h0Q29udGFpbmVySUQgPSBleHBvcnRzLmlzRnJlaWdodENvbnRhaW5lcklEID0gaXNJU082MzQ2OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJU082MzkxO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgaXNJU082MzkxU2V0ID0gbmV3IFNldChbJ2FhJywgJ2FiJywgJ2FlJywgJ2FmJywgJ2FrJywgJ2FtJywgJ2FuJywgJ2FyJywgJ2FzJywgJ2F2JywgJ2F5JywgJ2F6JywgJ2F6JywgJ2JhJywgJ2JlJywgJ2JnJywgJ2JoJywgJ2JpJywgJ2JtJywgJ2JuJywgJ2JvJywgJ2JyJywgJ2JzJywgJ2NhJywgJ2NlJywgJ2NoJywgJ2NvJywgJ2NyJywgJ2NzJywgJ2N1JywgJ2N2JywgJ2N5JywgJ2RhJywgJ2RlJywgJ2R2JywgJ2R6JywgJ2VlJywgJ2VsJywgJ2VuJywgJ2VvJywgJ2VzJywgJ2V0JywgJ2V1JywgJ2ZhJywgJ2ZmJywgJ2ZpJywgJ2ZqJywgJ2ZvJywgJ2ZyJywgJ2Z5JywgJ2dhJywgJ2dkJywgJ2dsJywgJ2duJywgJ2d1JywgJ2d2JywgJ2hhJywgJ2hlJywgJ2hpJywgJ2hvJywgJ2hyJywgJ2h0JywgJ2h1JywgJ2h5JywgJ2h6JywgJ2lhJywgJ2lkJywgJ2llJywgJ2lnJywgJ2lpJywgJ2lrJywgJ2lvJywgJ2lzJywgJ2l0JywgJ2l1JywgJ2phJywgJ2p2JywgJ2thJywgJ2tnJywgJ2tpJywgJ2tqJywgJ2trJywgJ2tsJywgJ2ttJywgJ2tuJywgJ2tvJywgJ2tyJywgJ2tzJywgJ2t1JywgJ2t2JywgJ2t3JywgJ2t5JywgJ2xhJywgJ2xiJywgJ2xnJywgJ2xpJywgJ2xuJywgJ2xvJywgJ2x0JywgJ2x1JywgJ2x2JywgJ21nJywgJ21oJywgJ21pJywgJ21rJywgJ21sJywgJ21uJywgJ21yJywgJ21zJywgJ210JywgJ215JywgJ25hJywgJ25iJywgJ25kJywgJ25lJywgJ25nJywgJ25sJywgJ25uJywgJ25vJywgJ25yJywgJ252JywgJ255JywgJ29jJywgJ29qJywgJ29tJywgJ29yJywgJ29zJywgJ3BhJywgJ3BpJywgJ3BsJywgJ3BzJywgJ3B0JywgJ3F1JywgJ3JtJywgJ3JuJywgJ3JvJywgJ3J1JywgJ3J3JywgJ3NhJywgJ3NjJywgJ3NkJywgJ3NlJywgJ3NnJywgJ3NpJywgJ3NrJywgJ3NsJywgJ3NtJywgJ3NuJywgJ3NvJywgJ3NxJywgJ3NyJywgJ3NzJywgJ3N0JywgJ3N1JywgJ3N2JywgJ3N3JywgJ3RhJywgJ3RlJywgJ3RnJywgJ3RoJywgJ3RpJywgJ3RrJywgJ3RsJywgJ3RuJywgJ3RvJywgJ3RyJywgJ3RzJywgJ3R0JywgJ3R3JywgJ3R5JywgJ3VnJywgJ3VrJywgJ3VyJywgJ3V6JywgJ3ZlJywgJ3ZpJywgJ3ZvJywgJ3dhJywgJ3dvJywgJ3hoJywgJ3lpJywgJ3lvJywgJ3phJywgJ3poJywgJ3p1J10pO1xuZnVuY3Rpb24gaXNJU082MzkxKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gaXNJU082MzkxU2V0LmhhcyhzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJU084NjAxO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4vLyBmcm9tIGh0dHA6Ly9nb28uZ2wvMGVqSEhXXG52YXIgaXNvODYwMSA9IC9eKFtcXCstXT9cXGR7NH0oPyFcXGR7Mn1cXGIpKSgoLT8pKCgwWzEtOV18MVswLTJdKShcXDMoWzEyXVxcZHwwWzEtOV18M1swMV0pKT98VyhbMC00XVxcZHw1WzAtM10pKC0/WzEtN10pP3woMDBbMS05XXwwWzEtOV1cXGR8WzEyXVxcZHsyfXwzKFswLTVdXFxkfDZbMS02XSkpKShbVFxcc10oKChbMDFdXFxkfDJbMC0zXSkoKDo/KVswLTVdXFxkKT98MjQ6PzAwKShbXFwuLF1cXGQrKD8hOikpPyk/KFxcMTdbMC01XVxcZChbXFwuLF1cXGQrKT8pPyhbelpdfChbXFwrLV0pKFswMV1cXGR8MlswLTNdKTo/KFswLTVdXFxkKT8pPyk/KT8kLztcbi8vIHNhbWUgYXMgYWJvdmUsIGV4Y2VwdCB3aXRoIGEgc3RyaWN0ICdUJyBzZXBhcmF0b3IgYmV0d2VlbiBkYXRlIGFuZCB0aW1lXG52YXIgaXNvODYwMVN0cmljdFNlcGFyYXRvciA9IC9eKFtcXCstXT9cXGR7NH0oPyFcXGR7Mn1cXGIpKSgoLT8pKCgwWzEtOV18MVswLTJdKShcXDMoWzEyXVxcZHwwWzEtOV18M1swMV0pKT98VyhbMC00XVxcZHw1WzAtM10pKC0/WzEtN10pP3woMDBbMS05XXwwWzEtOV1cXGR8WzEyXVxcZHsyfXwzKFswLTVdXFxkfDZbMS02XSkpKShbVF0oKChbMDFdXFxkfDJbMC0zXSkoKDo/KVswLTVdXFxkKT98MjQ6PzAwKShbXFwuLF1cXGQrKD8hOikpPyk/KFxcMTdbMC01XVxcZChbXFwuLF1cXGQrKT8pPyhbelpdfChbXFwrLV0pKFswMV1cXGR8MlswLTNdKTo/KFswLTVdXFxkKT8pPyk/KT8kLztcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xudmFyIGlzVmFsaWREYXRlID0gZnVuY3Rpb24gaXNWYWxpZERhdGUoc3RyKSB7XG4gIC8vIHN0ciBtdXN0IGhhdmUgcGFzc2VkIHRoZSBJU084NjAxIGNoZWNrXG4gIC8vIHRoaXMgY2hlY2sgaXMgbWVhbnQgdG8gY2F0Y2ggaW52YWxpZCBkYXRlc1xuICAvLyBsaWtlIDIwMDktMDItMzFcbiAgLy8gZmlyc3QgY2hlY2sgZm9yIG9yZGluYWwgZGF0ZXNcbiAgdmFyIG9yZGluYWxNYXRjaCA9IHN0ci5tYXRjaCgvXihcXGR7NH0pLT8oXFxkezN9KShbIFRdezF9XFwuKnwkKS8pO1xuICBpZiAob3JkaW5hbE1hdGNoKSB7XG4gICAgdmFyIG9ZZWFyID0gTnVtYmVyKG9yZGluYWxNYXRjaFsxXSk7XG4gICAgdmFyIG9EYXkgPSBOdW1iZXIob3JkaW5hbE1hdGNoWzJdKTtcbiAgICAvLyBpZiBpcyBsZWFwIHllYXJcbiAgICBpZiAob1llYXIgJSA0ID09PSAwICYmIG9ZZWFyICUgMTAwICE9PSAwIHx8IG9ZZWFyICUgNDAwID09PSAwKSByZXR1cm4gb0RheSA8PSAzNjY7XG4gICAgcmV0dXJuIG9EYXkgPD0gMzY1O1xuICB9XG4gIHZhciBtYXRjaCA9IHN0ci5tYXRjaCgvKFxcZHs0fSktPyhcXGR7MCwyfSktPyhcXGQqKS8pLm1hcChOdW1iZXIpO1xuICB2YXIgeWVhciA9IG1hdGNoWzFdO1xuICB2YXIgbW9udGggPSBtYXRjaFsyXTtcbiAgdmFyIGRheSA9IG1hdGNoWzNdO1xuICB2YXIgbW9udGhTdHJpbmcgPSBtb250aCA/IFwiMFwiLmNvbmNhdChtb250aCkuc2xpY2UoLTIpIDogbW9udGg7XG4gIHZhciBkYXlTdHJpbmcgPSBkYXkgPyBcIjBcIi5jb25jYXQoZGF5KS5zbGljZSgtMikgOiBkYXk7XG5cbiAgLy8gY3JlYXRlIGEgZGF0ZSBvYmplY3QgYW5kIGNvbXBhcmVcbiAgdmFyIGQgPSBuZXcgRGF0ZShcIlwiLmNvbmNhdCh5ZWFyLCBcIi1cIikuY29uY2F0KG1vbnRoU3RyaW5nIHx8ICcwMScsIFwiLVwiKS5jb25jYXQoZGF5U3RyaW5nIHx8ICcwMScpKTtcbiAgaWYgKG1vbnRoICYmIGRheSkge1xuICAgIHJldHVybiBkLmdldFVUQ0Z1bGxZZWFyKCkgPT09IHllYXIgJiYgZC5nZXRVVENNb250aCgpICsgMSA9PT0gbW9udGggJiYgZC5nZXRVVENEYXRlKCkgPT09IGRheTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBpc0lTTzg2MDEoc3RyKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIGNoZWNrID0gb3B0aW9ucy5zdHJpY3RTZXBhcmF0b3IgPyBpc284NjAxU3RyaWN0U2VwYXJhdG9yLnRlc3Qoc3RyKSA6IGlzbzg2MDEudGVzdChzdHIpO1xuICBpZiAoY2hlY2sgJiYgb3B0aW9ucy5zdHJpY3QpIHJldHVybiBpc1ZhbGlkRGF0ZShzdHIpO1xuICByZXR1cm4gY2hlY2s7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lTUkM7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbi8vIHNlZSBodHRwOi8vaXNyYy5pZnBpLm9yZy9lbi9pc3JjLXN0YW5kYXJkL2NvZGUtc3ludGF4XG52YXIgaXNyYyA9IC9eW0EtWl17Mn1bMC05QS1aXXszfVxcZHsyfVxcZHs1fSQvO1xuZnVuY3Rpb24gaXNJU1JDKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gaXNyYy50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0lTU047XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBpc3NuID0gJ15cXFxcZHs0fS0/XFxcXGR7M31bXFxcXGRYXSQnO1xuZnVuY3Rpb24gaXNJU1NOKHN0cikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciB0ZXN0SXNzbiA9IGlzc247XG4gIHRlc3RJc3NuID0gb3B0aW9ucy5yZXF1aXJlX2h5cGhlbiA/IHRlc3RJc3NuLnJlcGxhY2UoJz8nLCAnJykgOiB0ZXN0SXNzbjtcbiAgdGVzdElzc24gPSBvcHRpb25zLmNhc2Vfc2Vuc2l0aXZlID8gbmV3IFJlZ0V4cCh0ZXN0SXNzbikgOiBuZXcgUmVnRXhwKHRlc3RJc3NuLCAnaScpO1xuICBpZiAoIXRlc3RJc3NuLnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZGlnaXRzID0gc3RyLnJlcGxhY2UoJy0nLCAnJykudG9VcHBlckNhc2UoKTtcbiAgdmFyIGNoZWNrc3VtID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWdpdHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGlnaXQgPSBkaWdpdHNbaV07XG4gICAgY2hlY2tzdW0gKz0gKGRpZ2l0ID09PSAnWCcgPyAxMCA6ICtkaWdpdCkgKiAoOCAtIGkpO1xuICB9XG4gIHJldHVybiBjaGVja3N1bSAlIDExID09PSAwO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJZGVudGl0eUNhcmQ7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xudmFyIF9pc0ludCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNJbnRcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciB2YWxpZGF0b3JzID0ge1xuICBQTDogZnVuY3Rpb24gUEwoc3RyKSB7XG4gICAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgICB2YXIgd2VpZ2h0T2ZEaWdpdHMgPSB7XG4gICAgICAxOiAxLFxuICAgICAgMjogMyxcbiAgICAgIDM6IDcsXG4gICAgICA0OiA5LFxuICAgICAgNTogMSxcbiAgICAgIDY6IDMsXG4gICAgICA3OiA3LFxuICAgICAgODogOSxcbiAgICAgIDk6IDEsXG4gICAgICAxMDogMyxcbiAgICAgIDExOiAwXG4gICAgfTtcbiAgICBpZiAoc3RyICE9IG51bGwgJiYgc3RyLmxlbmd0aCA9PT0gMTEgJiYgKDAsIF9pc0ludC5kZWZhdWx0KShzdHIsIHtcbiAgICAgIGFsbG93X2xlYWRpbmdfemVyb2VzOiB0cnVlXG4gICAgfSkpIHtcbiAgICAgIHZhciBkaWdpdHMgPSBzdHIuc3BsaXQoJycpLnNsaWNlKDAsIC0xKTtcbiAgICAgIHZhciBzdW0gPSBkaWdpdHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGRpZ2l0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gYWNjICsgTnVtYmVyKGRpZ2l0KSAqIHdlaWdodE9mRGlnaXRzW2luZGV4ICsgMV07XG4gICAgICB9LCAwKTtcbiAgICAgIHZhciBtb2R1bG8gPSBzdW0gJSAxMDtcbiAgICAgIHZhciBsYXN0RGlnaXQgPSBOdW1iZXIoc3RyLmNoYXJBdChzdHIubGVuZ3RoIC0gMSkpO1xuICAgICAgaWYgKG1vZHVsbyA9PT0gMCAmJiBsYXN0RGlnaXQgPT09IDAgfHwgbGFzdERpZ2l0ID09PSAxMCAtIG1vZHVsbykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBFUzogZnVuY3Rpb24gRVMoc3RyKSB7XG4gICAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgICB2YXIgRE5JID0gL15bMC05WC1aXVswLTldezd9W1RSV0FHTVlGUERYQk5KWlNRVkhMQ0tFXSQvO1xuICAgIHZhciBjaGFyc1ZhbHVlID0ge1xuICAgICAgWDogMCxcbiAgICAgIFk6IDEsXG4gICAgICBaOiAyXG4gICAgfTtcbiAgICB2YXIgY29udHJvbERpZ2l0cyA9IFsnVCcsICdSJywgJ1cnLCAnQScsICdHJywgJ00nLCAnWScsICdGJywgJ1AnLCAnRCcsICdYJywgJ0InLCAnTicsICdKJywgJ1onLCAnUycsICdRJywgJ1YnLCAnSCcsICdMJywgJ0MnLCAnSycsICdFJ107XG5cbiAgICAvLyBzYW5pdGl6ZSB1c2VyIGlucHV0XG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCkudG9VcHBlckNhc2UoKTtcblxuICAgIC8vIHZhbGlkYXRlIHRoZSBkYXRhIHN0cnVjdHVyZVxuICAgIGlmICghRE5JLnRlc3Qoc2FuaXRpemVkKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIHRoZSBjb250cm9sIGRpZ2l0XG4gICAgdmFyIG51bWJlciA9IHNhbml0aXplZC5zbGljZSgwLCAtMSkucmVwbGFjZSgvW1gsWSxaXS9nLCBmdW5jdGlvbiAoY2hhcikge1xuICAgICAgcmV0dXJuIGNoYXJzVmFsdWVbY2hhcl07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNhbml0aXplZC5lbmRzV2l0aChjb250cm9sRGlnaXRzW251bWJlciAlIDIzXSk7XG4gIH0sXG4gIEZJOiBmdW5jdGlvbiBGSShzdHIpIHtcbiAgICAvLyBodHRwczovL2R2di5maS9lbi9wZXJzb25hbC1pZGVudGl0eS1jb2RlIzp+OnRleHQ9Y29udHJvbCUyMGNoYXJhY3RlciUyMGZvciUyMGEtLHBlcnNvbmFsLC1pZGVudGl0eSUyMGNvZGUlMjBjYWxjdWxhdGVkXG4gICAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgICBpZiAoc3RyLmxlbmd0aCAhPT0gMTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzdHIubWF0Y2goL15cXGR7Nn1bXFwtQVxcK11cXGR7M31bMC05QUJDREVGSEpLTE1OUFJTVFVWV1hZXXsxfSQvKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2hlY2tEaWdpdHMgPSAnMDEyMzQ1Njc4OUFCQ0RFRkhKS0xNTlBSU1RVVldYWSc7XG4gICAgdmFyIGlkQXNOdW1iZXIgPSBwYXJzZUludChzdHIuc2xpY2UoMCwgNiksIDEwKSAqIDEwMDAgKyBwYXJzZUludChzdHIuc2xpY2UoNywgMTApLCAxMCk7XG4gICAgdmFyIHJlbWFpbmRlciA9IGlkQXNOdW1iZXIgJSAzMTtcbiAgICB2YXIgY2hlY2tEaWdpdCA9IGNoZWNrRGlnaXRzW3JlbWFpbmRlcl07XG4gICAgcmV0dXJuIGNoZWNrRGlnaXQgPT09IHN0ci5zbGljZSgxMCwgMTEpO1xuICB9LFxuICBJTjogZnVuY3Rpb24gSU4oc3RyKSB7XG4gICAgdmFyIEROSSA9IC9eWzEtOV1cXGR7M31cXHM/XFxkezR9XFxzP1xcZHs0fSQvO1xuXG4gICAgLy8gbXVsdGlwbGljYXRpb24gdGFibGVcbiAgICB2YXIgZCA9IFtbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0sIFsxLCAyLCAzLCA0LCAwLCA2LCA3LCA4LCA5LCA1XSwgWzIsIDMsIDQsIDAsIDEsIDcsIDgsIDksIDUsIDZdLCBbMywgNCwgMCwgMSwgMiwgOCwgOSwgNSwgNiwgN10sIFs0LCAwLCAxLCAyLCAzLCA5LCA1LCA2LCA3LCA4XSwgWzUsIDksIDgsIDcsIDYsIDAsIDQsIDMsIDIsIDFdLCBbNiwgNSwgOSwgOCwgNywgMSwgMCwgNCwgMywgMl0sIFs3LCA2LCA1LCA5LCA4LCAyLCAxLCAwLCA0LCAzXSwgWzgsIDcsIDYsIDUsIDksIDMsIDIsIDEsIDAsIDRdLCBbOSwgOCwgNywgNiwgNSwgNCwgMywgMiwgMSwgMF1dO1xuXG4gICAgLy8gcGVybXV0YXRpb24gdGFibGVcbiAgICB2YXIgcCA9IFtbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0sIFsxLCA1LCA3LCA2LCAyLCA4LCAzLCAwLCA5LCA0XSwgWzUsIDgsIDAsIDMsIDcsIDksIDYsIDEsIDQsIDJdLCBbOCwgOSwgMSwgNiwgMCwgNCwgMywgNSwgMiwgN10sIFs5LCA0LCA1LCAzLCAxLCAyLCA2LCA4LCA3LCAwXSwgWzQsIDIsIDgsIDYsIDUsIDcsIDMsIDksIDAsIDFdLCBbMiwgNywgOSwgMywgOCwgMCwgNiwgNCwgMSwgNV0sIFs3LCAwLCA0LCA2LCA5LCAxLCAzLCAyLCA1LCA4XV07XG5cbiAgICAvLyBzYW5pdGl6ZSB1c2VyIGlucHV0XG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCk7XG5cbiAgICAvLyB2YWxpZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVcbiAgICBpZiAoIUROSS50ZXN0KHNhbml0aXplZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBpbnZlcnRlZEFycmF5ID0gc2FuaXRpemVkLnJlcGxhY2UoL1xccy9nLCAnJykuc3BsaXQoJycpLm1hcChOdW1iZXIpLnJldmVyc2UoKTtcbiAgICBpbnZlcnRlZEFycmF5LmZvckVhY2goZnVuY3Rpb24gKHZhbCwgaSkge1xuICAgICAgYyA9IGRbY11bcFtpICUgOF1bdmFsXV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGMgPT09IDA7XG4gIH0sXG4gIElSOiBmdW5jdGlvbiBJUihzdHIpIHtcbiAgICBpZiAoIXN0ci5tYXRjaCgvXlxcZHsxMH0kLykpIHJldHVybiBmYWxzZTtcbiAgICBzdHIgPSBcIjAwMDBcIi5jb25jYXQoc3RyKS5zbGljZShzdHIubGVuZ3RoIC0gNik7XG4gICAgaWYgKHBhcnNlSW50KHN0ci5zbGljZSgzLCA5KSwgMTApID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGxhc3ROdW1iZXIgPSBwYXJzZUludChzdHIuc2xpY2UoOSwgMTApLCAxMCk7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgIHN1bSArPSBwYXJzZUludChzdHIuc2xpY2UoaSwgaSArIDEpLCAxMCkgKiAoMTAgLSBpKTtcbiAgICB9XG4gICAgc3VtICU9IDExO1xuICAgIHJldHVybiBzdW0gPCAyICYmIGxhc3ROdW1iZXIgPT09IHN1bSB8fCBzdW0gPj0gMiAmJiBsYXN0TnVtYmVyID09PSAxMSAtIHN1bTtcbiAgfSxcbiAgSVQ6IGZ1bmN0aW9uIElUKHN0cikge1xuICAgIGlmIChzdHIubGVuZ3RoICE9PSA5KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN0ciA9PT0gJ0NBMDAwMDBBQScpIHJldHVybiBmYWxzZTsgLy8gaHR0cHM6Ly9pdC53aWtpcGVkaWEub3JnL3dpa2kvQ2FydGFfZCUyN2lkZW50aXQlQzMlQTBfZWxldHRyb25pY2FfaXRhbGlhbmFcbiAgICByZXR1cm4gc3RyLnNlYXJjaCgvQ1tBLVpdXFxkezV9W0EtWl17Mn0vaSkgPiAtMTtcbiAgfSxcbiAgTk86IGZ1bmN0aW9uIE5PKHN0cikge1xuICAgIHZhciBzYW5pdGl6ZWQgPSBzdHIudHJpbSgpO1xuICAgIGlmIChpc05hTihOdW1iZXIoc2FuaXRpemVkKSkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc2FuaXRpemVkLmxlbmd0aCAhPT0gMTEpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc2FuaXRpemVkID09PSAnMDAwMDAwMDAwMDAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBodHRwczovL25vLndpa2lwZWRpYS5vcmcvd2lraS9GJUMzJUI4ZHNlbHNudW1tZXJcbiAgICB2YXIgZiA9IHNhbml0aXplZC5zcGxpdCgnJykubWFwKE51bWJlcik7XG4gICAgdmFyIGsxID0gKDExIC0gKDMgKiBmWzBdICsgNyAqIGZbMV0gKyA2ICogZlsyXSArIDEgKiBmWzNdICsgOCAqIGZbNF0gKyA5ICogZls1XSArIDQgKiBmWzZdICsgNSAqIGZbN10gKyAyICogZls4XSkgJSAxMSkgJSAxMTtcbiAgICB2YXIgazIgPSAoMTEgLSAoNSAqIGZbMF0gKyA0ICogZlsxXSArIDMgKiBmWzJdICsgMiAqIGZbM10gKyA3ICogZls0XSArIDYgKiBmWzVdICsgNSAqIGZbNl0gKyA0ICogZls3XSArIDMgKiBmWzhdICsgMiAqIGsxKSAlIDExKSAlIDExO1xuICAgIGlmIChrMSAhPT0gZls5XSB8fCBrMiAhPT0gZlsxMF0pIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgVEg6IGZ1bmN0aW9uIFRIKHN0cikge1xuICAgIGlmICghc3RyLm1hdGNoKC9eWzEtOF1cXGR7MTJ9JC8pKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyB2YWxpZGF0ZSBjaGVjayBkaWdpdFxuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgc3VtICs9IHBhcnNlSW50KHN0cltpXSwgMTApICogKDEzIC0gaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHJbMTJdID09PSAoKDExIC0gc3VtICUgMTEpICUgMTApLnRvU3RyaW5nKCk7XG4gIH0sXG4gIExLOiBmdW5jdGlvbiBMSyhzdHIpIHtcbiAgICB2YXIgb2xkX25pYyA9IC9eWzEtOV1cXGR7OH1bdnhdJC9pO1xuICAgIHZhciBuZXdfbmljID0gL15bMS05XVxcZHsxMX0kL2k7XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDEwICYmIG9sZF9uaWMudGVzdChzdHIpKSByZXR1cm4gdHJ1ZTtlbHNlIGlmIChzdHIubGVuZ3RoID09PSAxMiAmJiBuZXdfbmljLnRlc3Qoc3RyKSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAnaGUtSUwnOiBmdW5jdGlvbiBoZUlMKHN0cikge1xuICAgIHZhciBETkkgPSAvXlxcZHs5fSQvO1xuXG4gICAgLy8gc2FuaXRpemUgdXNlciBpbnB1dFxuICAgIHZhciBzYW5pdGl6ZWQgPSBzdHIudHJpbSgpO1xuXG4gICAgLy8gdmFsaWRhdGUgdGhlIGRhdGEgc3RydWN0dXJlXG4gICAgaWYgKCFETkkudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpZCA9IHNhbml0aXplZDtcbiAgICB2YXIgc3VtID0gMCxcbiAgICAgIGluY051bTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbmNOdW0gPSBOdW1iZXIoaWRbaV0pICogKGkgJSAyICsgMSk7IC8vIE11bHRpcGx5IG51bWJlciBieSAxIG9yIDJcbiAgICAgIHN1bSArPSBpbmNOdW0gPiA5ID8gaW5jTnVtIC0gOSA6IGluY051bTsgLy8gU3VtIHRoZSBkaWdpdHMgdXAgYW5kIGFkZCB0byB0b3RhbFxuICAgIH1cbiAgICByZXR1cm4gc3VtICUgMTAgPT09IDA7XG4gIH0sXG4gICdhci1MWSc6IGZ1bmN0aW9uIGFyTFkoc3RyKSB7XG4gICAgLy8gTGlieWEgTmF0aW9uYWwgSWRlbnRpdHkgTnVtYmVyIE5JTiBpcyAxMiBkaWdpdHMsIHRoZSBmaXJzdCBkaWdpdCBpcyBlaXRoZXIgMSBvciAyXG4gICAgdmFyIE5JTiA9IC9eKDF8MilcXGR7MTF9JC87XG5cbiAgICAvLyBzYW5pdGl6ZSB1c2VyIGlucHV0XG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCk7XG5cbiAgICAvLyB2YWxpZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVcbiAgICBpZiAoIU5JTi50ZXN0KHNhbml0aXplZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gICdhci1UTic6IGZ1bmN0aW9uIGFyVE4oc3RyKSB7XG4gICAgdmFyIEROSSA9IC9eXFxkezh9JC87XG5cbiAgICAvLyBzYW5pdGl6ZSB1c2VyIGlucHV0XG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCk7XG5cbiAgICAvLyB2YWxpZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVcbiAgICBpZiAoIUROSS50ZXN0KHNhbml0aXplZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gICd6aC1DTic6IGZ1bmN0aW9uIHpoQ04oc3RyKSB7XG4gICAgdmFyIHByb3ZpbmNlc0FuZENpdGllcyA9IFsnMTEnLFxuICAgIC8vIOWMl+S6rFxuICAgICcxMicsXG4gICAgLy8g5aSp5rSlXG4gICAgJzEzJyxcbiAgICAvLyDmsrPljJdcbiAgICAnMTQnLFxuICAgIC8vIOWxseilv1xuICAgICcxNScsXG4gICAgLy8g5YaF6JKZ5Y+kXG4gICAgJzIxJyxcbiAgICAvLyDovr3lroFcbiAgICAnMjInLFxuICAgIC8vIOWQieael1xuICAgICcyMycsXG4gICAgLy8g6buR6b6Z5rGfXG4gICAgJzMxJyxcbiAgICAvLyDkuIrmtbdcbiAgICAnMzInLFxuICAgIC8vIOaxn+iLj1xuICAgICczMycsXG4gICAgLy8g5rWZ5rGfXG4gICAgJzM0JyxcbiAgICAvLyDlronlvr1cbiAgICAnMzUnLFxuICAgIC8vIOemj+W7ulxuICAgICczNicsXG4gICAgLy8g5rGf6KW/XG4gICAgJzM3JyxcbiAgICAvLyDlsbHkuJxcbiAgICAnNDEnLFxuICAgIC8vIOays+WNl1xuICAgICc0MicsXG4gICAgLy8g5rmW5YyXXG4gICAgJzQzJyxcbiAgICAvLyDmuZbljZdcbiAgICAnNDQnLFxuICAgIC8vIOW5v+S4nFxuICAgICc0NScsXG4gICAgLy8g5bm/6KW/XG4gICAgJzQ2JyxcbiAgICAvLyDmtbfljZdcbiAgICAnNTAnLFxuICAgIC8vIOmHjeW6hlxuICAgICc1MScsXG4gICAgLy8g5Zub5bedXG4gICAgJzUyJyxcbiAgICAvLyDotLXlt55cbiAgICAnNTMnLFxuICAgIC8vIOS6keWNl1xuICAgICc1NCcsXG4gICAgLy8g6KW/6JePXG4gICAgJzYxJyxcbiAgICAvLyDpmZXopb9cbiAgICAnNjInLFxuICAgIC8vIOeUmOiCg1xuICAgICc2MycsXG4gICAgLy8g6Z2S5rW3XG4gICAgJzY0JyxcbiAgICAvLyDlroHlpI9cbiAgICAnNjUnLFxuICAgIC8vIOaWsOeWhlxuICAgICc3MScsXG4gICAgLy8g5Y+w5rm+XG4gICAgJzgxJyxcbiAgICAvLyDpppnmuK9cbiAgICAnODInLFxuICAgIC8vIOa+s+mXqFxuICAgICc5MScgLy8g5Zu95aSWXG4gICAgXTtcbiAgICB2YXIgcG93ZXJzID0gWyc3JywgJzknLCAnMTAnLCAnNScsICc4JywgJzQnLCAnMicsICcxJywgJzYnLCAnMycsICc3JywgJzknLCAnMTAnLCAnNScsICc4JywgJzQnLCAnMiddO1xuICAgIHZhciBwYXJpdHlCaXQgPSBbJzEnLCAnMCcsICdYJywgJzknLCAnOCcsICc3JywgJzYnLCAnNScsICc0JywgJzMnLCAnMiddO1xuICAgIHZhciBjaGVja0FkZHJlc3NDb2RlID0gZnVuY3Rpb24gY2hlY2tBZGRyZXNzQ29kZShhZGRyZXNzQ29kZSkge1xuICAgICAgcmV0dXJuIHByb3ZpbmNlc0FuZENpdGllcy5pbmNsdWRlcyhhZGRyZXNzQ29kZSk7XG4gICAgfTtcbiAgICB2YXIgY2hlY2tCaXJ0aERheUNvZGUgPSBmdW5jdGlvbiBjaGVja0JpcnRoRGF5Q29kZShiaXJEYXlDb2RlKSB7XG4gICAgICB2YXIgeXl5eSA9IHBhcnNlSW50KGJpckRheUNvZGUuc3Vic3RyaW5nKDAsIDQpLCAxMCk7XG4gICAgICB2YXIgbW0gPSBwYXJzZUludChiaXJEYXlDb2RlLnN1YnN0cmluZyg0LCA2KSwgMTApO1xuICAgICAgdmFyIGRkID0gcGFyc2VJbnQoYmlyRGF5Q29kZS5zdWJzdHJpbmcoNiksIDEwKTtcbiAgICAgIHZhciB4ZGF0YSA9IG5ldyBEYXRlKHl5eXksIG1tIC0gMSwgZGQpO1xuICAgICAgaWYgKHhkYXRhID4gbmV3IERhdGUoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICB9IGVsc2UgaWYgKHhkYXRhLmdldEZ1bGxZZWFyKCkgPT09IHl5eXkgJiYgeGRhdGEuZ2V0TW9udGgoKSA9PT0gbW0gLSAxICYmIHhkYXRhLmdldERhdGUoKSA9PT0gZGQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICB2YXIgZ2V0UGFyaXR5Qml0ID0gZnVuY3Rpb24gZ2V0UGFyaXR5Qml0KGlkQ2FyZE5vKSB7XG4gICAgICB2YXIgaWQxNyA9IGlkQ2FyZE5vLnN1YnN0cmluZygwLCAxNyk7XG4gICAgICB2YXIgcG93ZXIgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNzsgaSsrKSB7XG4gICAgICAgIHBvd2VyICs9IHBhcnNlSW50KGlkMTcuY2hhckF0KGkpLCAxMCkgKiBwYXJzZUludChwb3dlcnNbaV0sIDEwKTtcbiAgICAgIH1cbiAgICAgIHZhciBtb2QgPSBwb3dlciAlIDExO1xuICAgICAgcmV0dXJuIHBhcml0eUJpdFttb2RdO1xuICAgIH07XG4gICAgdmFyIGNoZWNrUGFyaXR5Qml0ID0gZnVuY3Rpb24gY2hlY2tQYXJpdHlCaXQoaWRDYXJkTm8pIHtcbiAgICAgIHJldHVybiBnZXRQYXJpdHlCaXQoaWRDYXJkTm8pID09PSBpZENhcmROby5jaGFyQXQoMTcpLnRvVXBwZXJDYXNlKCk7XG4gICAgfTtcbiAgICB2YXIgY2hlY2sxNUlkQ2FyZE5vID0gZnVuY3Rpb24gY2hlY2sxNUlkQ2FyZE5vKGlkQ2FyZE5vKSB7XG4gICAgICB2YXIgY2hlY2sgPSAvXlsxLTldXFxkezd9KCgwWzEtOV0pfCgxWzAtMl0pKSgoMFsxLTldKXwoWzEtMl1bMC05XSl8KDNbMC0xXSkpXFxkezN9JC8udGVzdChpZENhcmRObyk7XG4gICAgICBpZiAoIWNoZWNrKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgYWRkcmVzc0NvZGUgPSBpZENhcmROby5zdWJzdHJpbmcoMCwgMik7XG4gICAgICBjaGVjayA9IGNoZWNrQWRkcmVzc0NvZGUoYWRkcmVzc0NvZGUpO1xuICAgICAgaWYgKCFjaGVjaykgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIGJpckRheUNvZGUgPSBcIjE5XCIuY29uY2F0KGlkQ2FyZE5vLnN1YnN0cmluZyg2LCAxMikpO1xuICAgICAgY2hlY2sgPSBjaGVja0JpcnRoRGF5Q29kZShiaXJEYXlDb2RlKTtcbiAgICAgIGlmICghY2hlY2spIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgdmFyIGNoZWNrMThJZENhcmRObyA9IGZ1bmN0aW9uIGNoZWNrMThJZENhcmRObyhpZENhcmRObykge1xuICAgICAgdmFyIGNoZWNrID0gL15bMS05XVxcZHs1fVsxLTldXFxkezN9KCgwWzEtOV0pfCgxWzAtMl0pKSgoMFsxLTldKXwoWzEtMl1bMC05XSl8KDNbMC0xXSkpXFxkezN9KFxcZHx4fFgpJC8udGVzdChpZENhcmRObyk7XG4gICAgICBpZiAoIWNoZWNrKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgYWRkcmVzc0NvZGUgPSBpZENhcmROby5zdWJzdHJpbmcoMCwgMik7XG4gICAgICBjaGVjayA9IGNoZWNrQWRkcmVzc0NvZGUoYWRkcmVzc0NvZGUpO1xuICAgICAgaWYgKCFjaGVjaykgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIGJpckRheUNvZGUgPSBpZENhcmROby5zdWJzdHJpbmcoNiwgMTQpO1xuICAgICAgY2hlY2sgPSBjaGVja0JpcnRoRGF5Q29kZShiaXJEYXlDb2RlKTtcbiAgICAgIGlmICghY2hlY2spIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBjaGVja1Bhcml0eUJpdChpZENhcmRObyk7XG4gICAgfTtcbiAgICB2YXIgY2hlY2tJZENhcmRObyA9IGZ1bmN0aW9uIGNoZWNrSWRDYXJkTm8oaWRDYXJkTm8pIHtcbiAgICAgIHZhciBjaGVjayA9IC9eXFxkezE1fXwoXFxkezE3fShcXGR8eHxYKSkkLy50ZXN0KGlkQ2FyZE5vKTtcbiAgICAgIGlmICghY2hlY2spIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChpZENhcmROby5sZW5ndGggPT09IDE1KSB7XG4gICAgICAgIHJldHVybiBjaGVjazE1SWRDYXJkTm8oaWRDYXJkTm8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoZWNrMThJZENhcmRObyhpZENhcmRObyk7XG4gICAgfTtcbiAgICByZXR1cm4gY2hlY2tJZENhcmRObyhzdHIpO1xuICB9LFxuICAnemgtSEsnOiBmdW5jdGlvbiB6aEhLKHN0cikge1xuICAgIC8vIHNhbml0aXplIHVzZXIgaW5wdXRcbiAgICBzdHIgPSBzdHIudHJpbSgpO1xuXG4gICAgLy8gSEtJRCBudW1iZXIgc3RhcnRzIHdpdGggMSBvciAyIGxldHRlcnMsIGZvbGxvd2VkIGJ5IDYgZGlnaXRzLFxuICAgIC8vIHRoZW4gYSBjaGVja3N1bSBjb250YWluZWQgaW4gc3F1YXJlIC8gcm91bmQgYnJhY2tldHMgb3Igbm90aGluZ1xuICAgIHZhciByZWdleEhLSUQgPSAvXltBLVpdezEsMn1bMC05XXs2fSgoXFwoWzAtOUFdXFwpKXwoXFxbWzAtOUFdXFxdKXwoWzAtOUFdKSkkLztcbiAgICB2YXIgcmVnZXhJc0RpZ2l0ID0gL15bMC05XSQvO1xuXG4gICAgLy8gY29udmVydCB0aGUgdXNlciBpbnB1dCB0byBhbGwgdXBwZXJjYXNlIGFuZCBhcHBseSByZWdleFxuICAgIHN0ciA9IHN0ci50b1VwcGVyQ2FzZSgpO1xuICAgIGlmICghcmVnZXhIS0lELnRlc3Qoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXFt8XFxdfFxcKHxcXCkvZywgJycpO1xuICAgIGlmIChzdHIubGVuZ3RoID09PSA4KSBzdHIgPSBcIjNcIi5jb25jYXQoc3RyKTtcbiAgICB2YXIgY2hlY2tTdW1WYWwgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IDc7IGkrKykge1xuICAgICAgdmFyIGNvbnZlcnRlZENoYXIgPSB2b2lkIDA7XG4gICAgICBpZiAoIXJlZ2V4SXNEaWdpdC50ZXN0KHN0cltpXSkpIGNvbnZlcnRlZENoYXIgPSAoc3RyW2ldLmNoYXJDb2RlQXQoMCkgLSA1NSkgJSAxMTtlbHNlIGNvbnZlcnRlZENoYXIgPSBzdHJbaV07XG4gICAgICBjaGVja1N1bVZhbCArPSBjb252ZXJ0ZWRDaGFyICogKDkgLSBpKTtcbiAgICB9XG4gICAgY2hlY2tTdW1WYWwgJT0gMTE7XG4gICAgdmFyIGNoZWNrU3VtQ29udmVydGVkO1xuICAgIGlmIChjaGVja1N1bVZhbCA9PT0gMCkgY2hlY2tTdW1Db252ZXJ0ZWQgPSAnMCc7ZWxzZSBpZiAoY2hlY2tTdW1WYWwgPT09IDEpIGNoZWNrU3VtQ29udmVydGVkID0gJ0EnO2Vsc2UgY2hlY2tTdW1Db252ZXJ0ZWQgPSBTdHJpbmcoMTEgLSBjaGVja1N1bVZhbCk7XG4gICAgaWYgKGNoZWNrU3VtQ29udmVydGVkID09PSBzdHJbc3RyLmxlbmd0aCAtIDFdKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gICd6aC1UVyc6IGZ1bmN0aW9uIHpoVFcoc3RyKSB7XG4gICAgdmFyIEFMUEhBQkVUX0NPREVTID0ge1xuICAgICAgQTogMTAsXG4gICAgICBCOiAxMSxcbiAgICAgIEM6IDEyLFxuICAgICAgRDogMTMsXG4gICAgICBFOiAxNCxcbiAgICAgIEY6IDE1LFxuICAgICAgRzogMTYsXG4gICAgICBIOiAxNyxcbiAgICAgIEk6IDM0LFxuICAgICAgSjogMTgsXG4gICAgICBLOiAxOSxcbiAgICAgIEw6IDIwLFxuICAgICAgTTogMjEsXG4gICAgICBOOiAyMixcbiAgICAgIE86IDM1LFxuICAgICAgUDogMjMsXG4gICAgICBROiAyNCxcbiAgICAgIFI6IDI1LFxuICAgICAgUzogMjYsXG4gICAgICBUOiAyNyxcbiAgICAgIFU6IDI4LFxuICAgICAgVjogMjksXG4gICAgICBXOiAzMixcbiAgICAgIFg6IDMwLFxuICAgICAgWTogMzEsXG4gICAgICBaOiAzM1xuICAgIH07XG4gICAgdmFyIHNhbml0aXplZCA9IHN0ci50cmltKCkudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoIS9eW0EtWl1bMC05XXs5fSQvLnRlc3Qoc2FuaXRpemVkKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHNhbml0aXplZCkucmVkdWNlKGZ1bmN0aW9uIChzdW0sIG51bWJlciwgaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB2YXIgY29kZSA9IEFMUEhBQkVUX0NPREVTW251bWJlcl07XG4gICAgICAgIHJldHVybiBjb2RlICUgMTAgKiA5ICsgTWF0aC5mbG9vcihjb2RlIC8gMTApO1xuICAgICAgfVxuICAgICAgaWYgKGluZGV4ID09PSA5KSB7XG4gICAgICAgIHJldHVybiAoMTAgLSBzdW0gJSAxMCAtIE51bWJlcihudW1iZXIpKSAlIDEwID09PSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1bSArIE51bWJlcihudW1iZXIpICogKDkgLSBpbmRleCk7XG4gICAgfSwgMCk7XG4gIH1cbn07XG5mdW5jdGlvbiBpc0lkZW50aXR5Q2FyZChzdHIsIGxvY2FsZSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBpZiAobG9jYWxlIGluIHZhbGlkYXRvcnMpIHtcbiAgICByZXR1cm4gdmFsaWRhdG9yc1tsb2NhbGVdKHN0cik7XG4gIH0gZWxzZSBpZiAobG9jYWxlID09PSAnYW55Jykge1xuICAgIGZvciAodmFyIGtleSBpbiB2YWxpZGF0b3JzKSB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ290d2FybG9zdC9pc3RhbmJ1bC9ibG9iL21hc3Rlci9pZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS5tZCNpZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS1wdXJwb3Nlc1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICAgIGlmICh2YWxpZGF0b3JzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHZhbGlkYXRvciA9IHZhbGlkYXRvcnNba2V5XTtcbiAgICAgICAgaWYgKHZhbGlkYXRvcihzdHIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9jYWxlICdcIi5jb25jYXQobG9jYWxlLCBcIidcIikpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNJbjtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX3RvU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3RvU3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBpc0luKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgaTtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvcHRpb25zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAoaSBpbiBvcHRpb25zKSB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ290d2FybG9zdC9pc3RhbmJ1bC9ibG9iL21hc3Rlci9pZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS5tZCNpZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS1wdXJwb3Nlc1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGkpKSB7XG4gICAgICAgIGFycmF5W2ldID0gKDAsIF90b1N0cmluZy5kZWZhdWx0KShvcHRpb25zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5LmluZGV4T2Yoc3RyKSA+PSAwO1xuICB9IGVsc2UgaWYgKF90eXBlb2Yob3B0aW9ucykgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoc3RyKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5pbmRleE9mKHN0cikgPj0gMDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0ludDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIGludCA9IC9eKD86Wy0rXT8oPzowfFsxLTldWzAtOV0qKSkkLztcbnZhciBpbnRMZWFkaW5nWmVyb2VzID0gL15bLStdP1swLTldKyQvO1xuZnVuY3Rpb24gaXNJbnQoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIEdldCB0aGUgcmVnZXggdG8gdXNlIGZvciB0ZXN0aW5nLCBiYXNlZCBvbiB3aGV0aGVyXG4gIC8vIGxlYWRpbmcgemVyb2VzIGFyZSBhbGxvd2VkIG9yIG5vdC5cbiAgdmFyIHJlZ2V4ID0gb3B0aW9ucy5hbGxvd19sZWFkaW5nX3plcm9lcyA9PT0gZmFsc2UgPyBpbnQgOiBpbnRMZWFkaW5nWmVyb2VzO1xuXG4gIC8vIENoZWNrIG1pbi9tYXgvbHQvZ3RcbiAgdmFyIG1pbkNoZWNrUGFzc2VkID0gIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21pbicpIHx8IHN0ciA+PSBvcHRpb25zLm1pbjtcbiAgdmFyIG1heENoZWNrUGFzc2VkID0gIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21heCcpIHx8IHN0ciA8PSBvcHRpb25zLm1heDtcbiAgdmFyIGx0Q2hlY2tQYXNzZWQgPSAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbHQnKSB8fCBzdHIgPCBvcHRpb25zLmx0O1xuICB2YXIgZ3RDaGVja1Bhc3NlZCA9ICFvcHRpb25zLmhhc093blByb3BlcnR5KCdndCcpIHx8IHN0ciA+IG9wdGlvbnMuZ3Q7XG4gIHJldHVybiByZWdleC50ZXN0KHN0cikgJiYgbWluQ2hlY2tQYXNzZWQgJiYgbWF4Q2hlY2tQYXNzZWQgJiYgbHRDaGVja1Bhc3NlZCAmJiBndENoZWNrUGFzc2VkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNKU09OO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWVyZ2VcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbnZhciBkZWZhdWx0X2pzb25fb3B0aW9ucyA9IHtcbiAgYWxsb3dfcHJpbWl0aXZlczogZmFsc2Vcbn07XG5mdW5jdGlvbiBpc0pTT04oc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHRyeSB7XG4gICAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdF9qc29uX29wdGlvbnMpO1xuICAgIHZhciBwcmltaXRpdmVzID0gW107XG4gICAgaWYgKG9wdGlvbnMuYWxsb3dfcHJpbWl0aXZlcykge1xuICAgICAgcHJpbWl0aXZlcyA9IFtudWxsLCBmYWxzZSwgdHJ1ZV07XG4gICAgfVxuICAgIHZhciBvYmogPSBKU09OLnBhcnNlKHN0cik7XG4gICAgcmV0dXJuIHByaW1pdGl2ZXMuaW5jbHVkZXMob2JqKSB8fCAhIW9iaiAmJiBfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnO1xuICB9IGNhdGNoIChlKSB7LyogaWdub3JlICovfVxuICByZXR1cm4gZmFsc2U7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0pXVDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2lzQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNCYXNlNjRcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIGlzSldUKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICB2YXIgZG90U3BsaXQgPSBzdHIuc3BsaXQoJy4nKTtcbiAgdmFyIGxlbiA9IGRvdFNwbGl0Lmxlbmd0aDtcbiAgaWYgKGxlbiAhPT0gMykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZG90U3BsaXQucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnJFbGVtKSB7XG4gICAgcmV0dXJuIGFjYyAmJiAoMCwgX2lzQmFzZS5kZWZhdWx0KShjdXJyRWxlbSwge1xuICAgICAgdXJsU2FmZTogdHJ1ZVxuICAgIH0pO1xuICB9LCB0cnVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTGF0TG9uZztcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgbGF0ID0gL15cXCg/WystXT8oOTAoXFwuMCspP3xbMS04XT9cXGQoXFwuXFxkKyk/KSQvO1xudmFyIGxvbmcgPSAvXlxccz9bKy1dPygxODAoXFwuMCspP3wxWzAtN11cXGQoXFwuXFxkKyk/fFxcZHsxLDJ9KFxcLlxcZCspPylcXCk/JC87XG52YXIgbGF0RE1TID0gL14oKFsxLThdP1xcZClcXEQrKFsxLTVdP1xcZHw2MClcXEQrKFsxLTVdP1xcZHw2MCkoXFwuXFxkKyk/fDkwXFxEKzBcXEQrMClcXEQrW05TbnNdPyQvaTtcbnZhciBsb25nRE1TID0gL15cXHMqKFsxLTddP1xcZHsxLDJ9XFxEKyhbMS01XT9cXGR8NjApXFxEKyhbMS01XT9cXGR8NjApKFxcLlxcZCspP3wxODBcXEQrMFxcRCswKVxcRCtbRVdld10/JC9pO1xudmFyIGRlZmF1bHRMYXRMb25nT3B0aW9ucyA9IHtcbiAgY2hlY2tETVM6IGZhbHNlXG59O1xuZnVuY3Rpb24gaXNMYXRMb25nKHN0ciwgb3B0aW9ucykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0TGF0TG9uZ09wdGlvbnMpO1xuICBpZiAoIXN0ci5pbmNsdWRlcygnLCcpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwYWlyID0gc3RyLnNwbGl0KCcsJyk7XG4gIGlmIChwYWlyWzBdLnN0YXJ0c1dpdGgoJygnKSAmJiAhcGFpclsxXS5lbmRzV2l0aCgnKScpIHx8IHBhaXJbMV0uZW5kc1dpdGgoJyknKSAmJiAhcGFpclswXS5zdGFydHNXaXRoKCcoJykpIHJldHVybiBmYWxzZTtcbiAgaWYgKG9wdGlvbnMuY2hlY2tETVMpIHtcbiAgICByZXR1cm4gbGF0RE1TLnRlc3QocGFpclswXSkgJiYgbG9uZ0RNUy50ZXN0KHBhaXJbMV0pO1xuICB9XG4gIHJldHVybiBsYXQudGVzdChwYWlyWzBdKSAmJiBsb25nLnRlc3QocGFpclsxXSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0xlbmd0aDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG5mdW5jdGlvbiBpc0xlbmd0aChzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIG1pbjtcbiAgdmFyIG1heDtcbiAgaWYgKF90eXBlb2Yob3B0aW9ucykgPT09ICdvYmplY3QnKSB7XG4gICAgbWluID0gb3B0aW9ucy5taW4gfHwgMDtcbiAgICBtYXggPSBvcHRpb25zLm1heDtcbiAgfSBlbHNlIHtcbiAgICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eTogaXNMZW5ndGgoc3RyLCBtaW4gWywgbWF4XSlcbiAgICBtaW4gPSBhcmd1bWVudHNbMV0gfHwgMDtcbiAgICBtYXggPSBhcmd1bWVudHNbMl07XG4gIH1cbiAgdmFyIHByZXNlbnRhdGlvblNlcXVlbmNlcyA9IHN0ci5tYXRjaCgvKFxcdUZFMEZ8XFx1RkUwRSkvZykgfHwgW107XG4gIHZhciBzdXJyb2dhdGVQYWlycyA9IHN0ci5tYXRjaCgvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nKSB8fCBbXTtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGggLSBwcmVzZW50YXRpb25TZXF1ZW5jZXMubGVuZ3RoIC0gc3Vycm9nYXRlUGFpcnMubGVuZ3RoO1xuICByZXR1cm4gbGVuID49IG1pbiAmJiAodHlwZW9mIG1heCA9PT0gJ3VuZGVmaW5lZCcgfHwgbGVuIDw9IG1heCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0xpY2Vuc2VQbGF0ZTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIHZhbGlkYXRvcnMgPSB7XG4gICdjcy1DWic6IGZ1bmN0aW9uIGNzQ1ooc3RyKSB7XG4gICAgcmV0dXJuIC9eKChbQUJDREVGSElKS0xNTlBSU1RVVlhZWl18WzAtOV0pLT8pezUsOH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gICdkZS1ERSc6IGZ1bmN0aW9uIGRlREUoc3RyKSB7XG4gICAgcmV0dXJuIC9eKChBfEFBfEFCfEFDfEFFfEFIfEFLfEFNfEFOfEHDlnxBUHxBU3xBVHxBVXxBV3xBWnxCfEJBfEJCfEJDfEJFfEJGfEJIfEJJfEJLfEJMfEJNfEJOfEJPfELDlnxCU3xCVHxCWnxDfENBfENCfENFfENPfENSfENXfER8REF8RER8REV8REh8REl8REx8RE18RE58RE98RFV8RFd8RFp8RXxFQXxFQnxFRHxFRXxFRnxFR3xFSHxFSXxFTHxFTXxFTnxFUnxFU3xFVXxFV3xGfEZCfEZEfEZGfEZHfEZJfEZMfEZOfEZPfEZSfEZTfEZUfEbDnHxGV3xGWnxHfEdBfEdDfEdEfEdFfEdGfEdHfEdJfEdLfEdMfEdNfEdOfEfDlnxHUHxHUnxHU3xHVHxHw5x8R1Z8R1d8R1p8SHxIQXxIQnxIQ3xIRHxIRXxIRnxIR3xISHxISXxIS3xITHxITXxITnxIT3xIUHxIUnxIU3xIVXxIVnxIWHxIWXxIWnxJS3xJTHxJTnxJWnxKfEpFfEpMfEt8S0F8S0J8S0N8S0V8S0Z8S0d8S0h8S0l8S0t8S0x8S018S058S098S1J8S1N8S1R8S1V8S1d8S1l8THxMQXxMQnxMQ3xMRHxMRnxMR3xMSHxMSXxMTHxMTXxMTnxMw5Z8TFB8TFJ8TFV8TXxNQXxNQnxNQ3xNRHxNRXxNR3xNSHxNSXxNS3xNTHxNTXxNTnxNT3xNUXxNUnxNU3xNw5x8TVd8TVl8TVp8TnxOQnxORHxORXxORnxOSHxOSXxOS3xOTXxOw5Z8TlB8TlJ8TlR8TlV8Tld8Tll8Tlp8T0F8T0J8T0N8T0R8T0V8T0Z8T0d8T0h8T0t8T0x8T1B8T1N8T1p8UHxQQXxQQnxQRXxQRnxQSXxQTHxQTXxQTnxQUnxQU3xQV3xQWnxSfFJBfFJDfFJEfFJFfFJHfFJIfFJJfFJMfFJNfFJOfFJPfFJQfFJTfFJUfFJVfFJWfFJXfFJafFN8U0J8U0N8U0V8U0d8U0l8U0t8U0x8U018U058U098U1B8U1J8U1R8U1V8U1d8U1l8U1p8VEV8VEZ8VEd8VE98VFB8VFJ8VFN8VFR8VMOcfMOcQnxVRXxVSHxVTHxVTXxVTnxWfFZCfFZHfFZLfFZSfFZTfFd8V0F8V0J8V0V8V0Z8V0l8V0t8V0x8V018V058V098V1J8V1N8V1R8V8OcfFdXfFdafFp8WkV8Wkl8WlB8WlJ8Wld8WlopWy0gXT9bQS1aXXsxLDJ9Wy0gXT9cXGR7MSw0fXwoQUJHfEFCSXxBSUJ8QUlDfEFMRnxBTFp8QU5BfEFOR3xBTkt8QVBEfEFSTnxBUlR8QVNMfEFTWnxBVVJ8QVpFfEJBRHxCQVJ8QkJHfEJDSHxCRUR8QkVSfEJHRHxCR0x8QklEfEJJTnxCSVJ8QklUfEJJV3xCS1N8QkxCfEJMS3xCTkF8Qk9HfEJPSHxCT1J8Qk9UfEJSQXxCUkJ8QlJHfEJSS3xCUkx8QlJWfEJTQnxCU0t8QlRGfELDnER8QlVMfELDnFJ8QsOcU3xCw5xafENBU3xDSEF8Q0xQfENMWnxDT0N8Q09FfENVWHxEQUh8REFOfERBVXxEQlJ8REVHfERFTHxER0Z8RElMfERJTnxESVp8REtCfERMR3xET058RFVEfETDnFd8RUJFfEVCTnxFQlN8RUNLfEVJQ3xFSUx8RUlOfEVJU3xFTUR8RU1TfEVSQnxFUkh8RVJLfEVSWnxFU0J8RVNXfEZEQnxGRFN8RkVVfEZGQnxGS0J8RkzDlnxGT1J8RlJHfEZSSXxGUld8RlRMfEbDnFN8R0FOfEdBUHxHREJ8R0VMfEdFT3xHRVJ8R0hBfEdIQ3xHTEF8R01OfEdOVHxHT0F8R09IfEdSQXxHUkh8R1JJfEdSTXxHUlp8R1RIfEdVQnxHVU58R1ZNfEhBQnxIQUx8SEFNfEhBU3xIQk58SEJTfEhDSHxIREh8SERMfEhFQnxIRUZ8SEVJfEhFUnxIRVR8SEdOfEhHV3xISE18SElHfEhJUHxITcOcfEhPR3xIT0h8SE9MfEhPTXxIT1J8SMOWU3xIT1R8SFJPfEhTS3xIU1R8SFZMfEhXSXxJR0J8SUxMfErDnEx8S0VIfEtFTHxLRU18S0lCfEtMRXxLTFp8S8OWTnxLw5ZUfEvDllp8S1JVfEvDnE58S1VTfEtZRnxMQU58TEFVfExCU3xMQlp8TERLfExEU3xMRU98TEVSfExFVnxMSUJ8TElGfExJUHxMw5ZCfExPU3xMUk98TFNafEzDnE58TFVQfExXTHxNQUJ8TUFJfE1BS3xNQUx8TUVEfE1FR3xNRUl8TUVLfE1FTHxNRVJ8TUVUfE1HSHxNR058TUhMfE1JTHxNS0t8TU9EfE1PTHxNT058TU9TfE1TRXxNU0h8TVNQfE1TVHxNVEt8TVRMfE3DnEJ8TcOcUnxNWUt8TVpHfE5BQnxOQUl8TkFVfE5ESHxORUF8TkVCfE5FQ3xORU58TkVTfE5FV3xOTUJ8Tk1TfE5PSHxOT0x8Tk9NfE5PUnxOVlB8TldNfE9BTHxPQkJ8T0JHfE9DSHxPSEF8w5ZIUnxPSFZ8T0hafE9QUnxPU0x8T1ZJfE9WTHxPVlB8UEFGfFBBTnxQQVJ8UENIfFBFR3xQSVJ8UEzDlnxQUsOcfFFGVHxRTEJ8UkRHfFJFR3xSRUh8UkVJfFJJRHxSSUV8Uk9EfFJPRnxST0t8Uk9MfFJPU3xST1R8Uk9XfFJTTHxSw5xEfFLDnEd8U0FCfFNBRHxTQU58U0FXfFNCR3xTQkt8U0NafFNESHxTREx8U0RUfFNFQnxTRUV8U0VGfFNFTHxTRkJ8U0ZUfFNHSHxTSEF8U0hHfFNIS3xTSEx8U0lHfFNJTXxTTEV8U0xGfFNMS3xTTE58U0xTfFNMw5x8U0xafFNNw5x8U09CfFNPR3xTT0t8U8OWTXxTT058U1BCfFNQTnxTUkJ8U1JPfFNUQXxTVEJ8U1REfFNURXxTVEx8U1VMfFPDnFd8U1dBfFNaQnxUQkJ8VERPfFRFVHxUSVJ8VMOWTHxUVVR8VUVNfFVFUnxVRkZ8VVNJfFZBSXxWRUN8VkVSfFZJQnxWSUV8VklUfFZPSHxXQUZ8V0FLfFdBTnxXQVJ8V0FUfFdCU3xXREF8V0VMfFdFTnxXRVJ8V0VTfFdIVnxXSUx8V0lTfFdJVHxXSVp8V0xHfFdNU3xXTkR8V09CfFdPSHxXT0x8V09SfFdPU3xXUk58V1NGfFdTVHxXU1d8V1RMfFdUTXxXVUd8V8OcTXxXVU58V1VSfFdaTHxaRUx8WklHKVstIF0/KChbQS1aXVstIF0/XFxkezEsNH0pfChbQS1aXXsyfVstIF0/XFxkezEsM30pKSlbLSBdPyhFfEgpPyQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgJ2RlLUxJJzogZnVuY3Rpb24gZGVMSShzdHIpIHtcbiAgICByZXR1cm4gL15GTFstIF0/XFxkezEsNX1bVVpdPyQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgJ2VuLUlOJzogZnVuY3Rpb24gZW5JTihzdHIpIHtcbiAgICByZXR1cm4gL15bQS1aXXsyfVsgLV0/WzAtOV17MSwyfSg/OlsgLV0/W0EtWl0pKD86WyAtXT9bQS1aXSopP1sgLV0/WzAtOV17NH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gICdlcy1BUic6IGZ1bmN0aW9uIGVzQVIoc3RyKSB7XG4gICAgcmV0dXJuIC9eKChbQS1aXXsyfSA/WzAtOV17M30gP1tBLVpdezJ9KXwoW0EtWl17M30gP1swLTldezN9KSkkLy50ZXN0KHN0cik7XG4gIH0sXG4gICdmaS1GSSc6IGZ1bmN0aW9uIGZpRkkoc3RyKSB7XG4gICAgcmV0dXJuIC9eKD89Lns0LDd9KSgoW0EtWl17MSwzfXxbMC05XXsxLDN9KVtcXHMtXT8oW0EtWl17MSwzfXxbMC05XXsxLDV9KSkkLy50ZXN0KHN0cik7XG4gIH0sXG4gICdodS1IVSc6IGZ1bmN0aW9uIGh1SFUoc3RyKSB7XG4gICAgcmV0dXJuIC9eKCgoKD8hQUFBKSgoW0EtTlBSU1RWWldYWV17MX0pKFtBLVBSLVpdezF9KShbQS1ISi1OUFItWl0pKXwoQVtBQkNdSSl8QVtBQkNdT3xBW0EtV11RfEJQSXxCUE98VUNPfFVET3xYQU8pLSg/ITAwMClcXGR7M30pfChNXFxkezZ9KXwoKENLfERUfENEfEhDfEhbQUJFRklLTE1OUFJTVFZYXXxNQXxPVHxSW0EtWl0pIFxcZHsyfS1cXGR7Mn0pfChDRCBcXGR7M30tXFxkezN9KXwoQy0oQ3xYKSBcXGR7NH0pfChYLShBfEJ8QykgXFxkezR9KXwoKFtFUFZaXS1cXGR7NX0pKXwoUyBBW0EtWl17Mn0gXFxkezJ9KXwoU1AgXFxkezJ9LVxcZHsyfSkpJC8udGVzdChzdHIpO1xuICB9LFxuICAncHQtQlInOiBmdW5jdGlvbiBwdEJSKHN0cikge1xuICAgIHJldHVybiAvXltBLVpdezN9WyAtXT9bMC05XVtBLVpdWzAtOV17Mn18W0EtWl17M31bIC1dP1swLTldezR9JC8udGVzdChzdHIpO1xuICB9LFxuICAncHQtUFQnOiBmdW5jdGlvbiBwdFBUKHN0cikge1xuICAgIHJldHVybiAvXihbQS1aXXsyfXxbMC05XXsyfSlbIC3Ct10/KFtBLVpdezJ9fFswLTldezJ9KVsgLcK3XT8oW0EtWl17Mn18WzAtOV17Mn0pJC8udGVzdChzdHIpO1xuICB9LFxuICAnc3EtQUwnOiBmdW5jdGlvbiBzcUFMKHN0cikge1xuICAgIHJldHVybiAvXltBLVpdezJ9Wy0gXT8oKFxcZHszfVstIF0/KChbQS1aXXsyfSl8VCkpfChSWy0gXT9cXGR7M30pKSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgJ3N2LVNFJzogZnVuY3Rpb24gc3ZTRShzdHIpIHtcbiAgICByZXR1cm4gL15bQS1ISi1QUi1VVy1aXXszfSA/W1xcZF17Mn1bQS1ISi1QUi1VVy1aMS05XSR8KF5bQS1aw4XDhMOWIF17Miw3fSQpLy50ZXN0KHN0ci50cmltKCkpO1xuICB9LFxuICAnZW4tUEsnOiBmdW5jdGlvbiBlblBLKHN0cikge1xuICAgIHJldHVybiAvKF5bQS1aXXsyfSgoXFxzfC0pezAsMX0pWzAtOV17Myw0fSgoXFxzfC0pWzAtOV17Mn0pezAsMX0kKXwoXltBLVpdezN9KChcXHN8LSl7MCwxfSlbMC05XXszLDR9KChcXHN8LSlbMC05XXsyfSl7MCwxfSQpfCheW0EtWl17NH0oKFxcc3wtKXswLDF9KVswLTldezMsNH0oKFxcc3wtKVswLTldezJ9KXswLDF9JCl8KF5bQS1aXSgoXFxzfC0pezAsMX0pWzAtOV17NH0oKFxcc3wtKVswLTldezJ9KXswLDF9JCkvLnRlc3Qoc3RyLnRyaW0oKSk7XG4gIH1cbn07XG5mdW5jdGlvbiBpc0xpY2Vuc2VQbGF0ZShzdHIsIGxvY2FsZSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBpZiAobG9jYWxlIGluIHZhbGlkYXRvcnMpIHtcbiAgICByZXR1cm4gdmFsaWRhdG9yc1tsb2NhbGVdKHN0cik7XG4gIH0gZWxzZSBpZiAobG9jYWxlID09PSAnYW55Jykge1xuICAgIGZvciAodmFyIGtleSBpbiB2YWxpZGF0b3JzKSB7XG4gICAgICAvKiBlc2xpbnQgZ3VhcmQtZm9yLWluOiAwICovXG4gICAgICB2YXIgdmFsaWRhdG9yID0gdmFsaWRhdG9yc1trZXldO1xuICAgICAgaWYgKHZhbGlkYXRvcihzdHIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0xvY2FsZTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLypcbiAgPSAzQUxQSEEgICAgICAgICAgICAgIDsgc2VsZWN0ZWQgSVNPIDYzOSBjb2Rlc1xuICAgICoyKFwiLVwiIDNBTFBIQSkgICAgICA7IHBlcm1hbmVudGx5IHJlc2VydmVkXG4gKi9cbnZhciBleHRsYW5nID0gJyhbQS1aYS16XXszfSgtW0EtWmEtel17M30pezAsMn0pJztcblxuLypcbiAgPSAyKjNBTFBIQSAgICAgICAgICAgIDsgc2hvcnRlc3QgSVNPIDYzOSBjb2RlXG4gICAgW1wiLVwiIGV4dGxhbmddICAgICAgIDsgc29tZXRpbWVzIGZvbGxvd2VkIGJ5XG4gICAgICAgICAgICAgICAgICAgICAgICA7IGV4dGVuZGVkIGxhbmd1YWdlIHN1YnRhZ3NcbiAgLyA0QUxQSEEgICAgICAgICAgICAgIDsgb3IgcmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2VcbiAgLyA1KjhBTFBIQSAgICAgICAgICAgIDsgb3IgcmVnaXN0ZXJlZCBsYW5ndWFnZSBzdWJ0YWdcbiAqL1xudmFyIGxhbmd1YWdlID0gXCIoKFthLXpBLVpdezIsM30oLVwiLmNvbmNhdChleHRsYW5nLCBcIik/KXwoW2EtekEtWl17NSw4fSkpXCIpO1xuXG4vKlxuICA9IDRBTFBIQSAgICAgICAgICAgICAgOyBJU08gMTU5MjQgY29kZVxuICovXG52YXIgc2NyaXB0ID0gJyhbQS1aYS16XXs0fSknO1xuXG4vKlxuICA9IDJBTFBIQSAgICAgICAgICAgICAgOyBJU08gMzE2Ni0xIGNvZGVcbiAgLyAzRElHSVQgICAgICAgICAgICAgIDsgVU4gTS40OSBjb2RlXG4gKi9cbnZhciByZWdpb24gPSAnKFtBLVphLXpdezJ9fFxcXFxkezN9KSc7XG5cbi8qXG4gID0gNSo4YWxwaGFudW0gICAgICAgICA7IHJlZ2lzdGVyZWQgdmFyaWFudHNcbiAgLyAoRElHSVQgM2FscGhhbnVtKVxuICovXG52YXIgdmFyaWFudCA9ICcoW0EtWmEtejAtOV17NSw4fXwoXFxcXGRbQS1aLWEtejAtOV17M30pKSc7XG5cbi8qXG4gID0gRElHSVQgICAgICAgICAgICAgICA7IDAgLSA5XG4gIC8gJXg0MS01NyAgICAgICAgICAgICA7IEEgLSBXXG4gIC8gJXg1OS01QSAgICAgICAgICAgICA7IFkgLSBaXG4gIC8gJXg2MS03NyAgICAgICAgICAgICA7IGEgLSB3XG4gIC8gJXg3OS03QSAgICAgICAgICAgICA7IHkgLSB6XG4gKi9cbnZhciBzaW5nbGV0b24gPSAnKFxcXFxkfFtBLVddfFtZLVpdfFthLXddfFt5LXpdKSc7XG5cbi8qXG4gID0gc2luZ2xldG9uIDEqKFwiLVwiICgyKjhhbHBoYW51bSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA7IFNpbmdsZSBhbHBoYW51bWVyaWNzXG4gICAgICAgICAgICAgICAgICAgICAgICA7IFwieFwiIHJlc2VydmVkIGZvciBwcml2YXRlIHVzZVxuICovXG52YXIgZXh0ZW5zaW9uID0gXCIoXCIuY29uY2F0KHNpbmdsZXRvbiwgXCIoLVtBLVphLXowLTldezIsOH0pKylcIik7XG5cbi8qXG4gID0gXCJ4XCIgMSooXCItXCIgKDEqOGFscGhhbnVtKSlcbiAqL1xudmFyIHByaXZhdGV1c2UgPSAnKHgoLVtBLVphLXowLTldezEsOH0pKyknO1xuXG4vLyBpcnJlZ3VsYXIgdGFncyBkbyBub3QgbWF0Y2ggdGhlICdsYW5ndGFnJyBwcm9kdWN0aW9uIGFuZCB3b3VsZCBub3Rcbi8vIG90aGVyd2lzZSBiZSBjb25zaWRlcmVkICd3ZWxsLWZvcm1lZCcuIFRoZXNlIHRhZ3MgYXJlIGFsbCB2YWxpZCwgYnV0XG4vLyBtb3N0IGFyZSBkZXByZWNhdGVkIGluIGZhdm9yIG9mIG1vcmUgbW9kZXJuIHN1YnRhZ3Mgb3Igc3VidGFnIGNvbWJpbmF0aW9uXG5cbnZhciBpcnJlZ3VsYXIgPSAnKChlbi1HQi1vZWQpfChpLWFtaSl8KGktYm5uKXwoaS1kZWZhdWx0KXwoaS1lbm9jaGlhbil8JyArICcoaS1oYWspfChpLWtsaW5nb24pfChpLWx1eCl8KGktbWluZ28pfChpLW5hdmFqbyl8KGktcHduKXwoaS10YW8pfCcgKyAnKGktdGF5KXwoaS10c3UpfChzZ24tQkUtRlIpfChzZ24tQkUtTkwpfChzZ24tQ0gtREUpKSc7XG5cbi8vIHJlZ3VsYXIgdGFncyBtYXRjaCB0aGUgJ2xhbmd0YWcnIHByb2R1Y3Rpb24sIGJ1dCB0aGVpciBzdWJ0YWdzIGFyZSBub3Rcbi8vIGV4dGVuZGVkIGxhbmd1YWdlIG9yIHZhcmlhbnQgc3VidGFnczogdGhlaXIgbWVhbmluZyBpcyBkZWZpbmVkIGJ5XG4vLyB0aGVpciByZWdpc3RyYXRpb24gYW5kIGFsbCBvZiB0aGVzZSBhcmUgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBhIG1vcmVcbi8vIG1vZGVybiBzdWJ0YWcgb3Igc2VxdWVuY2Ugb2Ygc3VidGFnc1xuXG52YXIgcmVndWxhciA9ICcoKGFydC1sb2piYW4pfChjZWwtZ2F1bGlzaCl8KG5vLWJvayl8KG5vLW55bil8KHpoLWd1b3l1KXwnICsgJyh6aC1oYWtrYSl8KHpoLW1pbil8KHpoLW1pbi1uYW4pfCh6aC14aWFuZykpJztcblxuLypcbiAgPSBpcnJlZ3VsYXIgICAgICAgICAgIDsgbm9uLXJlZHVuZGFudCB0YWdzIHJlZ2lzdGVyZWRcbiAgLyByZWd1bGFyICAgICAgICAgICAgIDsgZHVyaW5nIHRoZSBSRkMgMzA2NiBlcmFcblxuICovXG52YXIgZ3JhbmRmYXRoZXJlZCA9IFwiKFwiLmNvbmNhdChpcnJlZ3VsYXIsIFwifFwiKS5jb25jYXQocmVndWxhciwgXCIpXCIpO1xuXG4vKlxuICBSRkMgNTY0NiBkZWZpbmVzIGRlbGltaXRhdGlvbiBvZiBzdWJ0YWdzIHZpYSBhIGh5cGhlbjpcblxuICAgICAgXCJTdWJ0YWdcIiByZWZlcnMgdG8gYSBzcGVjaWZpYyBzZWN0aW9uIG9mIGEgdGFnLCBkZWxpbWl0ZWQgYnkgYVxuICAgICAgaHlwaGVuLCBzdWNoIGFzIHRoZSBzdWJ0YWdzICd6aCcsICdIYW50JywgYW5kICdDTicgaW4gdGhlIHRhZyBcInpoLVxuICAgICAgSGFudC1DTlwiLiAgRXhhbXBsZXMgb2Ygc3VidGFncyBpbiB0aGlzIGRvY3VtZW50IGFyZSBlbmNsb3NlZCBpblxuICAgICAgc2luZ2xlIHF1b3RlcyAoJ0hhbnQnKVxuXG4gIEhvd2V2ZXIsIHdlIG5lZWQgdG8gYWRkIFwiX1wiIHRvIG1haW50YWluIHRoZSBleGlzdGluZyBiZWhhdmlvdXIuXG4gKi9cbnZhciBkZWxpbWl0ZXIgPSAnKC18XyknO1xuXG4vKlxuICA9IGxhbmd1YWdlXG4gICAgW1wiLVwiIHNjcmlwdF1cbiAgICBbXCItXCIgcmVnaW9uXVxuICAgICooXCItXCIgdmFyaWFudClcbiAgICAqKFwiLVwiIGV4dGVuc2lvbilcbiAgICBbXCItXCIgcHJpdmF0ZXVzZV1cbiAqL1xudmFyIGxhbmd0YWcgPSBcIlwiLmNvbmNhdChsYW5ndWFnZSwgXCIoXCIpLmNvbmNhdChkZWxpbWl0ZXIpLmNvbmNhdChzY3JpcHQsIFwiKT8oXCIpLmNvbmNhdChkZWxpbWl0ZXIpLmNvbmNhdChyZWdpb24sIFwiKT8oXCIpLmNvbmNhdChkZWxpbWl0ZXIpLmNvbmNhdCh2YXJpYW50LCBcIikqKFwiKS5jb25jYXQoZGVsaW1pdGVyKS5jb25jYXQoZXh0ZW5zaW9uLCBcIikqKFwiKS5jb25jYXQoZGVsaW1pdGVyKS5jb25jYXQocHJpdmF0ZXVzZSwgXCIpP1wiKTtcblxuLypcbiAgUmVnZXggaW1wbGVtZW50YXRpb24gYmFzZWQgb24gQkNQIFJGQyA1NjQ2XG4gIFRhZ3MgZm9yIElkZW50aWZ5aW5nIExhbmd1YWdlc1xuICBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNTY0Ni5odG1sXG4gKi9cbnZhciBsYW5ndWFnZVRhZ1JlZ2V4ID0gbmV3IFJlZ0V4cChcIiheXCIuY29uY2F0KHByaXZhdGV1c2UsIFwiJCl8KF5cIikuY29uY2F0KGdyYW5kZmF0aGVyZWQsIFwiJCl8KF5cIikuY29uY2F0KGxhbmd0YWcsIFwiJClcIikpO1xuZnVuY3Rpb24gaXNMb2NhbGUoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBsYW5ndWFnZVRhZ1JlZ2V4LnRlc3Qoc3RyKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTG93ZXJjYXNlO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBpc0xvd2VyY2FzZShzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIHN0ciA9PT0gc3RyLnRvTG93ZXJDYXNlKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0x1aG5OdW1iZXI7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIGlzTHVobk51bWJlcihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIHNhbml0aXplZCA9IHN0ci5yZXBsYWNlKC9bLSBdKy9nLCAnJyk7XG4gIHZhciBzdW0gPSAwO1xuICB2YXIgZGlnaXQ7XG4gIHZhciB0bXBOdW07XG4gIHZhciBzaG91bGREb3VibGU7XG4gIGZvciAodmFyIGkgPSBzYW5pdGl6ZWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBkaWdpdCA9IHNhbml0aXplZC5zdWJzdHJpbmcoaSwgaSArIDEpO1xuICAgIHRtcE51bSA9IHBhcnNlSW50KGRpZ2l0LCAxMCk7XG4gICAgaWYgKHNob3VsZERvdWJsZSkge1xuICAgICAgdG1wTnVtICo9IDI7XG4gICAgICBpZiAodG1wTnVtID49IDEwKSB7XG4gICAgICAgIHN1bSArPSB0bXBOdW0gJSAxMCArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdW0gKz0gdG1wTnVtO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdW0gKz0gdG1wTnVtO1xuICAgIH1cbiAgICBzaG91bGREb3VibGUgPSAhc2hvdWxkRG91YmxlO1xuICB9XG4gIHJldHVybiAhIShzdW0gJSAxMCA9PT0gMCA/IHNhbml0aXplZCA6IGZhbHNlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTUFDQWRkcmVzcztcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIG1hY0FkZHJlc3M0OCA9IC9eKD86WzAtOWEtZkEtRl17Mn0oWy06XFxzXSkpKFswLTlhLWZBLUZdezJ9XFwxKXs0fShbMC05YS1mQS1GXXsyfSkkLztcbnZhciBtYWNBZGRyZXNzNDhOb1NlcGFyYXRvcnMgPSAvXihbMC05YS1mQS1GXSl7MTJ9JC87XG52YXIgbWFjQWRkcmVzczQ4V2l0aERvdHMgPSAvXihbMC05YS1mQS1GXXs0fVxcLil7Mn0oWzAtOWEtZkEtRl17NH0pJC87XG52YXIgbWFjQWRkcmVzczY0ID0gL14oPzpbMC05YS1mQS1GXXsyfShbLTpcXHNdKSkoWzAtOWEtZkEtRl17Mn1cXDEpezZ9KFswLTlhLWZBLUZdezJ9KSQvO1xudmFyIG1hY0FkZHJlc3M2NE5vU2VwYXJhdG9ycyA9IC9eKFswLTlhLWZBLUZdKXsxNn0kLztcbnZhciBtYWNBZGRyZXNzNjRXaXRoRG90cyA9IC9eKFswLTlhLWZBLUZdezR9XFwuKXszfShbMC05YS1mQS1GXXs0fSkkLztcbmZ1bmN0aW9uIGlzTUFDQWRkcmVzcyhzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuZXVpKSB7XG4gICAgb3B0aW9ucy5ldWkgPSBTdHJpbmcob3B0aW9ucy5ldWkpO1xuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBgbm9fY29sb25zYCBUT0RPOiByZW1vdmUgaXQgaW4gdGhlIG5leHQgbWFqb3JcbiAgKi9cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMubm9fY29sb25zIHx8IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMubm9fc2VwYXJhdG9ycykge1xuICAgIGlmIChvcHRpb25zLmV1aSA9PT0gJzQ4Jykge1xuICAgICAgcmV0dXJuIG1hY0FkZHJlc3M0OE5vU2VwYXJhdG9ycy50ZXN0KHN0cik7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmV1aSA9PT0gJzY0Jykge1xuICAgICAgcmV0dXJuIG1hY0FkZHJlc3M2NE5vU2VwYXJhdG9ycy50ZXN0KHN0cik7XG4gICAgfVxuICAgIHJldHVybiBtYWNBZGRyZXNzNDhOb1NlcGFyYXRvcnMudGVzdChzdHIpIHx8IG1hY0FkZHJlc3M2NE5vU2VwYXJhdG9ycy50ZXN0KHN0cik7XG4gIH1cbiAgaWYgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXVpKSA9PT0gJzQ4Jykge1xuICAgIHJldHVybiBtYWNBZGRyZXNzNDgudGVzdChzdHIpIHx8IG1hY0FkZHJlc3M0OFdpdGhEb3RzLnRlc3Qoc3RyKTtcbiAgfVxuICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ldWkpID09PSAnNjQnKSB7XG4gICAgcmV0dXJuIG1hY0FkZHJlc3M2NC50ZXN0KHN0cikgfHwgbWFjQWRkcmVzczY0V2l0aERvdHMudGVzdChzdHIpO1xuICB9XG4gIHJldHVybiBpc01BQ0FkZHJlc3Moc3RyLCB7XG4gICAgZXVpOiAnNDgnXG4gIH0pIHx8IGlzTUFDQWRkcmVzcyhzdHIsIHtcbiAgICBldWk6ICc2NCdcbiAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc01ENTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIG1kNSA9IC9eW2EtZjAtOV17MzJ9JC87XG5mdW5jdGlvbiBpc01ENShzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIG1kNS50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc01hZ25ldFVSSTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIG1hZ25ldFVSSUNvbXBvbmVudCA9IC8oPzpebWFnbmV0OlxcP3xbXj8mXSYpeHQoPzpcXC4xKT89dXJuOig/Oig/OmFpY2h8Yml0cHJpbnR8YnRpaHxlZDJrfGVkMmtoYXNofGt6aGFzaHxtZDV8c2hhMXx0cmVlOnRpZ2VyKTpbYS16MC05XXszMn0oPzpbYS16MC05XXs4fSk/fGJ0bWg6MTIyMFthLXowLTldezY0fSkoPzokfCYpL2k7XG5mdW5jdGlvbiBpc01hZ25ldFVSSSh1cmwpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkodXJsKTtcbiAgaWYgKHVybC5pbmRleE9mKCdtYWduZXQ6PycpICE9PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBtYWduZXRVUklDb21wb25lbnQudGVzdCh1cmwpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNNYWlsdG9VUkk7XG52YXIgX3RyaW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyaW1cIikpO1xudmFyIF9pc0VtYWlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0VtYWlsXCIpKTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBsKSB7IHZhciB0ID0gbnVsbCA9PSByID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcIkBAaXRlcmF0b3JcIl07IGlmIChudWxsICE9IHQpIHsgdmFyIGUsIG4sIGksIHUsIGEgPSBbXSwgZiA9ICEwLCBvID0gITE7IHRyeSB7IGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHsgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuOyBmID0gITE7IH0gZWxzZSBmb3IgKDsgIShmID0gKGUgPSBpLmNhbGwodCkpLmRvbmUpICYmIChhLnB1c2goZS52YWx1ZSksIGEubGVuZ3RoICE9PSBsKTsgZiA9ICEwKTsgfSBjYXRjaCAocikgeyBvID0gITAsIG4gPSByOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIWYgJiYgbnVsbCAhPSB0LnJldHVybiAmJiAodSA9IHQucmV0dXJuKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKG8pIHRocm93IG47IH0gfSByZXR1cm4gYTsgfSB9XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9XG5mdW5jdGlvbiBwYXJzZU1haWx0b1F1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKSB7XG4gIHZhciBhbGxvd2VkUGFyYW1zID0gbmV3IFNldChbJ3N1YmplY3QnLCAnYm9keScsICdjYycsICdiY2MnXSksXG4gICAgcXVlcnkgPSB7XG4gICAgICBjYzogJycsXG4gICAgICBiY2M6ICcnXG4gICAgfTtcbiAgdmFyIGlzUGFyc2VGYWlsZWQgPSBmYWxzZTtcbiAgdmFyIHF1ZXJ5UGFyYW1zID0gcXVlcnlTdHJpbmcuc3BsaXQoJyYnKTtcbiAgaWYgKHF1ZXJ5UGFyYW1zLmxlbmd0aCA+IDQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHF1ZXJ5UGFyYW1zKSxcbiAgICBfc3RlcDtcbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIHEgPSBfc3RlcC52YWx1ZTtcbiAgICAgIHZhciBfcSRzcGxpdCA9IHEuc3BsaXQoJz0nKSxcbiAgICAgICAgX3Ekc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3Ekc3BsaXQsIDIpLFxuICAgICAgICBrZXkgPSBfcSRzcGxpdDJbMF0sXG4gICAgICAgIHZhbHVlID0gX3Ekc3BsaXQyWzFdO1xuXG4gICAgICAvLyBjaGVja2VkIGZvciBpbnZhbGlkIGFuZCBkdXBsaWNhdGVkIHF1ZXJ5IHBhcmFtc1xuICAgICAgaWYgKGtleSAmJiAhYWxsb3dlZFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBpc1BhcnNlRmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgJiYgKGtleSA9PT0gJ2NjJyB8fCBrZXkgPT09ICdiY2MnKSkge1xuICAgICAgICBxdWVyeVtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGFsbG93ZWRQYXJhbXMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cbiAgcmV0dXJuIGlzUGFyc2VGYWlsZWQgPyBmYWxzZSA6IHF1ZXJ5O1xufVxuZnVuY3Rpb24gaXNNYWlsdG9VUkkodXJsLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHVybCk7XG4gIGlmICh1cmwuaW5kZXhPZignbWFpbHRvOicpICE9PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBfdXJsJHJlcGxhY2Ukc3BsaXQgPSB1cmwucmVwbGFjZSgnbWFpbHRvOicsICcnKS5zcGxpdCgnPycpLFxuICAgIF91cmwkcmVwbGFjZSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfdXJsJHJlcGxhY2Ukc3BsaXQsIDIpLFxuICAgIHRvID0gX3VybCRyZXBsYWNlJHNwbGl0MlswXSxcbiAgICBfdXJsJHJlcGxhY2Ukc3BsaXQyJCA9IF91cmwkcmVwbGFjZSRzcGxpdDJbMV0sXG4gICAgcXVlcnlTdHJpbmcgPSBfdXJsJHJlcGxhY2Ukc3BsaXQyJCA9PT0gdm9pZCAwID8gJycgOiBfdXJsJHJlcGxhY2Ukc3BsaXQyJDtcbiAgaWYgKCF0byAmJiAhcXVlcnlTdHJpbmcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgcXVlcnkgPSBwYXJzZU1haWx0b1F1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKTtcbiAgaWYgKCFxdWVyeSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gXCJcIi5jb25jYXQodG8sIFwiLFwiKS5jb25jYXQocXVlcnkuY2MsIFwiLFwiKS5jb25jYXQocXVlcnkuYmNjKS5zcGxpdCgnLCcpLmV2ZXJ5KGZ1bmN0aW9uIChlbWFpbCkge1xuICAgIGVtYWlsID0gKDAsIF90cmltLmRlZmF1bHQpKGVtYWlsLCAnICcpO1xuICAgIGlmIChlbWFpbCkge1xuICAgICAgcmV0dXJuICgwLCBfaXNFbWFpbC5kZWZhdWx0KShlbWFpbCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTWltZVR5cGU7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbi8qXG4gIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgc3RyaW5nIG1hdGNoZXMgdG8gYSBjb3JyZWN0IE1lZGlhIHR5cGUgZm9ybWF0IChNSU1FIHR5cGUpXG5cbiAgVGhpcyBmdW5jdGlvbiBvbmx5IGNoZWNrcyBpcyB0aGUgc3RyaW5nIGZvcm1hdCBmb2xsb3dzIHRoZVxuICBldGFibGlzaGVkIHJ1bGVzIGJ5IHRoZSBhY2NvcmRpbmcgUkZDIHNwZWNpZmljYXRpb25zLlxuICBUaGlzIGZ1bmN0aW9uIHN1cHBvcnRzICdjaGFyc2V0JyBpbiB0ZXh0dWFsIG1lZGlhIHR5cGVzXG4gIChodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjY1NykuXG5cbiAgVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjaGVjayBhZ2FpbnN0IGFsbCB0aGUgbWVkaWEgdHlwZXMgbGlzdGVkXG4gIGJ5IHRoZSBJQU5BIChodHRwczovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9tZWRpYS10eXBlcy9tZWRpYS10eXBlcy54aHRtbClcbiAgYmVjYXVzZSBvZiBsaWdodG5lc3MgcHVycG9zZXMgOiBpdCB3b3VsZCByZXF1aXJlIHRvIGluY2x1ZGVcbiAgYWxsIHRoZXNlIE1JTUUgdHlwZXMgaW4gdGhpcyBsaWJyYWlyeSwgd2hpY2ggd291bGQgd2VpZ2ggaXRcbiAgc2lnbmlmaWNhbnRseS4gVGhpcyBraW5kIG9mIGVmZm9ydCBtYXliZSBpcyBub3Qgd29ydGggZm9yIHRoZSB1c2UgdGhhdFxuICB0aGlzIGZ1bmN0aW9uIGhhcyBpbiB0aGlzIGVudGlyZSBsaWJyYWlyeS5cblxuICBNb3JlIGluZm9ybWF0aW9ucyBpbiB0aGUgUkZDIHNwZWNpZmljYXRpb25zIDpcbiAgLSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjA0NVxuICAtIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyMDQ2XG4gIC0gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzEjc2VjdGlvbi0zLjEuMS4xXG4gIC0gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzEjc2VjdGlvbi0zLjEuMS41XG4qL1xuXG4vLyBNYXRjaCBzaW1wbGUgTUlNRSB0eXBlc1xuLy8gTkIgOlxuLy8gICBTdWJ0eXBlIGxlbmd0aCBtdXN0IG5vdCBleGNlZWQgMTAwIGNoYXJhY3RlcnMuXG4vLyAgIFRoaXMgcnVsZSBkb2VzIG5vdCBjb21wbHkgdG8gdGhlIFJGQyBzcGVjcyAod2hhdCBpcyB0aGUgbWF4IGxlbmd0aCA/KS5cbnZhciBtaW1lVHlwZVNpbXBsZSA9IC9eKGFwcGxpY2F0aW9ufGF1ZGlvfGZvbnR8aW1hZ2V8bWVzc2FnZXxtb2RlbHxtdWx0aXBhcnR8dGV4dHx2aWRlbylcXC9bYS16QS1aMC05XFwuXFwtXFwrX117MSwxMDB9JC9pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cblxuLy8gSGFuZGxlIFwiY2hhcnNldFwiIGluIFwidGV4dC8qXCJcbnZhciBtaW1lVHlwZVRleHQgPSAvXnRleHRcXC9bYS16QS1aMC05XFwuXFwtXFwrXXsxLDEwMH07XFxzP2NoYXJzZXQ9KFwiW2EtekEtWjAtOVxcLlxcLVxcK1xcc117MCw3MH1cInxbYS16QS1aMC05XFwuXFwtXFwrXXswLDcwfSkoXFxzP1xcKFthLXpBLVowLTlcXC5cXC1cXCtcXHNdezEsMjB9XFwpKT8kL2k7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbWF4LWxlblxuXG4vLyBIYW5kbGUgXCJib3VuZGFyeVwiIGluIFwibXVsdGlwYXJ0LypcIlxudmFyIG1pbWVUeXBlTXVsdGlwYXJ0ID0gL15tdWx0aXBhcnRcXC9bYS16QS1aMC05XFwuXFwtXFwrXXsxLDEwMH0oO1xccz8oYm91bmRhcnl8Y2hhcnNldCk9KFwiW2EtekEtWjAtOVxcLlxcLVxcK1xcc117MCw3MH1cInxbYS16QS1aMC05XFwuXFwtXFwrXXswLDcwfSkoXFxzP1xcKFthLXpBLVowLTlcXC5cXC1cXCtcXHNdezEsMjB9XFwpKT8pezAsMn0kL2k7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbWF4LWxlblxuXG5mdW5jdGlvbiBpc01pbWVUeXBlKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gbWltZVR5cGVTaW1wbGUudGVzdChzdHIpIHx8IG1pbWVUeXBlVGV4dC50ZXN0KHN0cikgfHwgbWltZVR5cGVNdWx0aXBhcnQudGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNNb2JpbGVQaG9uZTtcbmV4cG9ydHMubG9jYWxlcyA9IHZvaWQgMDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xudmFyIHBob25lcyA9IHtcbiAgJ2FtLUFNJzogL14oXFwrPzM3NHwwKSgzM3w0WzEzNF18NTV8Nzd8ODh8OVsxMy02ODldKVxcZHs2fSQvLFxuICAnYXItQUUnOiAvXigoXFwrPzk3MSl8MCk/NVswMjQ1NjhdXFxkezd9JC8sXG4gICdhci1CSCc6IC9eKFxcKz85NzMpPygzfDYpXFxkezd9JC8sXG4gICdhci1EWic6IC9eKFxcKz8yMTN8MCkoNXw2fDcpXFxkezh9JC8sXG4gICdhci1MQic6IC9eKFxcKz85NjEpPygoM3w4MSlcXGR7Nn18N1xcZHs3fSkkLyxcbiAgJ2FyLUVHJzogL14oKFxcKz8yMCl8MCk/MVswMTI1XVxcZHs4fSQvLFxuICAnYXItSVEnOiAvXihcXCs/OTY0fDApPzdbMC05XVxcZHs4fSQvLFxuICAnYXItSk8nOiAvXihcXCs/OTYyfDApPzdbNzg5XVxcZHs3fSQvLFxuICAnYXItS1cnOiAvXihcXCs/OTY1KShbNTY5XVxcZHs3fXw0MVxcZHs2fSkkLyxcbiAgJ2FyLUxZJzogL14oKFxcKz8yMTgpfDApPyg5WzEtNl1cXGR7N318WzEtOF1cXGR7Nyw5fSkkLyxcbiAgJ2FyLU1BJzogL14oPzooPzpcXCt8MDApMjEyfDApWzUtN11cXGR7OH0kLyxcbiAgJ2FyLU9NJzogL14oKFxcK3wwMCk5NjgpPyg5WzEtOV0pXFxkezZ9JC8sXG4gICdhci1QUyc6IC9eKFxcKz85NzB8MCk1WzZ8OV0oXFxkezd9KSQvLFxuICAnYXItU0EnOiAvXighPyhcXCs/OTY2KXwwKT81XFxkezh9JC8sXG4gICdhci1TRCc6IC9eKChcXCs/MjQ5KXwwKT8oOVswMTIzNjldfDFbMDEyXSlcXGR7N30kLyxcbiAgJ2FyLVNZJzogL14oIT8oXFwrPzk2Myl8MCk/OVxcZHs4fSQvLFxuICAnYXItVE4nOiAvXihcXCs/MjE2KT9bMjQ1OV1cXGR7N30kLyxcbiAgJ2F6LUFaJzogL14oXFwrOTk0fDApKDEwfDVbMDE1XXw3WzA3XXw5OSlcXGR7N30kLyxcbiAgJ2JzLUJBJzogL14oKCgoXFwrfDAwKTM4NzYpfDA2KSkoKChbMC0zXXxbNS02XSlcXGR7Nn0pfCg0XFxkezd9KSkkLyxcbiAgJ2JlLUJZJzogL14oXFwrPzM3NSk/KDI0fDI1fDI5fDMzfDQ0KVxcZHs3fSQvLFxuICAnYmctQkcnOiAvXihcXCs/MzU5fDApPzhbNzg5XVxcZHs3fSQvLFxuICAnYm4tQkQnOiAvXihcXCs/ODgwfDApMVsxMzQ1Njc4OV1bMC05XXs4fSQvLFxuICAnY2EtQUQnOiAvXihcXCszNzYpP1szNDZdXFxkezV9JC8sXG4gICdjcy1DWic6IC9eKFxcKz80MjApPyA/WzEtOV1bMC05XXsyfSA/WzAtOV17M30gP1swLTldezN9JC8sXG4gICdkYS1ESyc6IC9eKFxcKz80NSk/XFxzP1xcZHsyfVxccz9cXGR7Mn1cXHM/XFxkezJ9XFxzP1xcZHsyfSQvLFxuICAnZGUtREUnOiAvXigoXFwrNDl8MCkxKSg1WzAtMjUtOV1cXGR8NihbMjNdfDBcXGQ/KXw3KFswLTU3LTldfDZcXGQpKVxcZHs3LDl9JC8sXG4gICdkZS1BVCc6IC9eKFxcKzQzfDApXFxkezEsNH1cXGR7MywxMn0kLyxcbiAgJ2RlLUNIJzogL14oXFwrNDF8MCkoWzEtOV0pXFxkezEsOX0kLyxcbiAgJ2RlLUxVJzogL14oXFwrMzUyKT8oKDZcXGQxKVxcZHs2fSkkLyxcbiAgJ2R2LU1WJzogL14oXFwrPzk2MCk/KDdbMi05XXw5WzEtOV0pXFxkezV9JC8sXG4gICdlbC1HUic6IC9eKFxcKz8zMHwwKT82KDhbNS05XXw5KD8hWzI2XSlbMC05XSlcXGR7N30kLyxcbiAgJ2VsLUNZJzogL14oXFwrPzM1Nz8pPyg5KDl8NilcXGR7Nn0pJC8sXG4gICdlbi1BSSc6IC9eKFxcKz8xfDApMjY0KD86MigzNXw5Mil8NCg/OjZbMS0yXXw3Nnw5Nyl8NSg/OjNbNi05XXw4WzEtNF0pfDcoPzoyKDR8OSl8NzIpKVxcZHs0fSQvLFxuICAnZW4tQVUnOiAvXihcXCs/NjF8MCk0XFxkezh9JC8sXG4gICdlbi1BRyc6IC9eKD86XFwrMXwxKTI2OCg/OjQ2NHw3KD86MVszLTldfFsyOF1cXGR8M1swMjQ2XXw2NHw3WzAtNjg5XSkpXFxkezR9JC8sXG4gICdlbi1CTSc6IC9eKFxcKz8xKT80NDEoKCgzfDcpXFxkezZ9JCl8KDVbMC0zXVswLTldXFxkezR9JCl8KDU5XFxkezV9JCkpLyxcbiAgJ2VuLUJTJzogL14oXFwrPzFbLVxcc10/fDApP1xcKD8yNDJcXCk/Wy1cXHNdP1xcZHszfVstXFxzXT9cXGR7NH0kLyxcbiAgJ2VuLUdCJzogL14oXFwrPzQ0fDApN1xcZHs5fSQvLFxuICAnZW4tR0cnOiAvXihcXCs/NDR8MCkxNDgxXFxkezZ9JC8sXG4gICdlbi1HSCc6IC9eKFxcKzIzM3wwKSgyMHw1MHwyNHw1NHwyN3w1N3wyNnw1NnwyM3wyOHw1NXw1OSlcXGR7N30kLyxcbiAgJ2VuLUdZJzogL14oXFwrNTkyfDApNlxcZHs2fSQvLFxuICAnZW4tSEsnOiAvXihcXCs/ODUyWy1cXHNdPyk/WzQ1Njc4OV1cXGR7M31bLVxcc10/XFxkezR9JC8sXG4gICdlbi1NTyc6IC9eKFxcKz84NTNbLVxcc10/KT9bNl1cXGR7M31bLVxcc10/XFxkezR9JC8sXG4gICdlbi1JRSc6IC9eKFxcKz8zNTN8MCk4WzM1Njc4OV1cXGR7N30kLyxcbiAgJ2VuLUlOJzogL14oXFwrPzkxfDApP1s2Nzg5XVxcZHs5fSQvLFxuICAnZW4tSk0nOiAvXihcXCs/ODc2KT9cXGR7N30kLyxcbiAgJ2VuLUtFJzogL14oXFwrPzI1NHwwKSg3fDEpXFxkezh9JC8sXG4gICdmci1DRic6IC9eKFxcKz8yMzZ8ID8pKDcwfDc1fDc3fDcyfDIxfDIyKVxcZHs2fSQvLFxuICAnZW4tU1MnOiAvXihcXCs/MjExfDApKDlbMTI1N10pXFxkezd9JC8sXG4gICdlbi1LSSc6IC9eKChcXCs2ODZ8Njg2KT8pPyggKT8oKDZ8NykoMnwzfDgpWzAtOV17Nn0pJC8sXG4gICdlbi1LTic6IC9eKD86XFwrMXwxKTg2OSg/OjQ2XFxkfDQ4Wzg5XXw1NVs2LThdfDY2XFxkfDc2WzAyLTddKVxcZHs0fSQvLFxuICAnZW4tTFMnOiAvXihcXCs/MjY2KSgyMnwyOHw1N3w1OHw1OXwyN3w1MilcXGR7Nn0kLyxcbiAgJ2VuLU1UJzogL14oXFwrPzM1NnwwKT8oOTl8Nzl8Nzd8MjF8Mjd8MjJ8MjUpWzAtOV17Nn0kLyxcbiAgJ2VuLU1VJzogL14oXFwrPzIzMHwwKT9cXGR7OH0kLyxcbiAgJ2VuLU1XJzogL14oXFwrPzI2NXwwKSgoKDc3fDg4fDMxfDk5fDk4fDIxKVxcZHs3fSl8KCgoMTExKXwxKVxcZHs2fSl8KDMyMDAwXFxkezR9KSkkLyxcbiAgJ2VuLU5BJzogL14oXFwrPzI2NHwwKSg2fDgpXFxkezd9JC8sXG4gICdlbi1ORyc6IC9eKFxcKz8yMzR8MCk/Wzc4OV1cXGR7OX0kLyxcbiAgJ2VuLU5aJzogL14oXFwrPzY0fDApWzI4XVxcZHs3LDl9JC8sXG4gICdlbi1QRyc6IC9eKFxcKz82NzV8MCk/KDdcXGR8OFsxOF0pXFxkezZ9JC8sXG4gICdlbi1QSyc6IC9eKCgwMHxcXCspPzkyfDApM1swLTZdXFxkezh9JC8sXG4gICdlbi1QSCc6IC9eKDA5fFxcKzYzOSlcXGR7OX0kLyxcbiAgJ2VuLVJXJzogL14oXFwrPzI1MHwwKT9bN11cXGR7OH0kLyxcbiAgJ2VuLVNHJzogL14oXFwrNjUpP1szNjg5XVxcZHs3fSQvLFxuICAnZW4tU0wnOiAvXihcXCs/MjMyfDApXFxkezh9JC8sXG4gICdlbi1UWic6IC9eKFxcKz8yNTV8MCk/WzY3XVxcZHs4fSQvLFxuICAnZW4tVUcnOiAvXihcXCs/MjU2fDApP1s3XVxcZHs4fSQvLFxuICAnZW4tVVMnOiAvXigoXFwrMXwxKT8oIHwtKT8pPyhcXChbMi05XVswLTldezJ9XFwpfFsyLTldWzAtOV17Mn0pKCB8LSk/KFsyLTldWzAtOV17Mn0oIHwtKT9bMC05XXs0fSkkLyxcbiAgJ2VuLVpBJzogL14oXFwrPzI3fDApXFxkezl9JC8sXG4gICdlbi1aTSc6IC9eKFxcKz8yNik/MDlbNTY3XVxcZHs3fSQvLFxuICAnZW4tWlcnOiAvXihcXCsyNjMpWzAtOV17OX0kLyxcbiAgJ2VuLUJXJzogL14oXFwrPzI2Nyk/KDdbMS04XXsxfSlcXGR7Nn0kLyxcbiAgJ2VzLUFSJzogL15cXCs/NTQ5KDExfFsyMzY4XVxcZClcXGR7OH0kLyxcbiAgJ2VzLUJPJzogL14oXFwrPzU5MSk/KDZ8NylcXGR7N30kLyxcbiAgJ2VzLUNPJzogL14oXFwrPzU3KT8zKDAoMHwxfDJ8NHw1KXwxXFxkfDJbMC00XXw1KDB8MSkpXFxkezd9JC8sXG4gICdlcy1DTCc6IC9eKFxcKz81NnwwKVsyLTldXFxkezF9XFxkezd9JC8sXG4gICdlcy1DUic6IC9eKFxcKzUwNik/WzItOF1cXGR7N30kLyxcbiAgJ2VzLUNVJzogL14oXFwrNTN8MDA1Myk/NVxcZHs3fSQvLFxuICAnZXMtRE8nOiAvXihcXCs/MSk/OFswMjRdOVxcZHs3fSQvLFxuICAnZXMtSE4nOiAvXihcXCs/NTA0KT9bOXw4fDN8Ml1cXGR7N30kLyxcbiAgJ2VzLUVDJzogL14oXFwrPzU5M3wwKShbMi03XXw5WzItOV0pXFxkezd9JC8sXG4gICdlcy1FUyc6IC9eKFxcKz8zNCk/WzZ8N11cXGR7OH0kLyxcbiAgJ2VzLVBFJzogL14oXFwrPzUxKT85XFxkezh9JC8sXG4gICdlcy1NWCc6IC9eKFxcKz81Mik/KDF8MDEpP1xcZHsxMCwxMX0kLyxcbiAgJ2VzLU5JJzogL14oXFwrPzUwNSlcXGR7Nyw4fSQvLFxuICAnZXMtUEEnOiAvXihcXCs/NTA3KVxcZHs3LDh9JC8sXG4gICdlcy1QWSc6IC9eKFxcKz81OTV8MCk5Wzk4NzZdXFxkezd9JC8sXG4gICdlcy1TVic6IC9eKFxcKz81MDMpP1s2N11cXGR7N30kLyxcbiAgJ2VzLVVZJzogL14oXFwrNTk4fDApOVsxLTldW1xcZF17Nn0kLyxcbiAgJ2VzLVZFJzogL14oXFwrPzU4KT8oMnw0KVxcZHs5fSQvLFxuICAnZXQtRUUnOiAvXihcXCs/MzcyKT9cXHM/KDV8OFsxLTRdKVxccz8oWzAtOV1cXHM/KXs2LDd9JC8sXG4gICdmYS1JUic6IC9eKFxcKz85OFtcXC1cXHNdP3wwKTlbMC0zOV1cXGRbXFwtXFxzXT9cXGR7M31bXFwtXFxzXT9cXGR7NH0kLyxcbiAgJ2ZpLUZJJzogL14oXFwrPzM1OHwwKVxccz8oNFswLTZdfDUwKVxccz8oXFxkXFxzPyl7NCw4fSQvLFxuICAnZmotRkonOiAvXihcXCs/Njc5KT9cXHM/XFxkezN9XFxzP1xcZHs0fSQvLFxuICAnZm8tRk8nOiAvXihcXCs/Mjk4KT9cXHM/XFxkezJ9XFxzP1xcZHsyfVxccz9cXGR7Mn0kLyxcbiAgJ2ZyLUJGJzogL14oXFwrMjI2fDApWzY3XVxcZHs3fSQvLFxuICAnZnItQkonOiAvXihcXCsyMjkpXFxkezh9JC8sXG4gICdmci1DRCc6IC9eKFxcKz8yNDN8MCk/KDh8OSlcXGR7OH0kLyxcbiAgJ2ZyLUNNJzogL14oXFwrPzIzNyk2WzAtOV17OH0kLyxcbiAgJ2ZyLUZSJzogL14oXFwrPzMzfDApWzY3XVxcZHs4fSQvLFxuICAnZnItR0YnOiAvXihcXCs/NTk0fDB8MDA1OTQpWzY3XVxcZHs4fSQvLFxuICAnZnItR1AnOiAvXihcXCs/NTkwfDB8MDA1OTApWzY3XVxcZHs4fSQvLFxuICAnZnItTVEnOiAvXihcXCs/NTk2fDB8MDA1OTYpWzY3XVxcZHs4fSQvLFxuICAnZnItUEYnOiAvXihcXCs/Njg5KT84Wzc4OV1cXGR7Nn0kLyxcbiAgJ2ZyLVJFJzogL14oXFwrPzI2MnwwfDAwMjYyKVs2N11cXGR7OH0kLyxcbiAgJ2ZyLVdGJzogL14oXFwrNjgxKT9cXGR7Nn0kLyxcbiAgJ2hlLUlMJzogL14oXFwrOTcyfDApKFsyMzQ4OV18NVswMTIzNDU2ODldfDc3KVsxLTldXFxkezZ9JC8sXG4gICdodS1IVSc6IC9eKFxcKz8zNnwwNikoMjB8MzB8MzF8NTB8NzApXFxkezd9JC8sXG4gICdpZC1JRCc6IC9eKFxcKz82MnwwKTgoMVsxMjM0NTY3ODldfDJbMTIzOF18M1sxMjM4XXw1WzEyMzU2Nzg5XXw3Wzc4XXw5WzU2Nzg5XXw4WzEyMzQ1Njc4OV0pKFtcXHM/fFxcZF17NSwxMX0pJC8sXG4gICdpci1JUic6IC9eKFxcKzk4fDApPzlcXGR7OX0kLyxcbiAgJ2l0LUlUJzogL14oXFwrPzM5KT9cXHM/M1xcZHsyfSA/XFxkezYsN30kLyxcbiAgJ2l0LVNNJzogL14oKFxcKzM3OCl8KDA1NDkpfChcXCszOTA1NDkpfChcXCszNzgwNTQ5KSk/NlxcZHs1LDl9JC8sXG4gICdqYS1KUCc6IC9eKFxcKzgxWyBcXC1dPyhcXCgwXFwpKT98MClbNjc4OV0wWyBcXC1dP1xcZHs0fVsgXFwtXT9cXGR7NH0kLyxcbiAgJ2thLUdFJzogL14oXFwrPzk5NSk/KDc5XFxkezd9fDVcXGR7OH0pJC8sXG4gICdray1LWic6IC9eKFxcKz83fDgpPzdcXGR7OX0kLyxcbiAgJ2tsLUdMJzogL14oXFwrPzI5OSk/XFxzP1xcZHsyfVxccz9cXGR7Mn1cXHM/XFxkezJ9JC8sXG4gICdrby1LUic6IC9eKChcXCs/ODIpWyBcXC1dPyk/MD8xKFswfDF8Nnw3fDh8OV17MX0pWyBcXC1dP1xcZHszLDR9WyBcXC1dP1xcZHs0fSQvLFxuICAna3ktS0cnOiAvXihcXCs/N1xccz9cXCs/N3wwKVxccz9cXGR7Mn1cXHM/XFxkezN9XFxzP1xcZHs0fSQvLFxuICAnbHQtTFQnOiAvXihcXCszNzB8OClcXGR7OH0kLyxcbiAgJ2x2LUxWJzogL14oXFwrPzM3MSkyXFxkezd9JC8sXG4gICdtZy1NRyc6IC9eKChcXCs/MjYxfDApKDJ8MylcXGQpP1xcZHs3fSQvLFxuICAnbW4tTU4nOiAvXihcXCt8MDB8MDExKT85NzYoNzd8ODF8ODh8OTF8OTR8OTV8OTZ8OTkpXFxkezZ9JC8sXG4gICdteS1NTSc6IC9eKFxcKz85NTl8MDl8OSkoMls1LTddfDNbMS0yXXw0WzAtNV18Nls2LTldfDdbNS05XXw5WzYtOV0pWzAtOV17N30kLyxcbiAgJ21zLU1ZJzogL14oXFwrPzYwfDApMSgoWzAxNDVdKC18XFxzKT9cXGR7Nyw4fSl8KFsyMzYtOV0oLXxcXHMpP1xcZHs3fSkpJC8sXG4gICdtei1NWic6IC9eKFxcKz8yNTgpPzhbMjM0NTY3XVxcZHs3fSQvLFxuICAnbmItTk8nOiAvXihcXCs/NDcpP1s0OV1cXGR7N30kLyxcbiAgJ25lLU5QJzogL14oXFwrPzk3Nyk/OVs3OF1cXGR7OH0kLyxcbiAgJ25sLUJFJzogL14oXFwrPzMyfDApNFxcZHs4fSQvLFxuICAnbmwtTkwnOiAvXigoKFxcK3wwMCk/MzFcXCgwXFwpKXwoKFxcK3wwMCk/MzEpfDApNnsxfVxcZHs4fSQvLFxuICAnbmwtQVcnOiAvXihcXCspPzI5Nyg1Nnw1OXw2NHw3M3w3NHw5OSlcXGR7NX0kLyxcbiAgJ25uLU5PJzogL14oXFwrPzQ3KT9bNDldXFxkezd9JC8sXG4gICdwbC1QTCc6IC9eKFxcKz80OCk/ID8oWzUtOF1cXGR8NDUpID9cXGR7M30gP1xcZHsyfSA/XFxkezJ9JC8sXG4gICdwdC1CUic6IC9eKChcXCs/NTVcXCA/WzEtOV17Mn1cXCA/KXwoXFwrPzU1XFwgP1xcKFsxLTldezJ9XFwpXFwgPyl8KDBbMS05XXsyfVxcID8pfChcXChbMS05XXsyfVxcKVxcID8pfChbMS05XXsyfVxcID8pKSgoXFxkezR9XFwtP1xcZHs0fSl8KDlbMS05XXsxfVxcZHszfVxcLT9cXGR7NH0pKSQvLFxuICAncHQtUFQnOiAvXihcXCs/MzUxKT85WzEyMzZdXFxkezd9JC8sXG4gICdwdC1BTyc6IC9eKFxcKzI0NClcXGR7OX0kLyxcbiAgJ3JvLU1EJzogL14oXFwrPzM3M3wwKSgoNigwfDF8Mnw2fDd8OHw5KSl8KDcoNnw3fDh8OSkpKVxcZHs2fSQvLFxuICAncm8tUk8nOiAvXihcXCs/NDB8MClcXHM/N1xcZHsyfShcXC98XFxzfFxcLnwtKT9cXGR7M30oXFxzfFxcLnwtKT9cXGR7M30kLyxcbiAgJ3J1LVJVJzogL14oXFwrPzd8OCk/OVxcZHs5fSQvLFxuICAnc2ktTEsnOiAvXig/OjB8OTR8XFwrOTQpPyg3KDB8MXwyfDR8NXw2fDd8OCkoIHwtKT8pXFxkezd9JC8sXG4gICdzbC1TSSc6IC9eKFxcKzM4Nlxccz98MCkoXFxkezF9XFxzP1xcZHszfVxccz9cXGR7Mn1cXHM/XFxkezJ9fFxcZHsyfVxccz9cXGR7M31cXHM/XFxkezN9KSQvLFxuICAnc2stU0snOiAvXihcXCs/NDIxKT8gP1sxLTldWzAtOV17Mn0gP1swLTldezN9ID9bMC05XXszfSQvLFxuICAnc28tU08nOiAvXihcXCs/MjUyfDApKCg2WzAtOV0pXFxkezd9fCg3WzEtOV0pXFxkezd9KSQvLFxuICAnc3EtQUwnOiAvXihcXCszNTV8MCk2Wzc4OV1cXGR7Nn0kLyxcbiAgJ3NyLVJTJzogL14oXFwrMzgxNnwwNilbLSBcXGRdezUsOX0kLyxcbiAgJ3N2LVNFJzogL14oXFwrPzQ2fDApW1xcc1xcLV0/N1tcXHNcXC1dP1swMjM2OV0oW1xcc1xcLV0/XFxkKXs3fSQvLFxuICAndGctVEonOiAvXihcXCs/OTkyKT9bNV1bNV1cXGR7N30kLyxcbiAgJ3RoLVRIJzogL14oXFwrNjZ8NjZ8MClcXGR7OX0kLyxcbiAgJ3RyLVRSJzogL14oXFwrPzkwfDApPzVcXGR7OX0kLyxcbiAgJ3RrLVRNJzogL14oXFwrOTkzfDk5M3w4KVxcZHs4fSQvLFxuICAndWstVUEnOiAvXihcXCs/Mzh8OCk/MFxcZHs5fSQvLFxuICAndXotVVonOiAvXihcXCs/OTk4KT8oNlsxMjUtNzldfDdbMS02OV18ODh8OVxcZClcXGR7N30kLyxcbiAgJ3ZpLVZOJzogL14oKFxcKz84NCl8MCkoKDMoWzItOV0pKXwoNShbMjU2ODldKSl8KDcoWzB8Ni05XSkpfCg4KFsxLTldKSl8KDkoWzAtOV0pKSkoWzAtOV17N30pJC8sXG4gICd6aC1DTic6IC9eKChcXCt8MDApODYpPygxWzMtOV18OVsyOF0pXFxkezl9JC8sXG4gICd6aC1UVyc6IC9eKFxcKz84ODZcXC0/fDApPzlcXGR7OH0kLyxcbiAgJ2R6LUJUJzogL14oXFwrPzk3NXwwKT8oMTd8MTZ8Nzd8MDIpXFxkezZ9JC8sXG4gICdhci1ZRSc6IC9eKCgoXFwrfDAwKTk2Nzd8MD83KVswMTM3XVxcZHs3fXwoKFxcK3wwMCk5Njd8MClbMS03XVxcZHs2fSkkLyxcbiAgJ2FyLUVIJzogL14oXFwrPzIxMnwwKVtcXHNcXC1dPyg1Mjg4fDUyODkpW1xcc1xcLV0/XFxkezV9JC8sXG4gICdmYS1BRic6IC9eKFxcKzkzfDApPygyezF9WzAtOF17MX18WzMtNV17MX1bMC00XXsxfSkoXFxkezd9KSQvXG59O1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbi8vIGFsaWFzZXNcbnBob25lc1snZW4tQ0EnXSA9IHBob25lc1snZW4tVVMnXTtcbnBob25lc1snZnItQ0EnXSA9IHBob25lc1snZW4tQ0EnXTtcbnBob25lc1snZnItQkUnXSA9IHBob25lc1snbmwtQkUnXTtcbnBob25lc1snemgtSEsnXSA9IHBob25lc1snZW4tSEsnXTtcbnBob25lc1snemgtTU8nXSA9IHBob25lc1snZW4tTU8nXTtcbnBob25lc1snZ2EtSUUnXSA9IHBob25lc1snZW4tSUUnXTtcbnBob25lc1snZnItQ0gnXSA9IHBob25lc1snZGUtQ0gnXTtcbnBob25lc1snaXQtQ0gnXSA9IHBob25lc1snZnItQ0gnXTtcbmZ1bmN0aW9uIGlzTW9iaWxlUGhvbmUoc3RyLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJpY3RNb2RlICYmICFzdHIuc3RhcnRzV2l0aCgnKycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGxvY2FsZSkpIHtcbiAgICByZXR1cm4gbG9jYWxlLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvdHdhcmxvc3QvaXN0YW5idWwvYmxvYi9tYXN0ZXIvaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UubWQjaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UtcHVycG9zZXNcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgICBpZiAocGhvbmVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHBob25lID0gcGhvbmVzW2tleV07XG4gICAgICAgIGlmIChwaG9uZS50ZXN0KHN0cikpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGxvY2FsZSBpbiBwaG9uZXMpIHtcbiAgICByZXR1cm4gcGhvbmVzW2xvY2FsZV0udGVzdChzdHIpO1xuICAgIC8vIGFsaWFzIGZhbHNleSBsb2NhbGUgYXMgJ2FueSdcbiAgfSBlbHNlIGlmICghbG9jYWxlIHx8IGxvY2FsZSA9PT0gJ2FueScpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcGhvbmVzKSB7XG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgICAgaWYgKHBob25lcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhciBwaG9uZSA9IHBob25lc1trZXldO1xuICAgICAgICBpZiAocGhvbmUudGVzdChzdHIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9jYWxlICdcIi5jb25jYXQobG9jYWxlLCBcIidcIikpO1xufVxudmFyIGxvY2FsZXMgPSBleHBvcnRzLmxvY2FsZXMgPSBPYmplY3Qua2V5cyhwaG9uZXMpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNNb25nb0lkO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfaXNIZXhhZGVjaW1hbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNIZXhhZGVjaW1hbFwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gaXNNb25nb0lkKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gKDAsIF9pc0hleGFkZWNpbWFsLmRlZmF1bHQpKHN0cikgJiYgc3RyLmxlbmd0aCA9PT0gMjQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc011bHRpYnl0ZTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xudmFyIG11bHRpYnl0ZSA9IC9bXlxceDAwLVxceDdGXS87XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cblxuZnVuY3Rpb24gaXNNdWx0aWJ5dGUoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBtdWx0aWJ5dGUudGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNOdW1lcmljO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbnZhciBfYWxwaGEgPSByZXF1aXJlKFwiLi9hbHBoYVwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgbnVtZXJpY05vU3ltYm9scyA9IC9eWzAtOV0rJC87XG5mdW5jdGlvbiBpc051bWVyaWMoc3RyLCBvcHRpb25zKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMubm9fc3ltYm9scykge1xuICAgIHJldHVybiBudW1lcmljTm9TeW1ib2xzLnRlc3Qoc3RyKTtcbiAgfVxuICByZXR1cm4gbmV3IFJlZ0V4cChcIl5bKy1dPyhbMC05XSpbXCIuY29uY2F0KChvcHRpb25zIHx8IHt9KS5sb2NhbGUgPyBfYWxwaGEuZGVjaW1hbFtvcHRpb25zLmxvY2FsZV0gOiAnLicsIFwiXSk/WzAtOV0rJFwiKSkudGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNPY3RhbDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIG9jdGFsID0gL14oMG8pP1swLTddKyQvaTtcbmZ1bmN0aW9uIGlzT2N0YWwoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBvY3RhbC50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1Bhc3Nwb3J0TnVtYmVyO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vKipcbiAqIFJlZmVyZW5jZTpcbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy8gLS0gV2lraXBlZGlhXG4gKiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtMzY1L2NvbXBsaWFuY2UvZXUtcGFzc3BvcnQtbnVtYmVyIC0tIEVVIFBhc3Nwb3J0IE51bWJlclxuICogaHR0cHM6Ly9jb3VudHJ5Y29kZS5vcmcvIC0tIENvdW50cnkgQ29kZXNcbiAqL1xudmFyIHBhc3Nwb3J0UmVnZXhCeUNvdW50cnlDb2RlID0ge1xuICBBTTogL15bQS1aXXsyfVxcZHs3fSQvLFxuICAvLyBBUk1FTklBXG4gIEFSOiAvXltBLVpdezN9XFxkezZ9JC8sXG4gIC8vIEFSR0VOVElOQVxuICBBVDogL15bQS1aXVxcZHs3fSQvLFxuICAvLyBBVVNUUklBXG4gIEFVOiAvXltBLVpdXFxkezd9JC8sXG4gIC8vIEFVU1RSQUxJQVxuICBBWjogL15bQS1aXXsxfVxcZHs4fSQvLFxuICAvLyBBWkVSQkFJSkFOXG4gIEJFOiAvXltBLVpdezJ9XFxkezZ9JC8sXG4gIC8vIEJFTEdJVU1cbiAgQkc6IC9eXFxkezl9JC8sXG4gIC8vIEJVTEdBUklBXG4gIEJSOiAvXltBLVpdezJ9XFxkezZ9JC8sXG4gIC8vIEJSQVpJTFxuICBCWTogL15bQS1aXXsyfVxcZHs3fSQvLFxuICAvLyBCRUxBUlVTXG4gIENBOiAvXltBLVpdezJ9XFxkezZ9JC8sXG4gIC8vIENBTkFEQVxuICBDSDogL15bQS1aXVxcZHs3fSQvLFxuICAvLyBTV0lUWkVSTEFORFxuICBDTjogL15HXFxkezh9JHxeRSg/IVtJT10pW0EtWjAtOV1cXGR7N30kLyxcbiAgLy8gQ0hJTkEgW0c9T3JkaW5hcnksIEU9RWxlY3Ryb25pY10gZm9sbG93ZWQgYnkgOC1kaWdpdHMsIG9yIEUgZm9sbG93ZWQgYnkgYW55IFVQUEVSQ0FTRSBsZXR0ZXIgKGV4Y2VwdCBJIGFuZCBPKSBmb2xsb3dlZCBieSA3IGRpZ2l0c1xuICBDWTogL15bQS1aXShcXGR7Nn18XFxkezh9KSQvLFxuICAvLyBDWVBSVVNcbiAgQ1o6IC9eXFxkezh9JC8sXG4gIC8vIENaRUNIIFJFUFVCTElDXG4gIERFOiAvXltDRkdISktMTU5QUlRWV1hZWjAtOV17OX0kLyxcbiAgLy8gR0VSTUFOWVxuICBESzogL15cXGR7OX0kLyxcbiAgLy8gREVOTUFSS1xuICBEWjogL15cXGR7OX0kLyxcbiAgLy8gQUxHRVJJQVxuICBFRTogL14oW0EtWl1cXGR7N318W0EtWl17Mn1cXGR7N30pJC8sXG4gIC8vIEVTVE9OSUEgKEsgZm9sbG93ZWQgYnkgNy1kaWdpdHMpLCBlLXBhc3Nwb3J0cyBoYXZlIDIgVVBQRVJDQVNFIGZvbGxvd2VkIGJ5IDcgZGlnaXRzXG4gIEVTOiAvXltBLVowLTldezJ9KFtBLVowLTldPylcXGR7Nn0kLyxcbiAgLy8gU1BBSU5cbiAgRkk6IC9eW0EtWl17Mn1cXGR7N30kLyxcbiAgLy8gRklOTEFORFxuICBGUjogL15cXGR7Mn1bQS1aXXsyfVxcZHs1fSQvLFxuICAvLyBGUkFOQ0VcbiAgR0I6IC9eXFxkezl9JC8sXG4gIC8vIFVOSVRFRCBLSU5HRE9NXG4gIEdSOiAvXltBLVpdezJ9XFxkezd9JC8sXG4gIC8vIEdSRUVDRVxuICBIUjogL15cXGR7OX0kLyxcbiAgLy8gQ1JPQVRJQVxuICBIVTogL15bQS1aXXsyfShcXGR7Nn18XFxkezd9KSQvLFxuICAvLyBIVU5HQVJZXG4gIElFOiAvXltBLVowLTldezJ9XFxkezd9JC8sXG4gIC8vIElSRUxBTkRcbiAgSU46IC9eW0EtWl17MX0tP1xcZHs3fSQvLFxuICAvLyBJTkRJQVxuICBJRDogL15bQS1DXVxcZHs3fSQvLFxuICAvLyBJTkRPTkVTSUFcbiAgSVI6IC9eW0EtWl1cXGR7OH0kLyxcbiAgLy8gSVJBTlxuICBJUzogL14oQSlcXGR7N30kLyxcbiAgLy8gSUNFTEFORFxuICBJVDogL15bQS1aMC05XXsyfVxcZHs3fSQvLFxuICAvLyBJVEFMWVxuICBKTTogL15bQWFdXFxkezd9JC8sXG4gIC8vIEpBTUFJQ0FcbiAgSlA6IC9eW0EtWl17Mn1cXGR7N30kLyxcbiAgLy8gSkFQQU5cbiAgS1I6IC9eW01TXVxcZHs4fSQvLFxuICAvLyBTT1VUSCBLT1JFQSwgUkVQVUJMSUMgT0YgS09SRUEsIFtTPVBTIFBhc3Nwb3J0cywgTT1QTSBQYXNzcG9ydHNdXG4gIEtaOiAvXlthLXpBLVpdXFxkezd9JC8sXG4gIC8vIEtBWkFLSFNUQU5cbiAgTEk6IC9eW2EtekEtWl1cXGR7NX0kLyxcbiAgLy8gTElFQ0hURU5TVEVJTlxuICBMVDogL15bQS1aMC05XXs4fSQvLFxuICAvLyBMSVRIVUFOSUFcbiAgTFU6IC9eW0EtWjAtOV17OH0kLyxcbiAgLy8gTFVYRU1CVVJHXG4gIExWOiAvXltBLVowLTldezJ9XFxkezd9JC8sXG4gIC8vIExBVFZJQVxuICBMWTogL15bQS1aMC05XXs4fSQvLFxuICAvLyBMSUJZQVxuICBNVDogL15cXGR7N30kLyxcbiAgLy8gTUFMVEFcbiAgTVo6IC9eKFtBLVpdezJ9XFxkezd9KXwoXFxkezJ9W0EtWl17Mn1cXGR7NX0pJC8sXG4gIC8vIE1PWkFNQklRVUVcbiAgTVk6IC9eW0FIS11cXGR7OH0kLyxcbiAgLy8gTUFMQVlTSUFcbiAgTVg6IC9eXFxkezEwLDExfSQvLFxuICAvLyBNRVhJQ09cbiAgTkw6IC9eW0EtWl17Mn1bQS1aMC05XXs2fVxcZCQvLFxuICAvLyBORVRIRVJMQU5EU1xuICBOWjogL14oW0xsXShbQWFdfFtEZF18W0ZmXXxbSGhdKXxbRWVdKFtBYV18W1BwXSl8W05uXSlcXGR7Nn0kLyxcbiAgLy8gTkVXIFpFQUxBTkRcbiAgUEg6IC9eKFtBLVpdKFxcZHs2fXxcXGR7N31bQS1aXSkpfChbQS1aXXsyfShcXGR7Nn18XFxkezd9KSkkLyxcbiAgLy8gUEhJTElQUElORVNcbiAgUEs6IC9eW0EtWl17Mn1cXGR7N30kLyxcbiAgLy8gUEFLSVNUQU5cbiAgUEw6IC9eW0EtWl17Mn1cXGR7N30kLyxcbiAgLy8gUE9MQU5EXG4gIFBUOiAvXltBLVpdXFxkezZ9JC8sXG4gIC8vIFBPUlRVR0FMXG4gIFJPOiAvXlxcZHs4LDl9JC8sXG4gIC8vIFJPTUFOSUFcbiAgUlU6IC9eXFxkezl9JC8sXG4gIC8vIFJVU1NJQU4gRkVERVJBVElPTlxuICBTRTogL15cXGR7OH0kLyxcbiAgLy8gU1dFREVOXG4gIFNMOiAvXihQKVtBLVpdXFxkezd9JC8sXG4gIC8vIFNMT1ZFTklBXG4gIFNLOiAvXlswLTlBLVpdXFxkezd9JC8sXG4gIC8vIFNMT1ZBS0lBXG4gIFRIOiAvXltBLVpdezEsMn1cXGR7Niw3fSQvLFxuICAvLyBUSEFJTEFORFxuICBUUjogL15bQS1aXVxcZHs4fSQvLFxuICAvLyBUVVJLRVlcbiAgVUE6IC9eW0EtWl17Mn1cXGR7Nn0kLyxcbiAgLy8gVUtSQUlORVxuICBVUzogL15cXGR7OX0kLyxcbiAgLy8gVU5JVEVEIFNUQVRFU1xuICBaQTogL15bVEFNRF1cXGR7OH0kLyAvLyBTT1VUSCBBRlJJQ0Fcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgc3RyIGlzIGEgdmFsaWQgcGFzc3BvcnQgbnVtYmVyXG4gKiByZWxhdGl2ZSB0byBwcm92aWRlZCBJU08gQ291bnRyeSBDb2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb3VudHJ5Q29kZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNQYXNzcG9ydE51bWJlcihzdHIsIGNvdW50cnlDb2RlKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIC8qKiBSZW1vdmUgQWxsIFdoaXRlc3BhY2VzLCBDb252ZXJ0IHRvIFVQUEVSQ0FTRSAqL1xuICB2YXIgbm9ybWFsaXplZFN0ciA9IHN0ci5yZXBsYWNlKC9cXHMvZywgJycpLnRvVXBwZXJDYXNlKCk7XG4gIHJldHVybiBjb3VudHJ5Q29kZS50b1VwcGVyQ2FzZSgpIGluIHBhc3Nwb3J0UmVnZXhCeUNvdW50cnlDb2RlICYmIHBhc3Nwb3J0UmVnZXhCeUNvdW50cnlDb2RlW2NvdW50cnlDb2RlXS50ZXN0KG5vcm1hbGl6ZWRTdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNQb3J0O1xudmFyIF9pc0ludCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNJbnRcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIGlzUG9ydChzdHIpIHtcbiAgcmV0dXJuICgwLCBfaXNJbnQuZGVmYXVsdCkoc3RyLCB7XG4gICAgYWxsb3dfbGVhZGluZ196ZXJvZXM6IGZhbHNlLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDY1NTM1XG4gIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNQb3N0YWxDb2RlO1xuZXhwb3J0cy5sb2NhbGVzID0gdm9pZCAwO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vLyBjb21tb24gcGF0dGVybnNcbnZhciB0aHJlZURpZ2l0ID0gL15cXGR7M30kLztcbnZhciBmb3VyRGlnaXQgPSAvXlxcZHs0fSQvO1xudmFyIGZpdmVEaWdpdCA9IC9eXFxkezV9JC87XG52YXIgc2l4RGlnaXQgPSAvXlxcZHs2fSQvO1xudmFyIHBhdHRlcm5zID0ge1xuICBBRDogL15BRFxcZHszfSQvLFxuICBBVDogZm91ckRpZ2l0LFxuICBBVTogZm91ckRpZ2l0LFxuICBBWjogL15BWlxcZHs0fSQvLFxuICBCQTogL14oWzctOF1cXGR7NH0kKS8sXG4gIEJFOiBmb3VyRGlnaXQsXG4gIEJHOiBmb3VyRGlnaXQsXG4gIEJSOiAvXlxcZHs1fS1cXGR7M30kLyxcbiAgQlk6IC9eMlsxLTRdXFxkezR9JC8sXG4gIENBOiAvXltBQkNFR0hKS0xNTlBSU1RWWFldXFxkW0FCQ0VHSEotTlBSU1RWLVpdW1xcc1xcLV0/XFxkW0FCQ0VHSEotTlBSU1RWLVpdXFxkJC9pLFxuICBDSDogZm91ckRpZ2l0LFxuICBDTjogL14oMFsxLTddfDFbMDEyMzU2XXwyWzAtN118M1swLTZdfDRbMC03XXw1WzEtN118NlsxLTddfDdbMS01XXw4WzEzNDVdfDlbMDldKVxcZHs0fSQvLFxuICBDWjogL15cXGR7M31cXHM/XFxkezJ9JC8sXG4gIERFOiBmaXZlRGlnaXQsXG4gIERLOiBmb3VyRGlnaXQsXG4gIERPOiBmaXZlRGlnaXQsXG4gIERaOiBmaXZlRGlnaXQsXG4gIEVFOiBmaXZlRGlnaXQsXG4gIEVTOiAvXig1WzAtMl17MX18WzAtNF17MX1cXGR7MX0pXFxkezN9JC8sXG4gIEZJOiBmaXZlRGlnaXQsXG4gIEZSOiAvXlxcZHsyfVxccz9cXGR7M30kLyxcbiAgR0I6IC9eKGdpclxccz8wYWF8W2Etel17MSwyfVxcZFtcXGRhLXpdP1xccz8oXFxkW2Etel17Mn0pPykkL2ksXG4gIEdSOiAvXlxcZHszfVxccz9cXGR7Mn0kLyxcbiAgSFI6IC9eKFsxLTVdXFxkezR9JCkvLFxuICBIVDogL15IVFxcZHs0fSQvLFxuICBIVTogZm91ckRpZ2l0LFxuICBJRDogZml2ZURpZ2l0LFxuICBJRTogL14oPyEuKig/Om8pKVtBLVphLXpdXFxkW1xcZHddXFxzXFx3ezR9JC9pLFxuICBJTDogL14oXFxkezV9fFxcZHs3fSkkLyxcbiAgSU46IC9eKCg/ITEwfDI5fDM1fDU0fDU1fDY1fDY2fDg2fDg3fDg4fDg5KVsxLTldWzAtOV17NX0pJC8sXG4gIElSOiAvXig/IShcXGQpXFwxezN9KVsxMy05XXs0fVsxMzQ2LTldWzAxMy05XXs1fSQvLFxuICBJUzogdGhyZWVEaWdpdCxcbiAgSVQ6IGZpdmVEaWdpdCxcbiAgSlA6IC9eXFxkezN9XFwtXFxkezR9JC8sXG4gIEtFOiBmaXZlRGlnaXQsXG4gIEtSOiAvXihcXGR7NX18XFxkezZ9KSQvLFxuICBMSTogL14oOTQ4WzUtOV18OTQ5WzAtN10pJC8sXG4gIExUOiAvXkxUXFwtXFxkezV9JC8sXG4gIExVOiBmb3VyRGlnaXQsXG4gIExWOiAvXkxWXFwtXFxkezR9JC8sXG4gIExLOiBmaXZlRGlnaXQsXG4gIE1HOiB0aHJlZURpZ2l0LFxuICBNWDogZml2ZURpZ2l0LFxuICBNVDogL15bQS1aYS16XXszfVxcc3swLDF9XFxkezR9JC8sXG4gIE1ZOiBmaXZlRGlnaXQsXG4gIE5MOiAvXlsxLTldXFxkezN9XFxzPyg/IXNhfHNkfHNzKVthLXpdezJ9JC9pLFxuICBOTzogZm91ckRpZ2l0LFxuICBOUDogL14oMTB8MjF8MjJ8MzJ8MzN8MzR8NDR8NDV8NTZ8NTcpXFxkezN9JHxeKDk3NykkL2ksXG4gIE5aOiBmb3VyRGlnaXQsXG4gIFBMOiAvXlxcZHsyfVxcLVxcZHszfSQvLFxuICBQUjogL14wMFs2NzldXFxkezJ9KFsgLV1cXGR7NH0pPyQvLFxuICBQVDogL15cXGR7NH1cXC1cXGR7M30/JC8sXG4gIFJPOiBzaXhEaWdpdCxcbiAgUlU6IHNpeERpZ2l0LFxuICBTQTogZml2ZURpZ2l0LFxuICBTRTogL15bMS05XVxcZHsyfVxccz9cXGR7Mn0kLyxcbiAgU0c6IHNpeERpZ2l0LFxuICBTSTogZm91ckRpZ2l0LFxuICBTSzogL15cXGR7M31cXHM/XFxkezJ9JC8sXG4gIFRIOiBmaXZlRGlnaXQsXG4gIFROOiBmb3VyRGlnaXQsXG4gIFRXOiAvXlxcZHszfShcXGR7Mn0pPyQvLFxuICBVQTogZml2ZURpZ2l0LFxuICBVUzogL15cXGR7NX0oLVxcZHs0fSk/JC8sXG4gIFpBOiBmb3VyRGlnaXQsXG4gIFpNOiBmaXZlRGlnaXRcbn07XG52YXIgbG9jYWxlcyA9IGV4cG9ydHMubG9jYWxlcyA9IE9iamVjdC5rZXlzKHBhdHRlcm5zKTtcbmZ1bmN0aW9uIGlzUG9zdGFsQ29kZShzdHIsIGxvY2FsZSkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICBpZiAobG9jYWxlIGluIHBhdHRlcm5zKSB7XG4gICAgcmV0dXJuIHBhdHRlcm5zW2xvY2FsZV0udGVzdChzdHIpO1xuICB9IGVsc2UgaWYgKGxvY2FsZSA9PT0gJ2FueScpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcGF0dGVybnMpIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3R3YXJsb3N0L2lzdGFuYnVsL2Jsb2IvbWFzdGVyL2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLm1kI2lnbm9yaW5nLWNvZGUtZm9yLWNvdmVyYWdlLXB1cnBvc2VzXG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgICAgaWYgKHBhdHRlcm5zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSBwYXR0ZXJuc1trZXldO1xuICAgICAgICBpZiAocGF0dGVybi50ZXN0KHN0cikpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1JGQzMzMzk7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbi8qIEJhc2VkIG9uIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42ICovXG5cbnZhciBkYXRlRnVsbFllYXIgPSAvWzAtOV17NH0vO1xudmFyIGRhdGVNb250aCA9IC8oMFsxLTldfDFbMC0yXSkvO1xudmFyIGRhdGVNRGF5ID0gLyhbMTJdXFxkfDBbMS05XXwzWzAxXSkvO1xudmFyIHRpbWVIb3VyID0gLyhbMDFdWzAtOV18MlswLTNdKS87XG52YXIgdGltZU1pbnV0ZSA9IC9bMC01XVswLTldLztcbnZhciB0aW1lU2Vjb25kID0gLyhbMC01XVswLTldfDYwKS87XG52YXIgdGltZVNlY0ZyYWMgPSAvKFxcLlswLTldKyk/LztcbnZhciB0aW1lTnVtT2Zmc2V0ID0gbmV3IFJlZ0V4cChcIlstK11cIi5jb25jYXQodGltZUhvdXIuc291cmNlLCBcIjpcIikuY29uY2F0KHRpbWVNaW51dGUuc291cmNlKSk7XG52YXIgdGltZU9mZnNldCA9IG5ldyBSZWdFeHAoXCIoW3paXXxcIi5jb25jYXQodGltZU51bU9mZnNldC5zb3VyY2UsIFwiKVwiKSk7XG52YXIgcGFydGlhbFRpbWUgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KHRpbWVIb3VyLnNvdXJjZSwgXCI6XCIpLmNvbmNhdCh0aW1lTWludXRlLnNvdXJjZSwgXCI6XCIpLmNvbmNhdCh0aW1lU2Vjb25kLnNvdXJjZSkuY29uY2F0KHRpbWVTZWNGcmFjLnNvdXJjZSkpO1xudmFyIGZ1bGxEYXRlID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChkYXRlRnVsbFllYXIuc291cmNlLCBcIi1cIikuY29uY2F0KGRhdGVNb250aC5zb3VyY2UsIFwiLVwiKS5jb25jYXQoZGF0ZU1EYXkuc291cmNlKSk7XG52YXIgZnVsbFRpbWUgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KHBhcnRpYWxUaW1lLnNvdXJjZSkuY29uY2F0KHRpbWVPZmZzZXQuc291cmNlKSk7XG52YXIgcmZjMzMzOSA9IG5ldyBSZWdFeHAoXCJeXCIuY29uY2F0KGZ1bGxEYXRlLnNvdXJjZSwgXCJbIHRUXVwiKS5jb25jYXQoZnVsbFRpbWUuc291cmNlLCBcIiRcIikpO1xuZnVuY3Rpb24gaXNSRkMzMzM5KHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gcmZjMzMzOS50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1JnYkNvbG9yO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgcmdiQ29sb3IgPSAvXnJnYlxcKCgoWzAtOV18WzEtOV1bMC05XXwxWzAtOV1bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKSwpezJ9KFswLTldfFsxLTldWzAtOV18MVswLTldWzAtOV18MlswLTRdWzAtOV18MjVbMC01XSlcXCkkLztcbnZhciByZ2JhQ29sb3IgPSAvXnJnYmFcXCgoKFswLTldfFsxLTldWzAtOV18MVswLTldWzAtOV18MlswLTRdWzAtOV18MjVbMC01XSksKXszfSgwP1xcLlxcZHwxKFxcLjApP3wwKFxcLjApPylcXCkkLztcbnZhciByZ2JDb2xvclBlcmNlbnQgPSAvXnJnYlxcKCgoWzAtOV0lfFsxLTldWzAtOV0lfDEwMCUpLCl7Mn0oWzAtOV0lfFsxLTldWzAtOV0lfDEwMCUpXFwpJC87XG52YXIgcmdiYUNvbG9yUGVyY2VudCA9IC9ecmdiYVxcKCgoWzAtOV0lfFsxLTldWzAtOV0lfDEwMCUpLCl7M30oMD9cXC5cXGR8MShcXC4wKT98MChcXC4wKT8pXFwpJC87XG5mdW5jdGlvbiBpc1JnYkNvbG9yKHN0cikge1xuICB2YXIgaW5jbHVkZVBlcmNlbnRWYWx1ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIGlmICghaW5jbHVkZVBlcmNlbnRWYWx1ZXMpIHtcbiAgICByZXR1cm4gcmdiQ29sb3IudGVzdChzdHIpIHx8IHJnYmFDb2xvci50ZXN0KHN0cik7XG4gIH1cbiAgcmV0dXJuIHJnYkNvbG9yLnRlc3Qoc3RyKSB8fCByZ2JhQ29sb3IudGVzdChzdHIpIHx8IHJnYkNvbG9yUGVyY2VudC50ZXN0KHN0cikgfHwgcmdiYUNvbG9yUGVyY2VudC50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1NlbVZlcjtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX211bHRpbGluZVJlZ2V4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL211bHRpbGluZVJlZ2V4XCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vKipcbiAqIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBtYXRjaFxuICogc2VtYW50aWMgdmVyc2lvbmluZyAoU2VtVmVyKVxuICogYnVpbHQgZnJvbSBtdWx0aS1saW5lLCBtdWx0aS1wYXJ0cyByZWdleHBcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9zZW12ZXIub3JnL1xuICovXG52YXIgc2VtYW50aWNWZXJzaW9uaW5nUmVnZXggPSAoMCwgX211bHRpbGluZVJlZ2V4LmRlZmF1bHQpKFsnXigwfFsxLTldXFxcXGQqKVxcXFwuKDB8WzEtOV1cXFxcZCopXFxcXC4oMHxbMS05XVxcXFxkKiknLCAnKD86LSgoPzowfFsxLTldXFxcXGQqfFxcXFxkKlthLXotXVswLTlhLXotXSopKD86XFxcXC4oPzowfFsxLTldXFxcXGQqfFxcXFxkKlthLXotXVswLTlhLXotXSopKSopKScsICc/KD86XFxcXCsoWzAtOWEtei1dKyg/OlxcXFwuWzAtOWEtei1dKykqKSk/JCddLCAnaScpO1xuZnVuY3Rpb24gaXNTZW1WZXIoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzZW1hbnRpY1ZlcnNpb25pbmdSZWdleC50ZXN0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1NsdWc7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBjaGFyc2V0UmVnZXggPSAvXlteXFxzLV9dKD8hLio/Wy1fXXsyLH0pW2EtejAtOS1cXFxcXVteXFxzXSpbXi1fXFxzXSQvO1xuZnVuY3Rpb24gaXNTbHVnKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gY2hhcnNldFJlZ2V4LnRlc3Qoc3RyKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzU3Ryb25nUGFzc3dvcmQ7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIHVwcGVyQ2FzZVJlZ2V4ID0gL15bQS1aXSQvO1xudmFyIGxvd2VyQ2FzZVJlZ2V4ID0gL15bYS16XSQvO1xudmFyIG51bWJlclJlZ2V4ID0gL15bMC05XSQvO1xudmFyIHN5bWJvbFJlZ2V4ID0gL15bLSMhJEDCoyVeJiooKV8rfH49YHt9XFxbXFxdOlwiOyc8Pj8sLlxcL1xcXFwgXSQvO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBtaW5MZW5ndGg6IDgsXG4gIG1pbkxvd2VyY2FzZTogMSxcbiAgbWluVXBwZXJjYXNlOiAxLFxuICBtaW5OdW1iZXJzOiAxLFxuICBtaW5TeW1ib2xzOiAxLFxuICByZXR1cm5TY29yZTogZmFsc2UsXG4gIHBvaW50c1BlclVuaXF1ZTogMSxcbiAgcG9pbnRzUGVyUmVwZWF0OiAwLjUsXG4gIHBvaW50c0ZvckNvbnRhaW5pbmdMb3dlcjogMTAsXG4gIHBvaW50c0ZvckNvbnRhaW5pbmdVcHBlcjogMTAsXG4gIHBvaW50c0ZvckNvbnRhaW5pbmdOdW1iZXI6IDEwLFxuICBwb2ludHNGb3JDb250YWluaW5nU3ltYm9sOiAxMFxufTtcblxuLyogQ291bnRzIG51bWJlciBvZiBvY2N1cnJlbmNlcyBvZiBlYWNoIGNoYXIgaW4gYSBzdHJpbmdcbiAqIGNvdWxkIGJlIG1vdmVkIHRvIHV0aWwvID9cbiovXG5mdW5jdGlvbiBjb3VudENoYXJzKHN0cikge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIEFycmF5LmZyb20oc3RyKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFyKSB7XG4gICAgdmFyIGN1clZhbCA9IHJlc3VsdFtjaGFyXTtcbiAgICBpZiAoY3VyVmFsKSB7XG4gICAgICByZXN1bHRbY2hhcl0gKz0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2NoYXJdID0gMTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiBSZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgYSBwYXNzd29yZCAqL1xuZnVuY3Rpb24gYW5hbHl6ZVBhc3N3b3JkKHBhc3N3b3JkKSB7XG4gIHZhciBjaGFyTWFwID0gY291bnRDaGFycyhwYXNzd29yZCk7XG4gIHZhciBhbmFseXNpcyA9IHtcbiAgICBsZW5ndGg6IHBhc3N3b3JkLmxlbmd0aCxcbiAgICB1bmlxdWVDaGFyczogT2JqZWN0LmtleXMoY2hhck1hcCkubGVuZ3RoLFxuICAgIHVwcGVyY2FzZUNvdW50OiAwLFxuICAgIGxvd2VyY2FzZUNvdW50OiAwLFxuICAgIG51bWJlckNvdW50OiAwLFxuICAgIHN5bWJvbENvdW50OiAwXG4gIH07XG4gIE9iamVjdC5rZXlzKGNoYXJNYXApLmZvckVhY2goZnVuY3Rpb24gKGNoYXIpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh1cHBlckNhc2VSZWdleC50ZXN0KGNoYXIpKSB7XG4gICAgICBhbmFseXNpcy51cHBlcmNhc2VDb3VudCArPSBjaGFyTWFwW2NoYXJdO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlUmVnZXgudGVzdChjaGFyKSkge1xuICAgICAgYW5hbHlzaXMubG93ZXJjYXNlQ291bnQgKz0gY2hhck1hcFtjaGFyXTtcbiAgICB9IGVsc2UgaWYgKG51bWJlclJlZ2V4LnRlc3QoY2hhcikpIHtcbiAgICAgIGFuYWx5c2lzLm51bWJlckNvdW50ICs9IGNoYXJNYXBbY2hhcl07XG4gICAgfSBlbHNlIGlmIChzeW1ib2xSZWdleC50ZXN0KGNoYXIpKSB7XG4gICAgICBhbmFseXNpcy5zeW1ib2xDb3VudCArPSBjaGFyTWFwW2NoYXJdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhbmFseXNpcztcbn1cbmZ1bmN0aW9uIHNjb3JlUGFzc3dvcmQoYW5hbHlzaXMsIHNjb3JpbmdPcHRpb25zKSB7XG4gIHZhciBwb2ludHMgPSAwO1xuICBwb2ludHMgKz0gYW5hbHlzaXMudW5pcXVlQ2hhcnMgKiBzY29yaW5nT3B0aW9ucy5wb2ludHNQZXJVbmlxdWU7XG4gIHBvaW50cyArPSAoYW5hbHlzaXMubGVuZ3RoIC0gYW5hbHlzaXMudW5pcXVlQ2hhcnMpICogc2NvcmluZ09wdGlvbnMucG9pbnRzUGVyUmVwZWF0O1xuICBpZiAoYW5hbHlzaXMubG93ZXJjYXNlQ291bnQgPiAwKSB7XG4gICAgcG9pbnRzICs9IHNjb3JpbmdPcHRpb25zLnBvaW50c0ZvckNvbnRhaW5pbmdMb3dlcjtcbiAgfVxuICBpZiAoYW5hbHlzaXMudXBwZXJjYXNlQ291bnQgPiAwKSB7XG4gICAgcG9pbnRzICs9IHNjb3JpbmdPcHRpb25zLnBvaW50c0ZvckNvbnRhaW5pbmdVcHBlcjtcbiAgfVxuICBpZiAoYW5hbHlzaXMubnVtYmVyQ291bnQgPiAwKSB7XG4gICAgcG9pbnRzICs9IHNjb3JpbmdPcHRpb25zLnBvaW50c0ZvckNvbnRhaW5pbmdOdW1iZXI7XG4gIH1cbiAgaWYgKGFuYWx5c2lzLnN5bWJvbENvdW50ID4gMCkge1xuICAgIHBvaW50cyArPSBzY29yaW5nT3B0aW9ucy5wb2ludHNGb3JDb250YWluaW5nU3ltYm9sO1xuICB9XG4gIHJldHVybiBwb2ludHM7XG59XG5mdW5jdGlvbiBpc1N0cm9uZ1Bhc3N3b3JkKHN0cikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgdmFyIGFuYWx5c2lzID0gYW5hbHl6ZVBhc3N3b3JkKHN0cik7XG4gIG9wdGlvbnMgPSAoMCwgX21lcmdlLmRlZmF1bHQpKG9wdGlvbnMgfHwge30sIGRlZmF1bHRPcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMucmV0dXJuU2NvcmUpIHtcbiAgICByZXR1cm4gc2NvcmVQYXNzd29yZChhbmFseXNpcywgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIGFuYWx5c2lzLmxlbmd0aCA+PSBvcHRpb25zLm1pbkxlbmd0aCAmJiBhbmFseXNpcy5sb3dlcmNhc2VDb3VudCA+PSBvcHRpb25zLm1pbkxvd2VyY2FzZSAmJiBhbmFseXNpcy51cHBlcmNhc2VDb3VudCA+PSBvcHRpb25zLm1pblVwcGVyY2FzZSAmJiBhbmFseXNpcy5udW1iZXJDb3VudCA+PSBvcHRpb25zLm1pbk51bWJlcnMgJiYgYW5hbHlzaXMuc3ltYm9sQ291bnQgPj0gb3B0aW9ucy5taW5TeW1ib2xzO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNTdXJyb2dhdGVQYWlyO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgc3Vycm9nYXRlUGFpciA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdLztcbmZ1bmN0aW9uIGlzU3Vycm9nYXRlUGFpcihzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIHN1cnJvZ2F0ZVBhaXIudGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNUYXhJRDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgYWxnb3JpdGhtcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3V0aWwvYWxnb3JpdGhtc1wiKSk7XG52YXIgX2lzRGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNEYXRlXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApIHJldHVybiBudWxsOyB2YXIgciA9IG5ldyBXZWFrTWFwKCksIHQgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IHJldHVybiBlID8gdCA6IHI7IH0pKGUpOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlLCByKSB7IGlmICghciAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT0gX3R5cGVvZihlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUocik7IGlmICh0ICYmIHQuaGFzKGUpKSByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0geyBfX3Byb3RvX186IG51bGwgfSwgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciB1IGluIGUpIGlmIChcImRlZmF1bHRcIiAhPT0gdSAmJiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHUpKSB7IHZhciBpID0gYSA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgdSkgOiBudWxsOyBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgdSwgaSkgOiBuW3VdID0gZVt1XTsgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9XG4vKipcbiAqIFRJTiBWYWxpZGF0aW9uXG4gKiBWYWxpZGF0ZXMgVGF4IElkZW50aWZpY2F0aW9uIE51bWJlcnMgKFRJTnMpIGZyb20gdGhlIFVTLCBFVSBtZW1iZXIgc3RhdGVzIGFuZCB0aGUgVW5pdGVkIEtpbmdkb20uXG4gKlxuICogRVUtVUs6XG4gKiBOYXRpb25hbCBUSU4gdmFsaWRpdHkgaXMgY2FsY3VsYXRlZCB1c2luZyBwdWJsaWMgYWxnb3JpdGhtcyBhcyBtYWRlIGF2YWlsYWJsZSBieSBERyBUQVhVRC5cbiAqXG4gKiBTZWUgYGh0dHBzOi8vZWMuZXVyb3BhLmV1L3RheGF0aW9uX2N1c3RvbXMvdGluL3NwZWNzL0ZTLVRJTiUyMEFsZ29yaXRobXMtUHVibGljLmRvY3hgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFVTOlxuICogQW4gRW1wbG95ZXIgSWRlbnRpZmljYXRpb24gTnVtYmVyIChFSU4pLCBhbHNvIGtub3duIGFzIGEgRmVkZXJhbCBUYXggSWRlbnRpZmljYXRpb24gTnVtYmVyLFxuICogIGlzIHVzZWQgdG8gaWRlbnRpZnkgYSBidXNpbmVzcyBlbnRpdHkuXG4gKlxuICogTk9URVM6XG4gKiAgLSBQcmVmaXggNDcgaXMgYmVpbmcgcmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2VcbiAqICAtIFByZWZpeGVzIDI2LCAyNywgNDUsIDQ2IGFuZCA0NyB3ZXJlIHByZXZpb3VzbHkgYXNzaWduZWQgYnkgdGhlIFBoaWxhZGVscGhpYSBjYW1wdXMuXG4gKlxuICogU2VlIGBodHRwOi8vd3d3Lmlycy5nb3YvQnVzaW5lc3Nlcy9TbWFsbC1CdXNpbmVzc2VzLSYtU2VsZi1FbXBsb3llZC9Ib3ctRUlOcy1hcmUtQXNzaWduZWQtYW5kLVZhbGlkLUVJTi1QcmVmaXhlc2BcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICovXG5cbi8vIExvY2FsZSBmdW5jdGlvbnNcblxuLypcbiAqIGJnLUJHIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChFZGluZW4gZ3Jhxb5kYW5za2kgbm9tZXIgKEVHTi/QldCT0J0pLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgaWYgYmlydGggZGF0ZSAoZmlyc3Qgc2l4IGRpZ2l0cykgaXMgdmFsaWQgYW5kIGNhbGN1bGF0ZXMgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKi9cbmZ1bmN0aW9uIGJnQmdDaGVjayh0aW4pIHtcbiAgLy8gRXh0cmFjdCBmdWxsIHllYXIsIG5vcm1hbGl6ZSBtb250aCBhbmQgY2hlY2sgYmlydGggZGF0ZSB2YWxpZGl0eVxuICB2YXIgY2VudHVyeV95ZWFyID0gdGluLnNsaWNlKDAsIDIpO1xuICB2YXIgbW9udGggPSBwYXJzZUludCh0aW4uc2xpY2UoMiwgNCksIDEwKTtcbiAgaWYgKG1vbnRoID4gNDApIHtcbiAgICBtb250aCAtPSA0MDtcbiAgICBjZW50dXJ5X3llYXIgPSBcIjIwXCIuY29uY2F0KGNlbnR1cnlfeWVhcik7XG4gIH0gZWxzZSBpZiAobW9udGggPiAyMCkge1xuICAgIG1vbnRoIC09IDIwO1xuICAgIGNlbnR1cnlfeWVhciA9IFwiMThcIi5jb25jYXQoY2VudHVyeV95ZWFyKTtcbiAgfSBlbHNlIHtcbiAgICBjZW50dXJ5X3llYXIgPSBcIjE5XCIuY29uY2F0KGNlbnR1cnlfeWVhcik7XG4gIH1cbiAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICBtb250aCA9IFwiMFwiLmNvbmNhdChtb250aCk7XG4gIH1cbiAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChjZW50dXJ5X3llYXIsIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDQsIDYpKTtcbiAgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVlZWS9NTS9ERCcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gc3BsaXQgZGlnaXRzIGludG8gYW4gYXJyYXkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuICB2YXIgZGlnaXRzID0gdGluLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KTtcblxuICAvLyBDYWxjdWxhdGUgY2hlY2tzdW0gYnkgbXVsdGlwbHlpbmcgZGlnaXRzIHdpdGggZml4ZWQgdmFsdWVzXG4gIHZhciBtdWx0aXBfbG9va3VwID0gWzIsIDQsIDgsIDUsIDEwLCA5LCA3LCAzLCA2XTtcbiAgdmFyIGNoZWNrc3VtID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdWx0aXBfbG9va3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldICogbXVsdGlwX2xvb2t1cFtpXTtcbiAgfVxuICBjaGVja3N1bSA9IGNoZWNrc3VtICUgMTEgPT09IDEwID8gMCA6IGNoZWNrc3VtICUgMTE7XG4gIHJldHVybiBjaGVja3N1bSA9PT0gZGlnaXRzWzldO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGFuIGlucHV0IGlzIGEgdmFsaWQgQ2FuYWRpYW4gU0lOIChTb2NpYWwgSW5zdXJhbmNlIE51bWJlcilcbiAqXG4gKiBUaGUgU29jaWFsIEluc3VyYW5jZSBOdW1iZXIgKFNJTikgaXMgYSA5IGRpZ2l0IG51bWJlciB0aGF0XG4gKiB5b3UgbmVlZCB0byB3b3JrIGluIENhbmFkYSBvciB0byBoYXZlIGFjY2VzcyB0byBnb3Zlcm5tZW50IHByb2dyYW1zIGFuZCBiZW5lZml0cy5cbiAqXG4gKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tb2NpYWxfSW5zdXJhbmNlX051bWJlclxuICogaHR0cHM6Ly93d3cuY2FuYWRhLmNhL2VuL2VtcGxveW1lbnQtc29jaWFsLWRldmVsb3BtZW50L3NlcnZpY2VzL3Npbi5odG1sXG4gKiBodHRwczovL3d3dy5jb2RlcmNydW5jaC5jb20vY2hhbGxlbmdlLzgxOTMwMjQ4OC9zaW4tdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0NhbmFkaWFuU0lOKGlucHV0KSB7XG4gIHZhciBkaWdpdHNBcnJheSA9IGlucHV0LnNwbGl0KCcnKTtcbiAgdmFyIGV2ZW4gPSBkaWdpdHNBcnJheS5maWx0ZXIoZnVuY3Rpb24gKF8sIGlkeCkge1xuICAgIHJldHVybiBpZHggJSAyO1xuICB9KS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gTnVtYmVyKGkpICogMjtcbiAgfSkuam9pbignJykuc3BsaXQoJycpO1xuICB2YXIgdG90YWwgPSBkaWdpdHNBcnJheS5maWx0ZXIoZnVuY3Rpb24gKF8sIGlkeCkge1xuICAgIHJldHVybiAhKGlkeCAlIDIpO1xuICB9KS5jb25jYXQoZXZlbikubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIE51bWJlcihpKTtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cikge1xuICAgIHJldHVybiBhY2MgKyBjdXI7XG4gIH0pO1xuICByZXR1cm4gdG90YWwgJSAxMCA9PT0gMDtcbn1cblxuLypcbiAqIGNzLUNaIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChSb2Ruw6kgxI3DrXNsbyAoUsSMKSwgcGVyc29ucyBvbmx5KVxuICogQ2hlY2tzIGlmIGJpcnRoIGRhdGUgKGZpcnN0IHNpeCBkaWdpdHMpIGlzIHZhbGlkIGFuZCBkaXZpc2liaWxpdHkgYnkgMTFcbiAqIE1hdGVyaWFsIG5vdCBpbiBERyBUQVhVRCBkb2N1bWVudCBzb3VyY2VkIGZyb206XG4gKiAtYGh0dHBzOi8vbG9yZW5jLmluZm8vM01BMzgxL292ZXJlbmktc3ByYXZub3N0aS1yb2RuZWhvLWNpc2xhLmh0bWBcbiAqIC1gaHR0cHM6Ly93d3cubXZjci5jei9jbGFuZWsvcmFkeS1hLXNsdXpieS1kb2t1bWVudHktcm9kbmUtY2lzbG8uYXNweGBcbiAqL1xuZnVuY3Rpb24gY3NDekNoZWNrKHRpbikge1xuICB0aW4gPSB0aW4ucmVwbGFjZSgvXFxXLywgJycpO1xuXG4gIC8vIEV4dHJhY3QgZnVsbCB5ZWFyIGZyb20gVElOIGxlbmd0aFxuICB2YXIgZnVsbF95ZWFyID0gcGFyc2VJbnQodGluLnNsaWNlKDAsIDIpLCAxMCk7XG4gIGlmICh0aW4ubGVuZ3RoID09PSAxMCkge1xuICAgIGlmIChmdWxsX3llYXIgPCA1NCkge1xuICAgICAgZnVsbF95ZWFyID0gXCIyMFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxsX3llYXIgPSBcIjE5XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aW4uc2xpY2UoNikgPT09ICcwMDAnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBUaHJlZS16ZXJvIHNlcmlhbCBub3QgYXNzaWduZWQgYmVmb3JlIDE5NTRcbiAgICBpZiAoZnVsbF95ZWFyIDwgNTQpIHtcbiAgICAgIGZ1bGxfeWVhciA9IFwiMTlcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyBObyAxOFhYIHllYXJzIHNlZW4gaW4gYW55IG9mIHRoZSByZXNvdXJjZXNcbiAgICB9XG4gIH1cbiAgLy8gQWRkIG1pc3NpbmcgemVybyBpZiBuZWVkZWRcbiAgaWYgKGZ1bGxfeWVhci5sZW5ndGggPT09IDMpIHtcbiAgICBmdWxsX3llYXIgPSBbZnVsbF95ZWFyLnNsaWNlKDAsIDIpLCAnMCcsIGZ1bGxfeWVhci5zbGljZSgyKV0uam9pbignJyk7XG4gIH1cblxuICAvLyBFeHRyYWN0IG1vbnRoIGZyb20gVElOIGFuZCBub3JtYWxpemVcbiAgdmFyIG1vbnRoID0gcGFyc2VJbnQodGluLnNsaWNlKDIsIDQpLCAxMCk7XG4gIGlmIChtb250aCA+IDUwKSB7XG4gICAgbW9udGggLT0gNTA7XG4gIH1cbiAgaWYgKG1vbnRoID4gMjApIHtcbiAgICAvLyBNb250aC1wbHVzLXR3ZW50eSB3YXMgb25seSBpbnRyb2R1Y2VkIGluIDIwMDRcbiAgICBpZiAocGFyc2VJbnQoZnVsbF95ZWFyLCAxMCkgPCAyMDA0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG1vbnRoIC09IDIwO1xuICB9XG4gIGlmIChtb250aCA8IDEwKSB7XG4gICAgbW9udGggPSBcIjBcIi5jb25jYXQobW9udGgpO1xuICB9XG5cbiAgLy8gQ2hlY2sgZGF0ZSB2YWxpZGl0eVxuICB2YXIgZGF0ZSA9IFwiXCIuY29uY2F0KGZ1bGxfeWVhciwgXCIvXCIpLmNvbmNhdChtb250aCwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoNCwgNikpO1xuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBWZXJpZnkgZGl2aXNpYmlsaXR5IGJ5IDExXG4gIGlmICh0aW4ubGVuZ3RoID09PSAxMCkge1xuICAgIGlmIChwYXJzZUludCh0aW4sIDEwKSAlIDExICE9PSAwKSB7XG4gICAgICAvLyBTb21lIG51bWJlcnMgdXAgdG8gYW5kIGluY2x1ZGluZyAxOTg1IGFyZSBzdGlsbCB2YWxpZCBpZlxuICAgICAgLy8gY2hlY2sgKGxhc3QpIGRpZ2l0IGVxdWFscyAwIGFuZCBtb2R1bG8gb2YgZmlyc3QgOSBkaWdpdHMgZXF1YWxzIDEwXG4gICAgICB2YXIgY2hlY2tkaWdpdCA9IHBhcnNlSW50KHRpbi5zbGljZSgwLCA5KSwgMTApICUgMTE7XG4gICAgICBpZiAocGFyc2VJbnQoZnVsbF95ZWFyLCAxMCkgPCAxOTg2ICYmIGNoZWNrZGlnaXQgPT09IDEwKSB7XG4gICAgICAgIGlmIChwYXJzZUludCh0aW4uc2xpY2UoOSksIDEwKSAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLypcbiAqIGRlLUFUIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChBYmdhYmVua29udG9udW1tZXIsIHBlcnNvbnMvZW50aXRpZXMpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGxpbmcgbHVobkNoZWNrKClcbiAqL1xuZnVuY3Rpb24gZGVBdENoZWNrKHRpbikge1xuICByZXR1cm4gYWxnb3JpdGhtcy5sdWhuQ2hlY2sodGluKTtcbn1cblxuLypcbiAqIGRlLURFIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChTdGV1ZXJpZGVudGlmaWthdGlvbnNudW1tZXIgKFN0ZXVlci1JZE5yLiksIHBlcnNvbnMgb25seSlcbiAqIFRlc3RzIGZvciBzaW5nbGUgZHVwbGljYXRlL3RyaXBsaWNhdGUgdmFsdWUsIHRoZW4gY2FsY3VsYXRlcyBJU08gNzA2NCBjaGVjayAobGFzdCkgZGlnaXRcbiAqIFBhcnRpYWwgaW1wbGVtZW50YXRpb24gb2Ygc3BlYyAoc2FtZSByZXN1bHQgd2l0aCBib3RoIGFsZ29yaXRobXMgYWx3YXlzKVxuICovXG5mdW5jdGlvbiBkZURlQ2hlY2sodGluKSB7XG4gIC8vIFNwbGl0IGRpZ2l0cyBpbnRvIGFuIGFycmF5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgdmFyIGRpZ2l0cyA9IHRpbi5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgfSk7XG5cbiAgLy8gRmlsbCBhcnJheSB3aXRoIHN0cmluZ3Mgb2YgbnVtYmVyIHBvc2l0aW9uc1xuICB2YXIgb2NjdXJlbmNlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZ2l0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBvY2N1cmVuY2VzLnB1c2goJycpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGlnaXRzLmxlbmd0aCAtIDE7IGorKykge1xuICAgICAgaWYgKGRpZ2l0c1tpXSA9PT0gZGlnaXRzW2pdKSB7XG4gICAgICAgIG9jY3VyZW5jZXNbaV0gKz0gajtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgZGlnaXRzIHdpdGggb25lIG9jY3VyZW5jZSBhbmQgdGVzdCBmb3Igb25seSBvbmUgZHVwbGljYXRlL3RyaXBsaWNhdGVcbiAgb2NjdXJlbmNlcyA9IG9jY3VyZW5jZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGEubGVuZ3RoID4gMTtcbiAgfSk7XG4gIGlmIChvY2N1cmVuY2VzLmxlbmd0aCAhPT0gMiAmJiBvY2N1cmVuY2VzLmxlbmd0aCAhPT0gMykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEluIGNhc2Ugb2YgdHJpcGxpY2F0ZSB2YWx1ZSBvbmx5IHR3byBkaWdpdHMgYXJlIGFsbG93ZWQgbmV4dCB0byBlYWNoIG90aGVyXG4gIGlmIChvY2N1cmVuY2VzWzBdLmxlbmd0aCA9PT0gMykge1xuICAgIHZhciB0cmlwX2xvY2F0aW9ucyA9IG9jY3VyZW5jZXNbMF0uc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgICB9KTtcbiAgICB2YXIgcmVjdXJyZW50ID0gMDsgLy8gQW1vdW50IG9mIG5laWdoYm91ciBvY2N1cmVuY2VzXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRyaXBfbG9jYXRpb25zLmxlbmd0aCAtIDE7IF9pKyspIHtcbiAgICAgIGlmICh0cmlwX2xvY2F0aW9uc1tfaV0gKyAxID09PSB0cmlwX2xvY2F0aW9uc1tfaSArIDFdKSB7XG4gICAgICAgIHJlY3VycmVudCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVjdXJyZW50ID09PSAyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBhbGdvcml0aG1zLmlzbzcwNjRDaGVjayh0aW4pO1xufVxuXG4vKlxuICogZGstREsgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKENQUi1udW1tZXIgKHBlcnNvbm51bW1lciksIHBlcnNvbnMgb25seSlcbiAqIENoZWNrcyBpZiBiaXJ0aCBkYXRlIChmaXJzdCBzaXggZGlnaXRzKSBpcyB2YWxpZCBhbmQgYXNzaWduZWQgdG8gY2VudHVyeSAoc2V2ZW50aCkgZGlnaXQsXG4gKiBhbmQgY2FsY3VsYXRlcyBjaGVjayAobGFzdCkgZGlnaXRcbiAqL1xuZnVuY3Rpb24gZGtEa0NoZWNrKHRpbikge1xuICB0aW4gPSB0aW4ucmVwbGFjZSgvXFxXLywgJycpO1xuXG4gIC8vIEV4dHJhY3QgeWVhciwgY2hlY2sgaWYgdmFsaWQgZm9yIGdpdmVuIGNlbnR1cnkgZGlnaXQgYW5kIGFkZCBjZW50dXJ5XG4gIHZhciB5ZWFyID0gcGFyc2VJbnQodGluLnNsaWNlKDQsIDYpLCAxMCk7XG4gIHZhciBjZW50dXJ5X2RpZ2l0ID0gdGluLnNsaWNlKDYsIDcpO1xuICBzd2l0Y2ggKGNlbnR1cnlfZGlnaXQpIHtcbiAgICBjYXNlICcwJzpcbiAgICBjYXNlICcxJzpcbiAgICBjYXNlICcyJzpcbiAgICBjYXNlICczJzpcbiAgICAgIHllYXIgPSBcIjE5XCIuY29uY2F0KHllYXIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnNCc6XG4gICAgY2FzZSAnOSc6XG4gICAgICBpZiAoeWVhciA8IDM3KSB7XG4gICAgICAgIHllYXIgPSBcIjIwXCIuY29uY2F0KHllYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeWVhciA9IFwiMTlcIi5jb25jYXQoeWVhcik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHllYXIgPCAzNykge1xuICAgICAgICB5ZWFyID0gXCIyMFwiLmNvbmNhdCh5ZWFyKTtcbiAgICAgIH0gZWxzZSBpZiAoeWVhciA+IDU4KSB7XG4gICAgICAgIHllYXIgPSBcIjE4XCIuY29uY2F0KHllYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgLy8gQWRkIG1pc3NpbmcgemVybyBpZiBuZWVkZWRcbiAgaWYgKHllYXIubGVuZ3RoID09PSAzKSB7XG4gICAgeWVhciA9IFt5ZWFyLnNsaWNlKDAsIDIpLCAnMCcsIHllYXIuc2xpY2UoMildLmpvaW4oJycpO1xuICB9XG4gIC8vIENoZWNrIGRhdGUgdmFsaWRpdHlcbiAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdCh5ZWFyLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSgyLCA0KSwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoMCwgMikpO1xuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBTcGxpdCBkaWdpdHMgaW50byBhbiBhcnJheSBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG4gIHZhciBkaWdpdHMgPSB0aW4uc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pO1xuICB2YXIgY2hlY2tzdW0gPSAwO1xuICB2YXIgd2VpZ2h0ID0gNDtcbiAgLy8gTXVsdGlwbHkgYnkgd2VpZ2h0IGFuZCBhZGQgdG8gY2hlY2tzdW1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICBjaGVja3N1bSArPSBkaWdpdHNbaV0gKiB3ZWlnaHQ7XG4gICAgd2VpZ2h0IC09IDE7XG4gICAgaWYgKHdlaWdodCA9PT0gMSkge1xuICAgICAgd2VpZ2h0ID0gNztcbiAgICB9XG4gIH1cbiAgY2hlY2tzdW0gJT0gMTE7XG4gIGlmIChjaGVja3N1bSA9PT0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gY2hlY2tzdW0gPT09IDAgPyBkaWdpdHNbOV0gPT09IDAgOiBkaWdpdHNbOV0gPT09IDExIC0gY2hlY2tzdW07XG59XG5cbi8qXG4gKiBlbC1DWSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoQXJpdGhtb3MgRm9yb2xvZ2lrb3UgTWl0cm9vdSAoQUZNL86RzqbOnCksIHBlcnNvbnMgb25seSlcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgY2FsY3VsYXRpbmcgQVNDSUkgdmFsdWUgb2YgY2hlY2sgKGxhc3QpIGNoYXJhY3RlclxuICovXG5mdW5jdGlvbiBlbEN5Q2hlY2sodGluKSB7XG4gIC8vIHNwbGl0IGRpZ2l0cyBpbnRvIGFuIGFycmF5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgdmFyIGRpZ2l0cyA9IHRpbi5zbGljZSgwLCA4KS5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgfSk7XG4gIHZhciBjaGVja3N1bSA9IDA7XG4gIC8vIGFkZCBkaWdpdHMgaW4gZXZlbiBwbGFjZXNcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBkaWdpdHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBjaGVja3N1bSArPSBkaWdpdHNbaV07XG4gIH1cblxuICAvLyBhZGQgZGlnaXRzIGluIG9kZCBwbGFjZXNcbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZGlnaXRzLmxlbmd0aDsgX2kyICs9IDIpIHtcbiAgICBpZiAoZGlnaXRzW19pMl0gPCAyKSB7XG4gICAgICBjaGVja3N1bSArPSAxIC0gZGlnaXRzW19pMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrc3VtICs9IDIgKiAoZGlnaXRzW19pMl0gLSAyKSArIDU7XG4gICAgICBpZiAoZGlnaXRzW19pMl0gPiA0KSB7XG4gICAgICAgIGNoZWNrc3VtICs9IDI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoZWNrc3VtICUgMjYgKyA2NSkgPT09IHRpbi5jaGFyQXQoOCk7XG59XG5cbi8qXG4gKiBlbC1HUiB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoQXJpdGhtb3MgRm9yb2xvZ2lrb3UgTWl0cm9vdSAoQUZNL86RzqbOnCksIHBlcnNvbnMvZW50aXRpZXMpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdFxuICogQWxnb3JpdGhtIG5vdCBpbiBERyBUQVhVRCBkb2N1bWVudC0gc291cmNlZCBmcm9tOlxuICogLSBgaHR0cDovL2VwaXhlaXJpc2kuZ3IvJUNFJTlBJUNFJUExJUNFJTk5JUNFJUEzJUNFJTk5JUNFJTlDJUNFJTkxLSVDRSU5OCVDRSU5NSVDRSU5QyVDRSU5MSVDRSVBNCVDRSU5MS0lQ0UlQTYlQ0UlOUYlQ0UlQTElQ0UlOUYlQ0UlOUIlQ0UlOUYlQ0UlOTMlQ0UlOTklQ0UlOTElQ0UlQTMtJUNFJTlBJUNFJTkxJUNFJTk5LSVDRSU5QiVDRSU5RiVDRSU5MyVDRSU5OSVDRSVBMyVDRSVBNCVDRSU5OSVDRSU5QSVDRSU5NyVDRSVBMy8yMzc5MS8lQ0UlOTElQ0YlODElQ0UlQjklQ0UlQjglQ0UlQkMlQ0YlOEMlQ0YlODItJUNFJUE2JUNFJUJGJUNGJTgxJUNFJUJGJUNFJUJCJUNFJUJGJUNFJUIzJUNFJUI5JUNFJUJBJUNFJUJGJUNGJThELSVDRSU5QyVDRSVCNyVDRiU4NCVDRiU4MSVDRiU4RSVDRSVCRiVDRiU4NWBcbiAqL1xuZnVuY3Rpb24gZWxHckNoZWNrKHRpbikge1xuICAvLyBzcGxpdCBkaWdpdHMgaW50byBhbiBhcnJheSBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG4gIHZhciBkaWdpdHMgPSB0aW4uc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pO1xuICB2YXIgY2hlY2tzdW0gPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgIGNoZWNrc3VtICs9IGRpZ2l0c1tpXSAqIE1hdGgucG93KDIsIDggLSBpKTtcbiAgfVxuICByZXR1cm4gY2hlY2tzdW0gJSAxMSAlIDEwID09PSBkaWdpdHNbOF07XG59XG5cbi8qXG4gKiBlbi1HQiB2YWxpZGF0aW9uIGZ1bmN0aW9uIChzaG91bGQgZ28gaGVyZSBpZiBuZWVkZWQpXG4gKiAoTmF0aW9uYWwgSW5zdXJhbmNlIE51bWJlciAoTklOTykgb3IgVW5pcXVlIFRheHBheWVyIFJlZmVyZW5jZSAoVVRSKSxcbiAqIHBlcnNvbnMvZW50aXRpZXMgcmVzcGVjdGl2ZWx5KVxuICovXG5cbi8qXG4gKiBlbi1JRSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoUGVyc29uYWwgUHVibGljIFNlcnZpY2UgTnVtYmVyIChQUFMgTm8pLCBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChzZWNvbmQgdG8gbGFzdCkgY2hhcmFjdGVyXG4gKi9cbmZ1bmN0aW9uIGVuSWVDaGVjayh0aW4pIHtcbiAgdmFyIGNoZWNrc3VtID0gYWxnb3JpdGhtcy5yZXZlcnNlTXVsdGlwbHlBbmRTdW0odGluLnNwbGl0KCcnKS5zbGljZSgwLCA3KS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KSwgOCk7XG4gIGlmICh0aW4ubGVuZ3RoID09PSA5ICYmIHRpbls4XSAhPT0gJ1cnKSB7XG4gICAgY2hlY2tzdW0gKz0gKHRpbls4XS5jaGFyQ29kZUF0KDApIC0gNjQpICogOTtcbiAgfVxuICBjaGVja3N1bSAlPSAyMztcbiAgaWYgKGNoZWNrc3VtID09PSAwKSB7XG4gICAgcmV0dXJuIHRpbls3XS50b1VwcGVyQ2FzZSgpID09PSAnVyc7XG4gIH1cbiAgcmV0dXJuIHRpbls3XS50b1VwcGVyQ2FzZSgpID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY0ICsgY2hlY2tzdW0pO1xufVxuXG4vLyBWYWxpZCBVUyBJUlMgY2FtcHVzIHByZWZpeGVzXG52YXIgZW5Vc0NhbXB1c1ByZWZpeCA9IHtcbiAgYW5kb3ZlcjogWycxMCcsICcxMiddLFxuICBhdGxhbnRhOiBbJzYwJywgJzY3J10sXG4gIGF1c3RpbjogWyc1MCcsICc1MyddLFxuICBicm9va2hhdmVuOiBbJzAxJywgJzAyJywgJzAzJywgJzA0JywgJzA1JywgJzA2JywgJzExJywgJzEzJywgJzE0JywgJzE2JywgJzIxJywgJzIyJywgJzIzJywgJzI1JywgJzM0JywgJzUxJywgJzUyJywgJzU0JywgJzU1JywgJzU2JywgJzU3JywgJzU4JywgJzU5JywgJzY1J10sXG4gIGNpbmNpbm5hdGk6IFsnMzAnLCAnMzInLCAnMzUnLCAnMzYnLCAnMzcnLCAnMzgnLCAnNjEnXSxcbiAgZnJlc25vOiBbJzE1JywgJzI0J10sXG4gIGludGVybmV0OiBbJzIwJywgJzI2JywgJzI3JywgJzQ1JywgJzQ2JywgJzQ3J10sXG4gIGthbnNhczogWyc0MCcsICc0NCddLFxuICBtZW1waGlzOiBbJzk0JywgJzk1J10sXG4gIG9nZGVuOiBbJzgwJywgJzkwJ10sXG4gIHBoaWxhZGVscGhpYTogWyczMycsICczOScsICc0MScsICc0MicsICc0MycsICc0NicsICc0OCcsICc2MicsICc2MycsICc2NCcsICc2NicsICc2OCcsICc3MScsICc3MicsICc3MycsICc3NCcsICc3NScsICc3NicsICc3NycsICc4MScsICc4MicsICc4MycsICc4NCcsICc4NScsICc4NicsICc4NycsICc4OCcsICc5MScsICc5MicsICc5MycsICc5OCcsICc5OSddLFxuICBzYmE6IFsnMzEnXVxufTtcblxuLy8gUmV0dXJuIGFuIGFycmF5IG9mIGFsbCBVUyBJUlMgY2FtcHVzIHByZWZpeGVzXG5mdW5jdGlvbiBlblVzR2V0UHJlZml4ZXMoKSB7XG4gIHZhciBwcmVmaXhlcyA9IFtdO1xuICBmb3IgKHZhciBsb2NhdGlvbiBpbiBlblVzQ2FtcHVzUHJlZml4KSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvdHdhcmxvc3QvaXN0YW5idWwvYmxvYi9tYXN0ZXIvaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UubWQjaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UtcHVycG9zZXNcbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgIGlmIChlblVzQ2FtcHVzUHJlZml4Lmhhc093blByb3BlcnR5KGxvY2F0aW9uKSkge1xuICAgICAgcHJlZml4ZXMucHVzaC5hcHBseShwcmVmaXhlcywgX3RvQ29uc3VtYWJsZUFycmF5KGVuVXNDYW1wdXNQcmVmaXhbbG9jYXRpb25dKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuLypcbiAqIGVuLVVTIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIFZlcmlmeSB0aGF0IHRoZSBUSU4gc3RhcnRzIHdpdGggYSB2YWxpZCBJUlMgY2FtcHVzIHByZWZpeFxuICovXG5mdW5jdGlvbiBlblVzQ2hlY2sodGluKSB7XG4gIHJldHVybiBlblVzR2V0UHJlZml4ZXMoKS5pbmRleE9mKHRpbi5zbGljZSgwLCAyKSkgIT09IC0xO1xufVxuXG4vKlxuICogZXMtQVIgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogQ2xhdmUgw5puaWNhIGRlIElkZW50aWZpY2FjacOzbiBUcmlidXRhcmlhIChDVUlUL0NVSUwpXG4gKiBTb3VyY2VkIGZyb206XG4gKiAtIGh0dHBzOi8vc2VydmljaW9zY2YuYWZpcC5nb2IuYXIvcHVibGljby9hYmMvQUJDcGFzbzIuYXNweD9pZF9uaXZlbDE9MzAzNiZpZF9uaXZlbDI9MzA0MCZwPUNvbmNlcHRvcyUyMGIlQzMlQTFzaWNvc1xuICogLSBodHRwczovL2VzLndpa2lwZWRpYS5vcmcvd2lraS9DbGF2ZV8lQzMlOUFuaWNhX2RlX0lkZW50aWZpY2FjaSVDMyVCM25fVHJpYnV0YXJpYVxuICovXG5cbmZ1bmN0aW9uIGVzQXJDaGVjayh0aW4pIHtcbiAgdmFyIGFjY3VtID0gMDtcbiAgdmFyIGRpZ2l0cyA9IHRpbi5zcGxpdCgnJyk7XG4gIHZhciBkaWdpdCA9IHBhcnNlSW50KGRpZ2l0cy5wb3AoKSwgMTApO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZ2l0cy5sZW5ndGg7IGkrKykge1xuICAgIGFjY3VtICs9IGRpZ2l0c1s5IC0gaV0gKiAoMiArIGkgJSA2KTtcbiAgfVxuICB2YXIgdmVyaWYgPSAxMSAtIGFjY3VtICUgMTE7XG4gIGlmICh2ZXJpZiA9PT0gMTEpIHtcbiAgICB2ZXJpZiA9IDA7XG4gIH0gZWxzZSBpZiAodmVyaWYgPT09IDEwKSB7XG4gICAgdmVyaWYgPSA5O1xuICB9XG4gIHJldHVybiBkaWdpdCA9PT0gdmVyaWY7XG59XG5cbi8qXG4gKiBlcy1FUyB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoRG9jdW1lbnRvIE5hY2lvbmFsIGRlIElkZW50aWRhZCAoRE5JKVxuICogb3IgTsO6bWVybyBkZSBJZGVudGlmaWNhY2nDs24gZGUgRXh0cmFuamVybyAoTklFKSwgcGVyc29ucyBvbmx5KVxuICogVmVyaWZ5IFRJTiB2YWxpZGl0eSBieSBjYWxjdWxhdGluZyBjaGVjayAobGFzdCkgY2hhcmFjdGVyXG4gKi9cbmZ1bmN0aW9uIGVzRXNDaGVjayh0aW4pIHtcbiAgLy8gU3BsaXQgY2hhcmFjdGVycyBpbnRvIGFuIGFycmF5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgdmFyIGNoYXJzID0gdGluLnRvVXBwZXJDYXNlKCkuc3BsaXQoJycpO1xuXG4gIC8vIFJlcGxhY2UgaW5pdGlhbCBsZXR0ZXIgaWYgbmVlZGVkXG4gIGlmIChpc05hTihwYXJzZUludChjaGFyc1swXSwgMTApKSAmJiBjaGFycy5sZW5ndGggPiAxKSB7XG4gICAgdmFyIGxlYWRfcmVwbGFjZSA9IDA7XG4gICAgc3dpdGNoIChjaGFyc1swXSkge1xuICAgICAgY2FzZSAnWSc6XG4gICAgICAgIGxlYWRfcmVwbGFjZSA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnWic6XG4gICAgICAgIGxlYWRfcmVwbGFjZSA9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gICAgY2hhcnMuc3BsaWNlKDAsIDEsIGxlYWRfcmVwbGFjZSk7XG4gICAgLy8gRmlsbCB3aXRoIHplcm9zIGlmIHNtYWxsZXIgdGhhbiBwcm9wZXJcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2hhcnMubGVuZ3RoIDwgOSkge1xuICAgICAgY2hhcnMudW5zaGlmdCgwKTtcbiAgICB9XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgY2hlY2tzdW0gYW5kIGNoZWNrIGFjY29yZGluZyB0byBsb29rdXBcbiAgdmFyIGxvb2t1cCA9IFsnVCcsICdSJywgJ1cnLCAnQScsICdHJywgJ00nLCAnWScsICdGJywgJ1AnLCAnRCcsICdYJywgJ0InLCAnTicsICdKJywgJ1onLCAnUycsICdRJywgJ1YnLCAnSCcsICdMJywgJ0MnLCAnSycsICdFJ107XG4gIGNoYXJzID0gY2hhcnMuam9pbignJyk7XG4gIHZhciBjaGVja3N1bSA9IHBhcnNlSW50KGNoYXJzLnNsaWNlKDAsIDgpLCAxMCkgJSAyMztcbiAgcmV0dXJuIGNoYXJzWzhdID09PSBsb29rdXBbY2hlY2tzdW1dO1xufVxuXG4vKlxuICogZXQtRUUgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKElzaWt1a29vZCAoSUspLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgaWYgYmlydGggZGF0ZSAoY2VudHVyeSBkaWdpdCBhbmQgc2l4IGZvbGxvd2luZykgaXMgdmFsaWQgYW5kIGNhbGN1bGF0ZXMgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKiBNYXRlcmlhbCBub3QgaW4gREcgVEFYVUQgZG9jdW1lbnQgc291cmNlZCBmcm9tOlxuICogLSBgaHR0cHM6Ly93d3cub2VjZC5vcmcvdGF4L2F1dG9tYXRpYy1leGNoYW5nZS9jcnMtaW1wbGVtZW50YXRpb24tYW5kLWFzc2lzdGFuY2UvdGF4LWlkZW50aWZpY2F0aW9uLW51bWJlcnMvRXN0b25pYS1USU4ucGRmYFxuICovXG5mdW5jdGlvbiBldEVlQ2hlY2sodGluKSB7XG4gIC8vIEV4dHJhY3QgeWVhciBhbmQgYWRkIGNlbnR1cnlcbiAgdmFyIGZ1bGxfeWVhciA9IHRpbi5zbGljZSgxLCAzKTtcbiAgdmFyIGNlbnR1cnlfZGlnaXQgPSB0aW4uc2xpY2UoMCwgMSk7XG4gIHN3aXRjaCAoY2VudHVyeV9kaWdpdCkge1xuICAgIGNhc2UgJzEnOlxuICAgIGNhc2UgJzInOlxuICAgICAgZnVsbF95ZWFyID0gXCIxOFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMyc6XG4gICAgY2FzZSAnNCc6XG4gICAgICBmdWxsX3llYXIgPSBcIjE5XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZnVsbF95ZWFyID0gXCIyMFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgLy8gQ2hlY2sgZGF0ZSB2YWxpZGl0eVxuICB2YXIgZGF0ZSA9IFwiXCIuY29uY2F0KGZ1bGxfeWVhciwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoMywgNSksIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDUsIDcpKTtcbiAgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVlZWS9NTS9ERCcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gU3BsaXQgZGlnaXRzIGludG8gYW4gYXJyYXkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuICB2YXIgZGlnaXRzID0gdGluLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KTtcbiAgdmFyIGNoZWNrc3VtID0gMDtcbiAgdmFyIHdlaWdodCA9IDE7XG4gIC8vIE11bHRpcGx5IGJ5IHdlaWdodCBhbmQgYWRkIHRvIGNoZWNrc3VtXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgIGNoZWNrc3VtICs9IGRpZ2l0c1tpXSAqIHdlaWdodDtcbiAgICB3ZWlnaHQgKz0gMTtcbiAgICBpZiAod2VpZ2h0ID09PSAxMCkge1xuICAgICAgd2VpZ2h0ID0gMTtcbiAgICB9XG4gIH1cbiAgLy8gRG8gYWdhaW4gaWYgbW9kdWxvIDExIG9mIGNoZWNrc3VtIGlzIDEwXG4gIGlmIChjaGVja3N1bSAlIDExID09PSAxMCkge1xuICAgIGNoZWNrc3VtID0gMDtcbiAgICB3ZWlnaHQgPSAzO1xuICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IDEwOyBfaTMrKykge1xuICAgICAgY2hlY2tzdW0gKz0gZGlnaXRzW19pM10gKiB3ZWlnaHQ7XG4gICAgICB3ZWlnaHQgKz0gMTtcbiAgICAgIGlmICh3ZWlnaHQgPT09IDEwKSB7XG4gICAgICAgIHdlaWdodCA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjaGVja3N1bSAlIDExID09PSAxMCkge1xuICAgICAgcmV0dXJuIGRpZ2l0c1sxMF0gPT09IDA7XG4gICAgfVxuICB9XG4gIHJldHVybiBjaGVja3N1bSAlIDExID09PSBkaWdpdHNbMTBdO1xufVxuXG4vKlxuICogZmktRkkgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKEhlbmtpbMO2dHVubnVzIChIRVRVKSwgcGVyc29ucyBvbmx5KVxuICogQ2hlY2tzIGlmIGJpcnRoIGRhdGUgKGZpcnN0IHNpeCBkaWdpdHMgcGx1cyBjZW50dXJ5IHN5bWJvbCkgaXMgdmFsaWRcbiAqIGFuZCBjYWxjdWxhdGVzIGNoZWNrIChsYXN0KSBkaWdpdFxuICovXG5mdW5jdGlvbiBmaUZpQ2hlY2sodGluKSB7XG4gIC8vIEV4dHJhY3QgeWVhciBhbmQgYWRkIGNlbnR1cnlcbiAgdmFyIGZ1bGxfeWVhciA9IHRpbi5zbGljZSg0LCA2KTtcbiAgdmFyIGNlbnR1cnlfc3ltYm9sID0gdGluLnNsaWNlKDYsIDcpO1xuICBzd2l0Y2ggKGNlbnR1cnlfc3ltYm9sKSB7XG4gICAgY2FzZSAnKyc6XG4gICAgICBmdWxsX3llYXIgPSBcIjE4XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlICctJzpcbiAgICAgIGZ1bGxfeWVhciA9IFwiMTlcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmdWxsX3llYXIgPSBcIjIwXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICBicmVhaztcbiAgfVxuICAvLyBDaGVjayBkYXRlIHZhbGlkaXR5XG4gIHZhciBkYXRlID0gXCJcIi5jb25jYXQoZnVsbF95ZWFyLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSgyLCA0KSwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoMCwgMikpO1xuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgY2hlY2sgY2hhcmFjdGVyXG4gIHZhciBjaGVja3N1bSA9IHBhcnNlSW50KHRpbi5zbGljZSgwLCA2KSArIHRpbi5zbGljZSg3LCAxMCksIDEwKSAlIDMxO1xuICBpZiAoY2hlY2tzdW0gPCAxMCkge1xuICAgIHJldHVybiBjaGVja3N1bSA9PT0gcGFyc2VJbnQodGluLnNsaWNlKDEwKSwgMTApO1xuICB9XG4gIGNoZWNrc3VtIC09IDEwO1xuICB2YXIgbGV0dGVyc19sb29rdXAgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0gnLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ1AnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJ107XG4gIHJldHVybiBsZXR0ZXJzX2xvb2t1cFtjaGVja3N1bV0gPT09IHRpbi5zbGljZSgxMCk7XG59XG5cbi8qXG4gKiBmci9ubC1CRSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoTnVtw6lybyBuYXRpb25hbCAoTi5OLiksIHBlcnNvbnMgb25seSlcbiAqIENoZWNrcyBpZiBiaXJ0aCBkYXRlIChmaXJzdCBzaXggZGlnaXRzKSBpcyB2YWxpZCBhbmQgY2FsY3VsYXRlcyBjaGVjayAobGFzdCB0d28pIGRpZ2l0c1xuICovXG5mdW5jdGlvbiBmckJlQ2hlY2sodGluKSB7XG4gIC8vIFplcm8gbW9udGgvZGF5IHZhbHVlIGlzIGFjY2VwdGFibGVcbiAgaWYgKHRpbi5zbGljZSgyLCA0KSAhPT0gJzAwJyB8fCB0aW4uc2xpY2UoNCwgNikgIT09ICcwMCcpIHtcbiAgICAvLyBFeHRyYWN0IGRhdGUgZnJvbSBmaXJzdCBzaXggZGlnaXRzIG9mIFRJTlxuICAgIHZhciBkYXRlID0gXCJcIi5jb25jYXQodGluLnNsaWNlKDAsIDIpLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSgyLCA0KSwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoNCwgNikpO1xuICAgIGlmICghKDAsIF9pc0RhdGUuZGVmYXVsdCkoZGF0ZSwgJ1lZL01NL0REJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgdmFyIGNoZWNrc3VtID0gOTcgLSBwYXJzZUludCh0aW4uc2xpY2UoMCwgOSksIDEwKSAlIDk3O1xuICB2YXIgY2hlY2tkaWdpdHMgPSBwYXJzZUludCh0aW4uc2xpY2UoOSwgMTEpLCAxMCk7XG4gIGlmIChjaGVja3N1bSAhPT0gY2hlY2tkaWdpdHMpIHtcbiAgICBjaGVja3N1bSA9IDk3IC0gcGFyc2VJbnQoXCIyXCIuY29uY2F0KHRpbi5zbGljZSgwLCA5KSksIDEwKSAlIDk3O1xuICAgIGlmIChjaGVja3N1bSAhPT0gY2hlY2tkaWdpdHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qXG4gKiBmci1GUiB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoTnVtw6lybyBmaXNjYWwgZGUgcsOpZsOpcmVuY2UgKG51bcOpcm8gU1BJKSwgcGVyc29ucyBvbmx5KVxuICogVmVyaWZ5IFRJTiB2YWxpZGl0eSBieSBjYWxjdWxhdGluZyBjaGVjayAobGFzdCB0aHJlZSkgZGlnaXRzXG4gKi9cbmZ1bmN0aW9uIGZyRnJDaGVjayh0aW4pIHtcbiAgdGluID0gdGluLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gIHZhciBjaGVja3N1bSA9IHBhcnNlSW50KHRpbi5zbGljZSgwLCAxMCksIDEwKSAlIDUxMTtcbiAgdmFyIGNoZWNrZGlnaXRzID0gcGFyc2VJbnQodGluLnNsaWNlKDEwLCAxMyksIDEwKTtcbiAgcmV0dXJuIGNoZWNrc3VtID09PSBjaGVja2RpZ2l0cztcbn1cblxuLypcbiAqIGZyL2xiLUxVIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChudW3DqXJvIGTigJlpZGVudGlmaWNhdGlvbiBwZXJzb25uZWxsZSwgcGVyc29ucyBvbmx5KVxuICogVmVyaWZ5IGJpcnRoIGRhdGUgdmFsaWRpdHkgYW5kIHJ1biBMdWhuIGFuZCBWZXJob2VmZiBjaGVja3NcbiAqL1xuZnVuY3Rpb24gZnJMdUNoZWNrKHRpbikge1xuICAvLyBFeHRyYWN0IGRhdGUgYW5kIGNoZWNrIHZhbGlkaXR5XG4gIHZhciBkYXRlID0gXCJcIi5jb25jYXQodGluLnNsaWNlKDAsIDQpLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSg0LCA2KSwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoNiwgOCkpO1xuICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBSdW4gTHVobiBjaGVja1xuICBpZiAoIWFsZ29yaXRobXMubHVobkNoZWNrKHRpbi5zbGljZSgwLCAxMikpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFJlbW92ZSBMdWhuIGNoZWNrIGRpZ2l0IGFuZCBydW4gVmVyaG9lZmYgY2hlY2tcbiAgcmV0dXJuIGFsZ29yaXRobXMudmVyaG9lZmZDaGVjayhcIlwiLmNvbmNhdCh0aW4uc2xpY2UoMCwgMTEpKS5jb25jYXQodGluWzEyXSkpO1xufVxuXG4vKlxuICogaHItSFIgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKE9zb2JuaSBpZGVudGlmaWthY2lqc2tpIGJyb2ogKE9JQiksIHBlcnNvbnMvZW50aXRpZXMpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGxpbmcgaXNvNzA2NENoZWNrKGRpZ2l0cylcbiAqL1xuZnVuY3Rpb24gaHJIckNoZWNrKHRpbikge1xuICByZXR1cm4gYWxnb3JpdGhtcy5pc283MDY0Q2hlY2sodGluKTtcbn1cblxuLypcbiAqIGh1LUhVIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChBZMOzYXpvbm9zw610w7MgamVsLCBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdFxuICovXG5mdW5jdGlvbiBodUh1Q2hlY2sodGluKSB7XG4gIC8vIHNwbGl0IGRpZ2l0cyBpbnRvIGFuIGFycmF5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgdmFyIGRpZ2l0cyA9IHRpbi5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgfSk7XG4gIHZhciBjaGVja3N1bSA9IDg7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgOTsgaSsrKSB7XG4gICAgY2hlY2tzdW0gKz0gZGlnaXRzW2ldICogKGkgKyAxKTtcbiAgfVxuICByZXR1cm4gY2hlY2tzdW0gJSAxMSA9PT0gZGlnaXRzWzldO1xufVxuXG4vKlxuICogbHQtTFQgdmFsaWRhdGlvbiBmdW5jdGlvbiAoc2hvdWxkIGdvIGhlcmUgaWYgbmVlZGVkKVxuICogKEFzbWVucyBrb2RhcywgcGVyc29ucy9lbnRpdGllcyByZXNwZWN0aXZlbHkpXG4gKiBDdXJyZW50IHZhbGlkYXRpb24gY2hlY2sgaXMgYWxpYXMgb2YgZXRFZUNoZWNrLSBzYW1lIGZvcm1hdCBhcHBsaWVzXG4gKi9cblxuLypcbiAqIGl0LUlUIGZpcnN0L2xhc3QgbmFtZSB2YWxpZGl0eSBjaGVja1xuICogQWNjZXB0cyBpdC1JVCBUSU4tZW5jb2RlZCBuYW1lcyBhcyBhIHRocmVlLWVsZW1lbnQgY2hhcmFjdGVyIGFycmF5IGFuZCBjaGVja3MgdGhlaXIgdmFsaWRpdHlcbiAqIER1ZSB0byBsYWNrIG9mIGNsYXJpdHkgYmV0d2VlbiByZXNvdXJjZXMgKFwiQXJlIG9ubHkgSXRhbGlhbiBjb25zb25hbnRzIHVzZWQ/XG4gKiBXaGF0IGhhcHBlbnMgaWYgYSBwZXJzb24gaGFzIFggaW4gdGhlaXIgbmFtZT9cIiBldGMuKSBvbmx5IHR3byB0ZXN0IGNvbmRpdGlvbnNcbiAqIGhhdmUgYmVlbiBpbXBsZW1lbnRlZDpcbiAqIFZvd2VscyBtYXkgb25seSBiZSBmb2xsb3dlZCBieSBvdGhlciB2b3dlbHMgb3IgYW4gWCBjaGFyYWN0ZXJcbiAqIGFuZCBYIGNoYXJhY3RlcnMgYWZ0ZXIgdm93ZWxzIG1heSBvbmx5IGJlIGZvbGxvd2VkIGJ5IG90aGVyIFggY2hhcmFjdGVycy5cbiAqL1xuZnVuY3Rpb24gaXRJdE5hbWVDaGVjayhuYW1lKSB7XG4gIC8vIHRydWUgYXQgdGhlIGZpcnN0IG9jY3VyZW5jZSBvZiBhIHZvd2VsXG4gIHZhciB2b3dlbGZsYWcgPSBmYWxzZTtcblxuICAvLyB0cnVlIGF0IHRoZSBmaXJzdCBvY2N1cmVuY2Ugb2YgYW4gWCBBRlRFUiB2b3dlbFxuICAvLyAodG8gcHJvcGVybHkgaGFuZGxlIGxhc3QgbmFtZXMgd2l0aCBYIGFzIGNvbnNvbmFudClcbiAgdmFyIHhmbGFnID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgaWYgKCF2b3dlbGZsYWcgJiYgL1tBRUlPVV0vLnRlc3QobmFtZVtpXSkpIHtcbiAgICAgIHZvd2VsZmxhZyA9IHRydWU7XG4gICAgfSBlbHNlIGlmICgheGZsYWcgJiYgdm93ZWxmbGFnICYmIG5hbWVbaV0gPT09ICdYJykge1xuICAgICAgeGZsYWcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcbiAgICAgIGlmICh2b3dlbGZsYWcgJiYgIXhmbGFnKSB7XG4gICAgICAgIGlmICghL1tBRUlPVV0vLnRlc3QobmFtZVtpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh4ZmxhZykge1xuICAgICAgICBpZiAoIS9YLy50ZXN0KG5hbWVbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKlxuICogaXQtSVQgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKENvZGljZSBmaXNjYWxlIChUSU4tSVQpLCBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgbmFtZSwgYmlydGggZGF0ZSBhbmQgY29kaWNlIGNhdGFzdGFsZSB2YWxpZGl0eVxuICogYW5kIGNhbGN1bGF0ZSBjaGVjayBjaGFyYWN0ZXIuXG4gKiBNYXRlcmlhbCBub3QgaW4gREctVEFYVUQgZG9jdW1lbnQgc291cmNlZCBmcm9tOlxuICogYGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0l0YWxpYW5fZmlzY2FsX2NvZGVgXG4gKi9cbmZ1bmN0aW9uIGl0SXRDaGVjayh0aW4pIHtcbiAgLy8gQ2FwaXRhbGl6ZSBhbmQgc3BsaXQgY2hhcmFjdGVycyBpbnRvIGFuIGFycmF5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmdcbiAgdmFyIGNoYXJzID0gdGluLnRvVXBwZXJDYXNlKCkuc3BsaXQoJycpO1xuXG4gIC8vIENoZWNrIGZpcnN0IGFuZCBsYXN0IG5hbWUgdmFsaWRpdHkgY2FsbGluZyBpdEl0TmFtZUNoZWNrKClcbiAgaWYgKCFpdEl0TmFtZUNoZWNrKGNoYXJzLnNsaWNlKDAsIDMpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIWl0SXROYW1lQ2hlY2soY2hhcnMuc2xpY2UoMywgNikpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gQ29udmVydCBsZXR0ZXJzIGluIG51bWJlciBzcGFjZXMgYmFjayB0byBudW1iZXJzIGlmIGFueVxuICB2YXIgbnVtYmVyX2xvY2F0aW9ucyA9IFs2LCA3LCA5LCAxMCwgMTIsIDEzLCAxNF07XG4gIHZhciBudW1iZXJfcmVwbGFjZSA9IHtcbiAgICBMOiAnMCcsXG4gICAgTTogJzEnLFxuICAgIE46ICcyJyxcbiAgICBQOiAnMycsXG4gICAgUTogJzQnLFxuICAgIFI6ICc1JyxcbiAgICBTOiAnNicsXG4gICAgVDogJzcnLFxuICAgIFU6ICc4JyxcbiAgICBWOiAnOSdcbiAgfTtcbiAgZm9yICh2YXIgX2k0ID0gMCwgX251bWJlcl9sb2NhdGlvbnMgPSBudW1iZXJfbG9jYXRpb25zOyBfaTQgPCBfbnVtYmVyX2xvY2F0aW9ucy5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGkgPSBfbnVtYmVyX2xvY2F0aW9uc1tfaTRdO1xuICAgIGlmIChjaGFyc1tpXSBpbiBudW1iZXJfcmVwbGFjZSkge1xuICAgICAgY2hhcnMuc3BsaWNlKGksIDEsIG51bWJlcl9yZXBsYWNlW2NoYXJzW2ldXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gRXh0cmFjdCBtb250aCBhbmQgZGF5LCBhbmQgY2hlY2sgZGF0ZSB2YWxpZGl0eVxuICB2YXIgbW9udGhfcmVwbGFjZSA9IHtcbiAgICBBOiAnMDEnLFxuICAgIEI6ICcwMicsXG4gICAgQzogJzAzJyxcbiAgICBEOiAnMDQnLFxuICAgIEU6ICcwNScsXG4gICAgSDogJzA2JyxcbiAgICBMOiAnMDcnLFxuICAgIE06ICcwOCcsXG4gICAgUDogJzA5JyxcbiAgICBSOiAnMTAnLFxuICAgIFM6ICcxMScsXG4gICAgVDogJzEyJ1xuICB9O1xuICB2YXIgbW9udGggPSBtb250aF9yZXBsYWNlW2NoYXJzWzhdXTtcbiAgdmFyIGRheSA9IHBhcnNlSW50KGNoYXJzWzldICsgY2hhcnNbMTBdLCAxMCk7XG4gIGlmIChkYXkgPiA0MCkge1xuICAgIGRheSAtPSA0MDtcbiAgfVxuICBpZiAoZGF5IDwgMTApIHtcbiAgICBkYXkgPSBcIjBcIi5jb25jYXQoZGF5KTtcbiAgfVxuICB2YXIgZGF0ZSA9IFwiXCIuY29uY2F0KGNoYXJzWzZdKS5jb25jYXQoY2hhcnNbN10sIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQoZGF5KTtcbiAgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVkvTU0vREQnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBjaGVjayBjaGFyYWN0ZXIgYnkgYWRkaW5nIHVwIGV2ZW4gYW5kIG9kZCBjaGFyYWN0ZXJzIGFzIG51bWJlcnNcbiAgdmFyIGNoZWNrc3VtID0gMDtcbiAgZm9yICh2YXIgX2k1ID0gMTsgX2k1IDwgY2hhcnMubGVuZ3RoIC0gMTsgX2k1ICs9IDIpIHtcbiAgICB2YXIgY2hhcl90b19pbnQgPSBwYXJzZUludChjaGFyc1tfaTVdLCAxMCk7XG4gICAgaWYgKGlzTmFOKGNoYXJfdG9faW50KSkge1xuICAgICAgY2hhcl90b19pbnQgPSBjaGFyc1tfaTVdLmNoYXJDb2RlQXQoMCkgLSA2NTtcbiAgICB9XG4gICAgY2hlY2tzdW0gKz0gY2hhcl90b19pbnQ7XG4gIH1cbiAgdmFyIG9kZF9jb252ZXJ0ID0ge1xuICAgIC8vIE1hcHMgb2YgY2hhcmFjdGVycyBhdCBvZGQgcGxhY2VzXG4gICAgQTogMSxcbiAgICBCOiAwLFxuICAgIEM6IDUsXG4gICAgRDogNyxcbiAgICBFOiA5LFxuICAgIEY6IDEzLFxuICAgIEc6IDE1LFxuICAgIEg6IDE3LFxuICAgIEk6IDE5LFxuICAgIEo6IDIxLFxuICAgIEs6IDIsXG4gICAgTDogNCxcbiAgICBNOiAxOCxcbiAgICBOOiAyMCxcbiAgICBPOiAxMSxcbiAgICBQOiAzLFxuICAgIFE6IDYsXG4gICAgUjogOCxcbiAgICBTOiAxMixcbiAgICBUOiAxNCxcbiAgICBVOiAxNixcbiAgICBWOiAxMCxcbiAgICBXOiAyMixcbiAgICBYOiAyNSxcbiAgICBZOiAyNCxcbiAgICBaOiAyMyxcbiAgICAwOiAxLFxuICAgIDE6IDBcbiAgfTtcbiAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgY2hhcnMubGVuZ3RoIC0gMTsgX2k2ICs9IDIpIHtcbiAgICB2YXIgX2NoYXJfdG9faW50ID0gMDtcbiAgICBpZiAoY2hhcnNbX2k2XSBpbiBvZGRfY29udmVydCkge1xuICAgICAgX2NoYXJfdG9faW50ID0gb2RkX2NvbnZlcnRbY2hhcnNbX2k2XV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtdWx0aXBsaWVyID0gcGFyc2VJbnQoY2hhcnNbX2k2XSwgMTApO1xuICAgICAgX2NoYXJfdG9faW50ID0gMiAqIG11bHRpcGxpZXIgKyAxO1xuICAgICAgaWYgKG11bHRpcGxpZXIgPiA0KSB7XG4gICAgICAgIF9jaGFyX3RvX2ludCArPSAyO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGVja3N1bSArPSBfY2hhcl90b19pbnQ7XG4gIH1cbiAgaWYgKFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBjaGVja3N1bSAlIDI2KSAhPT0gY2hhcnNbMTVdKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKlxuICogbHYtTFYgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKFBlcnNvbmFzIGtvZHMgKFBLKSwgcGVyc29ucyBvbmx5KVxuICogQ2hlY2sgdmFsaWRpdHkgb2YgYmlydGggZGF0ZSBhbmQgY2FsY3VsYXRlIGNoZWNrIChsYXN0KSBkaWdpdFxuICogU3VwcG9ydCBvbmx5IGZvciBvbGQgZm9ybWF0IG51bWJlcnMgKG5vdCBzdGFydGluZyB3aXRoICczMicsIGlzc3VlZCBiZWZvcmUgMjAxNy8wNy8wMSlcbiAqIE1hdGVyaWFsIG5vdCBpbiBERyBUQVhVRCBkb2N1bWVudCBzb3VyY2VkIGZyb206XG4gKiBgaHR0cHM6Ly9ib290LnJpdGFrYWZpamEubHYvZm9ydW1zL2luZGV4LnBocD8vdG9waWMvODgzMTQtcGVyc29uYXMta29kYS1hbGdvcml0bXMtJUM0JThEZWtzdW1tYS9gXG4gKi9cbmZ1bmN0aW9uIGx2THZDaGVjayh0aW4pIHtcbiAgdGluID0gdGluLnJlcGxhY2UoL1xcVy8sICcnKTtcbiAgLy8gRXh0cmFjdCBkYXRlIGZyb20gVElOXG4gIHZhciBkYXkgPSB0aW4uc2xpY2UoMCwgMik7XG4gIGlmIChkYXkgIT09ICczMicpIHtcbiAgICAvLyBObyBkYXRlL2NoZWNrc3VtIGNoZWNrIGlmIG5ldyBmb3JtYXRcbiAgICB2YXIgbW9udGggPSB0aW4uc2xpY2UoMiwgNCk7XG4gICAgaWYgKG1vbnRoICE9PSAnMDAnKSB7XG4gICAgICAvLyBObyBkYXRlIGNoZWNrIGlmIHVua25vd24gbW9udGhcbiAgICAgIHZhciBmdWxsX3llYXIgPSB0aW4uc2xpY2UoNCwgNik7XG4gICAgICBzd2l0Y2ggKHRpbls2XSkge1xuICAgICAgICBjYXNlICcwJzpcbiAgICAgICAgICBmdWxsX3llYXIgPSBcIjE4XCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgIGZ1bGxfeWVhciA9IFwiMTlcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmdWxsX3llYXIgPSBcIjIwXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBkYXRlIHZhbGlkaXR5XG4gICAgICB2YXIgZGF0ZSA9IFwiXCIuY29uY2F0KGZ1bGxfeWVhciwgXCIvXCIpLmNvbmNhdCh0aW4uc2xpY2UoMiwgNCksIFwiL1wiKS5jb25jYXQoZGF5KTtcbiAgICAgIGlmICghKDAsIF9pc0RhdGUuZGVmYXVsdCkoZGF0ZSwgJ1lZWVkvTU0vREQnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIGNoZWNrIGRpZ2l0XG4gICAgdmFyIGNoZWNrc3VtID0gMTEwMTtcbiAgICB2YXIgbXVsdGlwX2xvb2t1cCA9IFsxLCA2LCAzLCA3LCA5LCAxMCwgNSwgOCwgNCwgMl07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aW4ubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjaGVja3N1bSAtPSBwYXJzZUludCh0aW5baV0sIDEwKSAqIG11bHRpcF9sb29rdXBbaV07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCh0aW5bMTBdLCAxMCkgPT09IGNoZWNrc3VtICUgMTE7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qXG4gKiBtdC1NVCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoSWRlbnRpdHkgQ2FyZCBOdW1iZXIgb3IgVW5pcXVlIFRheHBheWVyIFJlZmVyZW5jZSwgcGVyc29ucy9lbnRpdGllcylcbiAqIFZlcmlmeSBJZGVudGl0eSBDYXJkIE51bWJlciBzdHJ1Y3R1cmUgKG5vIG90aGVyIHRlc3RzIGZvdW5kKVxuICovXG5mdW5jdGlvbiBtdE10Q2hlY2sodGluKSB7XG4gIGlmICh0aW4ubGVuZ3RoICE9PSA5KSB7XG4gICAgLy8gTm8gdGVzdHMgZm9yIFVUUlxuICAgIHZhciBjaGFycyA9IHRpbi50b1VwcGVyQ2FzZSgpLnNwbGl0KCcnKTtcbiAgICAvLyBGaWxsIHdpdGggemVyb3MgaWYgc21hbGxlciB0aGFuIHByb3BlclxuICAgIHdoaWxlIChjaGFycy5sZW5ndGggPCA4KSB7XG4gICAgICBjaGFycy51bnNoaWZ0KDApO1xuICAgIH1cbiAgICAvLyBWYWxpZGF0ZSBmb3JtYXQgYWNjb3JkaW5nIHRvIGxhc3QgY2hhcmFjdGVyXG4gICAgc3dpdGNoICh0aW5bN10pIHtcbiAgICAgIGNhc2UgJ0EnOlxuICAgICAgY2FzZSAnUCc6XG4gICAgICAgIGlmIChwYXJzZUludChjaGFyc1s2XSwgMTApID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBmaXJzdF9wYXJ0ID0gcGFyc2VJbnQoY2hhcnMuam9pbignJykuc2xpY2UoMCwgNSksIDEwKTtcbiAgICAgICAgICBpZiAoZmlyc3RfcGFydCA+IDMyMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzZWNvbmRfcGFydCA9IHBhcnNlSW50KGNoYXJzLmpvaW4oJycpLnNsaWNlKDUsIDcpLCAxMCk7XG4gICAgICAgICAgaWYgKGZpcnN0X3BhcnQgPT09IHNlY29uZF9wYXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKlxuICogbmwtTkwgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogKEJ1cmdlcnNlcnZpY2VudW1tZXIgKEJTTikgb3IgUmVjaHRzcGVyc29uZW4gU2FtZW53ZXJraW5nc3ZlcmJhbmRlbiBJbmZvcm1hdGllIE51bW1lciAoUlNJTiksXG4gKiBwZXJzb25zL2VudGl0aWVzIHJlc3BlY3RpdmVseSlcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgY2FsY3VsYXRpbmcgY2hlY2sgKGxhc3QpIGRpZ2l0ICh2YXJpYW50IG9mIE1PRCAxMSlcbiAqL1xuZnVuY3Rpb24gbmxObENoZWNrKHRpbikge1xuICByZXR1cm4gYWxnb3JpdGhtcy5yZXZlcnNlTXVsdGlwbHlBbmRTdW0odGluLnNwbGl0KCcnKS5zbGljZSgwLCA4KS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KSwgOSkgJSAxMSA9PT0gcGFyc2VJbnQodGluWzhdLCAxMCk7XG59XG5cbi8qXG4gKiBwbC1QTCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoUG93c3plY2hueSBFbGVrdHJvbmljem55IFN5c3RlbSBFd2lkZW5jamkgTHVkbm/Fm2NpIChQRVNFTClcbiAqIG9yIE51bWVyIGlkZW50eWZpa2FjamkgcG9kYXRrb3dlaiAoTklQKSwgcGVyc29ucy9lbnRpdGllcylcbiAqIFZlcmlmeSBUSU4gdmFsaWRpdHkgYnkgdmFsaWRhdGluZyBiaXJ0aCBkYXRlIChQRVNFTCkgYW5kIGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdFxuICovXG5mdW5jdGlvbiBwbFBsQ2hlY2sodGluKSB7XG4gIC8vIE5JUFxuICBpZiAodGluLmxlbmd0aCA9PT0gMTApIHtcbiAgICAvLyBDYWxjdWxhdGUgbGFzdCBkaWdpdCBieSBtdWx0aXBseWluZyB3aXRoIGxvb2t1cFxuICAgIHZhciBsb29rdXAgPSBbNiwgNSwgNywgMiwgMywgNCwgNSwgNiwgN107XG4gICAgdmFyIF9jaGVja3N1bSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb29rdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIF9jaGVja3N1bSArPSBwYXJzZUludCh0aW5baV0sIDEwKSAqIGxvb2t1cFtpXTtcbiAgICB9XG4gICAgX2NoZWNrc3VtICU9IDExO1xuICAgIGlmIChfY2hlY2tzdW0gPT09IDEwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBfY2hlY2tzdW0gPT09IHBhcnNlSW50KHRpbls5XSwgMTApO1xuICB9XG5cbiAgLy8gUEVTRUxcbiAgLy8gRXh0cmFjdCBmdWxsIHllYXIgdXNpbmcgbW9udGhcbiAgdmFyIGZ1bGxfeWVhciA9IHRpbi5zbGljZSgwLCAyKTtcbiAgdmFyIG1vbnRoID0gcGFyc2VJbnQodGluLnNsaWNlKDIsIDQpLCAxMCk7XG4gIGlmIChtb250aCA+IDgwKSB7XG4gICAgZnVsbF95ZWFyID0gXCIxOFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgIG1vbnRoIC09IDgwO1xuICB9IGVsc2UgaWYgKG1vbnRoID4gNjApIHtcbiAgICBmdWxsX3llYXIgPSBcIjIyXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgbW9udGggLT0gNjA7XG4gIH0gZWxzZSBpZiAobW9udGggPiA0MCkge1xuICAgIGZ1bGxfeWVhciA9IFwiMjFcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICBtb250aCAtPSA0MDtcbiAgfSBlbHNlIGlmIChtb250aCA+IDIwKSB7XG4gICAgZnVsbF95ZWFyID0gXCIyMFwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgIG1vbnRoIC09IDIwO1xuICB9IGVsc2Uge1xuICAgIGZ1bGxfeWVhciA9IFwiMTlcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgfVxuICAvLyBBZGQgbGVhZGluZyB6ZXJvIHRvIG1vbnRoIGlmIG5lZWRlZFxuICBpZiAobW9udGggPCAxMCkge1xuICAgIG1vbnRoID0gXCIwXCIuY29uY2F0KG1vbnRoKTtcbiAgfVxuICAvLyBDaGVjayBkYXRlIHZhbGlkaXR5XG4gIHZhciBkYXRlID0gXCJcIi5jb25jYXQoZnVsbF95ZWFyLCBcIi9cIikuY29uY2F0KG1vbnRoLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSg0LCA2KSk7XG4gIGlmICghKDAsIF9pc0RhdGUuZGVmYXVsdCkoZGF0ZSwgJ1lZWVkvTU0vREQnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBsYXN0IGRpZ2l0IGJ5IG11bGl0cGx5aW5nIHdpdGggb2RkIG9uZS1kaWdpdCBudW1iZXJzIGV4Y2VwdCA1XG4gIHZhciBjaGVja3N1bSA9IDA7XG4gIHZhciBtdWx0aXBsaWVyID0gMTtcbiAgZm9yICh2YXIgX2k3ID0gMDsgX2k3IDwgdGluLmxlbmd0aCAtIDE7IF9pNysrKSB7XG4gICAgY2hlY2tzdW0gKz0gcGFyc2VJbnQodGluW19pN10sIDEwKSAqIG11bHRpcGxpZXIgJSAxMDtcbiAgICBtdWx0aXBsaWVyICs9IDI7XG4gICAgaWYgKG11bHRpcGxpZXIgPiAxMCkge1xuICAgICAgbXVsdGlwbGllciA9IDE7XG4gICAgfSBlbHNlIGlmIChtdWx0aXBsaWVyID09PSA1KSB7XG4gICAgICBtdWx0aXBsaWVyICs9IDI7XG4gICAgfVxuICB9XG4gIGNoZWNrc3VtID0gMTAgLSBjaGVja3N1bSAlIDEwO1xuICByZXR1cm4gY2hlY2tzdW0gPT09IHBhcnNlSW50KHRpblsxMF0sIDEwKTtcbn1cblxuLypcbiogcHQtQlIgdmFsaWRhdGlvbiBmdW5jdGlvblxuKiAoQ2FkYXN0cm8gZGUgUGVzc29hcyBGw61zaWNhcyAoQ1BGLCBwZXJzb25zKVxuKiBDYWRhc3RybyBOYWNpb25hbCBkZSBQZXNzb2FzIEp1csOtZGljYXMgKENOUEosIGVudGl0aWVzKVxuKiBCb3RoIGlucHV0cyB3aWxsIGJlIHZhbGlkYXRlZFxuKi9cblxuZnVuY3Rpb24gcHRCckNoZWNrKHRpbikge1xuICBpZiAodGluLmxlbmd0aCA9PT0gMTEpIHtcbiAgICB2YXIgX3N1bTtcbiAgICB2YXIgcmVtYWluZGVyO1xuICAgIF9zdW0gPSAwO1xuICAgIGlmIChcbiAgICAvLyBSZWplY3Qga25vd24gaW52YWxpZCBDUEZzXG4gICAgdGluID09PSAnMTExMTExMTExMTEnIHx8IHRpbiA9PT0gJzIyMjIyMjIyMjIyJyB8fCB0aW4gPT09ICczMzMzMzMzMzMzMycgfHwgdGluID09PSAnNDQ0NDQ0NDQ0NDQnIHx8IHRpbiA9PT0gJzU1NTU1NTU1NTU1JyB8fCB0aW4gPT09ICc2NjY2NjY2NjY2NicgfHwgdGluID09PSAnNzc3Nzc3Nzc3NzcnIHx8IHRpbiA9PT0gJzg4ODg4ODg4ODg4JyB8fCB0aW4gPT09ICc5OTk5OTk5OTk5OScgfHwgdGluID09PSAnMDAwMDAwMDAwMDAnKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gOTsgaSsrKSBfc3VtICs9IHBhcnNlSW50KHRpbi5zdWJzdHJpbmcoaSAtIDEsIGkpLCAxMCkgKiAoMTEgLSBpKTtcbiAgICByZW1haW5kZXIgPSBfc3VtICogMTAgJSAxMTtcbiAgICBpZiAocmVtYWluZGVyID09PSAxMCkgcmVtYWluZGVyID0gMDtcbiAgICBpZiAocmVtYWluZGVyICE9PSBwYXJzZUludCh0aW4uc3Vic3RyaW5nKDksIDEwKSwgMTApKSByZXR1cm4gZmFsc2U7XG4gICAgX3N1bSA9IDA7XG4gICAgZm9yICh2YXIgX2k4ID0gMTsgX2k4IDw9IDEwOyBfaTgrKykgX3N1bSArPSBwYXJzZUludCh0aW4uc3Vic3RyaW5nKF9pOCAtIDEsIF9pOCksIDEwKSAqICgxMiAtIF9pOCk7XG4gICAgcmVtYWluZGVyID0gX3N1bSAqIDEwICUgMTE7XG4gICAgaWYgKHJlbWFpbmRlciA9PT0gMTApIHJlbWFpbmRlciA9IDA7XG4gICAgaWYgKHJlbWFpbmRlciAhPT0gcGFyc2VJbnQodGluLnN1YnN0cmluZygxMCwgMTEpLCAxMCkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoXG4gIC8vIFJlamVjdCBrbm93IGludmFsaWQgQ05QSnNcbiAgdGluID09PSAnMDAwMDAwMDAwMDAwMDAnIHx8IHRpbiA9PT0gJzExMTExMTExMTExMTExJyB8fCB0aW4gPT09ICcyMjIyMjIyMjIyMjIyMicgfHwgdGluID09PSAnMzMzMzMzMzMzMzMzMzMnIHx8IHRpbiA9PT0gJzQ0NDQ0NDQ0NDQ0NDQ0JyB8fCB0aW4gPT09ICc1NTU1NTU1NTU1NTU1NScgfHwgdGluID09PSAnNjY2NjY2NjY2NjY2NjYnIHx8IHRpbiA9PT0gJzc3Nzc3Nzc3Nzc3Nzc3JyB8fCB0aW4gPT09ICc4ODg4ODg4ODg4ODg4OCcgfHwgdGluID09PSAnOTk5OTk5OTk5OTk5OTknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsZW5ndGggPSB0aW4ubGVuZ3RoIC0gMjtcbiAgdmFyIGlkZW50aWZpZXJzID0gdGluLnN1YnN0cmluZygwLCBsZW5ndGgpO1xuICB2YXIgdmVyaWZpY2F0b3JzID0gdGluLnN1YnN0cmluZyhsZW5ndGgpO1xuICB2YXIgc3VtID0gMDtcbiAgdmFyIHBvcyA9IGxlbmd0aCAtIDc7XG4gIGZvciAodmFyIF9pOSA9IGxlbmd0aDsgX2k5ID49IDE7IF9pOS0tKSB7XG4gICAgc3VtICs9IGlkZW50aWZpZXJzLmNoYXJBdChsZW5ndGggLSBfaTkpICogcG9zO1xuICAgIHBvcyAtPSAxO1xuICAgIGlmIChwb3MgPCAyKSB7XG4gICAgICBwb3MgPSA5O1xuICAgIH1cbiAgfVxuICB2YXIgcmVzdWx0ID0gc3VtICUgMTEgPCAyID8gMCA6IDExIC0gc3VtICUgMTE7XG4gIGlmIChyZXN1bHQgIT09IHBhcnNlSW50KHZlcmlmaWNhdG9ycy5jaGFyQXQoMCksIDEwKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZW5ndGggKz0gMTtcbiAgaWRlbnRpZmllcnMgPSB0aW4uc3Vic3RyaW5nKDAsIGxlbmd0aCk7XG4gIHN1bSA9IDA7XG4gIHBvcyA9IGxlbmd0aCAtIDc7XG4gIGZvciAodmFyIF9pMTAgPSBsZW5ndGg7IF9pMTAgPj0gMTsgX2kxMC0tKSB7XG4gICAgc3VtICs9IGlkZW50aWZpZXJzLmNoYXJBdChsZW5ndGggLSBfaTEwKSAqIHBvcztcbiAgICBwb3MgLT0gMTtcbiAgICBpZiAocG9zIDwgMikge1xuICAgICAgcG9zID0gOTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0ID0gc3VtICUgMTEgPCAyID8gMCA6IDExIC0gc3VtICUgMTE7XG4gIGlmIChyZXN1bHQgIT09IHBhcnNlSW50KHZlcmlmaWNhdG9ycy5jaGFyQXQoMSksIDEwKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLypcbiAqIHB0LVBUIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChOw7ptZXJvIGRlIGlkZW50aWZpY2HDp8OjbyBmaXNjYWwgKE5JRiksIHBlcnNvbnMvZW50aXRpZXMpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdCAodmFyaWFudCBvZiBNT0QgMTEpXG4gKi9cbmZ1bmN0aW9uIHB0UHRDaGVjayh0aW4pIHtcbiAgdmFyIGNoZWNrc3VtID0gMTEgLSBhbGdvcml0aG1zLnJldmVyc2VNdWx0aXBseUFuZFN1bSh0aW4uc3BsaXQoJycpLnNsaWNlKDAsIDgpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pLCA5KSAlIDExO1xuICBpZiAoY2hlY2tzdW0gPiA5KSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRpbls4XSwgMTApID09PSAwO1xuICB9XG4gIHJldHVybiBjaGVja3N1bSA9PT0gcGFyc2VJbnQodGluWzhdLCAxMCk7XG59XG5cbi8qXG4gKiByby1STyB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoQ29kIE51bWVyaWMgUGVyc29uYWwgKENOUCkgb3IgQ29kIGRlIMOubnJlZ2lzdHJhcmUgZmlzY2FsxIMgKENJRiksXG4gKiBwZXJzb25zIG9ubHkpXG4gKiBWZXJpZnkgQ05QIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdCAodGVzdCBub3QgZm91bmQgZm9yIENJRilcbiAqIE1hdGVyaWFsIG5vdCBpbiBERyBUQVhVRCBkb2N1bWVudCBzb3VyY2VkIGZyb206XG4gKiBgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmF0aW9uYWxfaWRlbnRpZmljYXRpb25fbnVtYmVyI1JvbWFuaWFgXG4gKi9cbmZ1bmN0aW9uIHJvUm9DaGVjayh0aW4pIHtcbiAgaWYgKHRpbi5zbGljZSgwLCA0KSAhPT0gJzkwMDAnKSB7XG4gICAgLy8gTm8gdGVzdCBmb3VuZCBmb3IgdGhpcyBmb3JtYXRcbiAgICAvLyBFeHRyYWN0IGZ1bGwgeWVhciB1c2luZyBjZW50dXJ5IGRpZ2l0IGlmIHBvc3NpYmxlXG4gICAgdmFyIGZ1bGxfeWVhciA9IHRpbi5zbGljZSgxLCAzKTtcbiAgICBzd2l0Y2ggKHRpblswXSkge1xuICAgICAgY2FzZSAnMSc6XG4gICAgICBjYXNlICcyJzpcbiAgICAgICAgZnVsbF95ZWFyID0gXCIxOVwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzMnOlxuICAgICAgY2FzZSAnNCc6XG4gICAgICAgIGZ1bGxfeWVhciA9IFwiMThcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc1JzpcbiAgICAgIGNhc2UgJzYnOlxuICAgICAgICBmdWxsX3llYXIgPSBcIjIwXCIuY29uY2F0KGZ1bGxfeWVhcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG5cbiAgICAvLyBDaGVjayBkYXRlIHZhbGlkaXR5XG4gICAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChmdWxsX3llYXIsIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDMsIDUpLCBcIi9cIikuY29uY2F0KHRpbi5zbGljZSg1LCA3KSk7XG4gICAgaWYgKGRhdGUubGVuZ3RoID09PSA4KSB7XG4gICAgICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWS9NTS9ERCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVlZWS9NTS9ERCcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIGNoZWNrIGRpZ2l0XG4gICAgdmFyIGRpZ2l0cyA9IHRpbi5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICAgIH0pO1xuICAgIHZhciBtdWx0aXBsaWVycyA9IFsyLCA3LCA5LCAxLCA0LCA2LCAzLCA1LCA4LCAyLCA3LCA5XTtcbiAgICB2YXIgY2hlY2tzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlwbGllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoZWNrc3VtICs9IGRpZ2l0c1tpXSAqIG11bHRpcGxpZXJzW2ldO1xuICAgIH1cbiAgICBpZiAoY2hlY2tzdW0gJSAxMSA9PT0gMTApIHtcbiAgICAgIHJldHVybiBkaWdpdHNbMTJdID09PSAxO1xuICAgIH1cbiAgICByZXR1cm4gZGlnaXRzWzEyXSA9PT0gY2hlY2tzdW0gJSAxMTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLypcbiAqIHNrLVNLIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIChSb2Ruw6kgxI3DrXNsbyAoUsSMKSBvciBiZXp2w716bmFtb3bDqSBpZGVudGlmaWthxI1uw6kgxI3DrXNsbyAoQknEjCksIHBlcnNvbnMgb25seSlcbiAqIENoZWNrcyB2YWxpZGl0eSBvZiBwcmUtMTk1NCBiaXJ0aCBudW1iZXJzIChyb2Ruw6kgxI3DrXNsbykgb25seVxuICogRHVlIHRvIHRoZSBpbnRyb2R1Y3Rpb24gb2YgdGhlIHBzZXVkby1yYW5kb20gQknEjCBpdCBpcyBub3QgcG9zc2libGUgdG8gdGVzdFxuICogcG9zdC0xOTU0IGJpcnRoIG51bWJlcnMgd2l0aG91dCBrbm93aW5nIHdoZXRoZXIgdGhleSBhcmUgQknEjCBvciBSxIwgYmVmb3JlaGFuZFxuICovXG5mdW5jdGlvbiBza1NrQ2hlY2sodGluKSB7XG4gIGlmICh0aW4ubGVuZ3RoID09PSA5KSB7XG4gICAgdGluID0gdGluLnJlcGxhY2UoL1xcVy8sICcnKTtcbiAgICBpZiAodGluLnNsaWNlKDYpID09PSAnMDAwJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gVGhyZWUtemVybyBzZXJpYWwgbm90IGFzc2lnbmVkIGJlZm9yZSAxOTU0XG5cbiAgICAvLyBFeHRyYWN0IGZ1bGwgeWVhciBmcm9tIFRJTiBsZW5ndGhcbiAgICB2YXIgZnVsbF95ZWFyID0gcGFyc2VJbnQodGluLnNsaWNlKDAsIDIpLCAxMCk7XG4gICAgaWYgKGZ1bGxfeWVhciA+IDUzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChmdWxsX3llYXIgPCAxMCkge1xuICAgICAgZnVsbF95ZWFyID0gXCIxOTBcIi5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsbF95ZWFyID0gXCIxOVwiLmNvbmNhdChmdWxsX3llYXIpO1xuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgbW9udGggZnJvbSBUSU4gYW5kIG5vcm1hbGl6ZVxuICAgIHZhciBtb250aCA9IHBhcnNlSW50KHRpbi5zbGljZSgyLCA0KSwgMTApO1xuICAgIGlmIChtb250aCA+IDUwKSB7XG4gICAgICBtb250aCAtPSA1MDtcbiAgICB9XG4gICAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICAgIG1vbnRoID0gXCIwXCIuY29uY2F0KG1vbnRoKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBkYXRlIHZhbGlkaXR5XG4gICAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChmdWxsX3llYXIsIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQodGluLnNsaWNlKDQsIDYpKTtcbiAgICBpZiAoISgwLCBfaXNEYXRlLmRlZmF1bHQpKGRhdGUsICdZWVlZL01NL0REJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qXG4gKiBzbC1TSSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoRGF2xI1uYSDFoXRldmlsa2EsIHBlcnNvbnMvZW50aXRpZXMpXG4gKiBWZXJpZnkgVElOIHZhbGlkaXR5IGJ5IGNhbGN1bGF0aW5nIGNoZWNrIChsYXN0KSBkaWdpdCAodmFyaWFudCBvZiBNT0QgMTEpXG4gKi9cbmZ1bmN0aW9uIHNsU2lDaGVjayh0aW4pIHtcbiAgdmFyIGNoZWNrc3VtID0gMTEgLSBhbGdvcml0aG1zLnJldmVyc2VNdWx0aXBseUFuZFN1bSh0aW4uc3BsaXQoJycpLnNsaWNlKDAsIDcpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBwYXJzZUludChhLCAxMCk7XG4gIH0pLCA4KSAlIDExO1xuICBpZiAoY2hlY2tzdW0gPT09IDEwKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRpbls3XSwgMTApID09PSAwO1xuICB9XG4gIHJldHVybiBjaGVja3N1bSA9PT0gcGFyc2VJbnQodGluWzddLCAxMCk7XG59XG5cbi8qXG4gKiBzdi1TRSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiAoUGVyc29ubnVtbWVyIG9yIHNhbW9yZG5pbmdzbnVtbWVyLCBwZXJzb25zIG9ubHkpXG4gKiBDaGVja3MgdmFsaWRpdHkgb2YgYmlydGggZGF0ZSBhbmQgY2FsbHMgbHVobkNoZWNrKCkgdG8gdmFsaWRhdGUgY2hlY2sgKGxhc3QpIGRpZ2l0XG4gKi9cbmZ1bmN0aW9uIHN2U2VDaGVjayh0aW4pIHtcbiAgLy8gTWFrZSBjb3B5IG9mIFRJTiBhbmQgbm9ybWFsaXplIHRvIHR3by1kaWdpdCB5ZWFyIGZvcm1cbiAgdmFyIHRpbl9jb3B5ID0gdGluLnNsaWNlKDApO1xuICBpZiAodGluLmxlbmd0aCA+IDExKSB7XG4gICAgdGluX2NvcHkgPSB0aW5fY29weS5zbGljZSgyKTtcbiAgfVxuXG4gIC8vIEV4dHJhY3QgZGF0ZSBvZiBiaXJ0aFxuICB2YXIgZnVsbF95ZWFyID0gJyc7XG4gIHZhciBtb250aCA9IHRpbl9jb3B5LnNsaWNlKDIsIDQpO1xuICB2YXIgZGF5ID0gcGFyc2VJbnQodGluX2NvcHkuc2xpY2UoNCwgNiksIDEwKTtcbiAgaWYgKHRpbi5sZW5ndGggPiAxMSkge1xuICAgIGZ1bGxfeWVhciA9IHRpbi5zbGljZSgwLCA0KTtcbiAgfSBlbHNlIHtcbiAgICBmdWxsX3llYXIgPSB0aW4uc2xpY2UoMCwgMik7XG4gICAgaWYgKHRpbi5sZW5ndGggPT09IDExICYmIGRheSA8IDYwKSB7XG4gICAgICAvLyBFeHRyYWN0IGZ1bGwgeWVhciBmcm9tIGNlbnRlbmFyaWFuIHN5bWJvbFxuICAgICAgLy8gU2hvdWxkIHdvcmsganVzdCBmaW5lIHVudGlsIHllYXIgMTAwMDAgb3Igc29cbiAgICAgIHZhciBjdXJyZW50X3llYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgICAgIHZhciBjdXJyZW50X2NlbnR1cnkgPSBwYXJzZUludChjdXJyZW50X3llYXIuc2xpY2UoMCwgMiksIDEwKTtcbiAgICAgIGN1cnJlbnRfeWVhciA9IHBhcnNlSW50KGN1cnJlbnRfeWVhciwgMTApO1xuICAgICAgaWYgKHRpbls2XSA9PT0gJy0nKSB7XG4gICAgICAgIGlmIChwYXJzZUludChcIlwiLmNvbmNhdChjdXJyZW50X2NlbnR1cnkpLmNvbmNhdChmdWxsX3llYXIpLCAxMCkgPiBjdXJyZW50X3llYXIpIHtcbiAgICAgICAgICBmdWxsX3llYXIgPSBcIlwiLmNvbmNhdChjdXJyZW50X2NlbnR1cnkgLSAxKS5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmdWxsX3llYXIgPSBcIlwiLmNvbmNhdChjdXJyZW50X2NlbnR1cnkpLmNvbmNhdChmdWxsX3llYXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxsX3llYXIgPSBcIlwiLmNvbmNhdChjdXJyZW50X2NlbnR1cnkgLSAxKS5jb25jYXQoZnVsbF95ZWFyKTtcbiAgICAgICAgaWYgKGN1cnJlbnRfeWVhciAtIHBhcnNlSW50KGZ1bGxfeWVhciwgMTApIDwgMTAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGRheSBhbmQgY2hlY2sgZGF0ZSB2YWxpZGl0eVxuICBpZiAoZGF5ID4gNjApIHtcbiAgICBkYXkgLT0gNjA7XG4gIH1cbiAgaWYgKGRheSA8IDEwKSB7XG4gICAgZGF5ID0gXCIwXCIuY29uY2F0KGRheSk7XG4gIH1cbiAgdmFyIGRhdGUgPSBcIlwiLmNvbmNhdChmdWxsX3llYXIsIFwiL1wiKS5jb25jYXQobW9udGgsIFwiL1wiKS5jb25jYXQoZGF5KTtcbiAgaWYgKGRhdGUubGVuZ3RoID09PSA4KSB7XG4gICAgaWYgKCEoMCwgX2lzRGF0ZS5kZWZhdWx0KShkYXRlLCAnWVkvTU0vREQnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmICghKDAsIF9pc0RhdGUuZGVmYXVsdCkoZGF0ZSwgJ1lZWVkvTU0vREQnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gYWxnb3JpdGhtcy5sdWhuQ2hlY2sodGluLnJlcGxhY2UoL1xcVy8sICcnKSk7XG59XG5cbi8qKlxuICogdWstVUEgdmFsaWRhdGlvbiBmdW5jdGlvblxuICogVmVyaWZ5IFRJTiB2YWxpZGl0eSBieSBjYWxjdWxhdGluZyBjaGVjayAobGFzdCkgZGlnaXQgKHZhcmlhbnQgb2YgTU9EIDExKVxuICovXG5mdW5jdGlvbiB1a1VhQ2hlY2sodGluKSB7XG4gIC8vIENhbGN1bGF0ZSBjaGVjayBkaWdpdFxuICB2YXIgZGlnaXRzID0gdGluLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICB9KTtcbiAgdmFyIG11bHRpcGxpZXJzID0gWy0xLCA1LCA3LCA5LCA0LCA2LCAxMCwgNSwgN107XG4gIHZhciBjaGVja3N1bSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXVsdGlwbGllcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGVja3N1bSArPSBkaWdpdHNbaV0gKiBtdWx0aXBsaWVyc1tpXTtcbiAgfVxuICByZXR1cm4gY2hlY2tzdW0gJSAxMSA9PT0gMTAgPyBkaWdpdHNbOV0gPT09IDAgOiBkaWdpdHNbOV0gPT09IGNoZWNrc3VtICUgMTE7XG59XG5cbi8vIExvY2FsZSBsb29rdXAgb2JqZWN0c1xuXG4vKlxuICogVGF4IGlkIHJlZ2V4IGZvcm1hdHMgZm9yIHZhcmlvdXMgbG9jYWxlc1xuICpcbiAqIFdoZXJlIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZCBpbiBERy1UQVhVRCBkb2N1bWVudCBib3RoXG4gKiB1cHBlcmNhc2UgYW5kIGxvd2VyY2FzZSBsZXR0ZXJzIGFyZSBhY2NlcHRhYmxlLlxuICovXG52YXIgdGF4SWRGb3JtYXQgPSB7XG4gICdiZy1CRyc6IC9eXFxkezEwfSQvLFxuICAnY3MtQ1onOiAvXlxcZHs2fVxcL3swLDF9XFxkezMsNH0kLyxcbiAgJ2RlLUFUJzogL15cXGR7OX0kLyxcbiAgJ2RlLURFJzogL15bMS05XVxcZHsxMH0kLyxcbiAgJ2RrLURLJzogL15cXGR7Nn0tezAsMX1cXGR7NH0kLyxcbiAgJ2VsLUNZJzogL15bMDldXFxkezd9W0EtWl0kLyxcbiAgJ2VsLUdSJzogL14oWzAtNF18WzctOV0pXFxkezh9JC8sXG4gICdlbi1DQSc6IC9eXFxkezl9JC8sXG4gICdlbi1HQic6IC9eXFxkezEwfSR8Xig/IUdCfE5LfFROfFpaKSg/IVtERklRVVZdKVtBLVpdKD8hW0RGSVFVVk9dKVtBLVpdXFxkezZ9W0FCQ0QgXSQvaSxcbiAgJ2VuLUlFJzogL15cXGR7N31bQS1XXVtBLUlXXXswLDF9JC9pLFxuICAnZW4tVVMnOiAvXlxcZHsyfVstIF17MCwxfVxcZHs3fSQvLFxuICAnZXMtQVInOiAvKDIwfDIzfDI0fDI3fDMwfDMzfDM0KVswLTldezh9WzAtOV0vLFxuICAnZXMtRVMnOiAvXihcXGR7MCw4fXxbWFlaS0xNXVxcZHs3fSlbQS1ISi1OUC1UVi1aXSQvaSxcbiAgJ2V0LUVFJzogL15bMS02XVxcZHs2fSgwMFsxLTldfDBbMS05XVswLTldfFsxLTZdWzAtOV17Mn18NzBbMC05XXw3MTApXFxkJC8sXG4gICdmaS1GSSc6IC9eXFxkezZ9Wy0rQV1cXGR7M31bMC05QS1GSEotTlBSLVldJC9pLFxuICAnZnItQkUnOiAvXlxcZHsxMX0kLyxcbiAgJ2ZyLUZSJzogL15bMC0zXVxcZHsxMn0kfF5bMC0zXVxcZFxcc1xcZHsyfShcXHNcXGR7M30pezN9JC8sXG4gIC8vIENvbmZvcm1zIGJvdGggdG8gb2ZmaWNpYWwgc3BlYyBhbmQgcHJvdmlkZWQgZXhhbXBsZVxuICAnZnItTFUnOiAvXlxcZHsxM30kLyxcbiAgJ2hyLUhSJzogL15cXGR7MTF9JC8sXG4gICdodS1IVSc6IC9eOFxcZHs5fSQvLFxuICAnaXQtSVQnOiAvXltBLVpdezZ9W0wtTlAtVjAtOV17Mn1bQS1FSExNUFJTVF1bTC1OUC1WMC05XXsyfVtBLUlMTVpdW0wtTlAtVjAtOV17M31bQS1aXSQvaSxcbiAgJ2x2LUxWJzogL15cXGR7Nn0tezAsMX1cXGR7NX0kLyxcbiAgLy8gQ29uZm9ybXMgYm90aCB0byBERyBUQVhVRCBzcGVjIGFuZCBvcmlnaW5hbCByZXNlYXJjaFxuICAnbXQtTVQnOiAvXlxcZHszLDd9W0FQTUdMSEJaXSR8XihbMS04XSlcXDFcXGR7N30kL2ksXG4gICdubC1OTCc6IC9eXFxkezl9JC8sXG4gICdwbC1QTCc6IC9eXFxkezEwLDExfSQvLFxuICAncHQtQlInOiAvKD86XlxcZHsxMX0kKXwoPzpeXFxkezE0fSQpLyxcbiAgJ3B0LVBUJzogL15cXGR7OX0kLyxcbiAgJ3JvLVJPJzogL15cXGR7MTN9JC8sXG4gICdzay1TSyc6IC9eXFxkezZ9XFwvezAsMX1cXGR7Myw0fSQvLFxuICAnc2wtU0knOiAvXlsxLTldXFxkezd9JC8sXG4gICdzdi1TRSc6IC9eKFxcZHs2fVstK117MCwxfVxcZHs0fXwoMTh8MTl8MjApXFxkezZ9Wy0rXXswLDF9XFxkezR9KSQvLFxuICAndWstVUEnOiAvXlxcZHsxMH0kL1xufTtcbi8vIHRheElkRm9ybWF0IGxvY2FsZSBhbGlhc2VzXG50YXhJZEZvcm1hdFsnbGItTFUnXSA9IHRheElkRm9ybWF0Wydmci1MVSddO1xudGF4SWRGb3JtYXRbJ2x0LUxUJ10gPSB0YXhJZEZvcm1hdFsnZXQtRUUnXTtcbnRheElkRm9ybWF0WydubC1CRSddID0gdGF4SWRGb3JtYXRbJ2ZyLUJFJ107XG50YXhJZEZvcm1hdFsnZnItQ0EnXSA9IHRheElkRm9ybWF0Wydlbi1DQSddO1xuXG4vLyBBbGdvcml0aG1pYyB0YXggaWQgY2hlY2sgZnVuY3Rpb25zIGZvciB2YXJpb3VzIGxvY2FsZXNcbnZhciB0YXhJZENoZWNrID0ge1xuICAnYmctQkcnOiBiZ0JnQ2hlY2ssXG4gICdjcy1DWic6IGNzQ3pDaGVjayxcbiAgJ2RlLUFUJzogZGVBdENoZWNrLFxuICAnZGUtREUnOiBkZURlQ2hlY2ssXG4gICdkay1ESyc6IGRrRGtDaGVjayxcbiAgJ2VsLUNZJzogZWxDeUNoZWNrLFxuICAnZWwtR1InOiBlbEdyQ2hlY2ssXG4gICdlbi1DQSc6IGlzQ2FuYWRpYW5TSU4sXG4gICdlbi1JRSc6IGVuSWVDaGVjayxcbiAgJ2VuLVVTJzogZW5Vc0NoZWNrLFxuICAnZXMtQVInOiBlc0FyQ2hlY2ssXG4gICdlcy1FUyc6IGVzRXNDaGVjayxcbiAgJ2V0LUVFJzogZXRFZUNoZWNrLFxuICAnZmktRkknOiBmaUZpQ2hlY2ssXG4gICdmci1CRSc6IGZyQmVDaGVjayxcbiAgJ2ZyLUZSJzogZnJGckNoZWNrLFxuICAnZnItTFUnOiBmckx1Q2hlY2ssXG4gICdoci1IUic6IGhySHJDaGVjayxcbiAgJ2h1LUhVJzogaHVIdUNoZWNrLFxuICAnaXQtSVQnOiBpdEl0Q2hlY2ssXG4gICdsdi1MVic6IGx2THZDaGVjayxcbiAgJ210LU1UJzogbXRNdENoZWNrLFxuICAnbmwtTkwnOiBubE5sQ2hlY2ssXG4gICdwbC1QTCc6IHBsUGxDaGVjayxcbiAgJ3B0LUJSJzogcHRCckNoZWNrLFxuICAncHQtUFQnOiBwdFB0Q2hlY2ssXG4gICdyby1STyc6IHJvUm9DaGVjayxcbiAgJ3NrLVNLJzogc2tTa0NoZWNrLFxuICAnc2wtU0knOiBzbFNpQ2hlY2ssXG4gICdzdi1TRSc6IHN2U2VDaGVjayxcbiAgJ3VrLVVBJzogdWtVYUNoZWNrXG59O1xuLy8gdGF4SWRDaGVjayBsb2NhbGUgYWxpYXNlc1xudGF4SWRDaGVja1snbGItTFUnXSA9IHRheElkQ2hlY2tbJ2ZyLUxVJ107XG50YXhJZENoZWNrWydsdC1MVCddID0gdGF4SWRDaGVja1snZXQtRUUnXTtcbnRheElkQ2hlY2tbJ25sLUJFJ10gPSB0YXhJZENoZWNrWydmci1CRSddO1xudGF4SWRDaGVja1snZnItQ0EnXSA9IHRheElkQ2hlY2tbJ2VuLUNBJ107XG5cbi8vIFJlZ2V4ZXMgZm9yIGxvY2FsZXMgd2hlcmUgY2hhcmFjdGVycyBzaG91bGQgYmUgb21pdHRlZCBiZWZvcmUgY2hlY2tpbmcgZm9ybWF0XG52YXIgYWxsc3ltYm9scyA9IC9bLVxcXFxcXC8hQCMkJVxcXiZcXCpcXChcXClcXCtcXD1cXFtcXF1dKy9nO1xudmFyIHNhbml0aXplUmVnZXhlcyA9IHtcbiAgJ2RlLUFUJzogYWxsc3ltYm9scyxcbiAgJ2RlLURFJzogL1tcXC9cXFxcXS9nLFxuICAnZnItQkUnOiBhbGxzeW1ib2xzXG59O1xuLy8gc2FuaXRpemVSZWdleGVzIGxvY2FsZSBhbGlhc2VzXG5zYW5pdGl6ZVJlZ2V4ZXNbJ25sLUJFJ10gPSBzYW5pdGl6ZVJlZ2V4ZXNbJ2ZyLUJFJ107XG5cbi8qXG4gKiBWYWxpZGF0b3IgZnVuY3Rpb25cbiAqIFJldHVybiB0cnVlIGlmIHRoZSBwYXNzZWQgc3RyaW5nIGlzIGEgdmFsaWQgdGF4IGlkZW50aWZpY2F0aW9uIG51bWJlclxuICogZm9yIHRoZSBzcGVjaWZpZWQgbG9jYWxlLlxuICogVGhyb3cgYW4gZXJyb3IgZXhjZXB0aW9uIGlmIHRoZSBsb2NhbGUgaXMgbm90IHN1cHBvcnRlZC5cbiAqL1xuZnVuY3Rpb24gaXNUYXhJRChzdHIpIHtcbiAgdmFyIGxvY2FsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2VuLVVTJztcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgLy8gQ29weSBUSU4gdG8gYXZvaWQgcmVwbGFjZW1lbnQgaWYgc2FuaXRpemVkXG4gIHZhciBzdHJjb3B5ID0gc3RyLnNsaWNlKDApO1xuICBpZiAobG9jYWxlIGluIHRheElkRm9ybWF0KSB7XG4gICAgaWYgKGxvY2FsZSBpbiBzYW5pdGl6ZVJlZ2V4ZXMpIHtcbiAgICAgIHN0cmNvcHkgPSBzdHJjb3B5LnJlcGxhY2Uoc2FuaXRpemVSZWdleGVzW2xvY2FsZV0sICcnKTtcbiAgICB9XG4gICAgaWYgKCF0YXhJZEZvcm1hdFtsb2NhbGVdLnRlc3Qoc3RyY29weSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxvY2FsZSBpbiB0YXhJZENoZWNrKSB7XG4gICAgICByZXR1cm4gdGF4SWRDaGVja1tsb2NhbGVdKHN0cmNvcHkpO1xuICAgIH1cbiAgICAvLyBGYWxsdGhyb3VnaDsgbm90IGFsbCBsb2NhbGVzIGhhdmUgYWxnb3JpdGhtaWMgY2hlY2tzXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2NhbGUgJ1wiLmNvbmNhdChsb2NhbGUsIFwiJ1wiKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1RpbWU7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgZGVmYXVsdF90aW1lX29wdGlvbnMgPSB7XG4gIGhvdXJGb3JtYXQ6ICdob3VyMjQnLFxuICBtb2RlOiAnZGVmYXVsdCdcbn07XG52YXIgZm9ybWF0cyA9IHtcbiAgaG91cjI0OiB7XG4gICAgZGVmYXVsdDogL14oWzAxXT9bMC05XXwyWzAtM10pOihbMC01XVswLTldKSQvLFxuICAgIHdpdGhTZWNvbmRzOiAvXihbMDFdP1swLTldfDJbMC0zXSk6KFswLTVdWzAtOV0pOihbMC01XVswLTldKSQvXG4gIH0sXG4gIGhvdXIxMjoge1xuICAgIGRlZmF1bHQ6IC9eKDA/WzEtOV18MVswLTJdKTooWzAtNV1bMC05XSkgKEF8UClNJC8sXG4gICAgd2l0aFNlY29uZHM6IC9eKDA/WzEtOV18MVswLTJdKTooWzAtNV1bMC05XSk6KFswLTVdWzAtOV0pIChBfFApTSQvXG4gIH1cbn07XG5mdW5jdGlvbiBpc1RpbWUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdF90aW1lX29wdGlvbnMpO1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZm9ybWF0c1tvcHRpb25zLmhvdXJGb3JtYXRdW29wdGlvbnMubW9kZV0udGVzdChpbnB1dCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1VSTDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2lzRlFETiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNGUUROXCIpKTtcbnZhciBfaXNJUCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNJUFwiKSk7XG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL21lcmdlXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOyByZXR1cm4gYXJyMjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAobykgdGhyb3cgbjsgfSB9IHJldHVybiBhOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuLypcbm9wdGlvbnMgZm9yIGlzVVJMIG1ldGhvZFxuXG5yZXF1aXJlX3Byb3RvY29sIC0gaWYgc2V0IGFzIHRydWUgaXNVUkwgd2lsbCByZXR1cm4gZmFsc2UgaWYgcHJvdG9jb2wgaXMgbm90IHByZXNlbnQgaW4gdGhlIFVSTFxucmVxdWlyZV92YWxpZF9wcm90b2NvbCAtIGlzVVJMIHdpbGwgY2hlY2sgaWYgdGhlIFVSTCdzIHByb3RvY29sIGlzIHByZXNlbnQgaW4gdGhlIHByb3RvY29scyBvcHRpb25cbnByb3RvY29scyAtIHZhbGlkIHByb3RvY29scyBjYW4gYmUgbW9kaWZpZWQgd2l0aCB0aGlzIG9wdGlvblxucmVxdWlyZV9ob3N0IC0gaWYgc2V0IGFzIGZhbHNlIGlzVVJMIHdpbGwgbm90IGNoZWNrIGlmIGhvc3QgaXMgcHJlc2VudCBpbiB0aGUgVVJMXG5yZXF1aXJlX3BvcnQgLSBpZiBzZXQgYXMgdHJ1ZSBpc1VSTCB3aWxsIGNoZWNrIGlmIHBvcnQgaXMgcHJlc2VudCBpbiB0aGUgVVJMXG5hbGxvd19wcm90b2NvbF9yZWxhdGl2ZV91cmxzIC0gaWYgc2V0IGFzIHRydWUgcHJvdG9jb2wgcmVsYXRpdmUgVVJMcyB3aWxsIGJlIGFsbG93ZWRcbnZhbGlkYXRlX2xlbmd0aCAtIGlmIHNldCBhcyBmYWxzZSBpc1VSTCB3aWxsIHNraXAgc3RyaW5nIGxlbmd0aCB2YWxpZGF0aW9uIChJRSBtYXhpbXVtIGlzIDIwODMpXG5cbiovXG5cbnZhciBkZWZhdWx0X3VybF9vcHRpb25zID0ge1xuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmdHAnXSxcbiAgcmVxdWlyZV90bGQ6IHRydWUsXG4gIHJlcXVpcmVfcHJvdG9jb2w6IGZhbHNlLFxuICByZXF1aXJlX2hvc3Q6IHRydWUsXG4gIHJlcXVpcmVfcG9ydDogZmFsc2UsXG4gIHJlcXVpcmVfdmFsaWRfcHJvdG9jb2w6IHRydWUsXG4gIGFsbG93X3VuZGVyc2NvcmVzOiBmYWxzZSxcbiAgYWxsb3dfdHJhaWxpbmdfZG90OiBmYWxzZSxcbiAgYWxsb3dfcHJvdG9jb2xfcmVsYXRpdmVfdXJsczogZmFsc2UsXG4gIGFsbG93X2ZyYWdtZW50czogdHJ1ZSxcbiAgYWxsb3dfcXVlcnlfY29tcG9uZW50czogdHJ1ZSxcbiAgdmFsaWRhdGVfbGVuZ3RoOiB0cnVlXG59O1xudmFyIHdyYXBwZWRfaXB2NiA9IC9eXFxbKFteXFxdXSspXFxdKD86OihbMC05XSspKT8kLztcbmZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZnVuY3Rpb24gY2hlY2tIb3N0KGhvc3QsIG1hdGNoZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoID0gbWF0Y2hlc1tpXTtcbiAgICBpZiAoaG9zdCA9PT0gbWF0Y2ggfHwgaXNSZWdFeHAobWF0Y2gpICYmIG1hdGNoLnRlc3QoaG9zdCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc1VSTCh1cmwsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkodXJsKTtcbiAgaWYgKCF1cmwgfHwgL1tcXHM8Pl0vLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodXJsLmluZGV4T2YoJ21haWx0bzonKSA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBvcHRpb25zID0gKDAsIF9tZXJnZS5kZWZhdWx0KShvcHRpb25zLCBkZWZhdWx0X3VybF9vcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMudmFsaWRhdGVfbGVuZ3RoICYmIHVybC5sZW5ndGggPj0gMjA4Mykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIW9wdGlvbnMuYWxsb3dfZnJhZ21lbnRzICYmIHVybC5pbmNsdWRlcygnIycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghb3B0aW9ucy5hbGxvd19xdWVyeV9jb21wb25lbnRzICYmICh1cmwuaW5jbHVkZXMoJz8nKSB8fCB1cmwuaW5jbHVkZXMoJyYnKSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvY29sLCBhdXRoLCBob3N0LCBob3N0bmFtZSwgcG9ydCwgcG9ydF9zdHIsIHNwbGl0LCBpcHY2O1xuICBzcGxpdCA9IHVybC5zcGxpdCgnIycpO1xuICB1cmwgPSBzcGxpdC5zaGlmdCgpO1xuICBzcGxpdCA9IHVybC5zcGxpdCgnPycpO1xuICB1cmwgPSBzcGxpdC5zaGlmdCgpO1xuICBzcGxpdCA9IHVybC5zcGxpdCgnOi8vJyk7XG4gIGlmIChzcGxpdC5sZW5ndGggPiAxKSB7XG4gICAgcHJvdG9jb2wgPSBzcGxpdC5zaGlmdCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKG9wdGlvbnMucmVxdWlyZV92YWxpZF9wcm90b2NvbCAmJiBvcHRpb25zLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5yZXF1aXJlX3Byb3RvY29sKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKHVybC5zbGljZSgwLCAyKSA9PT0gJy8vJykge1xuICAgIGlmICghb3B0aW9ucy5hbGxvd19wcm90b2NvbF9yZWxhdGl2ZV91cmxzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNwbGl0WzBdID0gdXJsLnNsaWNlKDIpO1xuICB9XG4gIHVybCA9IHNwbGl0LmpvaW4oJzovLycpO1xuICBpZiAodXJsID09PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzcGxpdCA9IHVybC5zcGxpdCgnLycpO1xuICB1cmwgPSBzcGxpdC5zaGlmdCgpO1xuICBpZiAodXJsID09PSAnJyAmJiAhb3B0aW9ucy5yZXF1aXJlX2hvc3QpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzcGxpdCA9IHVybC5zcGxpdCgnQCcpO1xuICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgIGlmIChvcHRpb25zLmRpc2FsbG93X2F1dGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHNwbGl0WzBdID09PSAnJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhdXRoID0gc3BsaXQuc2hpZnQoKTtcbiAgICBpZiAoYXV0aC5pbmRleE9mKCc6JykgPj0gMCAmJiBhdXRoLnNwbGl0KCc6JykubGVuZ3RoID4gMikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgX2F1dGgkc3BsaXQgPSBhdXRoLnNwbGl0KCc6JyksXG4gICAgICBfYXV0aCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfYXV0aCRzcGxpdCwgMiksXG4gICAgICB1c2VyID0gX2F1dGgkc3BsaXQyWzBdLFxuICAgICAgcGFzc3dvcmQgPSBfYXV0aCRzcGxpdDJbMV07XG4gICAgaWYgKHVzZXIgPT09ICcnICYmIHBhc3N3b3JkID09PSAnJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBob3N0bmFtZSA9IHNwbGl0LmpvaW4oJ0AnKTtcbiAgcG9ydF9zdHIgPSBudWxsO1xuICBpcHY2ID0gbnVsbDtcbiAgdmFyIGlwdjZfbWF0Y2ggPSBob3N0bmFtZS5tYXRjaCh3cmFwcGVkX2lwdjYpO1xuICBpZiAoaXB2Nl9tYXRjaCkge1xuICAgIGhvc3QgPSAnJztcbiAgICBpcHY2ID0gaXB2Nl9tYXRjaFsxXTtcbiAgICBwb3J0X3N0ciA9IGlwdjZfbWF0Y2hbMl0gfHwgbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBzcGxpdCA9IGhvc3RuYW1lLnNwbGl0KCc6Jyk7XG4gICAgaG9zdCA9IHNwbGl0LnNoaWZ0KCk7XG4gICAgaWYgKHNwbGl0Lmxlbmd0aCkge1xuICAgICAgcG9ydF9zdHIgPSBzcGxpdC5qb2luKCc6Jyk7XG4gICAgfVxuICB9XG4gIGlmIChwb3J0X3N0ciAhPT0gbnVsbCAmJiBwb3J0X3N0ci5sZW5ndGggPiAwKSB7XG4gICAgcG9ydCA9IHBhcnNlSW50KHBvcnRfc3RyLCAxMCk7XG4gICAgaWYgKCEvXlswLTldKyQvLnRlc3QocG9ydF9zdHIpIHx8IHBvcnQgPD0gMCB8fCBwb3J0ID4gNjU1MzUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5yZXF1aXJlX3BvcnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaG9zdF93aGl0ZWxpc3QpIHtcbiAgICByZXR1cm4gY2hlY2tIb3N0KGhvc3QsIG9wdGlvbnMuaG9zdF93aGl0ZWxpc3QpO1xuICB9XG4gIGlmIChob3N0ID09PSAnJyAmJiAhb3B0aW9ucy5yZXF1aXJlX2hvc3QpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoISgwLCBfaXNJUC5kZWZhdWx0KShob3N0KSAmJiAhKDAsIF9pc0ZRRE4uZGVmYXVsdCkoaG9zdCwgb3B0aW9ucykgJiYgKCFpcHY2IHx8ICEoMCwgX2lzSVAuZGVmYXVsdCkoaXB2NiwgNikpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGhvc3QgPSBob3N0IHx8IGlwdjY7XG4gIGlmIChvcHRpb25zLmhvc3RfYmxhY2tsaXN0ICYmIGNoZWNrSG9zdChob3N0LCBvcHRpb25zLmhvc3RfYmxhY2tsaXN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVVVJRDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIHV1aWQgPSB7XG4gIDE6IC9eWzAtOUEtRl17OH0tWzAtOUEtRl17NH0tMVswLTlBLUZdezN9LVswLTlBLUZdezR9LVswLTlBLUZdezEyfSQvaSxcbiAgMjogL15bMC05QS1GXXs4fS1bMC05QS1GXXs0fS0yWzAtOUEtRl17M30tWzAtOUEtRl17NH0tWzAtOUEtRl17MTJ9JC9pLFxuICAzOiAvXlswLTlBLUZdezh9LVswLTlBLUZdezR9LTNbMC05QS1GXXszfS1bMC05QS1GXXs0fS1bMC05QS1GXXsxMn0kL2ksXG4gIDQ6IC9eWzAtOUEtRl17OH0tWzAtOUEtRl17NH0tNFswLTlBLUZdezN9LVs4OUFCXVswLTlBLUZdezN9LVswLTlBLUZdezEyfSQvaSxcbiAgNTogL15bMC05QS1GXXs4fS1bMC05QS1GXXs0fS01WzAtOUEtRl17M30tWzg5QUJdWzAtOUEtRl17M30tWzAtOUEtRl17MTJ9JC9pLFxuICA3OiAvXlswLTlBLUZdezh9LVswLTlBLUZdezR9LTdbMC05QS1GXXszfS1bODlBQl1bMC05QS1GXXszfS1bMC05QS1GXXsxMn0kL2ksXG4gIGFsbDogL15bMC05QS1GXXs4fS1bMC05QS1GXXs0fS1bMC05QS1GXXs0fS1bMC05QS1GXXs0fS1bMC05QS1GXXsxMn0kL2lcbn07XG5mdW5jdGlvbiBpc1VVSUQoc3RyLCB2ZXJzaW9uKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBwYXR0ZXJuID0gdXVpZFshW3VuZGVmaW5lZCwgbnVsbF0uaW5jbHVkZXModmVyc2lvbikgPyB2ZXJzaW9uIDogJ2FsbCddO1xuICByZXR1cm4gISFwYXR0ZXJuICYmIHBhdHRlcm4udGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNVcHBlcmNhc2U7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIGlzVXBwZXJjYXNlKHN0cikge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gc3RyID09PSBzdHIudG9VcHBlckNhc2UoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVkFUO1xuZXhwb3J0cy52YXRNYXRjaGVycyA9IHZvaWQgMDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgYWxnb3JpdGhtcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3V0aWwvYWxnb3JpdGhtc1wiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IF90eXBlb2YoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKHIpOyBpZiAodCAmJiB0LmhhcyhlKSkgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHsgX19wcm90b19fOiBudWxsIH0sIGEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgdSBpbiBlKSBpZiAoXCJkZWZhdWx0XCIgIT09IHUgJiYge30uaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG52YXIgQVUgPSBmdW5jdGlvbiBBVShzdHIpIHtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKC9eKEFVKT8oXFxkezExfSkkLyk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQHNlZSB7QGxpbmsgaHR0cHM6Ly9hYnIuYnVzaW5lc3MuZ292LmF1L0hlbHAvQWJuRm9ybWF0fVxuICB2YXIgd2VpZ2h0cyA9IFsxMCwgMSwgMywgNSwgNywgOSwgMTEsIDEzLCAxNSwgMTcsIDE5XTtcbiAgc3RyID0gc3RyLnJlcGxhY2UoL15BVS8sICcnKTtcbiAgdmFyIEFCTiA9IChwYXJzZUludChzdHIuc2xpY2UoMCwgMSksIDEwKSAtIDEpLnRvU3RyaW5nKCkgKyBzdHIuc2xpY2UoMSk7XG4gIHZhciB0b3RhbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTE7IGkrKykge1xuICAgIHRvdGFsICs9IHdlaWdodHNbaV0gKiBBQk4uY2hhckF0KGkpO1xuICB9XG4gIHJldHVybiB0b3RhbCAhPT0gMCAmJiB0b3RhbCAlIDg5ID09PSAwO1xufTtcbnZhciBDSCA9IGZ1bmN0aW9uIENIKHN0cikge1xuICAvLyBAc2VlIHtAbGluayBodHRwczovL3d3dy5lY2guY2gvZGUvZWNoL2VjaC0wMDk3LzUuMi4wfVxuICB2YXIgaGFzVmFsaWRDaGVja051bWJlciA9IGZ1bmN0aW9uIGhhc1ZhbGlkQ2hlY2tOdW1iZXIoZGlnaXRzKSB7XG4gICAgdmFyIGxhc3REaWdpdCA9IGRpZ2l0cy5wb3AoKTsgLy8gdXNlZCBhcyBjaGVjayBudW1iZXJcbiAgICB2YXIgd2VpZ2h0cyA9IFs1LCA0LCAzLCAyLCA3LCA2LCA1LCA0XTtcbiAgICB2YXIgY2FsY3VsYXRlZENoZWNrTnVtYmVyID0gKDExIC0gZGlnaXRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBlbCwgaWR4KSB7XG4gICAgICByZXR1cm4gYWNjICsgZWwgKiB3ZWlnaHRzW2lkeF07XG4gICAgfSwgMCkgJSAxMSkgJSAxMTtcbiAgICByZXR1cm4gbGFzdERpZ2l0ID09PSBjYWxjdWxhdGVkQ2hlY2tOdW1iZXI7XG4gIH07XG5cbiAgLy8gQHNlZSB7QGxpbmsgaHR0cHM6Ly93d3cuZXN0di5hZG1pbi5jaC9lc3R2L2RlL2hvbWUvbWVocndlcnRzdGV1ZXIvdWlkL213c3QtdWlkLW51bW1lci5odG1sfVxuICByZXR1cm4gL14oQ0hFWy0gXT8pPyhcXGR7OX18KFxcZHszfVxcLlxcZHszfVxcLlxcZHszfSl8KFxcZHszfSBcXGR7M30gXFxkezN9KSkgPyhUVkF8TVdTVHxJVkEpPyQvLnRlc3Qoc3RyKSAmJiBoYXNWYWxpZENoZWNrTnVtYmVyKHN0ci5tYXRjaCgvXFxkL2cpLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gK2VsO1xuICB9KSk7XG59O1xudmFyIFBUID0gZnVuY3Rpb24gUFQoc3RyKSB7XG4gIHZhciBtYXRjaCA9IHN0ci5tYXRjaCgvXihQVCk/KFxcZHs5fSkkLyk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHRpbiA9IG1hdGNoWzJdO1xuICB2YXIgY2hlY2tzdW0gPSAxMSAtIGFsZ29yaXRobXMucmV2ZXJzZU11bHRpcGx5QW5kU3VtKHRpbi5zcGxpdCgnJykuc2xpY2UoMCwgOCkubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKTtcbiAgfSksIDkpICUgMTE7XG4gIGlmIChjaGVja3N1bSA+IDkpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGluWzhdLCAxMCkgPT09IDA7XG4gIH1cbiAgcmV0dXJuIGNoZWNrc3VtID09PSBwYXJzZUludCh0aW5bOF0sIDEwKTtcbn07XG52YXIgdmF0TWF0Y2hlcnMgPSBleHBvcnRzLnZhdE1hdGNoZXJzID0ge1xuICAvKipcclxuICAgKiBFdXJvcGVhbiBVbmlvbiBWQVQgaWRlbnRpZmljYXRpb24gbnVtYmVyc1xyXG4gICAqL1xuICBBVDogZnVuY3Rpb24gQVQoc3RyKSB7XG4gICAgcmV0dXJuIC9eKEFUKT9VXFxkezh9JC8udGVzdChzdHIpO1xuICB9LFxuICBCRTogZnVuY3Rpb24gQkUoc3RyKSB7XG4gICAgcmV0dXJuIC9eKEJFKT9cXGR7MTB9JC8udGVzdChzdHIpO1xuICB9LFxuICBCRzogZnVuY3Rpb24gQkcoc3RyKSB7XG4gICAgcmV0dXJuIC9eKEJHKT9cXGR7OSwxMH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIEhSOiBmdW5jdGlvbiBIUihzdHIpIHtcbiAgICByZXR1cm4gL14oSFIpP1xcZHsxMX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIENZOiBmdW5jdGlvbiBDWShzdHIpIHtcbiAgICByZXR1cm4gL14oQ1kpP1xcd3s5fSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgQ1o6IGZ1bmN0aW9uIENaKHN0cikge1xuICAgIHJldHVybiAvXihDWik/XFxkezgsMTB9JC8udGVzdChzdHIpO1xuICB9LFxuICBESzogZnVuY3Rpb24gREsoc3RyKSB7XG4gICAgcmV0dXJuIC9eKERLKT9cXGR7OH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIEVFOiBmdW5jdGlvbiBFRShzdHIpIHtcbiAgICByZXR1cm4gL14oRUUpP1xcZHs5fSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgRkk6IGZ1bmN0aW9uIEZJKHN0cikge1xuICAgIHJldHVybiAvXihGSSk/XFxkezh9JC8udGVzdChzdHIpO1xuICB9LFxuICBGUjogZnVuY3Rpb24gRlIoc3RyKSB7XG4gICAgcmV0dXJuIC9eKEZSKT9cXHd7Mn1cXGR7OX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIERFOiBmdW5jdGlvbiBERShzdHIpIHtcbiAgICByZXR1cm4gL14oREUpP1xcZHs5fSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgRUw6IGZ1bmN0aW9uIEVMKHN0cikge1xuICAgIHJldHVybiAvXihFTCk/XFxkezl9JC8udGVzdChzdHIpO1xuICB9LFxuICBIVTogZnVuY3Rpb24gSFUoc3RyKSB7XG4gICAgcmV0dXJuIC9eKEhVKT9cXGR7OH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIElFOiBmdW5jdGlvbiBJRShzdHIpIHtcbiAgICByZXR1cm4gL14oSUUpP1xcZHs3fVxcd3sxfShXKT8kLy50ZXN0KHN0cik7XG4gIH0sXG4gIElUOiBmdW5jdGlvbiBJVChzdHIpIHtcbiAgICByZXR1cm4gL14oSVQpP1xcZHsxMX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIExWOiBmdW5jdGlvbiBMVihzdHIpIHtcbiAgICByZXR1cm4gL14oTFYpP1xcZHsxMX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIExUOiBmdW5jdGlvbiBMVChzdHIpIHtcbiAgICByZXR1cm4gL14oTFQpP1xcZHs5LDEyfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgTFU6IGZ1bmN0aW9uIExVKHN0cikge1xuICAgIHJldHVybiAvXihMVSk/XFxkezh9JC8udGVzdChzdHIpO1xuICB9LFxuICBNVDogZnVuY3Rpb24gTVQoc3RyKSB7XG4gICAgcmV0dXJuIC9eKE1UKT9cXGR7OH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIE5MOiBmdW5jdGlvbiBOTChzdHIpIHtcbiAgICByZXR1cm4gL14oTkwpP1xcZHs5fUJcXGR7Mn0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIFBMOiBmdW5jdGlvbiBQTChzdHIpIHtcbiAgICByZXR1cm4gL14oUEwpPyhcXGR7MTB9fChcXGR7M30tXFxkezN9LVxcZHsyfS1cXGR7Mn0pfChcXGR7M30tXFxkezJ9LVxcZHsyfS1cXGR7M30pKSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgUFQ6IFBULFxuICBSTzogZnVuY3Rpb24gUk8oc3RyKSB7XG4gICAgcmV0dXJuIC9eKFJPKT9cXGR7MiwxMH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIFNLOiBmdW5jdGlvbiBTSyhzdHIpIHtcbiAgICByZXR1cm4gL14oU0spP1xcZHsxMH0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIFNJOiBmdW5jdGlvbiBTSShzdHIpIHtcbiAgICByZXR1cm4gL14oU0kpP1xcZHs4fSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgRVM6IGZ1bmN0aW9uIEVTKHN0cikge1xuICAgIHJldHVybiAvXihFUyk/XFx3XFxkezd9W0EtWl0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIFNFOiBmdW5jdGlvbiBTRShzdHIpIHtcbiAgICByZXR1cm4gL14oU0UpP1xcZHsxMn0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIC8qKlxyXG4gICAqIFZBVCBudW1iZXJzIG9mIG5vbi1FVSBjb3VudHJpZXNcclxuICAgKi9cbiAgQUw6IGZ1bmN0aW9uIEFMKHN0cikge1xuICAgIHJldHVybiAvXihBTCk/XFx3ezl9W0EtWl0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIE1LOiBmdW5jdGlvbiBNSyhzdHIpIHtcbiAgICByZXR1cm4gL14oTUspP1xcZHsxM30kLy50ZXN0KHN0cik7XG4gIH0sXG4gIEFVOiBBVSxcbiAgQlk6IGZ1bmN0aW9uIEJZKHN0cikge1xuICAgIHJldHVybiAvXijQo9Cd0J8gKT9cXGR7OX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIENBOiBmdW5jdGlvbiBDQShzdHIpIHtcbiAgICByZXR1cm4gL14oQ0EpP1xcZHs5fSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgSVM6IGZ1bmN0aW9uIElTKHN0cikge1xuICAgIHJldHVybiAvXihJUyk/XFxkezUsNn0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIElOOiBmdW5jdGlvbiBJTihzdHIpIHtcbiAgICByZXR1cm4gL14oSU4pP1xcZHsxNX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIElEOiBmdW5jdGlvbiBJRChzdHIpIHtcbiAgICByZXR1cm4gL14oSUQpPyhcXGR7MTV9fChcXGR7Mn0uXFxkezN9LlxcZHszfS5cXGR7MX0tXFxkezN9LlxcZHszfSkpJC8udGVzdChzdHIpO1xuICB9LFxuICBJTDogZnVuY3Rpb24gSUwoc3RyKSB7XG4gICAgcmV0dXJuIC9eKElMKT9cXGR7OX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIEtaOiBmdW5jdGlvbiBLWihzdHIpIHtcbiAgICByZXR1cm4gL14oS1opP1xcZHsxMn0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIE5aOiBmdW5jdGlvbiBOWihzdHIpIHtcbiAgICByZXR1cm4gL14oTlopP1xcZHs5fSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgTkc6IGZ1bmN0aW9uIE5HKHN0cikge1xuICAgIHJldHVybiAvXihORyk/KFxcZHsxMn18KFxcZHs4fS1cXGR7NH0pKSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgTk86IGZ1bmN0aW9uIE5PKHN0cikge1xuICAgIHJldHVybiAvXihOTyk/XFxkezl9TVZBJC8udGVzdChzdHIpO1xuICB9LFxuICBQSDogZnVuY3Rpb24gUEgoc3RyKSB7XG4gICAgcmV0dXJuIC9eKFBIKT8oXFxkezEyfXxcXGR7M30gXFxkezN9IFxcZHszfSBcXGR7M30pJC8udGVzdChzdHIpO1xuICB9LFxuICBSVTogZnVuY3Rpb24gUlUoc3RyKSB7XG4gICAgcmV0dXJuIC9eKFJVKT8oXFxkezEwfXxcXGR7MTJ9KSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgU006IGZ1bmN0aW9uIFNNKHN0cikge1xuICAgIHJldHVybiAvXihTTSk/XFxkezV9JC8udGVzdChzdHIpO1xuICB9LFxuICBTQTogZnVuY3Rpb24gU0Eoc3RyKSB7XG4gICAgcmV0dXJuIC9eKFNBKT9cXGR7MTV9JC8udGVzdChzdHIpO1xuICB9LFxuICBSUzogZnVuY3Rpb24gUlMoc3RyKSB7XG4gICAgcmV0dXJuIC9eKFJTKT9cXGR7OX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIENIOiBDSCxcbiAgVFI6IGZ1bmN0aW9uIFRSKHN0cikge1xuICAgIHJldHVybiAvXihUUik/XFxkezEwfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgVUE6IGZ1bmN0aW9uIFVBKHN0cikge1xuICAgIHJldHVybiAvXihVQSk/XFxkezEyfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgR0I6IGZ1bmN0aW9uIEdCKHN0cikge1xuICAgIHJldHVybiAvXkdCKChcXGR7M30gXFxkezR9IChbMC04XVswLTldfDlbMC02XSkpfChcXGR7OX0gXFxkezN9KXwoKChHRFswLTRdKXwoSEFbNS05XSkpWzAtOV17Mn0pKSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgVVo6IGZ1bmN0aW9uIFVaKHN0cikge1xuICAgIHJldHVybiAvXihVWik/XFxkezl9JC8udGVzdChzdHIpO1xuICB9LFxuICAvKipcclxuICAgKiBWQVQgbnVtYmVycyBvZiBMYXRpbiBBbWVyaWNhbiBjb3VudHJpZXNcclxuICAgKi9cbiAgQVI6IGZ1bmN0aW9uIEFSKHN0cikge1xuICAgIHJldHVybiAvXihBUik/XFxkezExfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgQk86IGZ1bmN0aW9uIEJPKHN0cikge1xuICAgIHJldHVybiAvXihCTyk/XFxkezd9JC8udGVzdChzdHIpO1xuICB9LFxuICBCUjogZnVuY3Rpb24gQlIoc3RyKSB7XG4gICAgcmV0dXJuIC9eKEJSKT8oKFxcZHsyfS5cXGR7M30uXFxkezN9XFwvXFxkezR9LVxcZHsyfSl8KFxcZHszfS5cXGR7M30uXFxkezN9LVxcZHsyfSkpJC8udGVzdChzdHIpO1xuICB9LFxuICBDTDogZnVuY3Rpb24gQ0woc3RyKSB7XG4gICAgcmV0dXJuIC9eKENMKT9cXGR7OH0tXFxkezF9JC8udGVzdChzdHIpO1xuICB9LFxuICBDTzogZnVuY3Rpb24gQ08oc3RyKSB7XG4gICAgcmV0dXJuIC9eKENPKT9cXGR7MTB9JC8udGVzdChzdHIpO1xuICB9LFxuICBDUjogZnVuY3Rpb24gQ1Ioc3RyKSB7XG4gICAgcmV0dXJuIC9eKENSKT9cXGR7OSwxMn0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIEVDOiBmdW5jdGlvbiBFQyhzdHIpIHtcbiAgICByZXR1cm4gL14oRUMpP1xcZHsxM30kLy50ZXN0KHN0cik7XG4gIH0sXG4gIFNWOiBmdW5jdGlvbiBTVihzdHIpIHtcbiAgICByZXR1cm4gL14oU1YpP1xcZHs0fS1cXGR7Nn0tXFxkezN9LVxcZHsxfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgR1Q6IGZ1bmN0aW9uIEdUKHN0cikge1xuICAgIHJldHVybiAvXihHVCk/XFxkezd9LVxcZHsxfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgSE46IGZ1bmN0aW9uIEhOKHN0cikge1xuICAgIHJldHVybiAvXihITik/JC8udGVzdChzdHIpO1xuICB9LFxuICBNWDogZnVuY3Rpb24gTVgoc3RyKSB7XG4gICAgcmV0dXJuIC9eKE1YKT9cXHd7Myw0fVxcZHs2fVxcd3szfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgTkk6IGZ1bmN0aW9uIE5JKHN0cikge1xuICAgIHJldHVybiAvXihOSSk/XFxkezN9LVxcZHs2fS1cXGR7NH1cXHd7MX0kLy50ZXN0KHN0cik7XG4gIH0sXG4gIFBBOiBmdW5jdGlvbiBQQShzdHIpIHtcbiAgICByZXR1cm4gL14oUEEpPyQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgUFk6IGZ1bmN0aW9uIFBZKHN0cikge1xuICAgIHJldHVybiAvXihQWSk/XFxkezYsOH0tXFxkezF9JC8udGVzdChzdHIpO1xuICB9LFxuICBQRTogZnVuY3Rpb24gUEUoc3RyKSB7XG4gICAgcmV0dXJuIC9eKFBFKT9cXGR7MTF9JC8udGVzdChzdHIpO1xuICB9LFxuICBETzogZnVuY3Rpb24gRE8oc3RyKSB7XG4gICAgcmV0dXJuIC9eKERPKT8oXFxkezExfXwoXFxkezN9LVxcZHs3fS1cXGR7MX0pfFsxLDQsNV17MX1cXGR7OH18KFsxLDQsNV17MX0pLVxcZHsyfS1cXGR7NX0tXFxkezF9KSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgVVk6IGZ1bmN0aW9uIFVZKHN0cikge1xuICAgIHJldHVybiAvXihVWSk/XFxkezEyfSQvLnRlc3Qoc3RyKTtcbiAgfSxcbiAgVkU6IGZ1bmN0aW9uIFZFKHN0cikge1xuICAgIHJldHVybiAvXihWRSk/W0osRyxWLEVdezF9LShcXGR7OX18KFxcZHs4fS1cXGR7MX0pKSQvLnRlc3Qoc3RyKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGlzVkFUKHN0ciwgY291bnRyeUNvZGUpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoY291bnRyeUNvZGUpO1xuICBpZiAoY291bnRyeUNvZGUgaW4gdmF0TWF0Y2hlcnMpIHtcbiAgICByZXR1cm4gdmF0TWF0Y2hlcnNbY291bnRyeUNvZGVdKHN0cik7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb3VudHJ5IGNvZGU6ICdcIi5jb25jYXQoY291bnRyeUNvZGUsIFwiJ1wiKSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ZhcmlhYmxlV2lkdGg7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xudmFyIF9pc0Z1bGxXaWR0aCA9IHJlcXVpcmUoXCIuL2lzRnVsbFdpZHRoXCIpO1xudmFyIF9pc0hhbGZXaWR0aCA9IHJlcXVpcmUoXCIuL2lzSGFsZldpZHRoXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIGlzVmFyaWFibGVXaWR0aChzdHIpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgcmV0dXJuIF9pc0Z1bGxXaWR0aC5mdWxsV2lkdGgudGVzdChzdHIpICYmIF9pc0hhbGZXaWR0aC5oYWxmV2lkdGgudGVzdChzdHIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNXaGl0ZWxpc3RlZDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gaXNXaGl0ZWxpc3RlZChzdHIsIGNoYXJzKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIGZvciAodmFyIGkgPSBzdHIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoY2hhcnMuaW5kZXhPZihzdHJbaV0pID09PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGx0cmltO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBsdHJpbShzdHIsIGNoYXJzKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvR3VpZGUvUmVndWxhcl9FeHByZXNzaW9ucyNFc2NhcGluZ1xuICB2YXIgcGF0dGVybiA9IGNoYXJzID8gbmV3IFJlZ0V4cChcIl5bXCIuY29uY2F0KGNoYXJzLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyksIFwiXStcIiksICdnJykgOiAvXlxccysvZztcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHBhdHRlcm4sICcnKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1hdGNoZXM7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIG1hdGNoZXMoc3RyLCBwYXR0ZXJuLCBtb2RpZmllcnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXR0ZXJuKSAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCBtb2RpZmllcnMpO1xuICB9XG4gIHJldHVybiAhIXN0ci5tYXRjaChwYXR0ZXJuKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5vcm1hbGl6ZUVtYWlsO1xudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9tZXJnZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxudmFyIGRlZmF1bHRfbm9ybWFsaXplX2VtYWlsX29wdGlvbnMgPSB7XG4gIC8vIFRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcHBseSB0byBhbGwgZW1haWwgYWRkcmVzc2VzXG4gIC8vIExvd2VyY2FzZXMgdGhlIGxvY2FsIHBhcnQgb2YgdGhlIGVtYWlsIGFkZHJlc3MuXG4gIC8vIFBsZWFzZSBub3RlIHRoaXMgbWF5IHZpb2xhdGUgUkZDIDUzMjEgYXMgcGVyIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzk4MDgzMzIvMTkyMDI0KS5cbiAgLy8gVGhlIGRvbWFpbiBpcyBhbHdheXMgbG93ZXJjYXNlZCwgYXMgcGVyIFJGQyAxMDM1XG4gIGFsbF9sb3dlcmNhc2U6IHRydWUsXG4gIC8vIFRoZSBmb2xsb3dpbmcgY29udmVyc2lvbnMgYXJlIHNwZWNpZmljIHRvIEdNYWlsXG4gIC8vIExvd2VyY2FzZXMgdGhlIGxvY2FsIHBhcnQgb2YgdGhlIEdNYWlsIGFkZHJlc3MgKGtub3duIHRvIGJlIGNhc2UtaW5zZW5zaXRpdmUpXG4gIGdtYWlsX2xvd2VyY2FzZTogdHJ1ZSxcbiAgLy8gUmVtb3ZlcyBkb3RzIGZyb20gdGhlIGxvY2FsIHBhcnQgb2YgdGhlIGVtYWlsIGFkZHJlc3MsIGFzIHRoYXQncyBpZ25vcmVkIGJ5IEdNYWlsXG4gIGdtYWlsX3JlbW92ZV9kb3RzOiB0cnVlLFxuICAvLyBSZW1vdmVzIHRoZSBzdWJhZGRyZXNzIChlLmcuIFwiK2Zvb1wiKSBmcm9tIHRoZSBlbWFpbCBhZGRyZXNzXG4gIGdtYWlsX3JlbW92ZV9zdWJhZGRyZXNzOiB0cnVlLFxuICAvLyBDb252ZXJzdHMgdGhlIGdvb2dsZW1haWwuY29tIGRvbWFpbiB0byBnbWFpbC5jb21cbiAgZ21haWxfY29udmVydF9nb29nbGVtYWlsZG90Y29tOiB0cnVlLFxuICAvLyBUaGUgZm9sbG93aW5nIGNvbnZlcnNpb25zIGFyZSBzcGVjaWZpYyB0byBPdXRsb29rLmNvbSAvIFdpbmRvd3MgTGl2ZSAvIEhvdG1haWxcbiAgLy8gTG93ZXJjYXNlcyB0aGUgbG9jYWwgcGFydCBvZiB0aGUgT3V0bG9vay5jb20gYWRkcmVzcyAoa25vd24gdG8gYmUgY2FzZS1pbnNlbnNpdGl2ZSlcbiAgb3V0bG9va2RvdGNvbV9sb3dlcmNhc2U6IHRydWUsXG4gIC8vIFJlbW92ZXMgdGhlIHN1YmFkZHJlc3MgKGUuZy4gXCIrZm9vXCIpIGZyb20gdGhlIGVtYWlsIGFkZHJlc3NcbiAgb3V0bG9va2RvdGNvbV9yZW1vdmVfc3ViYWRkcmVzczogdHJ1ZSxcbiAgLy8gVGhlIGZvbGxvd2luZyBjb252ZXJzaW9ucyBhcmUgc3BlY2lmaWMgdG8gWWFob29cbiAgLy8gTG93ZXJjYXNlcyB0aGUgbG9jYWwgcGFydCBvZiB0aGUgWWFob28gYWRkcmVzcyAoa25vd24gdG8gYmUgY2FzZS1pbnNlbnNpdGl2ZSlcbiAgeWFob29fbG93ZXJjYXNlOiB0cnVlLFxuICAvLyBSZW1vdmVzIHRoZSBzdWJhZGRyZXNzIChlLmcuIFwiLWZvb1wiKSBmcm9tIHRoZSBlbWFpbCBhZGRyZXNzXG4gIHlhaG9vX3JlbW92ZV9zdWJhZGRyZXNzOiB0cnVlLFxuICAvLyBUaGUgZm9sbG93aW5nIGNvbnZlcnNpb25zIGFyZSBzcGVjaWZpYyB0byBZYW5kZXhcbiAgLy8gTG93ZXJjYXNlcyB0aGUgbG9jYWwgcGFydCBvZiB0aGUgWWFuZGV4IGFkZHJlc3MgKGtub3duIHRvIGJlIGNhc2UtaW5zZW5zaXRpdmUpXG4gIHlhbmRleF9sb3dlcmNhc2U6IHRydWUsXG4gIC8vIFRoZSBmb2xsb3dpbmcgY29udmVyc2lvbnMgYXJlIHNwZWNpZmljIHRvIGlDbG91ZFxuICAvLyBMb3dlcmNhc2VzIHRoZSBsb2NhbCBwYXJ0IG9mIHRoZSBpQ2xvdWQgYWRkcmVzcyAoa25vd24gdG8gYmUgY2FzZS1pbnNlbnNpdGl2ZSlcbiAgaWNsb3VkX2xvd2VyY2FzZTogdHJ1ZSxcbiAgLy8gUmVtb3ZlcyB0aGUgc3ViYWRkcmVzcyAoZS5nLiBcIitmb29cIikgZnJvbSB0aGUgZW1haWwgYWRkcmVzc1xuICBpY2xvdWRfcmVtb3ZlX3N1YmFkZHJlc3M6IHRydWVcbn07XG5cbi8vIExpc3Qgb2YgZG9tYWlucyB1c2VkIGJ5IGlDbG91ZFxudmFyIGljbG91ZF9kb21haW5zID0gWydpY2xvdWQuY29tJywgJ21lLmNvbSddO1xuXG4vLyBMaXN0IG9mIGRvbWFpbnMgdXNlZCBieSBPdXRsb29rLmNvbSBhbmQgaXRzIHByZWRlY2Vzc29yc1xuLy8gVGhpcyBsaXN0IGlzIGxpa2VseSBpbmNvbXBsZXRlLlxuLy8gUGFydGlhbCByZWZlcmVuY2U6XG4vLyBodHRwczovL2Jsb2dzLm9mZmljZS5jb20vMjAxMy8wNC8xNy9vdXRsb29rLWNvbS1nZXRzLXR3by1zdGVwLXZlcmlmaWNhdGlvbi1zaWduLWluLWJ5LWFsaWFzLWFuZC1uZXctaW50ZXJuYXRpb25hbC1kb21haW5zL1xudmFyIG91dGxvb2tkb3Rjb21fZG9tYWlucyA9IFsnaG90bWFpbC5hdCcsICdob3RtYWlsLmJlJywgJ2hvdG1haWwuY2EnLCAnaG90bWFpbC5jbCcsICdob3RtYWlsLmNvLmlsJywgJ2hvdG1haWwuY28ubnonLCAnaG90bWFpbC5jby50aCcsICdob3RtYWlsLmNvLnVrJywgJ2hvdG1haWwuY29tJywgJ2hvdG1haWwuY29tLmFyJywgJ2hvdG1haWwuY29tLmF1JywgJ2hvdG1haWwuY29tLmJyJywgJ2hvdG1haWwuY29tLmdyJywgJ2hvdG1haWwuY29tLm14JywgJ2hvdG1haWwuY29tLnBlJywgJ2hvdG1haWwuY29tLnRyJywgJ2hvdG1haWwuY29tLnZuJywgJ2hvdG1haWwuY3onLCAnaG90bWFpbC5kZScsICdob3RtYWlsLmRrJywgJ2hvdG1haWwuZXMnLCAnaG90bWFpbC5mcicsICdob3RtYWlsLmh1JywgJ2hvdG1haWwuaWQnLCAnaG90bWFpbC5pZScsICdob3RtYWlsLmluJywgJ2hvdG1haWwuaXQnLCAnaG90bWFpbC5qcCcsICdob3RtYWlsLmtyJywgJ2hvdG1haWwubHYnLCAnaG90bWFpbC5teScsICdob3RtYWlsLnBoJywgJ2hvdG1haWwucHQnLCAnaG90bWFpbC5zYScsICdob3RtYWlsLnNnJywgJ2hvdG1haWwuc2snLCAnbGl2ZS5iZScsICdsaXZlLmNvLnVrJywgJ2xpdmUuY29tJywgJ2xpdmUuY29tLmFyJywgJ2xpdmUuY29tLm14JywgJ2xpdmUuZGUnLCAnbGl2ZS5lcycsICdsaXZlLmV1JywgJ2xpdmUuZnInLCAnbGl2ZS5pdCcsICdsaXZlLm5sJywgJ21zbi5jb20nLCAnb3V0bG9vay5hdCcsICdvdXRsb29rLmJlJywgJ291dGxvb2suY2wnLCAnb3V0bG9vay5jby5pbCcsICdvdXRsb29rLmNvLm56JywgJ291dGxvb2suY28udGgnLCAnb3V0bG9vay5jb20nLCAnb3V0bG9vay5jb20uYXInLCAnb3V0bG9vay5jb20uYXUnLCAnb3V0bG9vay5jb20uYnInLCAnb3V0bG9vay5jb20uZ3InLCAnb3V0bG9vay5jb20ucGUnLCAnb3V0bG9vay5jb20udHInLCAnb3V0bG9vay5jb20udm4nLCAnb3V0bG9vay5jeicsICdvdXRsb29rLmRlJywgJ291dGxvb2suZGsnLCAnb3V0bG9vay5lcycsICdvdXRsb29rLmZyJywgJ291dGxvb2suaHUnLCAnb3V0bG9vay5pZCcsICdvdXRsb29rLmllJywgJ291dGxvb2suaW4nLCAnb3V0bG9vay5pdCcsICdvdXRsb29rLmpwJywgJ291dGxvb2sua3InLCAnb3V0bG9vay5sdicsICdvdXRsb29rLm15JywgJ291dGxvb2sucGgnLCAnb3V0bG9vay5wdCcsICdvdXRsb29rLnNhJywgJ291dGxvb2suc2cnLCAnb3V0bG9vay5zaycsICdwYXNzcG9ydC5jb20nXTtcblxuLy8gTGlzdCBvZiBkb21haW5zIHVzZWQgYnkgWWFob28gTWFpbFxuLy8gVGhpcyBsaXN0IGlzIGxpa2VseSBpbmNvbXBsZXRlXG52YXIgeWFob29fZG9tYWlucyA9IFsncm9ja2V0bWFpbC5jb20nLCAneWFob28uY2EnLCAneWFob28uY28udWsnLCAneWFob28uY29tJywgJ3lhaG9vLmRlJywgJ3lhaG9vLmZyJywgJ3lhaG9vLmluJywgJ3lhaG9vLml0JywgJ3ltYWlsLmNvbSddO1xuXG4vLyBMaXN0IG9mIGRvbWFpbnMgdXNlZCBieSB5YW5kZXgucnVcbnZhciB5YW5kZXhfZG9tYWlucyA9IFsneWFuZGV4LnJ1JywgJ3lhbmRleC51YScsICd5YW5kZXgua3onLCAneWFuZGV4LmNvbScsICd5YW5kZXguYnknLCAneWEucnUnXTtcblxuLy8gcmVwbGFjZSBzaW5nbGUgZG90cywgYnV0IG5vdCBtdWx0aXBsZSBjb25zZWN1dGl2ZSBkb3RzXG5mdW5jdGlvbiBkb3RzUmVwbGFjZXIobWF0Y2gpIHtcbiAgaWYgKG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gbWF0Y2g7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplRW1haWwoZW1haWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9ICgwLCBfbWVyZ2UuZGVmYXVsdCkob3B0aW9ucywgZGVmYXVsdF9ub3JtYWxpemVfZW1haWxfb3B0aW9ucyk7XG4gIHZhciByYXdfcGFydHMgPSBlbWFpbC5zcGxpdCgnQCcpO1xuICB2YXIgZG9tYWluID0gcmF3X3BhcnRzLnBvcCgpO1xuICB2YXIgdXNlciA9IHJhd19wYXJ0cy5qb2luKCdAJyk7XG4gIHZhciBwYXJ0cyA9IFt1c2VyLCBkb21haW5dO1xuXG4gIC8vIFRoZSBkb21haW4gaXMgYWx3YXlzIGxvd2VyY2FzZWQsIGFzIGl0J3MgY2FzZS1pbnNlbnNpdGl2ZSBwZXIgUkZDIDEwMzVcbiAgcGFydHNbMV0gPSBwYXJ0c1sxXS50b0xvd2VyQ2FzZSgpO1xuICBpZiAocGFydHNbMV0gPT09ICdnbWFpbC5jb20nIHx8IHBhcnRzWzFdID09PSAnZ29vZ2xlbWFpbC5jb20nKSB7XG4gICAgLy8gQWRkcmVzcyBpcyBHTWFpbFxuICAgIGlmIChvcHRpb25zLmdtYWlsX3JlbW92ZV9zdWJhZGRyZXNzKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnNwbGl0KCcrJylbMF07XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmdtYWlsX3JlbW92ZV9kb3RzKSB7XG4gICAgICAvLyB0aGlzIGRvZXMgbm90IHJlcGxhY2UgY29uc2VjdXRpdmUgZG90cyBsaWtlIGV4YW1wbGUuLmVtYWlsQGdtYWlsLmNvbVxuICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS5yZXBsYWNlKC9cXC4rL2csIGRvdHNSZXBsYWNlcik7XG4gICAgfVxuICAgIGlmICghcGFydHNbMF0ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmFsbF9sb3dlcmNhc2UgfHwgb3B0aW9ucy5nbWFpbF9sb3dlcmNhc2UpIHtcbiAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0udG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcGFydHNbMV0gPSBvcHRpb25zLmdtYWlsX2NvbnZlcnRfZ29vZ2xlbWFpbGRvdGNvbSA/ICdnbWFpbC5jb20nIDogcGFydHNbMV07XG4gIH0gZWxzZSBpZiAoaWNsb3VkX2RvbWFpbnMuaW5kZXhPZihwYXJ0c1sxXSkgPj0gMCkge1xuICAgIC8vIEFkZHJlc3MgaXMgaUNsb3VkXG4gICAgaWYgKG9wdGlvbnMuaWNsb3VkX3JlbW92ZV9zdWJhZGRyZXNzKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnNwbGl0KCcrJylbMF07XG4gICAgfVxuICAgIGlmICghcGFydHNbMF0ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmFsbF9sb3dlcmNhc2UgfHwgb3B0aW9ucy5pY2xvdWRfbG93ZXJjYXNlKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG91dGxvb2tkb3Rjb21fZG9tYWlucy5pbmRleE9mKHBhcnRzWzFdKSA+PSAwKSB7XG4gICAgLy8gQWRkcmVzcyBpcyBPdXRsb29rLmNvbVxuICAgIGlmIChvcHRpb25zLm91dGxvb2tkb3Rjb21fcmVtb3ZlX3N1YmFkZHJlc3MpIHtcbiAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0uc3BsaXQoJysnKVswXTtcbiAgICB9XG4gICAgaWYgKCFwYXJ0c1swXS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYWxsX2xvd2VyY2FzZSB8fCBvcHRpb25zLm91dGxvb2tkb3Rjb21fbG93ZXJjYXNlKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHlhaG9vX2RvbWFpbnMuaW5kZXhPZihwYXJ0c1sxXSkgPj0gMCkge1xuICAgIC8vIEFkZHJlc3MgaXMgWWFob29cbiAgICBpZiAob3B0aW9ucy55YWhvb19yZW1vdmVfc3ViYWRkcmVzcykge1xuICAgICAgdmFyIGNvbXBvbmVudHMgPSBwYXJ0c1swXS5zcGxpdCgnLScpO1xuICAgICAgcGFydHNbMF0gPSBjb21wb25lbnRzLmxlbmd0aCA+IDEgPyBjb21wb25lbnRzLnNsaWNlKDAsIC0xKS5qb2luKCctJykgOiBjb21wb25lbnRzWzBdO1xuICAgIH1cbiAgICBpZiAoIXBhcnRzWzBdLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlIHx8IG9wdGlvbnMueWFob29fbG93ZXJjYXNlKSB7XG4gICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHlhbmRleF9kb21haW5zLmluZGV4T2YocGFydHNbMV0pID49IDApIHtcbiAgICBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlIHx8IG9wdGlvbnMueWFuZGV4X2xvd2VyY2FzZSkge1xuICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBwYXJ0c1sxXSA9ICd5YW5kZXgucnUnOyAvLyBhbGwgeWFuZGV4IGRvbWFpbnMgYXJlIGVxdWFsLCAxc3QgcHJlZmVycmVkXG4gIH0gZWxzZSBpZiAob3B0aW9ucy5hbGxfbG93ZXJjYXNlKSB7XG4gICAgLy8gQW55IG90aGVyIGFkZHJlc3NcbiAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJ0AnKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJ0cmltO1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBydHJpbShzdHIsIGNoYXJzKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIGlmIChjaGFycykge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvR3VpZGUvUmVndWxhcl9FeHByZXNzaW9ucyNFc2NhcGluZ1xuICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcIltcIi5jb25jYXQoY2hhcnMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKSwgXCJdKyRcIiksICdnJyk7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHBhdHRlcm4sICcnKTtcbiAgfVxuICAvLyBVc2UgYSBmYXN0ZXIgYW5kIG1vcmUgc2FmZSB0aGFuIHJlZ2V4IHRyaW0gbWV0aG9kIGh0dHBzOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvZmFzdGVyLXRyaW0tamF2YXNjcmlwdFxuICB2YXIgc3RySW5kZXggPSBzdHIubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKC9cXHMvLnRlc3Qoc3RyLmNoYXJBdChzdHJJbmRleCkpKSB7XG4gICAgc3RySW5kZXggLT0gMTtcbiAgfVxuICByZXR1cm4gc3RyLnNsaWNlKDAsIHN0ckluZGV4ICsgMSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdHJpcExvdztcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG52YXIgX2JsYWNrbGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYmxhY2tsaXN0XCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBzdHJpcExvdyhzdHIsIGtlZXBfbmV3X2xpbmVzKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHZhciBjaGFycyA9IGtlZXBfbmV3X2xpbmVzID8gJ1xcXFx4MDAtXFxcXHgwOVxcXFx4MEJcXFxceDBDXFxcXHgwRS1cXFxceDFGXFxcXHg3RicgOiAnXFxcXHgwMC1cXFxceDFGXFxcXHg3Ric7XG4gIHJldHVybiAoMCwgX2JsYWNrbGlzdC5kZWZhdWx0KShzdHIsIGNoYXJzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvQm9vbGVhbjtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gdG9Cb29sZWFuKHN0ciwgc3RyaWN0KSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIGlmIChzdHJpY3QpIHtcbiAgICByZXR1cm4gc3RyID09PSAnMScgfHwgL150cnVlJC9pLnRlc3Qoc3RyKTtcbiAgfVxuICByZXR1cm4gc3RyICE9PSAnMCcgJiYgIS9eZmFsc2UkL2kudGVzdChzdHIpICYmIHN0ciAhPT0gJyc7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b0RhdGU7XG52YXIgX2Fzc2VydFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9hc3NlcnRTdHJpbmdcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIHRvRGF0ZShkYXRlKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKGRhdGUpO1xuICBkYXRlID0gRGF0ZS5wYXJzZShkYXRlKTtcbiAgcmV0dXJuICFpc05hTihkYXRlKSA/IG5ldyBEYXRlKGRhdGUpIDogbnVsbDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvRmxvYXQ7XG52YXIgX2lzRmxvYXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzRmxvYXRcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIHRvRmxvYXQoc3RyKSB7XG4gIGlmICghKDAsIF9pc0Zsb2F0LmRlZmF1bHQpKHN0cikpIHJldHVybiBOYU47XG4gIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b0ludDtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gdG9JbnQoc3RyLCByYWRpeCkge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gcGFyc2VJbnQoc3RyLCByYWRpeCB8fCAxMCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmltO1xudmFyIF9ydHJpbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcnRyaW1cIikpO1xudmFyIF9sdHJpbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbHRyaW1cIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIHRyaW0oc3RyLCBjaGFycykge1xuICByZXR1cm4gKDAsIF9ydHJpbS5kZWZhdWx0KSgoMCwgX2x0cmltLmRlZmF1bHQpKHN0ciwgY2hhcnMpLCBjaGFycyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmVzY2FwZTtcbnZhciBfYXNzZXJ0U3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2Fzc2VydFN0cmluZ1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gdW5lc2NhcGUoc3RyKSB7XG4gICgwLCBfYXNzZXJ0U3RyaW5nLmRlZmF1bHQpKHN0cik7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvJnF1b3Q7L2csICdcIicpLnJlcGxhY2UoLyYjeDI3Oy9nLCBcIidcIikucmVwbGFjZSgvJmx0Oy9nLCAnPCcpLnJlcGxhY2UoLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mI3gyRjsvZywgJy8nKS5yZXBsYWNlKC8mI3g1QzsvZywgJ1xcXFwnKS5yZXBsYWNlKC8mIzk2Oy9nLCAnYCcpLnJlcGxhY2UoLyZhbXA7L2csICcmJyk7XG4gIC8vICZhbXA7IHJlcGxhY2VtZW50IGhhcyB0byBiZSB0aGUgbGFzdCBvbmUgdG8gcHJldmVudFxuICAvLyBidWdzIHdpdGggaW50ZXJtZWRpYXRlIHN0cmluZ3MgY29udGFpbmluZyBlc2NhcGUgc2VxdWVuY2VzXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3ZhbGlkYXRvcmpzL3ZhbGlkYXRvci5qcy9pc3N1ZXMvMTgyN1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc283MDY0Q2hlY2sgPSBpc283MDY0Q2hlY2s7XG5leHBvcnRzLmx1aG5DaGVjayA9IGx1aG5DaGVjaztcbmV4cG9ydHMucmV2ZXJzZU11bHRpcGx5QW5kU3VtID0gcmV2ZXJzZU11bHRpcGx5QW5kU3VtO1xuZXhwb3J0cy52ZXJob2VmZkNoZWNrID0gdmVyaG9lZmZDaGVjaztcbi8qKlxuICogQWxnb3JpdGhtaWMgdmFsaWRhdGlvbiBmdW5jdGlvbnNcbiAqIE1heSBiZSB1c2VkIGFzIGlzIG9yIGltcGxlbWVudGVkIGluIHRoZSB3b3JrZmxvdyBvZiBvdGhlciB2YWxpZGF0b3JzLlxuICovXG5cbi8qXG4gKiBJU08gNzA2NCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiBDYWxsZWQgd2l0aCBhIHN0cmluZyBvZiBudW1iZXJzIChpbmNsLiBjaGVjayBkaWdpdClcbiAqIHRvIHZhbGlkYXRlIGFjY29yZGluZyB0byBJU08gNzA2NCAoTU9EIDExLCAxMCkuXG4gKi9cbmZ1bmN0aW9uIGlzbzcwNjRDaGVjayhzdHIpIHtcbiAgdmFyIGNoZWNrdmFsdWUgPSAxMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgY2hlY2t2YWx1ZSA9IChwYXJzZUludChzdHJbaV0sIDEwKSArIGNoZWNrdmFsdWUpICUgMTAgPT09IDAgPyAxMCAqIDIgJSAxMSA6IChwYXJzZUludChzdHJbaV0sIDEwKSArIGNoZWNrdmFsdWUpICUgMTAgKiAyICUgMTE7XG4gIH1cbiAgY2hlY2t2YWx1ZSA9IGNoZWNrdmFsdWUgPT09IDEgPyAwIDogMTEgLSBjaGVja3ZhbHVlO1xuICByZXR1cm4gY2hlY2t2YWx1ZSA9PT0gcGFyc2VJbnQoc3RyWzEwXSwgMTApO1xufVxuXG4vKlxuICogTHVobiAobW9kIDEwKSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiBDYWxsZWQgd2l0aCBhIHN0cmluZyBvZiBudW1iZXJzIChpbmNsLiBjaGVjayBkaWdpdClcbiAqIHRvIHZhbGlkYXRlIGFjY29yZGluZyB0byB0aGUgTHVobiBhbGdvcml0aG0uXG4gKi9cbmZ1bmN0aW9uIGx1aG5DaGVjayhzdHIpIHtcbiAgdmFyIGNoZWNrc3VtID0gMDtcbiAgdmFyIHNlY29uZCA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gc3RyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHNlY29uZCkge1xuICAgICAgdmFyIHByb2R1Y3QgPSBwYXJzZUludChzdHJbaV0sIDEwKSAqIDI7XG4gICAgICBpZiAocHJvZHVjdCA+IDkpIHtcbiAgICAgICAgLy8gc3VtIGRpZ2l0cyBvZiBwcm9kdWN0IGFuZCBhZGQgdG8gY2hlY2tzdW1cbiAgICAgICAgY2hlY2tzdW0gKz0gcHJvZHVjdC50b1N0cmluZygpLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xuICAgICAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hlY2tzdW0gKz0gcHJvZHVjdDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tzdW0gKz0gcGFyc2VJbnQoc3RyW2ldLCAxMCk7XG4gICAgfVxuICAgIHNlY29uZCA9ICFzZWNvbmQ7XG4gIH1cbiAgcmV0dXJuIGNoZWNrc3VtICUgMTAgPT09IDA7XG59XG5cbi8qXG4gKiBSZXZlcnNlIFRJTiBtdWx0aXBsaWNhdGlvbiBhbmQgc3VtbWF0aW9uIGhlbHBlciBmdW5jdGlvblxuICogQ2FsbGVkIHdpdGggYW4gYXJyYXkgb2Ygc2luZ2xlLWRpZ2l0IGludGVnZXJzIGFuZCBhIGJhc2UgbXVsdGlwbGllclxuICogdG8gY2FsY3VsYXRlIHRoZSBzdW0gb2YgdGhlIGRpZ2l0cyBtdWx0aXBsaWVkIGluIHJldmVyc2UuXG4gKiBOb3JtYWxseSB1c2VkIGluIHZhcmlhdGlvbnMgb2YgTU9EIDExIGFsZ29yaXRobWljIGNoZWNrcy5cbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZU11bHRpcGx5QW5kU3VtKGRpZ2l0cywgYmFzZSkge1xuICB2YXIgdG90YWwgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZ2l0cy5sZW5ndGg7IGkrKykge1xuICAgIHRvdGFsICs9IGRpZ2l0c1tpXSAqIChiYXNlIC0gaSk7XG4gIH1cbiAgcmV0dXJuIHRvdGFsO1xufVxuXG4vKlxuICogVmVyaG9lZmYgdmFsaWRhdGlvbiBoZWxwZXIgZnVuY3Rpb25cbiAqIENhbGxlZCB3aXRoIGEgc3RyaW5nIG9mIG51bWJlcnNcbiAqIHRvIHZhbGlkYXRlIGFjY29yZGluZyB0byB0aGUgVmVyaG9lZmYgYWxnb3JpdGhtLlxuICovXG5mdW5jdGlvbiB2ZXJob2VmZkNoZWNrKHN0cikge1xuICB2YXIgZF90YWJsZSA9IFtbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0sIFsxLCAyLCAzLCA0LCAwLCA2LCA3LCA4LCA5LCA1XSwgWzIsIDMsIDQsIDAsIDEsIDcsIDgsIDksIDUsIDZdLCBbMywgNCwgMCwgMSwgMiwgOCwgOSwgNSwgNiwgN10sIFs0LCAwLCAxLCAyLCAzLCA5LCA1LCA2LCA3LCA4XSwgWzUsIDksIDgsIDcsIDYsIDAsIDQsIDMsIDIsIDFdLCBbNiwgNSwgOSwgOCwgNywgMSwgMCwgNCwgMywgMl0sIFs3LCA2LCA1LCA5LCA4LCAyLCAxLCAwLCA0LCAzXSwgWzgsIDcsIDYsIDUsIDksIDMsIDIsIDEsIDAsIDRdLCBbOSwgOCwgNywgNiwgNSwgNCwgMywgMiwgMSwgMF1dO1xuICB2YXIgcF90YWJsZSA9IFtbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0sIFsxLCA1LCA3LCA2LCAyLCA4LCAzLCAwLCA5LCA0XSwgWzUsIDgsIDAsIDMsIDcsIDksIDYsIDEsIDQsIDJdLCBbOCwgOSwgMSwgNiwgMCwgNCwgMywgNSwgMiwgN10sIFs5LCA0LCA1LCAzLCAxLCAyLCA2LCA4LCA3LCAwXSwgWzQsIDIsIDgsIDYsIDUsIDcsIDMsIDksIDAsIDFdLCBbMiwgNywgOSwgMywgOCwgMCwgNiwgNCwgMSwgNV0sIFs3LCAwLCA0LCA2LCA5LCAxLCAzLCAyLCA1LCA4XV07XG5cbiAgLy8gQ29weSAodG8gcHJldmVudCByZXBsYWNlbWVudCkgYW5kIHJldmVyc2VcbiAgdmFyIHN0cl9jb3B5ID0gc3RyLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XG4gIHZhciBjaGVja3N1bSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyX2NvcHkubGVuZ3RoOyBpKyspIHtcbiAgICBjaGVja3N1bSA9IGRfdGFibGVbY2hlY2tzdW1dW3BfdGFibGVbaSAlIDhdW3BhcnNlSW50KHN0cl9jb3B5W2ldLCAxMCldXTtcbiAgfVxuICByZXR1cm4gY2hlY2tzdW0gPT09IDA7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhc3NlcnRTdHJpbmc7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBhc3NlcnRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZztcbiAgaWYgKCFpc1N0cmluZykge1xuICAgIHZhciBpbnZhbGlkVHlwZSA9IF90eXBlb2YoaW5wdXQpO1xuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkgaW52YWxpZFR5cGUgPSAnbnVsbCc7ZWxzZSBpZiAoaW52YWxpZFR5cGUgPT09ICdvYmplY3QnKSBpbnZhbGlkVHlwZSA9IGlucHV0LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGEgc3RyaW5nIGJ1dCByZWNlaXZlZCBhIFwiLmNvbmNhdChpbnZhbGlkVHlwZSkpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyhhcnIsIHZhbCkge1xuICByZXR1cm4gYXJyLnNvbWUoZnVuY3Rpb24gKGFyclZhbCkge1xuICAgIHJldHVybiB2YWwgPT09IGFyclZhbDtcbiAgfSk7XG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gaW5jbHVkZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBtZXJnZTtcbmZ1bmN0aW9uIG1lcmdlKCkge1xuICB2YXIgb2JqID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGRlZmF1bHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIGZvciAodmFyIGtleSBpbiBkZWZhdWx0cykge1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvYmpba2V5XSA9IGRlZmF1bHRzW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBtdWx0aWxpbmVSZWdleHA7XG4vKipcbiAqIEJ1aWxkIFJlZ0V4cCBvYmplY3QgZnJvbSBhbiBhcnJheVxuICogb2YgbXVsdGlwbGUvbXVsdGktbGluZSByZWdleHAgcGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXJ0c1xuICogQHBhcmFtIHtzdHJpbmd9IGZsYWdzXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gUmVnRXhwIG9iamVjdFxuICovXG5mdW5jdGlvbiBtdWx0aWxpbmVSZWdleHAocGFydHMsIGZsYWdzKSB7XG4gIHZhciByZWdleHBBc1N0cmluZ0xpdGVyYWwgPSBwYXJ0cy5qb2luKCcnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXhwQXNTdHJpbmdMaXRlcmFsLCBmbGFncyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b1N0cmluZztcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIHRvU3RyaW5nKGlucHV0KSB7XG4gIGlmIChfdHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcgJiYgaW5wdXQgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0LnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0ID0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlucHV0ID09PSBudWxsIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgfHwgaXNOYU4oaW5wdXQpICYmICFpbnB1dC5sZW5ndGgpIHtcbiAgICBpbnB1dCA9ICcnO1xuICB9XG4gIHJldHVybiBTdHJpbmcoaW5wdXQpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gd2hpdGVsaXN0O1xudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiB3aGl0ZWxpc3Qoc3RyLCBjaGFycykge1xuICAoMCwgX2Fzc2VydFN0cmluZy5kZWZhdWx0KShzdHIpO1xuICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChcIlteXCIuY29uY2F0KGNoYXJzLCBcIl0rXCIpLCAnZycpLCAnJyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gJyc7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmIChhcmcpIHtcblx0XHRcdFx0Y2xhc3NlcyA9IGFwcGVuZENsYXNzKGNsYXNzZXMsIHBhcnNlVmFsdWUoYXJnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXM7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZVZhbHVlIChhcmcpIHtcblx0XHRpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcblx0XHRcdHJldHVybiBhcmc7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBhcmcgIT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHR9XG5cblx0XHRpZiAoYXJnLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmICFhcmcudG9TdHJpbmcudG9TdHJpbmcoKS5pbmNsdWRlcygnW25hdGl2ZSBjb2RlXScpKSB7XG5cdFx0XHRyZXR1cm4gYXJnLnRvU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0dmFyIGNsYXNzZXMgPSAnJztcblxuXHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0Y2xhc3NlcyA9IGFwcGVuZENsYXNzKGNsYXNzZXMsIGtleSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXM7XG5cdH1cblxuXHRmdW5jdGlvbiBhcHBlbmRDbGFzcyAodmFsdWUsIG5ld0NsYXNzKSB7XG5cdFx0aWYgKCFuZXdDbGFzcykge1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgKyAnICcgKyBuZXdDbGFzcztcblx0XHR9XG5cdFxuXHRcdHJldHVybiB2YWx1ZSArIG5ld0NsYXNzO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIHtcIjY0XCI6XCI1ZmJmNzM4YzYyOTYxOTMzNmUxZlwiLFwiNTQ5XCI6XCJjMjg3ZTJjNzI0N2M4MTZjYTdjNlwiLFwiNjQ1XCI6XCIxMTg0YmZmYjNhMGZmNGQ1Y2E2NFwiLFwiNjc5XCI6XCJkZWJhOTM3NjdlMDViMDFlNDJiNlwiLFwiNjgyXCI6XCJjZTdkYzlmYjA5ZWQ0M2ZjYzJhNlwiLFwiOTAxXCI6XCIwMzk1NTQwMTliMDg3Y2FkMTJhMVwifVtjaHVua0lkXSArIFwiLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NDUklQVCcpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ3OTI6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG5cdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cdHZhciBydW50aW1lID0gZGF0YVsyXTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtiZWF1dHlfc2hvcFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtiZWF1dHlfc2hvcFwiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL0FwcC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4vQXBwLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuMjEuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBUeXBlcyBhbmQgQ29uc3RhbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBBY3Rpb25zIHJlcHJlc2VudCB0aGUgdHlwZSBvZiBjaGFuZ2UgdG8gYSBsb2NhdGlvbiB2YWx1ZS5cbiAqL1xudmFyIEFjdGlvbjtcbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxuICAgKiBBIFJFUExBQ0UgaW5kaWNhdGVzIHRoZSBlbnRyeSBhdCB0aGUgY3VycmVudCBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFja1xuICAgKiBiZWluZyByZXBsYWNlZCBieSBhIG5ldyBvbmUuXG4gICAqL1xuICBBY3Rpb25bXCJSZXBsYWNlXCJdID0gXCJSRVBMQUNFXCI7XG59KShBY3Rpb24gfHwgKEFjdGlvbiA9IHt9KSk7XG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICBpbml0aWFsRW50cmllcyA9IFtcIi9cIl0sXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBlbnRyaWVzOyAvLyBEZWNsYXJlIHNvIHdlIGNhbiBhY2Nlc3MgZnJvbSBjcmVhdGVNZW1vcnlMb2NhdGlvblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBmdW5jdGlvbiBjbGFtcEluZGV4KG4pIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkge1xuICAgIHJldHVybiBlbnRyaWVzW2luZGV4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLCB0bywgc3RhdGUsIGtleSk7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeTogXCIgKyBKU09OLnN0cmluZ2lmeSh0bykpO1xuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmLFxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLnBhdGhuYW1lIHx8IFwiXCIsXG4gICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgXCJcIixcbiAgICAgICAgaGFzaDogcGF0aC5oYXNoIHx8IFwiXCJcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7XG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnbyhkZWx0YSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICAgIGxldCBuZXh0SW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGVudHJpZXNbbmV4dEluZGV4XTtcbiAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxuICogQnJvd3NlciBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzLiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3JcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XG4gKiBzZXJ2ZSB0aGUgc2FtZSBhcHAgYXQgbXVsdGlwbGUgVVJMcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3csIHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVCcm93c2VyTG9jYXRpb24sIGNyZWF0ZUJyb3dzZXJIcmVmLCBudWxsLCBvcHRpb25zKTtcbn1cbi8qKlxuICogSGFzaCBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gd2luZG93LmxvY2F0aW9uLmhhc2guIFRoaXMgbWFrZXMgaXQgaWRlYWxcbiAqIGZvciBzaXR1YXRpb25zIHdoZXJlIHlvdSBkb24ndCB3YW50IHRvIHNlbmQgdGhlIGxvY2F0aW9uIHRvIHRoZSBzZXJ2ZXIgZm9yXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xuICogcmVzZXJ2ZWQgZm9yIHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgICBoYXNoID0gXCJcIlxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICAvLyBIYXNoIFVSTCBzaG91bGQgYWx3YXlzIGhhdmUgYSBsZWFkaW5nIC8ganVzdCBsaWtlIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxuICAgIC8vIGRvZXMsIHNvIGlmIGFuIGFwcCBlbmRzIHVwIGF0IGEgcm91dGUgbGlrZSAvI3NvbWV0aGluZyB0aGVuIHdlIGFkZCBhXG4gICAgLy8gbGVhZGluZyBzbGFzaCBzbyBhbGwgb2Ygb3VyIHBhdGgtbWF0Y2hpbmcgYmVoYXZlcyB0aGUgc2FtZSBhcyBpZiBpdCB3b3VsZFxuICAgIC8vIGluIGEgYnJvd3NlciByb3V0ZXIuICBUaGlzIGlzIHBhcnRpY3VsYXJseSBpbXBvcnRhbnQgd2hlbiB0aGVyZSBleGlzdHMgYVxuICAgIC8vIHJvb3Qgc3BsYXQgcm91dGUgKDxSb3V0ZSBwYXRoPVwiKlwiPikgc2luY2UgdGhhdCBtYXRjaGVzIGludGVybmFsbHkgYWdhaW5zdFxuICAgIC8vIFwiLypcIiBhbmQgd2UnZCBleHBlY3QgLyNzb21ldGhpbmcgdG8gNDA0IGluIGEgaGFzaCByb3V0ZXIgYXBwLlxuICAgIGlmICghcGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgJiYgIXBhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuXCIpKSB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiICsgcGF0aG5hbWU7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LFxuICAgIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gaHJlZiArIFwiI1wiICsgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0bykpO1xuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVIYXNoTG9jYXRpb24sIGNyZWF0ZUhhc2hIcmVmLCB2YWxpZGF0ZUhhc2hMb2NhdGlvbiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2UsIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuLyoqXG4gKiBGb3IgYnJvd3Nlci1iYXNlZCBoaXN0b3JpZXMsIHdlIGNvbWJpbmUgdGhlIHN0YXRlIGFuZCBrZXkgaW50byBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCkge1xuICByZXR1cm4ge1xuICAgIHVzcjogbG9jYXRpb24uc3RhdGUsXG4gICAga2V5OiBsb2NhdGlvbi5rZXksXG4gICAgaWR4OiBpbmRleFxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgTG9jYXRpb24gb2JqZWN0IHdpdGggYSB1bmlxdWUga2V5IGZyb20gdGhlIGdpdmVuIFBhdGhcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oY3VycmVudCwgdG8sIHN0YXRlLCBrZXkpIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IG51bGw7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gX2V4dGVuZHMoe1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiXG4gIH0sIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6IHRvICYmIHRvLmtleSB8fCBrZXkgfHwgY3JlYXRlS2V5KClcbiAgfSk7XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXRoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IF9yZWY7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRobmFtZTtcbn1cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0ge307XG4gIGlmIChwYXRoKSB7XG4gICAgbGV0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIGxldCBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG4gICAgaWYgKHNlYXJjaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gcGF0aC5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cbmZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShnZXRMb2NhdGlvbiwgY3JlYXRlSHJlZiwgdmFsaWRhdGVMb2NhdGlvbiwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGxldCBpbmRleCA9IGdldEluZGV4KCk7XG4gIC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICBpbmRleCA9IDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoX2V4dGVuZHMoe30sIGdsb2JhbEhpc3Rvcnkuc3RhdGUsIHtcbiAgICAgIGlkeDogaW5kZXhcbiAgICB9KSwgXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0SW5kZXgoKSB7XG4gICAgbGV0IHN0YXRlID0gZ2xvYmFsSGlzdG9yeS5zdGF0ZSB8fCB7XG4gICAgICBpZHg6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBzdGF0ZS5pZHg7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpICsgMTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiB0aGUgZXhjZXB0aW9uIGlzIGJlY2F1c2UgYHN0YXRlYCBjYW4ndCBiZSBzZXJpYWxpemVkLCBsZXQgdGhhdCB0aHJvd1xuICAgICAgLy8gb3V0d2FyZHMganVzdCBsaWtlIGEgcmVwbGFjZSBjYWxsIHdvdWxkIHNvIHRoZSBkZXYga25vd3MgdGhlIGNhdXNlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9uYXYtaGlzdG9yeS1hcGlzLmh0bWwjc2hhcmVkLWhpc3RvcnktcHVzaC9yZXBsYWNlLXN0YXRlLXN0ZXBzXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zdHJ1Y3R1cmVkLWRhdGEuaHRtbCNzdHJ1Y3R1cmVkc2VyaWFsaXplaW50ZXJuYWxcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiBlcnJvci5uYW1lID09PSBcIkRhdGFDbG9uZUVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBcIm51bGxcIiA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgLy8gVHJlYXRpbmcgdGhpcyBhcyBhIGZ1bGwgVVJMIHdpbGwgc3RyaXAgYW55IHRyYWlsaW5nIHNwYWNlcyBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gcHJlLWVuY29kZSB0aGVtIHNpbmNlIHRoZXkgbWlnaHQgYmUgcGFydCBvZiBhIG1hdGNoaW5nIHNwbGF0IHBhcmFtIGZyb21cbiAgICAvLyBhbiBhbmNlc3RvciByb3V0ZVxuICAgIGhyZWYgPSBocmVmLnJlcGxhY2UoLyAkLywgXCIlMjBcIik7XG4gICAgaW52YXJpYW50KGJhc2UsIFwiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6IFwiICsgaHJlZik7XG4gICAgcmV0dXJuIG5ldyBVUkwoaHJlZiwgYmFzZSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KTtcbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lclwiKTtcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZih0bykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhyZWYod2luZG93LCB0byk7XG4gICAgfSxcbiAgICBjcmVhdGVVUkwsXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwodG8pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBoYXNoOiB1cmwuaGFzaFxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2gsXG4gICAgcmVwbGFjZSxcbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLy8jZW5kcmVnaW9uXG5cbnZhciBSZXN1bHRUeXBlO1xuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcbmNvbnN0IGltbXV0YWJsZVJvdXRlS2V5cyA9IG5ldyBTZXQoW1wibGF6eVwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJwYXRoXCIsIFwiaWRcIiwgXCJpbmRleFwiLCBcImNoaWxkcmVuXCJdKTtcbmZ1bmN0aW9uIGlzSW5kZXhSb3V0ZShyb3V0ZSkge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59XG4vLyBXYWxrIHRoZSByb3V0ZSB0cmVlIGdlbmVyYXRpbmcgdW5pcXVlIElEcyB3aGVyZSBuZWNlc3NhcnksIHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5mdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCBwYXJlbnRQYXRoLCBtYW5pZmVzdCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGlmIChtYW5pZmVzdCA9PT0gdm9pZCAwKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgfVxuICByZXR1cm4gcm91dGVzLm1hcCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIFN0cmluZyhpbmRleCldO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbiwgXCJDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZVwiKTtcbiAgICBpbnZhcmlhbnQoIW1hbmlmZXN0W2lkXSwgXCJGb3VuZCBhIHJvdXRlIGlkIGNvbGxpc2lvbiBvbiBpZCBcXFwiXCIgKyBpZCArIFwiXFxcIi4gIFJvdXRlIFwiICsgXCJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXNcIik7XG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IGluZGV4Um91dGU7XG4gICAgICByZXR1cm4gaW5kZXhSb3V0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhdGhPckxheW91dFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkLFxuICAgICAgICBjaGlsZHJlbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IHBhdGhPckxheW91dFJvdXRlO1xuICAgICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICAgIHBhdGhPckxheW91dFJvdXRlLmNoaWxkcmVuID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgbWFwUm91dGVQcm9wZXJ0aWVzLCB0cmVlUGF0aCwgbWFuaWZlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvdXRpbHMvbWF0Y2gtcm91dGVzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuICByZXR1cm4gbWF0Y2hSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBtYXRjaFJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUsIGFsbG93UGFydGlhbCkge1xuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIC8vIEluY29taW5nIHBhdGhuYW1lcyBhcmUgZ2VuZXJhbGx5IGVuY29kZWQgZnJvbSBlaXRoZXIgd2luZG93LmxvY2F0aW9uXG4gICAgLy8gb3IgZnJvbSByb3V0ZXIubmF2aWdhdGUsIGJ1dCB3ZSB3YW50IHRvIG1hdGNoIGFnYWluc3QgdGhlIHVuZW5jb2RlZFxuICAgIC8vIHBhdGhzIGluIHRoZSByb3V0ZSBkZWZpbml0aW9ucy4gIE1lbW9yeSByb3V0ZXIgbG9jYXRpb25zIHdvbid0IGJlXG4gICAgLy8gZW5jb2RlZCBoZXJlIGJ1dCB0aGVyZSBhbHNvIHNob3VsZG4ndCBiZSBhbnl0aGluZyB0byBkZWNvZGUgc28gdGhpc1xuICAgIC8vIHNob3VsZCBiZSBhIHNhZmUgb3BlcmF0aW9uLiAgVGhpcyBhdm9pZHMgbmVlZGluZyBtYXRjaFJvdXRlcyB0byBiZVxuICAgIC8vIGhpc3RvcnktYXdhcmUuXG4gICAgbGV0IGRlY29kZWQgPSBkZWNvZGVQYXRoKHBhdGhuYW1lKTtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgZGVjb2RlZCwgYWxsb3dQYXJ0aWFsKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG1hdGNoLCBsb2FkZXJEYXRhKSB7XG4gIGxldCB7XG4gICAgcm91dGUsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zXG4gIH0gPSBtYXRjaDtcbiAgcmV0dXJuIHtcbiAgICBpZDogcm91dGUuaWQsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zLFxuICAgIGRhdGE6IGxvYWRlckRhdGFbcm91dGUuaWRdLFxuICAgIGhhbmRsZTogcm91dGUuaGFuZGxlXG4gIH07XG59XG5mdW5jdGlvbiBmbGF0dGVuUm91dGVzKHJvdXRlcywgYnJhbmNoZXMsIHBhcmVudHNNZXRhLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChicmFuY2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgYnJhbmNoZXMgPSBbXTtcbiAgfVxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG4gIGxldCBmbGF0dGVuUm91dGUgPSAocm91dGUsIGluZGV4LCByZWxhdGl2ZVBhdGgpID0+IHtcbiAgICBsZXQgbWV0YSA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDogcmVsYXRpdmVQYXRoID09PSB1bmRlZmluZWQgPyByb3V0ZS5wYXRoIHx8IFwiXCIgOiByZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG4gICAgaWYgKG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICBpbnZhcmlhbnQobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChwYXJlbnRQYXRoKSwgXCJBYnNvbHV0ZSByb3V0ZSBwYXRoIFxcXCJcIiArIG1ldGEucmVsYXRpdmVQYXRoICsgXCJcXFwiIG5lc3RlZCB1bmRlciBwYXRoIFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIiBpcyBub3QgdmFsaWQuIEFuIGFic29sdXRlIGNoaWxkIHJvdXRlIHBhdGggXCIpICsgXCJtdXN0IHN0YXJ0IHdpdGggdGhlIGNvbWJpbmVkIHBhdGggb2YgYWxsIGl0cyBwYXJlbnQgcm91dGVzLlwiKTtcbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTtcbiAgICAvLyBBZGQgdGhlIGNoaWxkcmVuIGJlZm9yZSBhZGRpbmcgdGhpcyByb3V0ZSB0byB0aGUgYXJyYXksIHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSk7XG4gICAgICBmbGF0dGVuUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBicmFuY2hlcywgcm91dGVzTWV0YSwgcGF0aCk7XG4gICAgfVxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH07XG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICB2YXIgX3JvdXRlJHBhdGg7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgbGV0IFtmaXJzdCwgLi4ucmVzdF0gPSBzZWdtZW50cztcbiAgLy8gT3B0aW9uYWwgcGF0aCBzZWdtZW50cyBhcmUgZGVub3RlZCBieSBhIHRyYWlsaW5nIGA/YFxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTtcbiAgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4sIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQubWFwKHN1YnBhdGggPT4gc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKSkpO1xuICAvLyBUaGVuLCBpZiB0aGlzIGlzIGFuIG9wdGlvbmFsIHZhbHVlLCBhZGQgYWxsIGNoaWxkIHZlcnNpb25zIHdpdGhvdXRcbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9XG4gIC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcbiAgcmV0dXJuIHJlc3VsdC5tYXAoZXhwbG9kZWQgPT4gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSAmJiBleHBsb2RlZCA9PT0gXCJcIiA/IFwiL1wiIDogZXhwbG9kZWQpO1xufVxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuY29uc3QgcGFyYW1SZSA9IC9eOltcXHctXSskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5jb25zdCBpc1NwbGF0ID0gcyA9PiBzID09PSBcIipcIjtcbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG4gIGlmIChpbmRleCkge1xuICAgIGluaXRpYWxTY29yZSArPSBpbmRleFJvdXRlVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID9cbiAgLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDpcbiAgLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2goYnJhbmNoLCBwYXRobmFtZSwgYWxsb3dQYXJ0aWFsKSB7XG4gIGlmIChhbGxvd1BhcnRpYWwgPT09IHZvaWQgMCkge1xuICAgIGFsbG93UGFydGlhbCA9IGZhbHNlO1xuICB9XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICBwYXRoOiBtZXRhLnJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVuZFxuICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIGlmICghbWF0Y2ggJiYgZW5kICYmIGFsbG93UGFydGlhbCAmJiAhcm91dGVzTWV0YVtyb3V0ZXNNZXRhLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4KSB7XG4gICAgICBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICAgIGVuZDogZmFsc2VcbiAgICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICB9XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD9cbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pKSxcbiAgICAgIHJvdXRlXG4gICAgfSk7XG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKTtcbiAgfVxuICAvLyBlbnN1cmUgYC9gIGlzIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGVcbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcbiAgY29uc3Qgc3RyaW5naWZ5ID0gcCA9PiBwID09IG51bGwgPyBcIlwiIDogdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwIDogU3RyaW5nKHApO1xuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoL1xcLysvKS5tYXAoKHNlZ21lbnQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgIGNvbnN0IGlzTGFzdFNlZ21lbnQgPSBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzcGxhdCBpZiBpdCdzIHRoZSBsYXN0IHNlZ21lbnRcbiAgICBpZiAoaXNMYXN0U2VnbWVudCAmJiBzZWdtZW50ID09PSBcIipcIikge1xuICAgICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuICAgICAgLy8gQXBwbHkgdGhlIHNwbGF0XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtc1tzdGFyXSk7XG4gICAgfVxuICAgIGNvbnN0IGtleU1hdGNoID0gc2VnbWVudC5tYXRjaCgvXjooW1xcdy1dKykoXFw/PykkLyk7XG4gICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICBjb25zdCBbLCBrZXksIG9wdGlvbmFsXSA9IGtleU1hdGNoO1xuICAgICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG4gICAgICBpbnZhcmlhbnQob3B0aW9uYWwgPT09IFwiP1wiIHx8IHBhcmFtICE9IG51bGwsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50LnJlcGxhY2UoL1xcPyQvZywgXCJcIik7XG4gIH0pXG4gIC8vIFJlbW92ZSBlbXB0eSBzZWdtZW50c1xuICAuZmlsdGVyKHNlZ21lbnQgPT4gISFzZWdtZW50KTtcbiAgcmV0dXJuIHByZWZpeCArIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni91dGlscy9tYXRjaC1wYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuICBsZXQgW21hdGNoZXIsIGNvbXBpbGVkUGFyYW1zXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IGNvbXBpbGVkUGFyYW1zLnJlZHVjZSgobWVtbywgX3JlZiwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcGFyYW1OYW1lLFxuICAgICAgaXNPcHRpb25hbFxuICAgIH0gPSBfcmVmO1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XTtcbiAgICBpZiAoaXNPcHRpb25hbCAmJiAhdmFsdWUpIHtcbiAgICAgIG1lbW9bcGFyYW1OYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gKHZhbHVlIHx8IFwiXCIpLnJlcGxhY2UoLyUyRi9nLCBcIi9cIik7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cbiAgd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gIGxldCBwYXJhbXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJHt9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooW1xcdy1dKykoXFw/KT8vZywgKF8sIHBhcmFtTmFtZSwgaXNPcHRpb25hbCkgPT4ge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZSxcbiAgICAgIGlzT3B0aW9uYWw6IGlzT3B0aW9uYWwgIT0gbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiBpc09wdGlvbmFsID8gXCIvPyhbXlxcXFwvXSspP1wiIDogXCIvKFteXFxcXC9dKylcIjtcbiAgfSk7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZTogXCIqXCJcbiAgICB9KTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIGlmIChlbmQpIHtcbiAgICAvLyBXaGVuIG1hdGNoaW5nIHRvIHRoZSBlbmQsIGlnbm9yZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgcmVnZXhwU291cmNlICs9IFwiXFxcXC8qJFwiO1xuICB9IGVsc2UgaWYgKHBhdGggIT09IFwiXCIgJiYgcGF0aCAhPT0gXCIvXCIpIHtcbiAgICAvLyBJZiBvdXIgcGF0aCBpcyBub24tZW1wdHkgYW5kIGNvbnRhaW5zIGFueXRoaW5nIGJleW9uZCBhbiBpbml0aWFsIHNsYXNoLFxuICAgIC8vIHRoZW4gd2UgaGF2ZSBfc29tZV8gZm9ybSBvZiBwYXRoIGluIG91ciByZWdleCwgc28gd2Ugc2hvdWxkIGV4cGVjdCB0b1xuICAgIC8vIG1hdGNoIG9ubHkgaWYgd2UgZmluZCB0aGUgZW5kIG9mIHRoaXMgcGF0aCBzZWdtZW50LiAgTG9vayBmb3IgYW4gb3B0aW9uYWxcbiAgICAvLyBub24tY2FwdHVyZWQgdHJhaWxpbmcgc2xhc2ggKHRvIG1hdGNoIGEgcG9ydGlvbiBvZiB0aGUgVVJMKSBvciB0aGUgZW5kXG4gICAgLy8gb2YgdGhlIHBhdGggKGlmIHdlJ3ZlIG1hdGNoZWQgdG8gdGhlIGVuZCkuICBXZSB1c2VkIHRvIGRvIHRoaXMgd2l0aCBhXG4gICAgLy8gd29yZCBib3VuZGFyeSBidXQgdGhhdCBnaXZlcyBmYWxzZSBwb3NpdGl2ZXMgb24gcm91dGVzIGxpa2VcbiAgICAvLyAvdXNlci1wcmVmZXJlbmNlcyBzaW5jZSBgLWAgY291bnRzIGFzIGEgd29yZCBib3VuZGFyeS5cbiAgICByZWdleHBTb3VyY2UgKz0gXCIoPzooPz1cXFxcL3wkKSlcIjtcbiAgfSBlbHNlIDtcbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbXNdO1xufVxuZnVuY3Rpb24gZGVjb2RlUGF0aCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiB2YWx1ZS5zcGxpdChcIi9cIikubWFwKHYgPT4gZGVjb2RlVVJJQ29tcG9uZW50KHYpLnJlcGxhY2UoL1xcLy9nLCBcIiUyRlwiKSkuam9pbihcIi9cIik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gV2Ugd2FudCB0byBsZWF2ZSB0cmFpbGluZyBzbGFzaCBiZWhhdmlvciBpbiB0aGUgdXNlcidzIGNvbnRyb2wsIHNvIGlmIHRoZXlcbiAgLy8gc3BlY2lmeSBhIGJhc2VuYW1lIHdpdGggYSB0cmFpbGluZyBzbGFzaCwgd2Ugc2hvdWxkIHN1cHBvcnQgaXRcbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwYXRobmFtZS5zbGljZShzdGFydEluZGV4KSB8fCBcIi9cIjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L3V0aWxzL3Jlc29sdmUtcGF0aFxuICovXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihjaGFyLCBmaWVsZCwgZGVzdCwgcGF0aCkge1xuICByZXR1cm4gXCJDYW5ub3QgaW5jbHVkZSBhICdcIiArIGNoYXIgKyBcIicgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIFwiICsgKFwiYHRvLlwiICsgZmllbGQgKyBcImAgZmllbGQgW1wiICsgSlNPTi5zdHJpbmdpZnkocGF0aCkgKyBcIl0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBcIikgKyAoXCJgdG8uXCIgKyBkZXN0ICsgXCJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIFwiKSArIFwiYSBzdHJpbmcgaW4gPExpbmsgdG89XFxcIi4uLlxcXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5cIjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIG1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IGluZGV4ID09PSAwIHx8IG1hdGNoLnJvdXRlLnBhdGggJiYgbWF0Y2gucm91dGUucGF0aC5sZW5ndGggPiAwKTtcbn1cbi8vIFJldHVybiB0aGUgYXJyYXkgb2YgcGF0aG5hbWVzIGZvciB0aGUgY3VycmVudCByb3V0ZSBtYXRjaGVzIC0gdXNlZCB0b1xuLy8gZ2VuZXJhdGUgdGhlIHJvdXRlUGF0aG5hbWVzIGlucHV0IGZvciByZXNvbHZlVG8oKVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgLy8gV2hlbiB2N19yZWxhdGl2ZVNwbGF0UGF0aCBpcyBlbmFibGVkLCB1c2UgdGhlIGZ1bGwgcGF0aG5hbWUgZm9yIHRoZSBsZWFmXG4gIC8vIG1hdGNoIHNvIHdlIGluY2x1ZGUgc3BsYXQgdmFsdWVzIGZvciBcIi5cIiBsaW5rcy4gIFNlZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzExMDUyI2lzc3VlY29tbWVudC0xODM2NTg5MzI5XG4gIGlmICh2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICAgIHJldHVybiBwYXRoTWF0Y2hlcy5tYXAoKG1hdGNoLCBpZHgpID0+IGlkeCA9PT0gcGF0aE1hdGNoZXMubGVuZ3RoIC0gMSA/IG1hdGNoLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlKTtcbiAgfVxuICByZXR1cm4gcGF0aE1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuICBsZXQgdG87XG4gIGlmICh0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0byA9IHBhcnNlUGF0aCh0b0FyZyk7XG4gIH0gZWxzZSB7XG4gICAgdG8gPSBfZXh0ZW5kcyh7fSwgdG9BcmcpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiP1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIj9cIiwgXCJwYXRobmFtZVwiLCBcInNlYXJjaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJwYXRobmFtZVwiLCBcImhhc2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnNlYXJjaCB8fCAhdG8uc2VhcmNoLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJzZWFyY2hcIiwgXCJoYXNoXCIsIHRvKSk7XG4gIH1cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTtcbiAgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuICBpZiAodG9QYXRobmFtZSA9PSBudWxsKSB7XG4gICAgZnJvbSA9IGxvY2F0aW9uUGF0aG5hbWU7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvdXRlUGF0aG5hbWVJbmRleCA9IHJvdXRlUGF0aG5hbWVzLmxlbmd0aCAtIDE7XG4gICAgLy8gV2l0aCByZWxhdGl2ZT1cInJvdXRlXCIgKHRoZSBkZWZhdWx0KSwgZWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnNcbiAgICAvLyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmUgVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXlcbiAgICAvLyBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYVxuICAgIC8vIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG4gICAgaWYgKCFpc1BhdGhSZWxhdGl2ZSAmJiB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgIHdoaWxlICh0b1NlZ21lbnRzWzBdID09PSBcIi4uXCIpIHtcbiAgICAgICAgdG9TZWdtZW50cy5zaGlmdCgpO1xuICAgICAgICByb3V0ZVBhdGhuYW1lSW5kZXggLT0gMTtcbiAgICAgIH1cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9XG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pO1xuICAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuICBsZXQgaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoID0gdG9QYXRobmFtZSAmJiB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgLy8gT3IgaWYgdGhpcyB3YXMgYSBsaW5rIHRvIHRoZSBjdXJyZW50IHBhdGggd2hpY2ggaGFzIGEgdHJhaWxpbmcgc2xhc2hcbiAgbGV0IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoID0gKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG8pIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgYGpzb25gIG1ldGhvZCBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHJldHVybmluZyByYXcgb2JqZWN0cy5cbiAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny5cbiAqL1xuY29uc3QganNvbiA9IGZ1bmN0aW9uIGpzb24oZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG4gIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG5jbGFzcyBEYXRhV2l0aFJlc3BvbnNlSW5pdCB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIGluaXQpIHtcbiAgICB0aGlzLnR5cGUgPSBcIkRhdGFXaXRoUmVzcG9uc2VJbml0XCI7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmluaXQgPSBpbml0IHx8IG51bGw7XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlIFwicmVzcG9uc2VzXCIgdGhhdCBjb250YWluIGBzdGF0dXNgL2BoZWFkZXJzYCB3aXRob3V0IGZvcmNpbmdcbiAqIHNlcmlhbGl6YXRpb24gaW50byBhbiBhY3R1YWwgYFJlc3BvbnNlYCAtIHVzZWQgYnkgUmVtaXggc2luZ2xlIGZldGNoXG4gKi9cbmZ1bmN0aW9uIGRhdGEoZGF0YSwgaW5pdCkge1xuICByZXR1cm4gbmV3IERhdGFXaXRoUmVzcG9uc2VJbml0KGRhdGEsIHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdCk7XG59XG5jbGFzcyBBYm9ydGVkRGVmZXJyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBEZWZlcnJlZERhdGEge1xuICBjb25zdHJ1Y3RvcihkYXRhLCByZXNwb25zZUluaXQpIHtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5kZWZlcnJlZEtleXMgPSBbXTtcbiAgICBpbnZhcmlhbnQoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSwgXCJkZWZlcigpIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzXCIpO1xuICAgIC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuICAgIGxldCByZWplY3Q7XG4gICAgdGhpcy5hYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBvbkFib3J0ID0gKCkgPT4gcmVqZWN0KG5ldyBBYm9ydGVkRGVmZXJyZWRFcnJvcihcIkRlZmVycmVkIGRhdGEgYWJvcnRlZFwiKSk7XG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5jb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5kYXRhID0gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChhY2MsIF9yZWYyKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjI7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gQWxsIGluY29taW5nIHZhbHVlcyB3ZXJlIHJlc29sdmVkXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgdGhpcy5pbml0ID0gcmVzcG9uc2VJbml0O1xuICB9XG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmRlZmVycmVkS2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5hZGQoa2V5KTtcbiAgICAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yYWNlKFt2YWx1ZSwgdGhpcy5hYm9ydFByb21pc2VdKS50aGVuKGRhdGEgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIHVuZGVmaW5lZCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpO1xuICAgIC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uXG4gICAgLy8gZXJyb3JzIG9yIGFib3J0ZWQgZGVmZXJyZWQgdmFsdWVzXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgb25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvciwgZGF0YSkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQgJiYgZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGtleSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBwcm9taXNlIHdhcyByZXNvbHZlZC9yZWplY3RlZCB3aXRoIHVuZGVmaW5lZCwgd2UnbGwgdGhyb3cgYW4gZXJyb3IgYXMgeW91XG4gICAgLy8gc2hvdWxkIGFsd2F5cyByZXNvbHZlIHdpdGggYSB2YWx1ZSBvciBudWxsXG4gICAgaWYgKGVycm9yID09PSB1bmRlZmluZWQgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdW5kZWZpbmVkRXJyb3IgPSBuZXcgRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJlc29sdmVkL3JlamVjdGVkIHdpdGggYHVuZGVmaW5lZGAsIFwiICsgXCJ5b3UgbXVzdCByZXNvbHZlL3JlamVjdCB3aXRoIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdW5kZWZpbmVkRXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHVuZGVmaW5lZEVycm9yKTtcbiAgICB9XG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cbiAgc3Vic2NyaWJlKGZuKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZm9yRWFjaCgodiwgaykgPT4gdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoaykpO1xuICAgIHRoaXMuZW1pdCh0cnVlKTtcbiAgfVxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBsZXQgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgYWJvcnRlZCA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG4gIGdldCBkb25lKCkge1xuICAgIHJldHVybiB0aGlzLnBlbmRpbmdLZXlzU2V0LnNpemUgPT09IDA7XG4gIH1cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMykgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYzO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuICBnZXQgcGVuZGluZ0tleXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wZW5kaW5nS2V5c1NldCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlLl9lcnJvcikge1xuICAgIHRocm93IHZhbHVlLl9lcnJvcjtcbiAgfVxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoZSBgZGVmZXJgIG1ldGhvZCBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHJldHVybmluZyByYXdcbiAqIG9iamVjdHMuIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny5cbiAqL1xuY29uc3QgZGVmZXIgPSBmdW5jdGlvbiBkZWZlcihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uIHJlZGlyZWN0KHVybCwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IDMwMjtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gaW5pdDtcbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBoZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIHVybCk7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZSB0aGF0IHdpbGwgZm9yY2UgYSBkb2N1bWVudCByZWxvYWQgdG8gdGhlIG5ldyBsb2NhdGlvbi5cbiAqIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdERvY3VtZW50ID0gKHVybCwgaW5pdCkgPT4ge1xuICBsZXQgcmVzcG9uc2UgPSByZWRpcmVjdCh1cmwsIGluaXQpO1xuICByZXNwb25zZS5oZWFkZXJzLnNldChcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZSB0aGF0IHdpbGwgcGVyZm9ybSBhIGBoaXN0b3J5LnJlcGxhY2VTdGF0ZWAgaW5zdGVhZCBvZiBhXG4gKiBgaGlzdG9yeS5wdXNoU3RhdGVgIGZvciBjbGllbnQtc2lkZSBuYXZpZ2F0aW9uIHJlZGlyZWN0cy5cbiAqIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZXBsYWNlID0gKHVybCwgaW5pdCkgPT4ge1xuICBsZXQgcmVzcG9uc2UgPSByZWRpcmVjdCh1cmwsIGluaXQpO1xuICByZXNwb25zZS5oZWFkZXJzLnNldChcIlgtUmVtaXgtUmVwbGFjZVwiLCBcInRydWVcIik7XG4gIHJldHVybiByZXNwb25zZTtcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKiBVdGlsaXR5IGNsYXNzIHdlIHVzZSB0byBob2xkIGF1dG8tdW53cmFwcGVkIDR4eC81eHggUmVzcG9uc2UgYm9kaWVzXG4gKlxuICogV2UgZG9uJ3QgZXhwb3J0IHRoZSBjbGFzcyBmb3IgcHVibGljIHVzZSBzaW5jZSBpdCdzIGFuIGltcGxlbWVudGF0aW9uXG4gKiBkZXRhaWwsIGJ1dCB3ZSBleHBvcnQgdGhlIGludGVyZmFjZSBhYm92ZSBzbyBmb2xrcyBjYW4gYnVpbGQgdGhlaXIgb3duXG4gKiBhYnN0cmFjdGlvbnMgYXJvdW5kIGluc3RhbmNlcyB2aWEgaXNSb3V0ZUVycm9yUmVzcG9uc2UoKVxuICovXG5jbGFzcyBFcnJvclJlc3BvbnNlSW1wbCB7XG4gIGNvbnN0cnVjdG9yKHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaW50ZXJuYWwpIHtcbiAgICBpZiAoaW50ZXJuYWwgPT09IHZvaWQgMCkge1xuICAgICAgaW50ZXJuYWwgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmVycm9yID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVycm9yIGlzIGFuIEVycm9yUmVzcG9uc2UgZ2VuZXJhdGVkIGZyb20gYSA0eHgvNXh4XG4gKiBSZXNwb25zZSB0aHJvd24gZnJvbSBhbiBhY3Rpb24vbG9hZGVyXG4gKi9cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0ZFVENIRVIgPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0JMT0NLRVIgPSB7XG4gIHN0YXRlOiBcInVuYmxvY2tlZFwiLFxuICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gIHJlc2V0OiB1bmRlZmluZWQsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWRcbn07XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG5jb25zdCBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgaGFzRXJyb3JCb3VuZGFyeTogQm9vbGVhbihyb3V0ZS5oYXNFcnJvckJvdW5kYXJ5KVxufSk7XG5jb25zdCBUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSA9IFwicmVtaXgtcm91dGVyLXRyYW5zaXRpb25zXCI7XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlUm91dGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdCkge1xuICBjb25zdCByb3V0ZXJXaW5kb3cgPSBpbml0LndpbmRvdyA/IGluaXQud2luZG93IDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbiAgY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHJvdXRlcldpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgY29uc3QgaXNTZXJ2ZXIgPSAhaXNCcm93c2VyO1xuICBpbnZhcmlhbnQoaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIik7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChpbml0Lm1hcFJvdXRlUHJvcGVydGllcykge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGluaXQubWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9IGVsc2UgaWYgKGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gUm91dGVzIGtleWVkIGJ5IElEXG4gIGxldCBtYW5pZmVzdCA9IHt9O1xuICAvLyBSb3V0ZXMgaW4gdHJlZSBmb3JtYXQgZm9yIG1hdGNoaW5nXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgbGV0IGluRmxpZ2h0RGF0YVJvdXRlcztcbiAgbGV0IGJhc2VuYW1lID0gaW5pdC5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFTdHJhdGVneUltcGwgPSBpbml0LmRhdGFTdHJhdGVneSB8fCBkZWZhdWx0RGF0YVN0cmF0ZWd5O1xuICBsZXQgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb25JbXBsID0gaW5pdC5wYXRjaFJvdXRlc09uTmF2aWdhdGlvbjtcbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X2ZldGNoZXJQZXJzaXN0OiBmYWxzZSxcbiAgICB2N19ub3JtYWxpemVGb3JtTWV0aG9kOiBmYWxzZSxcbiAgICB2N19wYXJ0aWFsSHlkcmF0aW9uOiBmYWxzZSxcbiAgICB2N19wcmVwZW5kQmFzZW5hbWU6IGZhbHNlLFxuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICB2N19za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb246IGZhbHNlXG4gIH0sIGluaXQuZnV0dXJlKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdFxuICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnMgPSBudWxsO1xuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCAmJiAhcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb25JbXBsKSB7XG4gICAgLy8gSWYgd2UgZG8gbm90IG1hdGNoIGEgdXNlci1wcm92aWRlZC1yb3V0ZSwgZmFsbCBiYWNrIHRvIHRoZSByb290XG4gICAgLy8gdG8gYWxsb3cgdGhlIGVycm9yIGJvdW5kYXJ5IHRvIHRha2Ugb3ZlclxuICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICBwYXRobmFtZTogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgfSk7XG4gICAgbGV0IHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICByb3V0ZVxuICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgIGluaXRpYWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBpbml0aWFsRXJyb3JzID0ge1xuICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICB9O1xuICB9XG4gIC8vIEluIFNQQSBhcHBzLCBpZiB0aGUgdXNlciBwcm92aWRlZCBhIHBhdGNoUm91dGVzT25OYXZpZ2F0aW9uIGltcGxlbWVudGF0aW9uIGFuZFxuICAvLyBvdXIgaW5pdGlhbCBtYXRjaCBpcyBhIHNwbGF0IHJvdXRlLCBjbGVhciB0aGVtIG91dCBzbyB3ZSBydW4gdGhyb3VnaCBsYXp5XG4gIC8vIGRpc2NvdmVyeSBvbiBoeWRyYXRpb24gaW4gY2FzZSB0aGVyZSdzIGEgbW9yZSBhY2N1cmF0ZSBsYXp5IHJvdXRlIG1hdGNoLlxuICAvLyBJbiBTU1IgYXBwcyAod2l0aCBgaHlkcmF0aW9uRGF0YWApLCB3ZSBleHBlY3QgdGhhdCB0aGUgc2VydmVyIHdpbGwgc2VuZFxuICAvLyB1cCB0aGUgcHJvcGVyIG1hdGNoZWQgcm91dGVzIHNvIHdlIGRvbid0IHdhbnQgdG8gcnVuIGxhenkgZGlzY292ZXJ5IG9uXG4gIC8vIGluaXRpYWwgaHlkcmF0aW9uIGFuZCB3YW50IHRvIGh5ZHJhdGUgaW50byB0aGUgc3BsYXQgcm91dGUuXG4gIGlmIChpbml0aWFsTWF0Y2hlcyAmJiAhaW5pdC5oeWRyYXRpb25EYXRhKSB7XG4gICAgbGV0IGZvZ09mV2FyID0gY2hlY2tGb2dPZldhcihpbml0aWFsTWF0Y2hlcywgZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICBpZiAoZm9nT2ZXYXIuYWN0aXZlKSB7XG4gICAgICBpbml0aWFsTWF0Y2hlcyA9IG51bGw7XG4gICAgfVxuICB9XG4gIGxldCBpbml0aWFsaXplZDtcbiAgaWYgKCFpbml0aWFsTWF0Y2hlcykge1xuICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBbXTtcbiAgICAvLyBJZiBwYXJ0aWFsIGh5ZHJhdGlvbiBhbmQgZm9nIG9mIHdhciBpcyBlbmFibGVkLCB3ZSB3aWxsIGJlIHJ1bm5pbmdcbiAgICAvLyBgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb25gIGR1cmluZyBoeWRyYXRpb24gc28gaW5jbHVkZSBhbnkgcGFydGlhbCBtYXRjaGVzIGFzXG4gICAgLy8gdGhlIGluaXRpYWwgbWF0Y2hlcyBzbyB3ZSBjYW4gcHJvcGVybHkgcmVuZGVyIGBIeWRyYXRlRmFsbGJhY2tgJ3NcbiAgICBpZiAoZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24pIHtcbiAgICAgIGxldCBmb2dPZldhciA9IGNoZWNrRm9nT2ZXYXIobnVsbCwgZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmIChmb2dPZldhci5hY3RpdmUgJiYgZm9nT2ZXYXIubWF0Y2hlcykge1xuICAgICAgICBpbml0aWFsTWF0Y2hlcyA9IGZvZ09mV2FyLm1hdGNoZXM7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxhenkpKSB7XG4gICAgLy8gQWxsIGluaXRpYWxNYXRjaGVzIG5lZWQgdG8gYmUgbG9hZGVkIGJlZm9yZSB3ZSdyZSByZWFkeS4gIElmIHdlIGhhdmUgbGF6eVxuICAgIC8vIGZ1bmN0aW9ucyBhcm91bmQgc3RpbGwgdGhlbiB3ZSdsbCBuZWVkIHRvIHJ1biB0aGVtIGluIGluaXRpYWxpemUoKVxuICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoIWluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxvYWRlcikpIHtcbiAgICAvLyBJZiB3ZSd2ZSBnb3Qgbm8gbG9hZGVycyB0byBydW4sIHRoZW4gd2UncmUgZ29vZCB0byBnb1xuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgIC8vIElmIHBhcnRpYWwgaHlkcmF0aW9uIGlzIGVuYWJsZWQsIHdlJ3JlIGluaXRpYWxpemVkIHNvIGxvbmcgYXMgd2Ugd2VyZVxuICAgIC8vIHByb3ZpZGVkIHdpdGggaHlkcmF0aW9uRGF0YSBmb3IgZXZlcnkgcm91dGUgd2l0aCBhIGxvYWRlciwgYW5kIG5vIGxvYWRlcnNcbiAgICAvLyB3ZXJlIG1hcmtlZCBmb3IgZXhwbGljaXQgaHlkcmF0aW9uXG4gICAgbGV0IGxvYWRlckRhdGEgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgPyBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSA6IG51bGw7XG4gICAgbGV0IGVycm9ycyA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5lcnJvcnMgOiBudWxsO1xuICAgIC8vIElmIGVycm9ycyBleGlzdCwgZG9uJ3QgY29uc2lkZXIgcm91dGVzIGJlbG93IHRoZSBib3VuZGFyeVxuICAgIGlmIChlcnJvcnMpIHtcbiAgICAgIGxldCBpZHggPSBpbml0aWFsTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBlcnJvcnNbbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZCk7XG4gICAgICBpbml0aWFsaXplZCA9IGluaXRpYWxNYXRjaGVzLnNsaWNlKDAsIGlkeCArIDEpLmV2ZXJ5KG0gPT4gIXNob3VsZExvYWRSb3V0ZU9uSHlkcmF0aW9uKG0ucm91dGUsIGxvYWRlckRhdGEsIGVycm9ycykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0aWFsaXplZCA9IGluaXRpYWxNYXRjaGVzLmV2ZXJ5KG0gPT4gIXNob3VsZExvYWRSb3V0ZU9uSHlkcmF0aW9uKG0ucm91dGUsIGxvYWRlckRhdGEsIGVycm9ycykpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaXRob3V0IHBhcnRpYWwgaHlkcmF0aW9uIC0gd2UncmUgaW5pdGlhbGl6ZWQgaWYgd2Ugd2VyZSBwcm92aWRlZCBhbnlcbiAgICAvLyBoeWRyYXRpb25EYXRhIC0gd2hpY2ggaXMgZXhwZWN0ZWQgdG8gYmUgY29tcGxldGVcbiAgICBpbml0aWFsaXplZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICB9XG4gIGxldCByb3V0ZXI7XG4gIGxldCBzdGF0ZSA9IHtcbiAgICBoaXN0b3J5QWN0aW9uOiBpbml0Lmhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBpbml0Lmhpc3RvcnkubG9jYXRpb24sXG4gICAgbWF0Y2hlczogaW5pdGlhbE1hdGNoZXMsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgIC8vIERvbid0IHJlc3RvcmUgb24gaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGlmIHdlIHdlcmUgU1NSJ2RcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsID8gZmFsc2UgOiBudWxsLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldDogZmFsc2UsXG4gICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICBsb2FkZXJEYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgfHwge30sXG4gICAgYWN0aW9uRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5hY3Rpb25EYXRhIHx8IG51bGwsXG4gICAgZXJyb3JzOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyB8fCBpbml0aWFsRXJyb3JzLFxuICAgIGZldGNoZXJzOiBuZXcgTWFwKCksXG4gICAgYmxvY2tlcnM6IG5ldyBNYXAoKVxuICB9O1xuICAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tXG4gIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbilcbiAgbGV0IHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBwcmV2ZW50IHRoZSBzY3JvbGwgcmVzZXQgaWYgc2Nyb2xsIGNhbm5vdFxuICAvLyBiZSByZXN0b3JlZD9cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjtcbiAgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gZW5hYmxlIGRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24/XG4gIGxldCBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gZmFsc2U7XG4gIC8vIFN0b3JlIGFwcGxpZWQgdmlldyB0cmFuc2l0aW9ucyBzbyB3ZSBjYW4gYXBwbHkgdGhlbSBvbiBQT1BcbiAgbGV0IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMgPSBuZXcgTWFwKCk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIHBlcnNpc3RpbmcgYXBwbGllZCB0cmFuc2l0aW9ucyB0byBzZXNzaW9uU3RvcmFnZVxuICBsZXQgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyID0gbnVsbDtcbiAgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYVxuICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZFxuICBsZXQgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRvcigpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSByb3V0ZXMgdGhhdCByZXF1aXJlIHJldmFsaWRhdGlvbiBkdWVcbiAgLy8gdG8gYSBjYW5jZWxsZWQgZGVmZXJyZWQgb24gYWN0aW9uIHN1Ym1pc3Npb25cbiAgbGV0IGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgZmV0Y2hlciBsb2FkcyB0aGF0IHdlcmUgY2FuY2VsbGVkIGJ5IGFuXG4gIC8vIGFjdGlvbiBuYXZpZ2F0aW9uIGFuZCByZXF1aXJlIHJldmFsaWRhdGlvblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gbmV3IFNldCgpO1xuICAvLyBBYm9ydENvbnRyb2xsZXJzIGZvciBhbnkgaW4tZmxpZ2h0IGZldGNoZXJzXG4gIGxldCBmZXRjaENvbnRyb2xsZXJzID0gbmV3IE1hcCgpO1xuICAvLyBUcmFjayBsb2FkcyBiYXNlZCBvbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBzdGFydGVkXG4gIGxldCBpbmNyZW1lbnRpbmdMb2FkSWQgPSAwO1xuICAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gLTE7XG4gIC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIGRhdGEgcmVsb2FkcyBhcyBhIHJlc3VsdCBvZiB0aGVpciBhY3Rpb25zXG4gIGxldCBmZXRjaFJlbG9hZElkcyA9IG5ldyBNYXAoKTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgcmVkaXJlY3QgbmF2aWdhdGlvbnNcbiAgbGV0IGZldGNoUmVkaXJlY3RJZHMgPSBuZXcgU2V0KCk7XG4gIC8vIE1vc3QgcmVjZW50IGhyZWYvbWF0Y2ggZm9yIGZldGNoZXIubG9hZCBjYWxscyBmb3IgZmV0Y2hlcnNcbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwKCk7XG4gIC8vIFJlZi1jb3VudCBtb3VudGVkIGZldGNoZXJzIHNvIHdlIGtub3cgd2hlbiBpdCdzIG9rIHRvIGNsZWFuIHRoZW0gdXBcbiAgbGV0IGFjdGl2ZUZldGNoZXJzID0gbmV3IE1hcCgpO1xuICAvLyBGZXRjaGVycyB0aGF0IGhhdmUgcmVxdWVzdGVkIGEgZGVsZXRlIHdoZW4gdXNpbmcgdjdfZmV0Y2hlclBlcnNpc3QsXG4gIC8vIHRoZXknbGwgYmUgb2ZmaWNpYWxseSByZW1vdmVkIGFmdGVyIHRoZXkgcmV0dXJuIHRvIGlkbGVcbiAgbGV0IGRlbGV0ZWRGZXRjaGVycyA9IG5ldyBTZXQoKTtcbiAgLy8gU3RvcmUgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBmb3IgYWN0aXZlIHJvdXRlIG1hdGNoZXMuICBXaGVuIGFcbiAgLy8gcm91dGUgbG9hZGVyIHJldHVybnMgZGVmZXIoKSB3ZSBzdGljayBvbmUgaW4gaGVyZS4gIFRoZW4sIHdoZW4gYSBuZXN0ZWRcbiAgLy8gcHJvbWlzZSByZXNvbHZlcyB3ZSB1cGRhdGUgbG9hZGVyRGF0YS4gIElmIGEgbmV3IG5hdmlnYXRpb24gc3RhcnRzIHdlXG4gIC8vIGNhbmNlbCBhY3RpdmUgZGVmZXJyZWRzIGZvciBlbGltaW5hdGVkIHJvdXRlcy5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwKCk7XG4gIC8vIEZsYWcgdG8gaWdub3JlIHRoZSBuZXh0IGhpc3RvcnkgdXBkYXRlLCBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZSBVUkwgY2hhbmdlIG9uXG4gIC8vIGEgUE9QIG5hdmlnYXRpb24gdGhhdCB3YXMgYmxvY2tlZCBieSB0aGUgdXNlciB3aXRob3V0IHRvdWNoaW5nIHJvdXRlciBzdGF0ZVxuICBsZXQgdW5ibG9ja0Jsb2NrZXJIaXN0b3J5VXBkYXRlID0gdW5kZWZpbmVkO1xuICAvLyBJbml0aWFsaXplIHRoZSByb3V0ZXIsIGFsbCBzaWRlIGVmZmVjdHMgc2hvdWxkIGJlIGtpY2tlZCBvZmYgZnJvbSBoZXJlLlxuICAvLyBJbXBsZW1lbnRlZCBhcyBhIEZsdWVudCBBUEkgZm9yIGVhc2Ugb2Y6XG4gIC8vICAgbGV0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcihpbml0KS5pbml0aWFsaXplKCk7XG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlXG4gICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhY3Rpb246IGhpc3RvcnlBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSA9IF9yZWY7XG4gICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgIC8vIGJsb2NrZWQgUE9QIG5hdmlnYXRpb25cbiAgICAgIGlmICh1bmJsb2NrQmxvY2tlckhpc3RvcnlVcGRhdGUpIHtcbiAgICAgICAgdW5ibG9ja0Jsb2NrZXJIaXN0b3J5VXBkYXRlKCk7XG4gICAgICAgIHVuYmxvY2tCbG9ja2VySGlzdG9yeVVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2FybmluZyhibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDAgfHwgZGVsdGEgIT0gbnVsbCwgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArIFwidGhhdCB3YXMgbm90IGNyZWF0ZWQgYnkgQHJlbWl4LXJ1bi9yb3V0ZXIuIFRoaXMgd2lsbCBmYWlsIHNpbGVudGx5IGluIFwiICsgXCJwcm9kdWN0aW9uLiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgdGhlIHJvdXRlciBcIiArIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArIFwicm91dGVyIG5hdmlnYXRpb24gQVBJcy4gIFRoaXMgY2FuIGFsc28gaGFwcGVuIGlmIHlvdSBhcmUgdXNpbmcgXCIgKyBcImNyZWF0ZUhhc2hSb3V0ZXIgYW5kIHRoZSB1c2VyIG1hbnVhbGx5IGNoYW5nZXMgdGhlIFVSTC5cIik7XG4gICAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICAgIH0pO1xuICAgICAgaWYgKGJsb2NrZXJLZXkgJiYgZGVsdGEgIT0gbnVsbCkge1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgVUksIGJ1dCBkb24ndCB1cGRhdGUgcm91dGVyIHN0YXRlXG4gICAgICAgIGxldCBuZXh0SGlzdG9yeVVwZGF0ZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICB1bmJsb2NrQmxvY2tlckhpc3RvcnlVcGRhdGUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhICogLTEpO1xuICAgICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxvY2F0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZCwgYWZ0ZXIgdGhlIHVybFxuICAgICAgICAgICAgLy8gcmVzdG9yYXRpb24gaXMgYWxzbyBjb21wbGV0ZS4gIFNlZTpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMTYxM1xuICAgICAgICAgICAgbmV4dEhpc3RvcnlVcGRhdGVQcm9taXNlLnRoZW4oKCkgPT4gaW5pdC5oaXN0b3J5LmdvKGRlbHRhKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAvLyBGSVhNRTogVGhpcyBmZWVscyBncm9zcy4gIEhvdyBjYW4gd2UgY2xlYW51cCB0aGUgbGluZXMgYmV0d2VlblxuICAgICAgLy8gc2Nyb2xsUmVzdG9yYXRpb24vYXBwbGllZFRyYW5zaXRpb25zIHBlcnNpc3RhbmNlP1xuICAgICAgcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgbGV0IF9zYXZlQXBwbGllZFRyYW5zaXRpb25zID0gKCkgPT4gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgcm91dGVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSAoKSA9PiByb3V0ZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICB9XG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIC8vIE5vdGUgd2UgZG9uJ3QgZG8gYW55IGhhbmRsaW5nIG9mIGxhenkgaGVyZS4gIEZvciBTUEEncyBpdCdsbCBnZXQgaGFuZGxlZFxuICAgIC8vIGluIHRoZSBub3JtYWwgbmF2aWdhdGlvbiBmbG93LiAgRm9yIFNTUiBpdCdzIGV4cGVjdGVkIHRoYXQgbGF6eSBtb2R1bGVzIGFyZVxuICAgIC8vIHJlc29sdmVkIHByaW9yIHRvIHJvdXRlciBjcmVhdGlvbiBzaW5jZSB3ZSBjYW4ndCBnbyBpbnRvIGEgZmFsbGJhY2tFbGVtZW50XG4gICAgLy8gVUkgZm9yIFNTUidkIGFwcHNcbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgaW5pdGlhbEh5ZHJhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cbiAgLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzXG4gIGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHVubGlzdGVuSGlzdG9yeSkge1xuICAgICAgdW5saXN0ZW5IaXN0b3J5KCk7XG4gICAgfVxuICAgIGlmIChyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9XG4gIC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShuZXdTdGF0ZSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAvLyBQcmVwIGZldGNoZXIgY2xlYW51cCBzbyB3ZSBjYW4gdGVsbCB0aGUgVUkgd2hpY2ggZmV0Y2hlciBkYXRhIGVudHJpZXNcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZFxuICAgIGxldCBjb21wbGV0ZWRGZXRjaGVycyA9IFtdO1xuICAgIGxldCBkZWxldGVkRmV0Y2hlcnNLZXlzID0gW107XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIFVubW91bnRlZCBmcm9tIHRoZSBVSSBhbmQgY2FuIGJlIHRvdGFsbHkgcmVtb3ZlZFxuICAgICAgICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJldHVybmVkIHRvIGlkbGUgYnV0IHN0aWxsIG1vdW50ZWQgaW4gdGhlIFVJLCBzbyBzZW1pLXJlbWFpbnMgZm9yXG4gICAgICAgICAgICAvLyByZXZhbGlkYXRpb25zIGFuZCBzdWNoXG4gICAgICAgICAgICBjb21wbGV0ZWRGZXRjaGVycy5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGEgbG9jYWwgY29weSBzbyB0aGF0IGlmIGZsdXNoU3luYyBpcyB1c2VkIGFuZCB3ZSBlbmQgdXBcbiAgICAvLyByZW1vdmluZyBhbmQgYWRkaW5nIGEgbmV3IHN1YnNjcmliZXIgZHVlIHRvIHRoZSB1c2VDYWxsYmFjayBkZXBlbmRlbmNpZXMsXG4gICAgLy8gd2UgZG9uJ3QgZ2V0IG91cnNlbHZlcyBpbnRvIGEgbG9vcCBjYWxsaW5nIHRoZSBuZXcgc3Vic2NyaWJlciBpbW1lZGlhdGVseVxuICAgIFsuLi5zdWJzY3JpYmVyc10uZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoc3RhdGUsIHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVyczogZGVsZXRlZEZldGNoZXJzS2V5cyxcbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0czogb3B0cy52aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICBmbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSkpO1xuICAgIC8vIFJlbW92ZSBpZGxlIGZldGNoZXJzIGZyb20gc3RhdGUgc2luY2Ugd2Ugb25seSBjYXJlIGFib3V0IGluLWZsaWdodCBmZXRjaGVycy5cbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBjb21wbGV0ZWRGZXRjaGVycy5mb3JFYWNoKGtleSA9PiBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KSk7XG4gICAgICBkZWxldGVkRmV0Y2hlcnNLZXlzLmZvckVhY2goa2V5ID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgfVxuICB9XG4gIC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIG5ld1N0YXRlLCBfdGVtcCkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG4gICAgbGV0IHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfbG9jYXRpb24kc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZS5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgbGV0IGFjdGlvbkRhdGE7XG4gICAgaWYgKG5ld1N0YXRlLmFjdGlvbkRhdGEpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdTdGF0ZS5hY3Rpb25EYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjdGlvbkRhdGEgPSBuZXdTdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW1wdHkgYWN0aW9uRGF0YSAtPiBjbGVhciBwcmlvciBhY3Rpb25EYXRhIGR1ZSB0byBhbiBhY3Rpb24gZXJyb3JcbiAgICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FjdGlvblJlbG9hZCkge1xuICAgICAgLy8gS2VlcCB0aGUgY3VycmVudCBkYXRhIGlmIHdlJ3JlIHdyYXBwaW5nIHVwIHRoZSBhY3Rpb24gcmVsb2FkXG4gICAgICBhY3Rpb25EYXRhID0gc3RhdGUuYWN0aW9uRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xlYXIgYWN0aW9uRGF0YSBvbiBhbnkgb3RoZXIgY29tcGxldGVkIG5hdmlnYXRpb25zXG4gICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcbiAgICBsZXQgbG9hZGVyRGF0YSA9IG5ld1N0YXRlLmxvYWRlckRhdGEgPyBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubWF0Y2hlcyB8fCBbXSwgbmV3U3RhdGUuZXJyb3JzKSA6IHN0YXRlLmxvYWRlckRhdGE7XG4gICAgLy8gT24gYSBzdWNjZXNzZnVsIG5hdmlnYXRpb24gd2UgY2FuIGFzc3VtZSB3ZSBnb3QgdGhyb3VnaCBhbGwgYmxvY2tlcnNcbiAgICAvLyBzbyB3ZSBjYW4gc3RhcnQgZnJlc2hcbiAgICBsZXQgYmxvY2tlcnMgPSBzdGF0ZS5ibG9ja2VycztcbiAgICBpZiAoYmxvY2tlcnMuc2l6ZSA+IDApIHtcbiAgICAgIGJsb2NrZXJzID0gbmV3IE1hcChibG9ja2Vycyk7XG4gICAgICBibG9ja2Vycy5mb3JFYWNoKChfLCBrKSA9PiBibG9ja2Vycy5zZXQoaywgSURMRV9CTE9DS0VSKSk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyByZXNwZWN0IHRoZSB1c2VyIGZsYWcuICBPdGhlcndpc2UgZG9uJ3QgcmVzZXQgb24gbXV0YXRpb25cbiAgICAvLyBzdWJtaXNzaW9uIG5hdmlnYXRpb25zIHVubGVzcyB0aGV5IHJlZGlyZWN0XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHwgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmICgoX2xvY2F0aW9uJHN0YXRlMiA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlMi5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgLy8gQ29tbWl0IGFueSBpbi1mbGlnaHQgcm91dGVzIGF0IHRoZSBlbmQgb2YgdGhlIEhNUiByZXZhbGlkYXRpb24gXCJuYXZpZ2F0aW9uXCJcbiAgICBpZiAoaW5GbGlnaHREYXRhUm91dGVzKSB7XG4gICAgICBkYXRhUm91dGVzID0gaW5GbGlnaHREYXRhUm91dGVzO1xuICAgICAgaW5GbGlnaHREYXRhUm91dGVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlB1c2gpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9XG4gICAgbGV0IHZpZXdUcmFuc2l0aW9uT3B0cztcbiAgICAvLyBPbiBQT1AsIGVuYWJsZSB0cmFuc2l0aW9ucyBpZiB0aGV5IHdlcmUgZW5hYmxlZCBvbiB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUG9wKSB7XG4gICAgICAvLyBGb3J3YXJkIHRha2VzIHByZWNlZGVuY2Ugc28gdGhleSBiZWhhdmUgbGlrZSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvblxuICAgICAgbGV0IHByaW9yUGF0aHMgPSBhcHBsaWVkVmlld1RyYW5zaXRpb25zLmdldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBpZiAocHJpb3JQYXRocyAmJiBwcmlvclBhdGhzLmhhcyhsb2NhdGlvbi5wYXRobmFtZSkpIHtcbiAgICAgICAgdmlld1RyYW5zaXRpb25PcHRzID0ge1xuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChhcHBsaWVkVmlld1RyYW5zaXRpb25zLmhhcyhsb2NhdGlvbi5wYXRobmFtZSkpIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIHByZXZpb3VzIGZvcndhcmQgbmF2LCBhc3N1bWUgd2UncmUgcG9wcGluZyBiYWNrIHRvXG4gICAgICAgIC8vIHRoZSBuZXcgbG9jYXRpb24gYW5kIGVuYWJsZSBpZiB0aGF0IGxvY2F0aW9uIHByZXZpb3VzbHkgZW5hYmxlZFxuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkKSB7XG4gICAgICAvLyBTdG9yZSB0aGUgYXBwbGllZCB0cmFuc2l0aW9uIG9uIFBVU0gvUkVQTEFDRVxuICAgICAgbGV0IHRvUGF0aHMgPSBhcHBsaWVkVmlld1RyYW5zaXRpb25zLmdldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBpZiAodG9QYXRocykge1xuICAgICAgICB0b1BhdGhzLmFkZChsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b1BhdGhzID0gbmV3IFNldChbbG9jYXRpb24ucGF0aG5hbWVdKTtcbiAgICAgICAgYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5zZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUsIHRvUGF0aHMpO1xuICAgICAgfVxuICAgICAgdmlld1RyYW5zaXRpb25PcHRzID0ge1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7fSwgbmV3U3RhdGUsIHtcbiAgICAgIGFjdGlvbkRhdGEsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgaGlzdG9yeUFjdGlvbjogcGVuZGluZ0FjdGlvbixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgaW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IHN0YXRlLm1hdGNoZXMpLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgYmxvY2tlcnNcbiAgICB9KSwge1xuICAgICAgdmlld1RyYW5zaXRpb25PcHRzLFxuICAgICAgZmx1c2hTeW5jOiBmbHVzaFN5bmMgPT09IHRydWVcbiAgICB9KTtcbiAgICAvLyBSZXNldCBzdGF0ZWZ1bCBuYXZpZ2F0aW9uIHZhcnNcbiAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG4gICAgcGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBuYXZpZ2F0aW9uIGV2ZW50LCB3aGljaCBjYW4gZWl0aGVyIGJlIGEgbnVtZXJpY2FsIFBPUCBvciBhIFBVU0hcbiAgLy8gcmVwbGFjZSB3aXRoIGFuIG9wdGlvbmFsIHN1Ym1pc3Npb25cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUodG8sIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpbml0Lmhpc3RvcnkuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVUbyhzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcywgYmFzZW5hbWUsIGZ1dHVyZS52N19wcmVwZW5kQmFzZW5hbWUsIHRvLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnJvbVJvdXRlSWQsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucmVsYXRpdmUpO1xuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCwgZmFsc2UsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gc3RhdGUubG9jYXRpb247XG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBwYXRoLCBvcHRzICYmIG9wdHMuc3RhdGUpO1xuICAgIC8vIFdoZW4gdXNpbmcgbmF2aWdhdGUgYXMgYSBQVVNIL1JFUExBQ0Ugd2UgYXJlbid0IHJlYWRpbmcgYW4gYWxyZWFkeS1lbmNvZGVkXG4gICAgLy8gVVJMIGZyb20gd2luZG93LmxvY2F0aW9uLCBzbyB3ZSBuZWVkIHRvIGVuY29kZSBpdCBoZXJlIHNvIHRoZSBiZWhhdmlvclxuICAgIC8vIHJlbWFpbnMgdGhlIHNhbWUgYXMgUE9QIGFuZCBub24tZGF0YS1yb3V0ZXIgdXNhZ2VzLiAgbmV3IFVSTCgpIGRvZXMgYWxsXG4gICAgLy8gdGhlIHNhbWUgZW5jb2Rpbmcgd2UnZCBnZXQgZnJvbSBhIGhpc3RvcnkucHVzaFN0YXRlL3dpbmRvdy5sb2NhdGlvbiByZWFkXG4gICAgLy8gd2l0aG91dCBoYXZpbmcgdG8gdG91Y2ggaGlzdG9yeVxuICAgIG5leHRMb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbihuZXh0TG9jYXRpb24pKTtcbiAgICBsZXQgdXNlclJlcGxhY2UgPSBvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsID8gb3B0cy5yZXBsYWNlIDogdW5kZWZpbmVkO1xuICAgIGxldCBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgaWYgKHVzZXJSZXBsYWNlID09PSB0cnVlKSB7XG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfSBlbHNlIGlmICh1c2VyUmVwbGFjZSA9PT0gZmFsc2UpIDsgZWxzZSBpZiAoc3VibWlzc2lvbiAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSAmJiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAvLyBCeSBkZWZhdWx0IG9uIHN1Ym1pc3Npb25zIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uIHdlIFJFUExBQ0Ugc28gdGhhdFxuICAgICAgLy8gdXNlcnMgZG9uJ3QgaGF2ZSB0byBkb3VibGUtY2xpY2sgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCB0byB0aGUgcHJpb3JcbiAgICAgIC8vIGxvY2F0aW9uLiAgSWYgdGhlIHVzZXIgcmVkaXJlY3RzIHRvIGEgZGlmZmVyZW50IGxvY2F0aW9uIGZyb20gdGhlXG4gICAgICAvLyBhY3Rpb24vbG9hZGVyIHRoaXMgd2lsbCBiZSBpZ25vcmVkIGFuZCB0aGUgcmVkaXJlY3Qgd2lsbCBiZSBhIFBVU0hcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IG9wdHMgJiYgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiBpbiBvcHRzID8gb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGZsdXNoU3luYyA9IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZTtcbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gU2VuZCB0aGUgc2FtZSBuYXZpZ2F0aW9uIHRocm91Z2hcbiAgICAgICAgICBuYXZpZ2F0ZSh0bywgb3B0cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2UsXG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbjogb3B0cyAmJiBvcHRzLnZpZXdUcmFuc2l0aW9uLFxuICAgICAgZmx1c2hTeW5jXG4gICAgfSk7XG4gIH1cbiAgLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgcmV2YWxpZGF0aW9uOiBcImxvYWRpbmdcIlxuICAgIH0pO1xuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBzdWJtaXR0aW5nIGFuIGFjdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24sIHdlJ2xsIGp1c3QgbGV0IHRoZSBmb2xsb3cgdXAgbG9hZGVyIGV4ZWN1dGlvbiBjYWxsIGFsbCBsb2FkZXJzXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwic3VibWl0dGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBpbiBhbiBpZGxlIHN0YXRlLCBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uIGZvciB0aGUgY3VycmVudFxuICAgIC8vIGFjdGlvbi9sb2NhdGlvbiBhbmQgbWFyayBpdCBhcyB1bmludGVycnVwdGVkLCB3aGljaCB3aWxsIHNraXAgdGhlIGhpc3RvcnlcbiAgICAvLyB1cGRhdGUgaW4gY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBsb2FkaW5nIHN0YXRlLCBqdXN0IHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiB0byB0aGUgbmF2aWdhdGlvbi5sb2NhdGlvbiBidXQgZG8gbm90IHRyaWdnZXIgYW4gdW5pbnRlcnJ1cHRlZFxuICAgIC8vIHJldmFsaWRhdGlvbiBzbyB0aGF0IGhpc3RvcnkgY29ycmVjdGx5IHVwZGF0ZXMgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICBzdGFydE5hdmlnYXRpb24ocGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICBvdmVycmlkZU5hdmlnYXRpb246IHN0YXRlLm5hdmlnYXRpb24sXG4gICAgICAvLyBQcm94eSB0aHJvdWdoIGFueSByZW5kaW5nIHZpZXcgdHJhbnNpdGlvblxuICAgICAgZW5hYmxlVmlld1RyYW5zaXRpb246IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICAvLyBTdGFydCBhIG5hdmlnYXRpb24gdG8gdGhlIGdpdmVuIGFjdGlvbi9sb2NhdGlvbi4gIENhbiBvcHRpb25hbGx5IHByb3ZpZGUgYVxuICAvLyBvdmVycmlkZU5hdmlnYXRpb24gd2hpY2ggd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsTG9hZCBpbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0XG4gIC8vIG5hdmlnYXRpb25cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uLCBvcHRzKSB7XG4gICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nXG4gICAgLy8gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb25zIHVubGVzcyB0b2xkIG90aGVyd2lzZSwgc2luY2Ugd2Ugd2FudCB0aGlzXG4gICAgLy8gbmV3IG5hdmlnYXRpb24gdG8gdXBkYXRlIGhpc3Rvcnkgbm9ybWFsbHlcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSAob3B0cyAmJiBvcHRzLnN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgPT09IHRydWU7XG4gICAgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gKG9wdHMgJiYgb3B0cy5lbmFibGVWaWV3VHJhbnNpdGlvbikgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IGZvZ09mV2FyID0gY2hlY2tGb2dPZldhcihtYXRjaGVzLCByb3V0ZXNUb1VzZSwgbG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIGlmIChmb2dPZldhci5hY3RpdmUgJiYgZm9nT2ZXYXIubWF0Y2hlcykge1xuICAgICAgbWF0Y2hlcyA9IGZvZ09mV2FyLm1hdGNoZXM7XG4gICAgfVxuICAgIC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQge1xuICAgICAgICBlcnJvcixcbiAgICAgICAgbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGhhbmRsZU5hdmlnYXRpb25hbDQwNChsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlIGFuZCBub3QgYSByZXZhbGlkYXRpb24gb3JcbiAgICAvLyBtdXRhdGlvbiBzdWJtaXNzaW9uLlxuICAgIC8vXG4gICAgLy8gSWdub3JlIG9uIGluaXRpYWwgcGFnZSBsb2FkcyBiZWNhdXNlIHNpbmNlIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiB3aWxsIGFsd2F5c1xuICAgIC8vIGJlIFwic2FtZSBoYXNoXCIuICBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPlxuICAgIC8vIHdoaWNoIHdpbGwgZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoc3RhdGUuaW5pdGlhbGl6ZWQgJiYgIWlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgJiYgaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBjb250cm9sbGVyL1JlcXVlc3QgZm9yIHRoaXMgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvblJlc3VsdDtcbiAgICBpZiAob3B0cyAmJiBvcHRzLnBlbmRpbmdFcnJvcikge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmdFcnJvciwgaXQgbWVhbnMgdGhlIHVzZXIgYXR0ZW1wdGVkIGEgR0VUIHN1Ym1pc3Npb25cbiAgICAgIC8vIHdpdGggYmluYXJ5IEZvcm1EYXRhIHNvIGFzc2lnbiBoZXJlIGFuZCBza2lwIHRvIGhhbmRsZUxvYWRlcnMuICBUaGF0XG4gICAgICAvLyB3YXkgd2UgaGFuZGxlIGNhbGxpbmcgbG9hZGVycyBhYm92ZSB0aGUgYm91bmRhcnkgZXRjLiAgSXQncyBub3QgcmVhbGx5XG4gICAgICAvLyBkaWZmZXJlbnQgZnJvbSBhbiBhY3Rpb25FcnJvciBpbiB0aGF0IHNlbnNlLlxuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdCA9IFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkLCB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBvcHRzLnBlbmRpbmdFcnJvclxuICAgICAgfV07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywgZm9nT2ZXYXIuYWN0aXZlLCB7XG4gICAgICAgIHJlcGxhY2U6IG9wdHMucmVwbGFjZSxcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIGlmIChhY3Rpb25SZXN1bHQuc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgcmVjZWl2ZWQgYSA0MDQgZnJvbSBoYW5kbGVBY3Rpb24sIGl0J3MgYmVjYXVzZSB3ZSBjb3VsZG4ndCBsYXppbHlcbiAgICAgIC8vIGRpc2NvdmVyIHRoZSBkZXN0aW5hdGlvbiByb3V0ZSBzbyB3ZSBkb24ndCB3YW50IHRvIGNhbGwgbG9hZGVyc1xuICAgICAgaWYgKGFjdGlvblJlc3VsdC5wZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgICAgIGxldCBbcm91dGVJZCwgcmVzdWx0XSA9IGFjdGlvblJlc3VsdC5wZW5kaW5nQWN0aW9uUmVzdWx0O1xuICAgICAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpICYmIGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgJiYgcmVzdWx0LmVycm9yLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICAgICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgICAgIG1hdGNoZXM6IGFjdGlvblJlc3VsdC5tYXRjaGVzLFxuICAgICAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICAgICAgW3JvdXRlSWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1hdGNoZXMgPSBhY3Rpb25SZXN1bHQubWF0Y2hlcyB8fCBtYXRjaGVzO1xuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdCA9IGFjdGlvblJlc3VsdC5wZW5kaW5nQWN0aW9uUmVzdWx0O1xuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICAgIGZsdXNoU3luYyA9IGZhbHNlO1xuICAgICAgLy8gTm8gbmVlZCB0byBkbyBmb2cgb2Ygd2FyIG1hdGNoaW5nIGFnYWluIG9uIGxvYWRlciBleGVjdXRpb25cbiAgICAgIGZvZ09mV2FyLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgICByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCByZXF1ZXN0LnVybCwgcmVxdWVzdC5zaWduYWwpO1xuICAgIH1cbiAgICAvLyBDYWxsIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgc2hvcnRDaXJjdWl0ZWQsXG4gICAgICBtYXRjaGVzOiB1cGRhdGVkTWF0Y2hlcyxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgZm9nT2ZXYXIuYWN0aXZlLCBsb2FkaW5nTmF2aWdhdGlvbiwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5mZXRjaGVyU3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIG9wdHMgJiYgb3B0cy5pbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25SZXN1bHQpO1xuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBub3cgdGhhdCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZlxuICAgIC8vIHdlIHNob3J0IGNpcmN1aXRlZCBiZWNhdXNlIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciB3aWxsIGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBtYXRjaGVzOiB1cGRhdGVkTWF0Y2hlcyB8fCBtYXRjaGVzXG4gICAgfSwgZ2V0QWN0aW9uRGF0YUZvckNvbW1pdChwZW5kaW5nQWN0aW9uUmVzdWx0KSwge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGVcbiAgLy8gcmVkaXJlY3RzL2Vycm9yc1xuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIGlzRm9nT2ZXYXIsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBuYXZpZ2F0aW9uID0gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIG5hdmlnYXRpb25cbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSk7XG4gICAgaWYgKGlzRm9nT2ZXYXIpIHtcbiAgICAgIGxldCBkaXNjb3ZlclJlc3VsdCA9IGF3YWl0IGRpc2NvdmVyUm91dGVzKG1hdGNoZXMsIGxvY2F0aW9uLnBhdGhuYW1lLCByZXF1ZXN0LnNpZ25hbCk7XG4gICAgICBpZiAoZGlzY292ZXJSZXN1bHQudHlwZSA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgbGV0IGJvdW5kYXJ5SWQgPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KGRpc2NvdmVyUmVzdWx0LnBhcnRpYWxNYXRjaGVzKS5yb3V0ZS5pZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXRjaGVzOiBkaXNjb3ZlclJlc3VsdC5wYXJ0aWFsTWF0Y2hlcyxcbiAgICAgICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBbYm91bmRhcnlJZCwge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICAgIGVycm9yOiBkaXNjb3ZlclJlc3VsdC5lcnJvclxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKCFkaXNjb3ZlclJlc3VsdC5tYXRjaGVzKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICAgIHJvdXRlXG4gICAgICAgIH0gPSBoYW5kbGVOYXZpZ2F0aW9uYWw0MDQobG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBbcm91dGUuaWQsIHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXRjaGVzID0gZGlzY292ZXJSZXN1bHQubWF0Y2hlcztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJhY3Rpb25cIiwgc3RhdGUsIHJlcXVlc3QsIFthY3Rpb25NYXRjaF0sIG1hdGNoZXMsIG51bGwpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0c1thY3Rpb25NYXRjaC5yb3V0ZS5pZF07XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCByZXBsYWNlO1xuICAgICAgaWYgKG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwpIHtcbiAgICAgICAgcmVwbGFjZSA9IG9wdHMucmVwbGFjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBleHBsaWNpdHkgaW5kaWNhdGUgcmVwbGFjZSBiZWhhdmlvciwgcmVwbGFjZSBpZlxuICAgICAgICAvLyB3ZSByZWRpcmVjdGVkIHRvIHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uIHdlJ3JlIGN1cnJlbnRseSBhdCB0byBhdm9pZFxuICAgICAgICAvLyBkb3VibGUgYmFjay1idXR0b25zXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IG5vcm1hbGl6ZVJlZGlyZWN0TG9jYXRpb24ocmVzdWx0LnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIiksIG5ldyBVUkwocmVxdWVzdC51cmwpLCBiYXNlbmFtZSk7XG4gICAgICAgIHJlcGxhY2UgPSBsb2NhdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXF1ZXN0LCByZXN1bHQsIHRydWUsIHtcbiAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiBhcmUgUkVQTEFDRVxuICAgICAgLy8gbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGUgYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW5cbiAgICAgIC8vIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbCBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZVxuICAgICAgLy8gYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5XG4gICAgICAvLyBhZ2FpblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdDogW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdF1cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdDogW2FjdGlvbk1hdGNoLnJvdXRlLmlkLCByZXN1bHRdXG4gICAgfTtcbiAgfVxuICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBpc0ZvZ09mV2FyLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIGZldGNoZXJTdWJtaXNzaW9uLCByZXBsYWNlLCBpbml0aWFsSHlkcmF0aW9uLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb24gfHwgZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIC8vIElmIHRoaXMgd2FzIGEgcmVkaXJlY3QgZnJvbSBhbiBhY3Rpb24gd2UgZG9uJ3QgaGF2ZSBhIFwic3VibWlzc2lvblwiIGJ1dFxuICAgIC8vIHdlIGhhdmUgaXQgb24gdGhlIGxvYWRpbmcgbmF2aWdhdGlvbiBzbyB1c2UgdGhhdCBpZiBhdmFpbGFibGVcbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb24gfHwgZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKGxvYWRpbmdOYXZpZ2F0aW9uKTtcbiAgICAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuICAgIC8vIElmIHdlIGhhdmUgcGFydGlhbEh5ZHJhdGlvbiBlbmFibGVkLCB0aGVuIGRvbid0IHVwZGF0ZSB0aGUgc3RhdGUgZm9yIHRoZVxuICAgIC8vIGluaXRpYWwgZGF0YSBsb2FkIHNpbmNlIGl0J3Mgbm90IGEgXCJuYXZpZ2F0aW9uXCJcbiAgICBsZXQgc2hvdWxkVXBkYXRlTmF2aWdhdGlvblN0YXRlID0gIWlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiAmJiAoIWZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uIHx8ICFpbml0aWFsSHlkcmF0aW9uKTtcbiAgICAvLyBXaGVuIGZvZyBvZiB3YXIgaXMgZW5hYmxlZCwgd2UgZW50ZXIgb3VyIGBsb2FkaW5nYCBzdGF0ZSBlYXJsaWVyIHNvIHdlXG4gICAgLy8gY2FuIGRpc2NvdmVyIG5ldyByb3V0ZXMgZHVyaW5nIHRoZSBgbG9hZGluZ2Agc3RhdGUuICBXZSBza2lwIHRoaXMgaWZcbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IHJ1biBhY3Rpb25zIHNpbmNlIHdlIHdvdWxkIGhhdmUgZG9uZSBvdXIgbWF0Y2hpbmcgYWxyZWFkeS5cbiAgICAvLyBJZiB0aGUgY2hpbGRyZW4oKSBmdW5jdGlvbiB0aHJldyB0aGVuLCB3ZSB3YW50IHRvIHByb2NlZWQgd2l0aCB0aGVcbiAgICAvLyBwYXJ0aWFsIG1hdGNoZXMgaXQgZGlzY292ZXJlZC5cbiAgICBpZiAoaXNGb2dPZldhcikge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZU5hdmlnYXRpb25TdGF0ZSkge1xuICAgICAgICBsZXQgYWN0aW9uRGF0YSA9IGdldFVwZGF0ZWRBY3Rpb25EYXRhKHBlbmRpbmdBY3Rpb25SZXN1bHQpO1xuICAgICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgICAgbmF2aWdhdGlvbjogbG9hZGluZ05hdmlnYXRpb25cbiAgICAgICAgfSwgYWN0aW9uRGF0YSAhPT0gdW5kZWZpbmVkID8ge1xuICAgICAgICAgIGFjdGlvbkRhdGFcbiAgICAgICAgfSA6IHt9KSwge1xuICAgICAgICAgIGZsdXNoU3luY1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxldCBkaXNjb3ZlclJlc3VsdCA9IGF3YWl0IGRpc2NvdmVyUm91dGVzKG1hdGNoZXMsIGxvY2F0aW9uLnBhdGhuYW1lLCByZXF1ZXN0LnNpZ25hbCk7XG4gICAgICBpZiAoZGlzY292ZXJSZXN1bHQudHlwZSA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgbGV0IGJvdW5kYXJ5SWQgPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KGRpc2NvdmVyUmVzdWx0LnBhcnRpYWxNYXRjaGVzKS5yb3V0ZS5pZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXRjaGVzOiBkaXNjb3ZlclJlc3VsdC5wYXJ0aWFsTWF0Y2hlcyxcbiAgICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICAgIFtib3VuZGFyeUlkXTogZGlzY292ZXJSZXN1bHQuZXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKCFkaXNjb3ZlclJlc3VsdC5tYXRjaGVzKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICAgIHJvdXRlXG4gICAgICAgIH0gPSBoYW5kbGVOYXZpZ2F0aW9uYWw0MDQobG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0Y2hlcyA9IGRpc2NvdmVyUmVzdWx0Lm1hdGNoZXM7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBhY3RpdmVTdWJtaXNzaW9uLCBsb2NhdGlvbiwgZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gJiYgaW5pdGlhbEh5ZHJhdGlvbiA9PT0gdHJ1ZSwgZnV0dXJlLnY3X3NraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZGVsZXRlZEZldGNoZXJzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25SZXN1bHQpO1xuICAgIC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcbiAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocm91dGVJZCA9PiAhKG1hdGNoZXMgJiYgbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpIHx8IG1hdGNoZXNUb0xvYWQgJiYgbWF0Y2hlc1RvTG9hZC5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgLy8gQ29tbWl0IHBlbmRpbmcgZXJyb3IgaWYgd2UncmUgc2hvcnQgY2lyY3VpdGluZ1xuICAgICAgICBlcnJvcnM6IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHtcbiAgICAgICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3JcbiAgICAgICAgfSA6IG51bGxcbiAgICAgIH0sIGdldEFjdGlvbkRhdGFGb3JDb21taXQocGVuZGluZ0FjdGlvblJlc3VsdCksIHVwZGF0ZWRGZXRjaGVycyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFVwZGF0ZU5hdmlnYXRpb25TdGF0ZSkge1xuICAgICAgbGV0IHVwZGF0ZXMgPSB7fTtcbiAgICAgIGlmICghaXNGb2dPZldhcikge1xuICAgICAgICAvLyBPbmx5IHVwZGF0ZSBuYXZpZ2F0aW9uL2FjdGlvbk5EYXRhIGlmIHdlIGRpZG4ndCBhbHJlYWR5IGRvIGl0IGFib3ZlXG4gICAgICAgIHVwZGF0ZXMubmF2aWdhdGlvbiA9IGxvYWRpbmdOYXZpZ2F0aW9uO1xuICAgICAgICBsZXQgYWN0aW9uRGF0YSA9IGdldFVwZGF0ZWRBY3Rpb25EYXRhKHBlbmRpbmdBY3Rpb25SZXN1bHQpO1xuICAgICAgICBpZiAoYWN0aW9uRGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBkYXRlcy5hY3Rpb25EYXRhID0gYWN0aW9uRGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXBkYXRlcy5mZXRjaGVycyA9IGdldFVwZGF0ZWRSZXZhbGlkYXRpbmdGZXRjaGVycyhyZXZhbGlkYXRpbmdGZXRjaGVycyk7XG4gICAgICB9XG4gICAgICB1cGRhdGVTdGF0ZSh1cGRhdGVzLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4ge1xuICAgICAgYWJvcnRGZXRjaGVyKHJmLmtleSk7XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICAvLyBGZXRjaGVycyB1c2UgYW4gaW5kZXBlbmRlbnQgQWJvcnRDb250cm9sbGVyIHNvIHRoYXQgYWJvcnRpbmcgYSBmZXRjaGVyXG4gICAgICAgIC8vICh2aWEgZGVsZXRlRmV0Y2hlcikgZG9lcyBub3QgYWJvcnQgdGhlIHRyaWdnZXJpbmcgbmF2aWdhdGlvbiB0aGF0XG4gICAgICAgIC8vIHRyaWdnZXJlZCB0aGUgcmV2YWxpZGF0aW9uXG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gUHJveHkgbmF2aWdhdGlvbiBhYm9ydCB0aHJvdWdoIHRvIHJldmFsaWRhdGlvbiBmZXRjaGVyc1xuICAgIGxldCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMgPSAoKSA9PiByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKGYgPT4gYWJvcnRGZXRjaGVyKGYua2V5KSk7XG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUocmYua2V5KSk7XG4gICAgLy8gSWYgYW55IGxvYWRlcnMgcmV0dXJuZWQgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KGxvYWRlclJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVxdWVzdCwgcmVkaXJlY3QucmVzdWx0LCB0cnVlLCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KGZldGNoZXJSZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgLy8gZmV0Y2hSZWRpcmVjdElkcyBzbyBpdCBkb2Vzbid0IGdldCByZXZhbGlkYXRlZCBvbiB0aGUgbmV4dCBzZXQgb2ZcbiAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChyZWRpcmVjdC5rZXkpO1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVxdWVzdCwgcmVkaXJlY3QucmVzdWx0LCB0cnVlLCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIGxvYWRlclJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBXaXJlIHVwIHN1YnNjcmliZXJzIHRvIHVwZGF0ZSBsb2FkZXJEYXRhIGFzIHByb21pc2VzIHNldHRsZVxuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZWZlcnJlZERhdGEsIHJvdXRlSWQpID0+IHtcbiAgICAgIGRlZmVycmVkRGF0YS5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyBQcmVzZXJ2ZSBTU1IgZXJyb3JzIGR1cmluZyBwYXJ0aWFsIGh5ZHJhdGlvblxuICAgIGlmIChmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiAmJiBpbml0aWFsSHlkcmF0aW9uICYmIHN0YXRlLmVycm9ycykge1xuICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIHN0YXRlLmVycm9ycywgZXJyb3JzKTtcbiAgICB9XG4gICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpO1xuICAgIGxldCBzaG91bGRVcGRhdGVGZXRjaGVycyA9IHVwZGF0ZWRGZXRjaGVycyB8fCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBzaG91bGRVcGRhdGVGZXRjaGVycyA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VXBkYXRlZEFjdGlvbkRhdGEocGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIGlmIChwZW5kaW5nQWN0aW9uUmVzdWx0ICYmICFpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pKSB7XG4gICAgICAvLyBUaGlzIGlzIGNhc3QgdG8gYGFueWAgY3VycmVudGx5IGJlY2F1c2UgYFJvdXRlRGF0YWB1c2VzIGFueSBhbmQgaXRcbiAgICAgIC8vIHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlIHRvIHVzZSBhbnkuXG4gICAgICAvLyBUT0RPOiB2NyAtIGNoYW5nZSBgUm91dGVEYXRhYCB0byB1c2UgYHVua25vd25gIGluc3RlYWQgb2YgYGFueWBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5kYXRhXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoc3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHN0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRVcGRhdGVkUmV2YWxpZGF0aW5nRmV0Y2hlcnMocmV2YWxpZGF0aW5nRmV0Y2hlcnMpIHtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHJmLmtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHVuZGVmaW5lZCwgZmV0Y2hlciA/IGZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IE1hcChzdGF0ZS5mZXRjaGVycyk7XG4gIH1cbiAgLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuICBmdW5jdGlvbiBmZXRjaChrZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpIHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJvdXRlci5mZXRjaCgpIHdhcyBjYWxsZWQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLCBidXQgaXQgc2hvdWxkbid0IGJlLiBcIiArIFwiWW91IGFyZSBsaWtlbHkgY2FsbGluZyBhIHVzZUZldGNoZXIoKSBtZXRob2QgaW4gdGhlIGJvZHkgb2YgeW91ciBjb21wb25lbnQuIFwiICsgXCJUcnkgbW92aW5nIGl0IHRvIGEgdXNlRWZmZWN0IG9yIGEgY2FsbGJhY2suXCIpO1xuICAgIH1cbiAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgaHJlZiwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLCByb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBub3JtYWxpemVkUGF0aCwgYmFzZW5hbWUpO1xuICAgIGxldCBmb2dPZldhciA9IGNoZWNrRm9nT2ZXYXIobWF0Y2hlcywgcm91dGVzVG9Vc2UsIG5vcm1hbGl6ZWRQYXRoKTtcbiAgICBpZiAoZm9nT2ZXYXIuYWN0aXZlICYmIGZvZ09mV2FyLm1hdGNoZXMpIHtcbiAgICAgIG1hdGNoZXMgPSBmb2dPZldhci5tYXRjaGVzO1xuICAgIH1cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBub3JtYWxpemVkUGF0aFxuICAgICAgfSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLCB0cnVlLCBub3JtYWxpemVkUGF0aCwgb3B0cyk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmb2dPZldhci5hY3RpdmUsIGZsdXNoU3luYywgcHJldmVudFNjcm9sbFJlc2V0LCBzdWJtaXNzaW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcbiAgICBmZXRjaExvYWRNYXRjaGVzLnNldChrZXksIHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICBwYXRoXG4gICAgfSk7XG4gICAgaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmb2dPZldhci5hY3RpdmUsIGZsdXNoU3luYywgcHJldmVudFNjcm9sbFJlc2V0LCBzdWJtaXNzaW9uKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBpc0ZvZ09mV2FyLCBmbHVzaFN5bmMsIHByZXZlbnRTY3JvbGxSZXNldCwgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmdW5jdGlvbiBkZXRlY3RBbmRIYW5kbGU0MDVFcnJvcihtKSB7XG4gICAgICBpZiAoIW0ucm91dGUuYWN0aW9uICYmICFtLnJvdXRlLmxhenkpIHtcbiAgICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgICAgICBwYXRobmFtZTogcGF0aCxcbiAgICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICAgIH0pO1xuICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwge1xuICAgICAgICAgIGZsdXNoU3luY1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghaXNGb2dPZldhciAmJiBkZXRlY3RBbmRIYW5kbGU0MDVFcnJvcihtYXRjaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3Mgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRTdWJtaXR0aW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIpLCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwsIHN1Ym1pc3Npb24pO1xuICAgIGlmIChpc0ZvZ09mV2FyKSB7XG4gICAgICBsZXQgZGlzY292ZXJSZXN1bHQgPSBhd2FpdCBkaXNjb3ZlclJvdXRlcyhyZXF1ZXN0TWF0Y2hlcywgcGF0aCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCk7XG4gICAgICBpZiAoZGlzY292ZXJSZXN1bHQudHlwZSA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZGlzY292ZXJSZXN1bHQuZXJyb3IsIHtcbiAgICAgICAgICBmbHVzaFN5bmNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoIWRpc2NvdmVyUmVzdWx0Lm1hdGNoZXMpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgICBwYXRobmFtZTogcGF0aFxuICAgICAgICB9KSwge1xuICAgICAgICAgIGZsdXNoU3luY1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdE1hdGNoZXMgPSBkaXNjb3ZlclJlc3VsdC5tYXRjaGVzO1xuICAgICAgICBtYXRjaCA9IGdldFRhcmdldE1hdGNoKHJlcXVlc3RNYXRjaGVzLCBwYXRoKTtcbiAgICAgICAgaWYgKGRldGVjdEFuZEhhbmRsZTQwNUVycm9yKG1hdGNoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBmZXRjaGVyXG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgYWN0aW9uUmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJhY3Rpb25cIiwgc3RhdGUsIGZldGNoUmVxdWVzdCwgW21hdGNoXSwgcmVxdWVzdE1hdGNoZXMsIGtleSk7XG4gICAgbGV0IGFjdGlvblJlc3VsdCA9IGFjdGlvblJlc3VsdHNbbWF0Y2gucm91dGUuaWRdO1xuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3duIGZldGNoZXJcbiAgICAgIC8vIHJlLXN1Ym1pdCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCwgd2UgZG9uJ3Qgd2FudCBlcnJvcnMgYnViYmxpbmcgdXAgdG8gdGhlIFVJXG4gICAgLy8gb3IgcmVkaXJlY3RzIHByb2Nlc3NlZCBmb3IgdW5tb3VudGVkIGZldGNoZXJzIHNvIHdlIGp1c3QgcmV2ZXJ0IHRoZW0gdG9cbiAgICAvLyBpZGxlXG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCAmJiBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkgfHwgaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBMZXQgU3VjY2Vzc1Jlc3VsdCdzIGZhbGwgdGhyb3VnaCBmb3IgcmV2YWxpZGF0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBhY3Rpb24gc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb24uICBXZSBhbHJlYWR5XG4gICAgICAgICAgLy8gc2V0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgc28gYWxsIGxvYWRlcnMgZm9yIHRoZSBuZXcgcm91dGUgc2hvdWxkXG4gICAgICAgICAgLy8gZmlyZSB1bmxlc3Mgb3B0ZWQgb3V0IHZpYSBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbikpO1xuICAgICAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihmZXRjaFJlcXVlc3QsIGFjdGlvblJlc3VsdCwgZmFsc2UsIHtcbiAgICAgICAgICAgIGZldGNoZXJTdWJtaXNzaW9uOiBzdWJtaXNzaW9uLFxuICAgICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGFjdGlvblJlc3VsdC5lcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgYmFzZW5hbWUpIDogc3RhdGUubWF0Y2hlcztcbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcbiAgICBsZXQgbG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgZmV0Y2hSZWxvYWRJZHMuc2V0KGtleSwgbG9hZElkKTtcbiAgICBsZXQgbG9hZEZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGZhbHNlLCBmdXR1cmUudjdfc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgW21hdGNoLnJvdXRlLmlkLCBhY3Rpb25SZXN1bHRdKTtcbiAgICAvLyBQdXQgYWxsIHJldmFsaWRhdGluZyBmZXRjaGVycyBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlLCBleGNlcHQgZm9yIHRoZVxuICAgIC8vIGN1cnJlbnQgZmV0Y2hlciB3aGljaCB3ZSB3YW50IHRvIGtlZXAgaW4gaXQncyBjdXJyZW50IGxvYWRpbmcgc3RhdGUgd2hpY2hcbiAgICAvLyBjb250YWlucyBpdCdzIGFjdGlvbiBzdWJtaXNzaW9uIGluZm8gKyBhY3Rpb24gZGF0YVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZpbHRlcihyZiA9PiByZi5rZXkgIT09IGtleSkuZm9yRWFjaChyZiA9PiB7XG4gICAgICBsZXQgc3RhbGVLZXkgPSByZi5rZXk7XG4gICAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHN0YWxlS2V5KTtcbiAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIodW5kZWZpbmVkLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoc3RhbGVLZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgYWJvcnRGZXRjaGVyKHN0YWxlS2V5KTtcbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHN0YWxlS2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBhYm9ydEZldGNoZXIocmYua2V5KSk7XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBsZXQge1xuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gociA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyLmtleSkpO1xuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChsb2FkZXJSZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXZhbGlkYXRpb25SZXF1ZXN0LCByZWRpcmVjdC5yZXN1bHQsIGZhbHNlLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KGZldGNoZXJSZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgLy8gZmV0Y2hSZWRpcmVjdElkcyBzbyBpdCBkb2Vzbid0IGdldCByZXZhbGlkYXRlZCBvbiB0aGUgbmV4dCBzZXQgb2ZcbiAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChyZWRpcmVjdC5rZXkpO1xuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJldmFsaWRhdGlvblJlcXVlc3QsIHJlZGlyZWN0LnJlc3VsdCwgZmFsc2UsIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbG9hZGVyUmVzdWx0cywgdW5kZWZpbmVkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gU2luY2Ugd2UgbGV0IHJldmFsaWRhdGlvbnMgY29tcGxldGUgZXZlbiBpZiB0aGUgc3VibWl0dGluZyBmZXRjaGVyIHdhc1xuICAgIC8vIGRlbGV0ZWQsIG9ubHkgcHV0IGl0IGJhY2sgdG8gaWRsZSBpZiBpdCBoYXNuJ3QgYmVlbiBkZWxldGVkXG4gICAgaWYgKHN0YXRlLmZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICAgIGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7XG4gICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgbG9hZElkID4gcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpIHtcbiAgICAgIGludmFyaWFudChwZW5kaW5nQWN0aW9uLCBcIkV4cGVjdGVkIHBlbmRpbmcgYWN0aW9uXCIpO1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UganVzdCB1cGRhdGUgd2l0aCB0aGUgZmV0Y2hlciBkYXRhLCBwcmVzZXJ2aW5nIGFueSBleGlzdGluZ1xuICAgICAgLy8gbG9hZGVyRGF0YSBmb3IgbG9hZGVycyB0aGF0IGRpZCBub3QgbmVlZCB0byByZWxvYWQuICBXZSBoYXZlIHRvXG4gICAgICAvLyBtYW51YWxseSBtZXJnZSBoZXJlIHNpbmNlIHdlIGFyZW4ndCBnb2luZyB0aHJvdWdoIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBsb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDYWxsIHRoZSBtYXRjaGVkIGxvYWRlciBmb3IgZmV0Y2hlci5sb2FkKCksIGhhbmRsaW5nIHJlZGlyZWN0cywgZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgaXNGb2dPZldhciwgZmx1c2hTeW5jLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpLCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGlmIChpc0ZvZ09mV2FyKSB7XG4gICAgICBsZXQgZGlzY292ZXJSZXN1bHQgPSBhd2FpdCBkaXNjb3ZlclJvdXRlcyhtYXRjaGVzLCBwYXRoLCBmZXRjaFJlcXVlc3Quc2lnbmFsKTtcbiAgICAgIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGRpc2NvdmVyUmVzdWx0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBkaXNjb3ZlclJlc3VsdC5lcnJvciwge1xuICAgICAgICAgIGZsdXNoU3luY1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICghZGlzY292ZXJSZXN1bHQubWF0Y2hlcykge1xuICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICAgIHBhdGhuYW1lOiBwYXRoXG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgZmx1c2hTeW5jXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXRjaGVzID0gZGlzY292ZXJSZXN1bHQubWF0Y2hlcztcbiAgICAgICAgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2FsbCB0aGUgbG9hZGVyIGZvciB0aGlzIGZldGNoZXIgcm91dGUgbWF0Y2hcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCBzdGF0ZSwgZmV0Y2hSZXF1ZXN0LCBbbWF0Y2hdLCBtYXRjaGVzLCBrZXkpO1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgZm9yIGZldGNoZXIgbG9hZHMsIGF3YWl0IGV2ZXJ5dGhpbmcgYW5kIHRyZWF0IGl0XG4gICAgLy8gYXMgYSBub3JtYWwgbG9hZC4gIHJlc29sdmVEZWZlcnJlZERhdGEgd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoaXNcbiAgICAvLyBmZXRjaGVyIGdldHMgYWJvcnRlZCwgc28gd2UganVzdCBsZWF2ZSByZXN1bHQgdW50b3VjaGVkIGFuZCBzaG9ydCBjaXJjdWl0XG4gICAgLy8gYmVsb3cgaWYgdGhhdCBoYXBwZW5zXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID0gKGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBmZXRjaFJlcXVlc3Quc2lnbmFsLCB0cnVlKSkgfHwgcmVzdWx0O1xuICAgIH1cbiAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3VyIG91ciBvd24gZmV0Y2hlclxuICAgIC8vIHJlLWxvYWQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXZSBkb24ndCB3YW50IGVycm9ycyBidWJibGluZyB1cCBvciByZWRpcmVjdHMgZm9sbG93ZWQgZm9yIHVubW91bnRlZFxuICAgIC8vIGZldGNoZXJzLCBzbyBzaG9ydCBjaXJjdWl0IGhlcmUgaWYgaXQgd2FzIHJlbW92ZWQgZnJvbSB0aGUgVUlcbiAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGxvYWRlciB0aHJldyBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBsb2FkZXIgc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihmZXRjaFJlcXVlc3QsIHJlc3VsdCwgZmFsc2UsIHtcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCByZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKSk7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlcXVlc3QsIHJlZGlyZWN0LCBpc05hdmlnYXRpb24sIF90ZW1wMikge1xuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZXBsYWNlXG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgaWYgKHJlZGlyZWN0LnJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpKSB7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gcmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiRXhwZWN0ZWQgYSBMb2NhdGlvbiBoZWFkZXIgb24gdGhlIHJlZGlyZWN0IFJlc3BvbnNlXCIpO1xuICAgIGxvY2F0aW9uID0gbm9ybWFsaXplUmVkaXJlY3RMb2NhdGlvbihsb2NhdGlvbiwgbmV3IFVSTChyZXF1ZXN0LnVybCksIGJhc2VuYW1lKTtcbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbiwge1xuICAgICAgX2lzUmVkaXJlY3Q6IHRydWVcbiAgICB9KTtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBsZXQgaXNEb2N1bWVudFJlbG9hZCA9IGZhbHNlO1xuICAgICAgaWYgKHJlZGlyZWN0LnJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIikpIHtcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5lZCBYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFxuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID1cbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdG8gYSBuZXcgb3JpZ2luXG4gICAgICAgIHVybC5vcmlnaW4gIT09IHJvdXRlcldpbmRvdy5sb2NhdGlvbi5vcmlnaW4gfHxcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdGhhdCBkb2VzIG5vdCBtYXRjaCBvdXIgYmFzZW5hbWVcbiAgICAgICAgc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSA9PSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzRG9jdW1lbnRSZWxvYWQpIHtcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24ucmVwbGFjZShsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLmFzc2lnbihsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgbGV0IHJlZGlyZWN0SGlzdG9yeUFjdGlvbiA9IHJlcGxhY2UgPT09IHRydWUgfHwgcmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5oYXMoXCJYLVJlbWl4LVJlcGxhY2VcIikgPyBBY3Rpb24uUmVwbGFjZSA6IEFjdGlvbi5QdXNoO1xuICAgIC8vIFVzZSB0aGUgaW5jb21pbmcgc3VibWlzc2lvbiBpZiBwcm92aWRlZCwgZmFsbGJhY2sgb24gdGhlIGFjdGl2ZSBvbmUgaW5cbiAgICAvLyBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3RhdGUubmF2aWdhdGlvbjtcbiAgICBpZiAoIXN1Ym1pc3Npb24gJiYgIWZldGNoZXJTdWJtaXNzaW9uICYmIGZvcm1NZXRob2QgJiYgZm9ybUFjdGlvbiAmJiBmb3JtRW5jVHlwZSkge1xuICAgICAgc3VibWlzc2lvbiA9IGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyB3YXMgYSAzMDcvMzA4IHN1Ym1pc3Npb24gd2Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgSFRUUCBtZXRob2QgYW5kXG4gICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb247XG4gICAgaWYgKHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3QucmVzcG9uc2Uuc3RhdHVzKSAmJiBhY3RpdmVTdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2QoYWN0aXZlU3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiBfZXh0ZW5kcyh7fSwgYWN0aXZlU3VibWlzc2lvbiwge1xuICAgICAgICAgIGZvcm1BY3Rpb246IGxvY2F0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGVzZSBmbGFncyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcHJldmVudFNjcm9sbFJlc2V0IHx8IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGVuYWJsZVZpZXdUcmFuc2l0aW9uOiBpc05hdmlnYXRpb24gPyBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIG5hdmlnYXRpb24gc3VibWlzc2lvbiwgd2Ugd2lsbCBwcmVzZXJ2ZSBpdCB0aHJvdWdoIHRoZVxuICAgICAgLy8gcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgbGV0IG92ZXJyaWRlTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKHJlZGlyZWN0TG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb24sXG4gICAgICAgIC8vIFNlbmQgZmV0Y2hlciBzdWJtaXNzaW9ucyB0aHJvdWdoIGZvciBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgIGZldGNoZXJTdWJtaXNzaW9uLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGVzZSBmbGFncyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcHJldmVudFNjcm9sbFJlc2V0IHx8IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGVuYWJsZVZpZXdUcmFuc2l0aW9uOiBpc05hdmlnYXRpb24gPyBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLy8gVXRpbGl0eSB3cmFwcGVyIGZvciBjYWxsaW5nIGRhdGFTdHJhdGVneSBjbGllbnQtc2lkZSB3aXRob3V0IGhhdmluZyB0b1xuICAvLyBwYXNzIGFyb3VuZCB0aGUgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBjYWxsRGF0YVN0cmF0ZWd5KHR5cGUsIHN0YXRlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBmZXRjaGVyS2V5KSB7XG4gICAgbGV0IHJlc3VsdHM7XG4gICAgbGV0IGRhdGFSZXN1bHRzID0ge307XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5SW1wbChkYXRhU3RyYXRlZ3lJbXBsLCB0eXBlLCBzdGF0ZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgZmV0Y2hlcktleSwgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhlIG91dGVyIGRhdGFTdHJhdGVneSBtZXRob2QgdGhyb3dzLCBqdXN0IHJldHVybiB0aGUgZXJyb3IgZm9yIGFsbFxuICAgICAgLy8gbWF0Y2hlcyAtIGFuZCBpdCdsbCBuYXR1cmFsbHkgYnViYmxlIHRvIHRoZSByb290XG4gICAgICBtYXRjaGVzVG9Mb2FkLmZvckVhY2gobSA9PiB7XG4gICAgICAgIGRhdGFSZXN1bHRzW20ucm91dGUuaWRdID0ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IGVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRhdGFSZXN1bHRzO1xuICAgIH1cbiAgICBmb3IgKGxldCBbcm91dGVJZCwgcmVzdWx0XSBvZiBPYmplY3QuZW50cmllcyhyZXN1bHRzKSkge1xuICAgICAgaWYgKGlzUmVkaXJlY3REYXRhU3RyYXRlZ3lSZXN1bHRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXN1bHQucmVzdWx0O1xuICAgICAgICBkYXRhUmVzdWx0c1tyb3V0ZUlkXSA9IHtcbiAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLnJlZGlyZWN0LFxuICAgICAgICAgIHJlc3BvbnNlOiBub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0LCByb3V0ZUlkLCBtYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVJlc3VsdHNbcm91dGVJZF0gPSBhd2FpdCBjb252ZXJ0RGF0YVN0cmF0ZWd5UmVzdWx0VG9EYXRhUmVzdWx0KHJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhUmVzdWx0cztcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGZldGNoZXJzVG9Mb2FkLCByZXF1ZXN0KSB7XG4gICAgbGV0IGN1cnJlbnRNYXRjaGVzID0gc3RhdGUubWF0Y2hlcztcbiAgICAvLyBLaWNrIG9mZiBsb2FkZXJzIGFuZCBmZXRjaGVycyBpbiBwYXJhbGxlbFxuICAgIGxldCBsb2FkZXJSZXN1bHRzUHJvbWlzZSA9IGNhbGxEYXRhU3RyYXRlZ3koXCJsb2FkZXJcIiwgc3RhdGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIG51bGwpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0c1Byb21pc2UgPSBQcm9taXNlLmFsbChmZXRjaGVyc1RvTG9hZC5tYXAoYXN5bmMgZiA9PiB7XG4gICAgICBpZiAoZi5tYXRjaGVzICYmIGYubWF0Y2ggJiYgZi5jb250cm9sbGVyKSB7XG4gICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCBzdGF0ZSwgY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBmLnBhdGgsIGYuY29udHJvbGxlci5zaWduYWwpLCBbZi5tYXRjaF0sIGYubWF0Y2hlcywgZi5rZXkpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tmLm1hdGNoLnJvdXRlLmlkXTtcbiAgICAgICAgLy8gRmV0Y2hlciByZXN1bHRzIGFyZSBrZXllZCBieSBmZXRjaGVyIGtleSBmcm9tIGhlcmUgb24gb3V0LCBub3Qgcm91dGVJZFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtmLmtleV06IHJlc3VsdFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgW2Yua2V5XToge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICAgICAgICBwYXRobmFtZTogZi5wYXRoXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIGxldCBsb2FkZXJSZXN1bHRzID0gYXdhaXQgbG9hZGVyUmVzdWx0c1Byb21pc2U7XG4gICAgbGV0IGZldGNoZXJSZXN1bHRzID0gKGF3YWl0IGZldGNoZXJSZXN1bHRzUHJvbWlzZSkucmVkdWNlKChhY2MsIHIpID0+IE9iamVjdC5hc3NpZ24oYWNjLCByKSwge30pO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlTmF2aWdhdGlvbkRlZmVycmVkUmVzdWx0cyhtYXRjaGVzLCBsb2FkZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgY3VycmVudE1hdGNoZXMsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRmV0Y2hlckRlZmVycmVkUmVzdWx0cyhtYXRjaGVzLCBmZXRjaGVyUmVzdWx0cywgZmV0Y2hlcnNUb0xvYWQpXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gaW50ZXJydXB0QWN0aXZlTG9hZHMoKSB7XG4gICAgLy8gRXZlcnkgaW50ZXJydXB0aW9uIHRyaWdnZXJzIGEgcmV2YWxpZGF0aW9uXG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgcm91dGUtbGV2ZWwgZGVmZXJyZWRzIGFuZCBtYXJrIGNhbmNlbGxlZCByb3V0ZXMgZm9yXG4gICAgLy8gcmV2YWxpZGF0aW9uXG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMucHVzaCguLi5jYW5jZWxBY3RpdmVEZWZlcnJlZHMoKSk7XG4gICAgLy8gQWJvcnQgaW4tZmxpZ2h0IGZldGNoZXIgbG9hZHNcbiAgICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmFkZChrZXkpO1xuICAgICAgfVxuICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZmV0Y2hlciwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBlcnJvcnM6IHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvclxuICAgICAgfSxcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0sIHtcbiAgICAgIGZsdXNoU3luYzogKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcihrZXkpIHtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCAoYWN0aXZlRmV0Y2hlcnMuZ2V0KGtleSkgfHwgMCkgKyAxKTtcbiAgICAgIC8vIElmIHRoaXMgZmV0Y2hlciB3YXMgcHJldmlvdXNseSBtYXJrZWQgZm9yIGRlbGV0aW9uLCB1bm1hcmsgaXQgc2luY2Ugd2VcbiAgICAgIC8vIGhhdmUgYSBuZXcgaW5zdGFuY2VcbiAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAvLyBEb24ndCBhYm9ydCB0aGUgY29udHJvbGxlciBpZiB0aGlzIGlzIGEgZGVsZXRpb24gb2YgYSBmZXRjaGVyLnN1Ym1pdCgpXG4gICAgLy8gaW4gaXQncyBsb2FkaW5nIHBoYXNlIHNpbmNlIC0gd2UgZG9uJ3Qgd2FudCB0byBhYm9ydCB0aGUgY29ycmVzcG9uZGluZ1xuICAgIC8vIHJldmFsaWRhdGlvbiBhbmQgd2FudCB0aGVtIHRvIGNvbXBsZXRlIGFuZCBsYW5kXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkgJiYgIShmZXRjaGVyICYmIGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGZldGNoUmVsb2FkSWRzLmhhcyhrZXkpKSkge1xuICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmRlbGV0ZShrZXkpO1xuICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZShrZXkpIHtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBsZXQgY291bnQgPSAoYWN0aXZlRmV0Y2hlcnMuZ2V0KGtleSkgfHwgMCkgLSAxO1xuICAgICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgICAgYWN0aXZlRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRlbGV0ZWRGZXRjaGVycy5hZGQoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUZldGNoZXJzLnNldChrZXksIGNvdW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIH1cbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtYXJrRmV0Y2hlcnNEb25lKGtleXMpIHtcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgICAgbGV0IGZldGNoZXIgPSBnZXRGZXRjaGVyKGtleSk7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihmZXRjaGVyLmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCkge1xuICAgIGxldCBkb25lS2V5cyA9IFtdO1xuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkb25lS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIHVwZGF0ZWRGZXRjaGVycyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoZG9uZUtleXMpO1xuICAgIHJldHVybiB1cGRhdGVkRmV0Y2hlcnM7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRTdGFsZUZldGNoTG9hZHMobGFuZGVkSWQpIHtcbiAgICBsZXQgeWVldGVkS2V5cyA9IFtdO1xuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgICAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICB5ZWV0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKHllZXRlZEtleXMpO1xuICAgIHJldHVybiB5ZWV0ZWRLZXlzLmxlbmd0aCA+IDA7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0QmxvY2tlcihrZXksIGZuKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuZ2V0KGtleSkgIT09IGZuKSB7XG4gICAgICBibG9ja2VyRnVuY3Rpb25zLnNldChrZXksIGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrZXI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlQmxvY2tlcihrZXkpIHtcbiAgICBzdGF0ZS5ibG9ja2Vycy5kZWxldGUoa2V5KTtcbiAgICBibG9ja2VyRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xuICB9XG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gdXBkYXRlIGJsb2NrZXJzLCBlbnN1cmluZyB2YWxpZCBzdGF0ZSB0cmFuc2l0aW9uc1xuICBmdW5jdGlvbiB1cGRhdGVCbG9ja2VyKGtleSwgbmV3QmxvY2tlcikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIC8vIFBvb3IgbWFucyBzdGF0ZSBtYWNoaW5lIDopXG4gICAgLy8gaHR0cHM6Ly9tZXJtYWlkLmxpdmUvZWRpdCNwYWtvOmVOcVZrYzlPd3pBTXhsOGw4bm5qQVlyRXRESU9IRUJJZ3d2S0pUUmVHeTNfbERwSXFPMjdrNmF3TUcwWGNyTGxuejg3bndkb25FU29nS1hYQnVFNzlycTc1WFpPMy15SGRzMFJKVnV2NzBZclBsVXJDRWUySGZyT1JTM3J1YnFaZnVodHBnNUM5d2s1dFo0VktjUlVxODhxOVo4UlMwLTQ4Y0UxaUhKa0wwdWdiSHVGTHVzOUw2c3BaeThuWDlNUDJDTmRvbVZhcG9zcXUzZkdheVQ4VDgtakpRd2hlcG9fVXRwZ0JRYURFVW9tMDRkWmhBTjFhSkJEbFVLSkJ4RTFjZUIyU21qME1sbi1JQlc1QUZVMmR3VWlrdHRfMlFhcTJkQmZhS2RFdXA4NVVWN1lkLWRLamxua2FibDJQdnIwRFRrVHJlTVxuICAgIGludmFyaWFudChibG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiwgXCJJbnZhbGlkIGJsb2NrZXIgc3RhdGUgdHJhbnNpdGlvbjogXCIgKyBibG9ja2VyLnN0YXRlICsgXCIgLT4gXCIgKyBuZXdCbG9ja2VyLnN0YXRlKTtcbiAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICBibG9ja2Vycy5zZXQoa2V5LCBuZXdCbG9ja2VyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBibG9ja2Vyc1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNob3VsZEJsb2NrTmF2aWdhdGlvbihfcmVmMikge1xuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IF9yZWYyO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2Ugb255IHN1cHBvcnQgYSBzaW5nbGUgYWN0aXZlIGJsb2NrZXIgYXQgdGhlIG1vbWVudCBzaW5jZSB3ZSBkb24ndCBoYXZlXG4gICAgLy8gYW55IGNvbXBlbGxpbmcgdXNlIGNhc2VzIGZvciBtdWx0aS1ibG9ja2VyIHlldFxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPiAxKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkEgcm91dGVyIG9ubHkgc3VwcG9ydHMgb25lIGJsb2NrZXIgYXQgYSB0aW1lXCIpO1xuICAgIH1cbiAgICBsZXQgZW50cmllcyA9IEFycmF5LmZyb20oYmxvY2tlckZ1bmN0aW9ucy5lbnRyaWVzKCkpO1xuICAgIGxldCBbYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSA9IGVudHJpZXNbZW50cmllcy5sZW5ndGggLSAxXTtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KTtcbiAgICBpZiAoYmxvY2tlciAmJiBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIikge1xuICAgICAgLy8gSWYgdGhlIGJsb2NrZXIgaXMgY3VycmVudGx5IHByb2NlZWRpbmcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2tcbiAgICAgIC8vIGl0IGFuZCBjYW4gbGV0IHRoaXMgbmF2aWdhdGlvbiBjb250aW51ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBrbm93IHdlJ3JlIHVuYmxvY2tlZC9ibG9ja2VkIHNvIHdlIG5lZWQgdG8gY2hlY2sgdGhlXG4gICAgLy8gdXNlci1wcm92aWRlZCBibG9ja2VyIGZ1bmN0aW9uXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBibG9ja2VyS2V5O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVOYXZpZ2F0aW9uYWw0MDQocGF0aG5hbWUpIHtcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpO1xuICAgIC8vIENhbmNlbCBhbGwgcGVuZGluZyBkZWZlcnJlZCBvbiA0MDRzIHNpbmNlIHdlIGRvbid0IGtlZXAgYW55IHJvdXRlc1xuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcygpO1xuICAgIHJldHVybiB7XG4gICAgICBub3RGb3VuZE1hdGNoZXM6IG1hdGNoZXMsXG4gICAgICByb3V0ZSxcbiAgICAgIGVycm9yXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocHJlZGljYXRlKSB7XG4gICAgbGV0IGNhbmNlbGxlZFJvdXRlSWRzID0gW107XG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRmZCwgcm91dGVJZCkgPT4ge1xuICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHJvdXRlSWQpKSB7XG4gICAgICAgIC8vIENhbmNlbCB0aGUgZGVmZXJyZWQgLSBidXQgZG8gbm90IHJlbW92ZSBmcm9tIGFjdGl2ZURlZmVycmVkcyBoZXJlIC1cbiAgICAgICAgLy8gd2UgcmVseSBvbiB0aGUgc3Vic2NyaWJlcnMgdG8gZG8gdGhhdCBzbyBvdXIgdGVzdHMgY2FuIGFzc2VydCBwcm9wZXJcbiAgICAgICAgLy8gY2xlYW51cCB2aWEgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzXG4gICAgICAgIGRmZC5jYW5jZWwoKTtcbiAgICAgICAgY2FuY2VsbGVkUm91dGVJZHMucHVzaChyb3V0ZUlkKTtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FuY2VsbGVkUm91dGVJZHM7XG4gIH1cbiAgLy8gT3B0IGluIHRvIGNhcHR1cmluZyBhbmQgcmVwb3J0aW5nIHNjcm9sbCBwb3NpdGlvbnMgZHVyaW5nIG5hdmlnYXRpb25zLFxuICAvLyB1c2VkIGJ5IHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuICBmdW5jdGlvbiBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbihwb3NpdGlvbnMsIGdldFBvc2l0aW9uLCBnZXRLZXkpIHtcbiAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IGdldFBvc2l0aW9uO1xuICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gZ2V0S2V5IHx8IG51bGw7XG4gICAgLy8gUGVyZm9ybSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24sIHNpbmNlIHdlIG1pc3MgdGhlIGJvYXQgb25cbiAgICAvLyB0aGUgaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGJlY2F1c2Ugd2UndmUgbm90IHlldCByZW5kZXJlZCA8U2Nyb2xsUmVzdG9yYXRpb24vPlxuICAgIC8vIGFuZCB0aGVyZWZvcmUgaGF2ZSBubyBzYXZlZFNjcm9sbFBvc2l0aW9ucyBhdmFpbGFibGVcbiAgICBpZiAoIWluaXRpYWxTY3JvbGxSZXN0b3JlZCAmJiBzdGF0ZS5uYXZpZ2F0aW9uID09PSBJRExFX05BVklHQVRJT04pIHtcbiAgICAgIGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IHRydWU7XG4gICAgICBsZXQgeSA9IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgICAgaWYgKHkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkobG9jYXRpb24sIG1hdGNoZXMubWFwKG0gPT4gY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpKTtcbiAgICAgIHJldHVybiBrZXkgfHwgbG9jYXRpb24ua2V5O1xuICAgIH1cbiAgICByZXR1cm4gbG9jYXRpb24ua2V5O1xuICB9XG4gIGZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcyk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucykge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcyk7XG4gICAgICBsZXQgeSA9IHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV07XG4gICAgICBpZiAodHlwZW9mIHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGNoZWNrRm9nT2ZXYXIobWF0Y2hlcywgcm91dGVzVG9Vc2UsIHBhdGhuYW1lKSB7XG4gICAgaWYgKHBhdGNoUm91dGVzT25OYXZpZ2F0aW9uSW1wbCkge1xuICAgICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICAgIGxldCBmb2dNYXRjaGVzID0gbWF0Y2hSb3V0ZXNJbXBsKHJvdXRlc1RvVXNlLCBwYXRobmFtZSwgYmFzZW5hbWUsIHRydWUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICBtYXRjaGVzOiBmb2dNYXRjaGVzIHx8IFtdXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMobWF0Y2hlc1swXS5wYXJhbXMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBJZiB3ZSBtYXRjaGVkIGEgZHluYW1pYyBwYXJhbSBvciBhIHNwbGF0LCBpdCBtaWdodCBvbmx5IGJlIGJlY2F1c2VcbiAgICAgICAgICAvLyB3ZSBoYXZlbid0IHlldCBkaXNjb3ZlcmVkIG90aGVyIHJvdXRlcyB0aGF0IHdvdWxkIG1hdGNoIHdpdGggYVxuICAgICAgICAgIC8vIGhpZ2hlciBzY29yZS4gIENhbGwgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb24ganVzdCB0byBiZSBzdXJlXG4gICAgICAgICAgbGV0IHBhcnRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXNJbXBsKHJvdXRlc1RvVXNlLCBwYXRobmFtZSwgYmFzZW5hbWUsIHRydWUpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBtYXRjaGVzOiBwYXJ0aWFsTWF0Y2hlc1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICBtYXRjaGVzOiBudWxsXG4gICAgfTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBkaXNjb3ZlclJvdXRlcyhtYXRjaGVzLCBwYXRobmFtZSwgc2lnbmFsKSB7XG4gICAgaWYgKCFwYXRjaFJvdXRlc09uTmF2aWdhdGlvbkltcGwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgICBtYXRjaGVzXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcGFydGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgaXNOb25ITVIgPSBpbkZsaWdodERhdGFSb3V0ZXMgPT0gbnVsbDtcbiAgICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgICAgbGV0IGxvY2FsTWFuaWZlc3QgPSBtYW5pZmVzdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHBhdGNoUm91dGVzT25OYXZpZ2F0aW9uSW1wbCh7XG4gICAgICAgICAgcGF0aDogcGF0aG5hbWUsXG4gICAgICAgICAgbWF0Y2hlczogcGFydGlhbE1hdGNoZXMsXG4gICAgICAgICAgcGF0Y2g6IChyb3V0ZUlkLCBjaGlsZHJlbikgPT4ge1xuICAgICAgICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSByZXR1cm47XG4gICAgICAgICAgICBwYXRjaFJvdXRlc0ltcGwocm91dGVJZCwgY2hpbGRyZW4sIHJvdXRlc1RvVXNlLCBsb2NhbE1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgIGVycm9yOiBlLFxuICAgICAgICAgIHBhcnRpYWxNYXRjaGVzXG4gICAgICAgIH07XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgbm90IGluIHRoZSBtaWRkbGUgb2YgYW4gSE1SIHJldmFsaWRhdGlvbiBhbmQgd2UgY2hhbmdlZCB0aGVcbiAgICAgICAgLy8gcm91dGVzLCBwcm92aWRlIGEgbmV3IGlkZW50aXR5IHNvIHdoZW4gd2UgYHVwZGF0ZVN0YXRlYCBhdCB0aGUgZW5kIG9mXG4gICAgICAgIC8vIHRoaXMgbmF2aWdhdGlvbi9mZXRjaCBgcm91dGVyLnJvdXRlc2Agd2lsbCBiZSBhIG5ldyBpZGVudGl0eSBhbmRcbiAgICAgICAgLy8gdHJpZ2dlciBhIHJlLXJ1biBvZiBtZW1vaXplZCBgcm91dGVyLnJvdXRlc2AgZGVwZW5kZW5jaWVzLlxuICAgICAgICAvLyBITVIgd2lsbCBhbHJlYWR5IHVwZGF0ZSB0aGUgaWRlbnRpdHkgYW5kIHJlZmxvdyB3aGVuIGl0IGxhbmRzXG4gICAgICAgIC8vIGBpbkZsaWdodERhdGFSb3V0ZXNgIGluIGBjb21wbGV0ZU5hdmlnYXRpb25gXG4gICAgICAgIGlmIChpc05vbkhNUiAmJiAhc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICBkYXRhUm91dGVzID0gWy4uLmRhdGFSb3V0ZXNdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcImFib3J0ZWRcIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgbGV0IG5ld01hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgcGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICAgIGlmIChuZXdNYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgbWF0Y2hlczogbmV3TWF0Y2hlc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgbGV0IG5ld1BhcnRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXNJbXBsKHJvdXRlc1RvVXNlLCBwYXRobmFtZSwgYmFzZW5hbWUsIHRydWUpO1xuICAgICAgLy8gQXZvaWQgbG9vcHMgaWYgdGhlIHNlY29uZCBwYXNzIHJlc3VsdHMgaW4gdGhlIHNhbWUgcGFydGlhbCBtYXRjaGVzXG4gICAgICBpZiAoIW5ld1BhcnRpYWxNYXRjaGVzIHx8IHBhcnRpYWxNYXRjaGVzLmxlbmd0aCA9PT0gbmV3UGFydGlhbE1hdGNoZXMubGVuZ3RoICYmIHBhcnRpYWxNYXRjaGVzLmV2ZXJ5KChtLCBpKSA9PiBtLnJvdXRlLmlkID09PSBuZXdQYXJ0aWFsTWF0Y2hlc1tpXS5yb3V0ZS5pZCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICBtYXRjaGVzOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBwYXJ0aWFsTWF0Y2hlcyA9IG5ld1BhcnRpYWxNYXRjaGVzO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfaW50ZXJuYWxTZXRSb3V0ZXMobmV3Um91dGVzKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKG5ld1JvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgfVxuICBmdW5jdGlvbiBwYXRjaFJvdXRlcyhyb3V0ZUlkLCBjaGlsZHJlbikge1xuICAgIGxldCBpc05vbkhNUiA9IGluRmxpZ2h0RGF0YVJvdXRlcyA9PSBudWxsO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIHBhdGNoUm91dGVzSW1wbChyb3V0ZUlkLCBjaGlsZHJlbiwgcm91dGVzVG9Vc2UsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMpO1xuICAgIC8vIElmIHdlIGFyZSBub3QgaW4gdGhlIG1pZGRsZSBvZiBhbiBITVIgcmV2YWxpZGF0aW9uIGFuZCB3ZSBjaGFuZ2VkIHRoZVxuICAgIC8vIHJvdXRlcywgcHJvdmlkZSBhIG5ldyBpZGVudGl0eSBhbmQgdHJpZ2dlciBhIHJlZmxvdyB2aWEgYHVwZGF0ZVN0YXRlYFxuICAgIC8vIHRvIHJlLXJ1biBtZW1vaXplZCBgcm91dGVyLnJvdXRlc2AgZGVwZW5kZW5jaWVzLlxuICAgIC8vIEhNUiB3aWxsIGFscmVhZHkgdXBkYXRlIHRoZSBpZGVudGl0eSBhbmQgcmVmbG93IHdoZW4gaXQgbGFuZHNcbiAgICAvLyBgaW5GbGlnaHREYXRhUm91dGVzYCBpbiBgY29tcGxldGVOYXZpZ2F0aW9uYFxuICAgIGlmIChpc05vbkhNUikge1xuICAgICAgZGF0YVJvdXRlcyA9IFsuLi5kYXRhUm91dGVzXTtcbiAgICAgIHVwZGF0ZVN0YXRlKHt9KTtcbiAgICB9XG4gIH1cbiAgcm91dGVyID0ge1xuICAgIGdldCBiYXNlbmFtZSgpIHtcbiAgICAgIHJldHVybiBiYXNlbmFtZTtcbiAgICB9LFxuICAgIGdldCBmdXR1cmUoKSB7XG4gICAgICByZXR1cm4gZnV0dXJlO1xuICAgIH0sXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG4gICAgZ2V0IHdpbmRvdygpIHtcbiAgICAgIHJldHVybiByb3V0ZXJXaW5kb3c7XG4gICAgfSxcbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiB0byA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZW5jb2RlTG9jYXRpb246IHRvID0+IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyOiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgcGF0Y2hSb3V0ZXMsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykge1xuICBpbnZhcmlhbnQocm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlclwiKTtcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIGxldCBiYXNlbmFtZSA9IChvcHRzID8gb3B0cy5iYXNlbmFtZSA6IG51bGwpIHx8IFwiL1wiO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICB2N190aHJvd0Fib3J0UmVhc29uOiBmYWxzZVxuICB9LCBvcHRzID8gb3B0cy5mdXR1cmUgOiBudWxsKTtcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICpcbiAgICogLSBgb3B0cy5yZXF1ZXN0Q29udGV4dGAgaXMgYW4gb3B0aW9uYWwgc2VydmVyIGNvbnRleHQgdGhhdCB3aWxsIGJlIHBhc3NlZFxuICAgKiAgIHRvIGFjdGlvbnMvbG9hZGVycyBpbiB0aGUgYGNvbnRleHRgIHBhcmFtZXRlclxuICAgKiAtIGBvcHRzLnNraXBMb2FkZXJFcnJvckJ1YmJsaW5nYCBpcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCB3aWxsIHByZXZlbnRcbiAgICogICB0aGUgYnViYmxpbmcgb2YgZXJyb3JzIHdoaWNoIGFsbG93cyBzaW5nbGUtZmV0Y2gtdHlwZSBpbXBsZW1lbnRhdGlvbnNcbiAgICogICB3aGVyZSB0aGUgY2xpZW50IHdpbGwgaGFuZGxlIHRoZSBidWJibGluZyBhbmQgd2UgbWF5IG5lZWQgdG8gcmV0dXJuIGRhdGFcbiAgICogICBmb3IgdGhlIGhhbmRsaW5nIHJvdXRlXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeShyZXF1ZXN0LCBfdGVtcDMpIHtcbiAgICBsZXQge1xuICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZyxcbiAgICAgIGRhdGFTdHJhdGVneVxuICAgIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3kgfHwgbnVsbCwgc2tpcExvYWRlckVycm9yQnViYmxpbmcgPT09IHRydWUsIG51bGwpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgYmFzZW5hbWVcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqXG4gICAqIC0gYG9wdHMucm91dGVJZGAgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IHRoZSBzcGVjaWZpYyByb3V0ZSBoYW5kbGVyIHRvIGNhbGwuXG4gICAqICAgSWYgbm90IHByb3ZpZGVkIHRoZSBoYW5kbGVyIHdpbGwgZGV0ZXJtaW5lIHRoZSBwcm9wZXIgcm91dGUgYnkgbWF0Y2hpbmdcbiAgICogICBhZ2FpbnN0IGByZXF1ZXN0LnVybGBcbiAgICogLSBgb3B0cy5yZXF1ZXN0Q29udGV4dGAgaXMgYW4gb3B0aW9uYWwgc2VydmVyIGNvbnRleHQgdGhhdCB3aWxsIGJlIHBhc3NlZFxuICAgKiAgICB0byBhY3Rpb25zL2xvYWRlcnMgaW4gdGhlIGBjb250ZXh0YCBwYXJhbWV0ZXJcbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5Um91dGUocmVxdWVzdCwgX3RlbXA0KSB7XG4gICAgbGV0IHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgIGRhdGFTdHJhdGVneVxuICAgIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIiAmJiBtZXRob2QgIT09IFwiT1BUSU9OU1wiKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IHJvdXRlSWQgPyBtYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSA6IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcbiAgICBpZiAocm91dGVJZCAmJiAhbWF0Y2gpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAzLCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2gpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhpdCBJIGRvbid0IHRoaW5rP1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSB8fCBudWxsLCBmYWxzZSwgbWF0Y2gpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcnMgPyBPYmplY3QudmFsdWVzKHJlc3VsdC5lcnJvcnMpWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuICAgIGlmIChyZXN1bHQubG9hZGVyRGF0YSkge1xuICAgICAgdmFyIF9yZXN1bHQkYWN0aXZlRGVmZXJyZTtcbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByZXF1ZXN0Q29udGV4dCwgZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgcm91dGVNYXRjaCAhPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiBmb3IgYVxuICAgICAgLy8gYHF1ZXJ5Um91dGVgIGNhbGwsIHdlIHRocm93IHRoZSBgRGF0YVN0cmF0ZWd5UmVzdWx0YCB0byBiYWlsIG91dCBlYXJseVxuICAgICAgLy8gYW5kIHRoZW4gcmV0dXJuIG9yIHRocm93IHRoZSByYXcgUmVzcG9uc2UgaGVyZSBhY2NvcmRpbmdseVxuICAgICAgaWYgKGlzRGF0YVN0cmF0ZWd5UmVzdWx0KGUpICYmIGlzUmVzcG9uc2UoZS5yZXN1bHQpKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZS5yZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJhY3Rpb25cIiwgcmVxdWVzdCwgW2FjdGlvbk1hdGNoXSwgbWF0Y2hlcywgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3kpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0c1thY3Rpb25NYXRjaC5yb3V0ZS5pZF07XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICB0aHJvd1N0YXRpY0hhbmRsZXJBYm9ydGVkRXJyb3IocmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIGZ1dHVyZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQucmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5yZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlczogW2FjdGlvbk1hdGNoXSxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIC8vIE5vdGU6IHN0YXR1c0NvZGUgKyBoZWFkZXJzIGFyZSB1bnVzZWQgaGVyZSBzaW5jZSBxdWVyeVJvdXRlIHdpbGxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgbGV0IGxvYWRlclJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzLFxuICAgICAgcmVkaXJlY3Q6IHJlcXVlc3QucmVkaXJlY3QsXG4gICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgfSk7XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nID8gYWN0aW9uTWF0Y2ggOiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgbnVsbCwgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdF0pO1xuICAgICAgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiByZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsID8gcmVzdWx0LnN0YXR1c0NvZGUgOiA1MDAsXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IF9leHRlbmRzKHt9LCByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgICB9IDoge30pXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKGxvYWRlclJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBkYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCBudWxsKTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH1cbiAgICB9LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25IZWFkZXJzOiByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH0gOiB7fVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIGRhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIHJvdXRlTWF0Y2gsIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICBsZXQgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeVJvdXRlKCkpXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0ICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubG9hZGVyKSAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxhenkpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlTWF0Y2gucm91dGUuaWRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVxdWVzdE1hdGNoZXMgPSByb3V0ZU1hdGNoID8gW3JvdXRlTWF0Y2hdIDogcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgcGVuZGluZ0FjdGlvblJlc3VsdFswXSkgOiBtYXRjaGVzO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIgfHwgbS5yb3V0ZS5sYXp5KTtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICAvLyBBZGQgYSBudWxsIGZvciBhbGwgbWF0Y2hlZCByb3V0ZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudFxuICAgICAgICBsb2FkZXJEYXRhOiBtYXRjaGVzLnJlZHVjZSgoYWNjLCBtKSA9PiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICAgIFttLnJvdXRlLmlkXTogbnVsbFxuICAgICAgICB9KSwge30pLFxuICAgICAgICBlcnJvcnM6IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHtcbiAgICAgICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3JcbiAgICAgICAgfSA6IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwibG9hZGVyXCIsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCwgZGF0YVN0cmF0ZWd5KTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIGFjdGl2ZURlZmVycmVkcywgc2tpcExvYWRlckVycm9yQnViYmxpbmcpO1xuICAgIC8vIEFkZCBhIG51bGwgZm9yIGFueSBub24tbG9hZGVyIG1hdGNoZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudFxuICAgIGxldCBleGVjdXRlZExvYWRlcnMgPSBuZXcgU2V0KG1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IG1hdGNoLnJvdXRlLmlkKSk7XG4gICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgYWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMuc2l6ZSA+IDAgPyBPYmplY3QuZnJvbUVudHJpZXMoYWN0aXZlRGVmZXJyZWRzLmVudHJpZXMoKSkgOiBudWxsXG4gICAgfSk7XG4gIH1cbiAgLy8gVXRpbGl0eSB3cmFwcGVyIGZvciBjYWxsaW5nIGRhdGFTdHJhdGVneSBzZXJ2ZXItc2lkZSB3aXRob3V0IGhhdmluZyB0b1xuICAvLyBwYXNzIGFyb3VuZCB0aGUgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBjYWxsRGF0YVN0cmF0ZWd5KHR5cGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCwgZGF0YVN0cmF0ZWd5KSB7XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5SW1wbChkYXRhU3RyYXRlZ3kgfHwgZGVmYXVsdERhdGFTdHJhdGVneSwgdHlwZSwgbnVsbCwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgbnVsbCwgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgcmVxdWVzdENvbnRleHQpO1xuICAgIGxldCBkYXRhUmVzdWx0cyA9IHt9O1xuICAgIGF3YWl0IFByb21pc2UuYWxsKG1hdGNoZXMubWFwKGFzeW5jIG1hdGNoID0+IHtcbiAgICAgIGlmICghKG1hdGNoLnJvdXRlLmlkIGluIHJlc3VsdHMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSByZXN1bHRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAgIGlmIChpc1JlZGlyZWN0RGF0YVN0cmF0ZWd5UmVzdWx0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgLy8gVGhyb3cgcmVkaXJlY3RzIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgdGhlbSB3aXRoIGFuIEhUVFAgcmVkaXJlY3RcbiAgICAgICAgdGhyb3cgbm9ybWFsaXplUmVsYXRpdmVSb3V0aW5nUmVkaXJlY3RSZXNwb25zZShyZXNwb25zZSwgcmVxdWVzdCwgbWF0Y2gucm91dGUuaWQsIG1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0LnJlc3VsdCkgJiYgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFja1xuICAgICAgICAvLyBkaXJlY3RseSB3aXRob3V0IHVud3JhcHBpbmdcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGF0YVJlc3VsdHNbbWF0Y2gucm91dGUuaWRdID0gYXdhaXQgY29udmVydERhdGFTdHJhdGVneVJlc3VsdFRvRGF0YVJlc3VsdChyZXN1bHQpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gZGF0YVJlc3VsdHM7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXRhUm91dGVzLFxuICAgIHF1ZXJ5LFxuICAgIHF1ZXJ5Um91dGVcbiAgfTtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIZWxwZXJzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cbmZ1bmN0aW9uIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3Iocm91dGVzLCBjb250ZXh0LCBlcnJvcikge1xuICBsZXQgbmV3Q29udGV4dCA9IF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgIGVycm9yczoge1xuICAgICAgW2NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgfHwgcm91dGVzWzBdLmlkXTogZXJyb3JcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV3Q29udGV4dDtcbn1cbmZ1bmN0aW9uIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKSB7XG4gIGlmIChmdXR1cmUudjdfdGhyb3dBYm9ydFJlYXNvbiAmJiByZXF1ZXN0LnNpZ25hbC5yZWFzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IHJlcXVlc3Quc2lnbmFsLnJlYXNvbjtcbiAgfVxuICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkOiBcIiArIHJlcXVlc3QubWV0aG9kICsgXCIgXCIgKyByZXF1ZXN0LnVybCk7XG59XG5mdW5jdGlvbiBpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgIT0gbnVsbCAmJiAoXCJmb3JtRGF0YVwiIGluIG9wdHMgJiYgb3B0cy5mb3JtRGF0YSAhPSBudWxsIHx8IFwiYm9keVwiIGluIG9wdHMgJiYgb3B0cy5ib2R5ICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVG8obG9jYXRpb24sIG1hdGNoZXMsIGJhc2VuYW1lLCBwcmVwZW5kQmFzZW5hbWUsIHRvLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCwgZnJvbVJvdXRlSWQsIHJlbGF0aXZlKSB7XG4gIGxldCBjb250ZXh0dWFsTWF0Y2hlcztcbiAgbGV0IGFjdGl2ZVJvdXRlTWF0Y2g7XG4gIGlmIChmcm9tUm91dGVJZCkge1xuICAgIC8vIEdyYWIgbWF0Y2hlcyB1cCB0byB0aGUgY2FsbGluZyByb3V0ZSBzbyBvdXIgcm91dGUtcmVsYXRpdmUgbG9naWMgaXNcbiAgICAvLyByZWxhdGl2ZSB0byB0aGUgY29ycmVjdCBzb3VyY2Ugcm91dGVcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IFtdO1xuICAgIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICAgIGNvbnRleHR1YWxNYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgaWYgKG1hdGNoLnJvdXRlLmlkID09PSBmcm9tUm91dGVJZCkge1xuICAgICAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBSZXNvbHZlIHRoZSByZWxhdGl2ZSBwYXRoXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvID8gdG8gOiBcIi5cIiwgZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhjb250ZXh0dWFsTWF0Y2hlcywgdjdfcmVsYXRpdmVTcGxhdFBhdGgpLCBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbG9jYXRpb24ucGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIC8vIFdoZW4gYHRvYCBpcyBub3Qgc3BlY2lmaWVkIHdlIGluaGVyaXQgc2VhcmNoL2hhc2ggZnJvbSB0aGUgY3VycmVudFxuICAvLyBsb2NhdGlvbiwgdW5saWtlIHdoZW4gdG89XCIuXCIgYW5kIHdlIGp1c3QgaW5oZXJpdCB0aGUgcGF0aC5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBpZiAodG8gPT0gbnVsbCkge1xuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIH1cbiAgLy8gQWNjb3VudCBmb3IgYD9pbmRleGAgcGFyYW1zIHdoZW4gcm91dGluZyB0byB0aGUgY3VycmVudCBsb2NhdGlvblxuICBpZiAoKHRvID09IG51bGwgfHwgdG8gPT09IFwiXCIgfHwgdG8gPT09IFwiLlwiKSAmJiBhY3RpdmVSb3V0ZU1hdGNoKSB7XG4gICAgbGV0IG5ha2VkSW5kZXggPSBoYXNOYWtlZEluZGV4UXVlcnkocGF0aC5zZWFyY2gpO1xuICAgIGlmIChhY3RpdmVSb3V0ZU1hdGNoLnJvdXRlLmluZGV4ICYmICFuYWtlZEluZGV4KSB7XG4gICAgICAvLyBBZGQgb25lIHdoZW4gd2UncmUgdGFyZ2V0aW5nIGFuIGluZGV4IHJvdXRlXG4gICAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gICAgfSBlbHNlIGlmICghYWN0aXZlUm91dGVNYXRjaC5yb3V0ZS5pbmRleCAmJiBuYWtlZEluZGV4KSB7XG4gICAgICAvLyBSZW1vdmUgZXhpc3Rpbmcgb25lcyB3aGVuIHdlJ3JlIG5vdFxuICAgICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aC5zZWFyY2gpO1xuICAgICAgbGV0IGluZGV4VmFsdWVzID0gcGFyYW1zLmdldEFsbChcImluZGV4XCIpO1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgaW5kZXhWYWx1ZXMuZmlsdGVyKHYgPT4gdikuZm9yRWFjaCh2ID0+IHBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCB2KSk7XG4gICAgICBsZXQgcXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcXMgPyBcIj9cIiArIHFzIDogXCJcIjtcbiAgICB9XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZS4gIElmXG4gIC8vIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3NcbiAgLy8gdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2hcbiAgLy8gb24gcm9vdCBhY3Rpb25zXG4gIGlmIChwcmVwZW5kQmFzZW5hbWUgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5mdW5jdGlvbiBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMobm9ybWFsaXplRm9ybU1ldGhvZCwgaXNGZXRjaGVyLCBwYXRoLCBvcHRzKSB7XG4gIC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuICBpZiAoIW9wdHMgfHwgIWlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aFxuICAgIH07XG4gIH1cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAmJiAhaXNWYWxpZE1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBvcHRzLmZvcm1NZXRob2RcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuICBsZXQgZ2V0SW52YWxpZEJvZHlFcnJvciA9ICgpID0+ICh7XG4gICAgcGF0aCxcbiAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgIHR5cGU6IFwiaW52YWxpZC1ib2R5XCJcbiAgICB9KVxuICB9KTtcbiAgLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG4gIGxldCByYXdGb3JtTWV0aG9kID0gb3B0cy5mb3JtTWV0aG9kIHx8IFwiZ2V0XCI7XG4gIGxldCBmb3JtTWV0aG9kID0gbm9ybWFsaXplRm9ybU1ldGhvZCA/IHJhd0Zvcm1NZXRob2QudG9VcHBlckNhc2UoKSA6IHJhd0Zvcm1NZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKTtcbiAgaWYgKG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyB0ZXh0IG9ubHkgc3VwcG9ydCBQT1NUL1BVVC9QQVRDSC9ERUxFVEUgc3VibWlzc2lvbnNcbiAgICAgIGlmICghaXNNdXRhdGlvbk1ldGhvZChmb3JtTWV0aG9kKSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgICAgbGV0IHRleHQgPSB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiID8gb3B0cy5ib2R5IDogb3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEgfHwgb3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID9cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI3BsYWluLXRleHQtZm9ybS1kYXRhXG4gICAgICBBcnJheS5mcm9tKG9wdHMuYm9keS5lbnRyaWVzKCkpLnJlZHVjZSgoYWNjLCBfcmVmMykgPT4ge1xuICAgICAgICBsZXQgW25hbWUsIHZhbHVlXSA9IF9yZWYzO1xuICAgICAgICByZXR1cm4gXCJcIiArIGFjYyArIG5hbWUgKyBcIj1cIiArIHZhbHVlICsgXCJcXG5cIjtcbiAgICAgIH0sIFwiXCIpIDogU3RyaW5nKG9wdHMuYm9keSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAvLyBqc29uIG9ubHkgc3VwcG9ydHMgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBqc29uID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2Uob3B0cy5ib2R5KSA6IG9wdHMuYm9keTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaW52YXJpYW50KHR5cGVvZiBGb3JtRGF0YSA9PT0gXCJmdW5jdGlvblwiLCBcIkZvcm1EYXRhIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbiAgbGV0IHNlYXJjaFBhcmFtcztcbiAgbGV0IGZvcm1EYXRhO1xuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuZm9ybURhdGEpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5mb3JtRGF0YTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmJvZHk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gb3B0cy5ib2R5O1xuICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgPT0gbnVsbCkge1xuICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICB9XG4gIH1cbiAgbGV0IHN1Ym1pc3Npb24gPSB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBvcHRzICYmIG9wdHMuZm9ybUVuY1R5cGUgfHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkXG4gIH07XG4gIGlmIChpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb25cbiAgICB9O1xuICB9XG4gIC8vIEZsYXR0ZW4gc3VibWlzc2lvbiBvbnRvIFVSTFNlYXJjaFBhcmFtcyBmb3IgR0VUIHN1Ym1pc3Npb25zXG4gIGxldCBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKHBhdGgpO1xuICAvLyBPbiBHRVQgbmF2aWdhdGlvbiBzdWJtaXNzaW9ucyB3ZSBjYW4gZHJvcCB0aGUgP2luZGV4IHBhcmFtIGZyb20gdGhlXG4gIC8vIHJlc3VsdGluZyBsb2NhdGlvbiBzaW5jZSBhbGwgbG9hZGVycyB3aWxsIHJ1bi4gIEJ1dCBmZXRjaGVyIEdFVCBzdWJtaXNzaW9uc1xuICAvLyBvbmx5IHJ1biBhIHNpbmdsZSBsb2FkZXIgc28gd2UgbmVlZCB0byBwcmVzZXJ2ZSBhbnkgaW5jb21pbmcgP2luZGV4IHBhcmFtc1xuICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW5kZXhcIiwgXCJcIik7XG4gIH1cbiAgcGFyc2VkUGF0aC5zZWFyY2ggPSBcIj9cIiArIHNlYXJjaFBhcmFtcztcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLFxuICAgIHN1Ym1pc3Npb25cbiAgfTtcbn1cbi8vIEZpbHRlciBvdXQgYWxsIHJvdXRlcyBhdC9iZWxvdyBhbnkgY2F1Z2h0IGVycm9yIGFzIHRoZXkgYXJlbid0IGdvaW5nIHRvXG4vLyByZW5kZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBsb2FkIHRoZW1cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQsIGluY2x1ZGVCb3VuZGFyeSkge1xuICBpZiAoaW5jbHVkZUJvdW5kYXJ5ID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlQm91bmRhcnkgPSBmYWxzZTtcbiAgfVxuICBsZXQgaW5kZXggPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IGJvdW5kYXJ5SWQpO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIHJldHVybiBtYXRjaGVzLnNsaWNlKDAsIGluY2x1ZGVCb3VuZGFyeSA/IGluZGV4ICsgMSA6IGluZGV4KTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpbml0aWFsSHlkcmF0aW9uLCBza2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nQWN0aW9uUmVzdWx0ID8gaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3IgOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmRhdGEgOiB1bmRlZmluZWQ7XG4gIGxldCBjdXJyZW50VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RhdGUubG9jYXRpb24pO1xuICBsZXQgbmV4dFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKGxvY2F0aW9uKTtcbiAgLy8gUGljayBuYXZpZ2F0aW9uIG1hdGNoZXMgdGhhdCBhcmUgbmV0LW5ldyBvciBxdWFsaWZ5IGZvciByZXZhbGlkYXRpb25cbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXM7XG4gIGlmIChpbml0aWFsSHlkcmF0aW9uICYmIHN0YXRlLmVycm9ycykge1xuICAgIC8vIE9uIGluaXRpYWwgaHlkcmF0aW9uLCBvbmx5IGNvbnNpZGVyIG1hdGNoZXMgdXAgdG8gX2FuZCBpbmNsdWRpbmdfIHRoZSBib3VuZGFyeS5cbiAgICAvLyBUaGlzIGlzIGluY2x1c2l2ZSB0byBoYW5kbGUgY2FzZXMgd2hlcmUgYSBzZXJ2ZXIgbG9hZGVyIHJhbiBzdWNjZXNzZnVsbHksXG4gICAgLy8gYSBjaGlsZCBzZXJ2ZXIgbG9hZGVyIGJ1YmJsZWQgdXAgdG8gdGhpcyByb3V0ZSwgYnV0IHRoaXMgcm91dGUgaGFzXG4gICAgLy8gYGNsaWVudExvYWRlci5oeWRyYXRlYCBzbyB3ZSB3YW50IHRvIHN0aWxsIHJ1biB0aGUgYGNsaWVudExvYWRlcmAgc28gdGhhdFxuICAgIC8vIHdlIGhhdmUgYSBjb21wbGV0ZSB2ZXJzaW9uIG9mIGBsb2FkZXJEYXRhYFxuICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHN0YXRlLmVycm9ycylbMF0sIHRydWUpO1xuICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSkge1xuICAgIC8vIElmIGFuIGFjdGlvbiB0aHJldyBhbiBlcnJvciwgd2UgY2FsbCBsb2FkZXJzIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZyB0aGVcbiAgICAvLyBib3VuZGFyeVxuICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIHBlbmRpbmdBY3Rpb25SZXN1bHRbMF0pO1xuICB9XG4gIC8vIERvbid0IHJldmFsaWRhdGUgbG9hZGVycyBieSBkZWZhdWx0IGFmdGVyIGFjdGlvbiA0eHgvNXh4IHJlc3BvbnNlc1xuICAvLyB3aGVuIHRoZSBmbGFnIGlzIGVuYWJsZWQuICBUaGV5IGNhbiBzdGlsbCBvcHQtaW50byByZXZhbGlkYXRpb24gdmlhXG4gIC8vIGBzaG91bGRSZXZhbGlkYXRlYCB2aWEgYGFjdGlvblJlc3VsdGBcbiAgbGV0IGFjdGlvblN0YXR1cyA9IHBlbmRpbmdBY3Rpb25SZXN1bHQgPyBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLnN0YXR1c0NvZGUgOiB1bmRlZmluZWQ7XG4gIGxldCBzaG91bGRTa2lwUmV2YWxpZGF0aW9uID0gc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uICYmIGFjdGlvblN0YXR1cyAmJiBhY3Rpb25TdGF0dXMgPj0gNDAwO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcm91dGVcbiAgICB9ID0gbWF0Y2g7XG4gICAgaWYgKHJvdXRlLmxhenkpIHtcbiAgICAgIC8vIFdlIGhhdmVuJ3QgbG9hZGVkIHRoaXMgcm91dGUgeWV0IHNvIHdlIGRvbid0IGtub3cgaWYgaXQncyBnb3QgYSBsb2FkZXIhXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpbml0aWFsSHlkcmF0aW9uKSB7XG4gICAgICByZXR1cm4gc2hvdWxkTG9hZFJvdXRlT25IeWRyYXRpb24ocm91dGUsIHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLmVycm9ycyk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBjYWxsIHRoZSBsb2FkZXIgb24gbmV3IHJvdXRlIGluc3RhbmNlcyBhbmQgcGVuZGluZyBkZWZlciBjYW5jZWxsYXRpb25zXG4gICAgaWYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZShpZCA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG4gICAgbGV0IGN1cnJlbnRSb3V0ZU1hdGNoID0gc3RhdGUubWF0Y2hlc1tpbmRleF07XG4gICAgbGV0IG5leHRSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgcmV0dXJuIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBjdXJyZW50UGFyYW1zOiBjdXJyZW50Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbmV4dFJvdXRlTWF0Y2gucGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgYWN0aW9uU3RhdHVzLFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IHNob3VsZFNraXBSZXZhbGlkYXRpb24gPyBmYWxzZSA6XG4gICAgICAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHx8IGN1cnJlbnRVcmwucGF0aG5hbWUgKyBjdXJyZW50VXJsLnNlYXJjaCA9PT0gbmV4dFVybC5wYXRobmFtZSArIG5leHRVcmwuc2VhcmNoIHx8XG4gICAgICAvLyBTZWFyY2ggcGFyYW1zIGFmZmVjdCBhbGwgbG9hZGVyc1xuICAgICAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpXG4gICAgfSkpO1xuICB9KTtcbiAgLy8gUGljayBmZXRjaGVyLmxvYWRzIHRoYXQgbmVlZCB0byBiZSByZXZhbGlkYXRlZFxuICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBbXTtcbiAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICAvLyBEb24ndCByZXZhbGlkYXRlOlxuICAgIC8vICAtIG9uIGluaXRpYWwgaHlkcmF0aW9uIChzaG91bGRuJ3QgYmUgYW55IGZldGNoZXJzIHRoZW4gYW55d2F5KVxuICAgIC8vICAtIGlmIGZldGNoZXIgd29uJ3QgYmUgcHJlc2VudCBpbiB0aGUgc3Vic2VxdWVudCByZW5kZXJcbiAgICAvLyAgICAtIG5vIGxvbmdlciBtYXRjaGVzIHRoZSBVUkwgKHY3X2ZldGNoZXJQZXJzaXN0PWZhbHNlKVxuICAgIC8vICAgIC0gd2FzIHVubW91bnRlZCBidXQgcGVyc2lzdGVkIGR1ZSB0byB2N19mZXRjaGVyUGVyc2lzdD10cnVlXG4gICAgaWYgKGluaXRpYWxIeWRyYXRpb24gfHwgIW1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IGYucm91dGVJZCkgfHwgZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBmZXRjaGVyTWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBmLnBhdGgsIGJhc2VuYW1lKTtcbiAgICAvLyBJZiB0aGUgZmV0Y2hlciBwYXRoIG5vIGxvbmdlciBtYXRjaGVzLCBwdXNoIGl0IGluIHdpdGggbnVsbCBtYXRjaGVzIHNvXG4gICAgLy8gd2UgY2FuIHRyaWdnZXIgYSA0MDQgaW4gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhLiAgTm90ZSB0aGlzIGlzXG4gICAgLy8gY3VycmVudGx5IG9ubHkgYSB1c2UtY2FzZSBmb3IgUmVtaXggSE1SIHdoZXJlIHRoZSByb3V0ZSB0cmVlIGNhbiBjaGFuZ2VcbiAgICAvLyBhdCBydW50aW1lIGFuZCByZW1vdmUgYSByb3V0ZSBwcmV2aW91c2x5IGxvYWRlZCB2aWEgYSBmZXRjaGVyXG4gICAgaWYgKCFmZXRjaGVyTWF0Y2hlcykge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZDogZi5yb3V0ZUlkLFxuICAgICAgICBwYXRoOiBmLnBhdGgsXG4gICAgICAgIG1hdGNoZXM6IG51bGwsXG4gICAgICAgIG1hdGNoOiBudWxsLFxuICAgICAgICBjb250cm9sbGVyOiBudWxsXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUmV2YWxpZGF0aW5nIGZldGNoZXJzIGFyZSBkZWNvdXBsZWQgZnJvbSB0aGUgcm91dGUgbWF0Y2hlcyBzaW5jZSB0aGV5XG4gICAgLy8gbG9hZCBmcm9tIGEgc3RhdGljIGhyZWYuICBUaGV5IHJldmFsaWRhdGUgYmFzZWQgb24gZXhwbGljaXQgcmV2YWxpZGF0aW9uXG4gICAgLy8gKHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGUpXG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICBsZXQgZmV0Y2hlck1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2goZmV0Y2hlck1hdGNoZXMsIGYucGF0aCk7XG4gICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICBpZiAoZmV0Y2hSZWRpcmVjdElkcy5oYXMoa2V5KSkge1xuICAgICAgLy8gTmV2ZXIgdHJpZ2dlciBhIHJldmFsaWRhdGlvbiBvZiBhbiBhY3RpdmVseSByZWRpcmVjdGluZyBmZXRjaGVyXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChjYW5jZWxsZWRGZXRjaGVyTG9hZHMuaGFzKGtleSkpIHtcbiAgICAgIC8vIEFsd2F5cyBtYXJrIGZvciByZXZhbGlkYXRpb24gaWYgdGhlIGZldGNoZXIgd2FzIGNhbmNlbGxlZFxuICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmRlbGV0ZShrZXkpO1xuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChmZXRjaGVyICYmIGZldGNoZXIuc3RhdGUgIT09IFwiaWRsZVwiICYmIGZldGNoZXIuZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB0aGUgZmV0Y2hlciBoYXNuJ3QgZXZlciBjb21wbGV0ZWQgbG9hZGluZyB5ZXQsIHRoZW4gdGhpcyBpc24ndCBhXG4gICAgICAvLyByZXZhbGlkYXRpb24sIGl0IHdvdWxkIGp1c3QgYmUgYSBicmFuZCBuZXcgbG9hZCBpZiBhbiBleHBsaWNpdFxuICAgICAgLy8gcmV2YWxpZGF0aW9uIGlzIHJlcXVpcmVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gaXNSZXZhbGlkYXRpb25SZXF1aXJlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGZhbGwgYmFjayBvbiBhbnkgdXNlci1kZWZpbmVkIHNob3VsZFJldmFsaWRhdGUsIGRlZmF1bHRpbmdcbiAgICAgIC8vIHRvIGV4cGxpY2l0IHJldmFsaWRhdGlvbnMgb25seVxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IHNob3VsZFJldmFsaWRhdGVMb2FkZXIoZmV0Y2hlck1hdGNoLCBfZXh0ZW5kcyh7XG4gICAgICAgIGN1cnJlbnRVcmwsXG4gICAgICAgIGN1cnJlbnRQYXJhbXM6IHN0YXRlLm1hdGNoZXNbc3RhdGUubWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICAgIG5leHRVcmwsXG4gICAgICAgIG5leHRQYXJhbXM6IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXNcbiAgICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgICBhY3Rpb25TdGF0dXMsXG4gICAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBzaG91bGRTa2lwUmV2YWxpZGF0aW9uID8gZmFsc2UgOiBpc1JldmFsaWRhdGlvblJlcXVpcmVkXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogZmV0Y2hlck1hdGNoZXMsXG4gICAgICAgIG1hdGNoOiBmZXRjaGVyTWF0Y2gsXG4gICAgICAgIGNvbnRyb2xsZXI6IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuZnVuY3Rpb24gc2hvdWxkTG9hZFJvdXRlT25IeWRyYXRpb24ocm91dGUsIGxvYWRlckRhdGEsIGVycm9ycykge1xuICAvLyBXZSBkdW5ubyBpZiB3ZSBoYXZlIGEgbG9hZGVyIC0gZ290dGEgZmluZCBvdXQhXG4gIGlmIChyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gTm8gbG9hZGVyLCBub3RoaW5nIHRvIGluaXRpYWxpemVcbiAgaWYgKCFyb3V0ZS5sb2FkZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGhhc0RhdGEgPSBsb2FkZXJEYXRhICE9IG51bGwgJiYgbG9hZGVyRGF0YVtyb3V0ZS5pZF0gIT09IHVuZGVmaW5lZDtcbiAgbGV0IGhhc0Vycm9yID0gZXJyb3JzICE9IG51bGwgJiYgZXJyb3JzW3JvdXRlLmlkXSAhPT0gdW5kZWZpbmVkO1xuICAvLyBEb24ndCBydW4gaWYgd2UgZXJyb3InZCBkdXJpbmcgU1NSXG4gIGlmICghaGFzRGF0YSAmJiBoYXNFcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBFeHBsaWNpdGx5IG9wdGluZy1pbiB0byBydW5uaW5nIG9uIGh5ZHJhdGlvblxuICBpZiAodHlwZW9mIHJvdXRlLmxvYWRlciA9PT0gXCJmdW5jdGlvblwiICYmIHJvdXRlLmxvYWRlci5oeWRyYXRlID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gT3RoZXJ3aXNlLCBydW4gaWYgd2UncmUgbm90IHlldCBpbml0aWFsaXplZCB3aXRoIGFueXRoaW5nXG4gIHJldHVybiAhaGFzRGF0YSAmJiAhaGFzRXJyb3I7XG59XG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPVxuICAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHxcbiAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkO1xuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkO1xuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoXG4gICAgLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8XG4gICAgLy8gc3BsYXQgcGFyYW0gY2hhbmdlZCwgd2hpY2ggaXMgbm90IHByZXNlbnQgaW4gbWF0Y2gucGF0aFxuICAgIC8vIGUuZy4gL2ZpbGVzL2ltYWdlcy9hdmF0YXIuanBnIC0+IGZpbGVzL2ZpbmFuY2VzLnhsc1xuICAgIGN1cnJlbnRQYXRoICE9IG51bGwgJiYgY3VycmVudFBhdGguZW5kc1dpdGgoXCIqXCIpICYmIGN1cnJlbnRNYXRjaC5wYXJhbXNbXCIqXCJdICE9PSBtYXRjaC5wYXJhbXNbXCIqXCJdXG4gICk7XG59XG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG4gICAgaWYgKHR5cGVvZiByb3V0ZUNob2ljZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiByb3V0ZUNob2ljZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cbmZ1bmN0aW9uIHBhdGNoUm91dGVzSW1wbChyb3V0ZUlkLCBjaGlsZHJlbiwgcm91dGVzVG9Vc2UsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgdmFyIF9jaGlsZHJlblRvUGF0Y2g7XG4gIGxldCBjaGlsZHJlblRvUGF0Y2g7XG4gIGlmIChyb3V0ZUlkKSB7XG4gICAgbGV0IHJvdXRlID0gbWFuaWZlc3Rbcm91dGVJZF07XG4gICAgaW52YXJpYW50KHJvdXRlLCBcIk5vIHJvdXRlIGZvdW5kIHRvIHBhdGNoIGNoaWxkcmVuIGludG86IHJvdXRlSWQgPSBcIiArIHJvdXRlSWQpO1xuICAgIGlmICghcm91dGUuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gW107XG4gICAgfVxuICAgIGNoaWxkcmVuVG9QYXRjaCA9IHJvdXRlLmNoaWxkcmVuO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuVG9QYXRjaCA9IHJvdXRlc1RvVXNlO1xuICB9XG4gIC8vIERvbid0IHBhdGNoIGluIHJvdXRlcyB3ZSBhbHJlYWR5IGtub3cgYWJvdXQgc28gdGhhdCBgcGF0Y2hgIGlzIGlkZW1wb3RlbnRcbiAgLy8gdG8gc2ltcGxpZnkgdXNlci1sYW5kIGNvZGUuIFRoaXMgaXMgdXNlZnVsIGJlY2F1c2Ugd2UgcmUtY2FsbCB0aGVcbiAgLy8gYHBhdGNoUm91dGVzT25OYXZpZ2F0aW9uYCBmdW5jdGlvbiBmb3IgbWF0Y2hlZCByb3V0ZXMgd2l0aCBwYXJhbXMuXG4gIGxldCB1bmlxdWVDaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihuZXdSb3V0ZSA9PiAhY2hpbGRyZW5Ub1BhdGNoLnNvbWUoZXhpc3RpbmdSb3V0ZSA9PiBpc1NhbWVSb3V0ZShuZXdSb3V0ZSwgZXhpc3RpbmdSb3V0ZSkpKTtcbiAgbGV0IG5ld1JvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXModW5pcXVlQ2hpbGRyZW4sIG1hcFJvdXRlUHJvcGVydGllcywgW3JvdXRlSWQgfHwgXCJfXCIsIFwicGF0Y2hcIiwgU3RyaW5nKCgoX2NoaWxkcmVuVG9QYXRjaCA9IGNoaWxkcmVuVG9QYXRjaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jaGlsZHJlblRvUGF0Y2gubGVuZ3RoKSB8fCBcIjBcIildLCBtYW5pZmVzdCk7XG4gIGNoaWxkcmVuVG9QYXRjaC5wdXNoKC4uLm5ld1JvdXRlcyk7XG59XG5mdW5jdGlvbiBpc1NhbWVSb3V0ZShuZXdSb3V0ZSwgZXhpc3RpbmdSb3V0ZSkge1xuICAvLyBNb3N0IG9wdGltYWwgY2hlY2sgaXMgYnkgaWRcbiAgaWYgKFwiaWRcIiBpbiBuZXdSb3V0ZSAmJiBcImlkXCIgaW4gZXhpc3RpbmdSb3V0ZSAmJiBuZXdSb3V0ZS5pZCA9PT0gZXhpc3RpbmdSb3V0ZS5pZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIFNlY29uZCBpcyBieSBwYXRoaW5nIGRpZmZlcmVuY2VzXG4gIGlmICghKG5ld1JvdXRlLmluZGV4ID09PSBleGlzdGluZ1JvdXRlLmluZGV4ICYmIG5ld1JvdXRlLnBhdGggPT09IGV4aXN0aW5nUm91dGUucGF0aCAmJiBuZXdSb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSBleGlzdGluZ1JvdXRlLmNhc2VTZW5zaXRpdmUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFBhdGhsZXNzIGxheW91dCByb3V0ZXMgYXJlIHRyaWNraWVyIHNpbmNlIHdlIG5lZWQgdG8gY2hlY2sgY2hpbGRyZW4uXG4gIC8vIElmIHRoZXkgaGF2ZSBubyBjaGlsZHJlbiB0aGVuIHRoZXkncmUgdGhlIHNhbWUgYXMgZmFyIGFzIHdlIGNhbiB0ZWxsXG4gIGlmICgoIW5ld1JvdXRlLmNoaWxkcmVuIHx8IG5ld1JvdXRlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgJiYgKCFleGlzdGluZ1JvdXRlLmNoaWxkcmVuIHx8IGV4aXN0aW5nUm91dGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIE90aGVyd2lzZSwgd2UgbG9vayB0byBzZWUgaWYgZXZlcnkgY2hpbGQgaW4gdGhlIG5ldyByb3V0ZSBpcyBhbHJlYWR5XG4gIC8vIHJlcHJlc2VudGVkIGluIHRoZSBleGlzdGluZyByb3V0ZSdzIGNoaWxkcmVuXG4gIHJldHVybiBuZXdSb3V0ZS5jaGlsZHJlbi5ldmVyeSgoYUNoaWxkLCBpKSA9PiB7XG4gICAgdmFyIF9leGlzdGluZ1JvdXRlJGNoaWxkcjtcbiAgICByZXR1cm4gKF9leGlzdGluZ1JvdXRlJGNoaWxkciA9IGV4aXN0aW5nUm91dGUuY2hpbGRyZW4pID09IG51bGwgPyB2b2lkIDAgOiBfZXhpc3RpbmdSb3V0ZSRjaGlsZHIuc29tZShiQ2hpbGQgPT4gaXNTYW1lUm91dGUoYUNoaWxkLCBiQ2hpbGQpKTtcbiAgfSk7XG59XG4vKipcbiAqIEV4ZWN1dGUgcm91dGUubGF6eSgpIG1ldGhvZHMgdG8gbGF6aWx5IGxvYWQgcm91dGUgbW9kdWxlcyAobG9hZGVyLCBhY3Rpb24sXG4gKiBzaG91bGRSZXZhbGlkYXRlKSBhbmQgdXBkYXRlIHRoZSByb3V0ZU1hbmlmZXN0IGluIHBsYWNlIHdoaWNoIHNoYXJlcyBvYmplY3RzXG4gKiB3aXRoIGRhdGFSb3V0ZXMgc28gdGhvc2UgZ2V0IHVwZGF0ZWQgYXMgd2VsbC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZExhenlSb3V0ZU1vZHVsZShyb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCkge1xuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGxhenlSb3V0ZSA9IGF3YWl0IHJvdXRlLmxhenkoKTtcbiAgLy8gSWYgdGhlIGxhenkgcm91dGUgZnVuY3Rpb24gd2FzIGV4ZWN1dGVkIGFuZCByZW1vdmVkIGJ5IGFub3RoZXIgcGFyYWxsZWxcbiAgLy8gY2FsbCB0aGVuIHdlIGNhbiByZXR1cm4gLSBmaXJzdCBsYXp5KCkgdG8gZmluaXNoIHdpbnMgYmVjYXVzZSB0aGUgcmV0dXJuXG4gIC8vIHZhbHVlIG9mIGxhenkgaXMgZXhwZWN0ZWQgdG8gYmUgc3RhdGljXG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcm91dGVUb1VwZGF0ZSA9IG1hbmlmZXN0W3JvdXRlLmlkXTtcbiAgaW52YXJpYW50KHJvdXRlVG9VcGRhdGUsIFwiTm8gcm91dGUgZm91bmQgaW4gbWFuaWZlc3RcIik7XG4gIC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG4gIGxldCByb3V0ZVVwZGF0ZXMgPSB7fTtcbiAgZm9yIChsZXQgbGF6eVJvdXRlUHJvcGVydHkgaW4gbGF6eVJvdXRlKSB7XG4gICAgbGV0IHN0YXRpY1JvdXRlVmFsdWUgPSByb3V0ZVRvVXBkYXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICBsZXQgaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkID0gc3RhdGljUm91dGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpc24ndCBzdGF0aWMgc2luY2UgaXQgc2hvdWxkIGFsd2F5cyBiZSB1cGRhdGVkIGJhc2VkXG4gICAgLy8gb24gdGhlIHJvdXRlIHVwZGF0ZXNcbiAgICBsYXp5Um91dGVQcm9wZXJ0eSAhPT0gXCJoYXNFcnJvckJvdW5kYXJ5XCI7XG4gICAgd2FybmluZyghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkLCBcIlJvdXRlIFxcXCJcIiArIHJvdXRlVG9VcGRhdGUuaWQgKyBcIlxcXCIgaGFzIGEgc3RhdGljIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIFwiICsgXCJkZWZpbmVkIGJ1dCBpdHMgbGF6eSBmdW5jdGlvbiBpcyBhbHNvIHJldHVybmluZyBhIHZhbHVlIGZvciB0aGlzIHByb3BlcnR5LiBcIiArIChcIlRoZSBsYXp5IHJvdXRlIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIHdpbGwgYmUgaWdub3JlZC5cIikpO1xuICAgIGlmICghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkICYmICFpbW11dGFibGVSb3V0ZUtleXMuaGFzKGxhenlSb3V0ZVByb3BlcnR5KSkge1xuICAgICAgcm91dGVVcGRhdGVzW2xhenlSb3V0ZVByb3BlcnR5XSA9IGxhenlSb3V0ZVtsYXp5Um91dGVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG4gIC8vIE11dGF0ZSB0aGUgcm91dGUgd2l0aCB0aGUgcHJvdmlkZWQgdXBkYXRlcy4gIERvIHRoaXMgZmlyc3Qgc28gd2UgcGFzc1xuICAvLyB0aGUgdXBkYXRlZCB2ZXJzaW9uIHRvIG1hcFJvdXRlUHJvcGVydGllc1xuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIHJvdXRlVXBkYXRlcyk7XG4gIC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCBfZXh0ZW5kcyh7fSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlVG9VcGRhdGUpLCB7XG4gICAgbGF6eTogdW5kZWZpbmVkXG4gIH0pKTtcbn1cbi8vIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYGRhdGFTdHJhdGVneWAgd2hpY2ggZmV0Y2hlcyBhbGwgbG9hZGVycyBpbiBwYXJhbGxlbFxuYXN5bmMgZnVuY3Rpb24gZGVmYXVsdERhdGFTdHJhdGVneShfcmVmNCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IF9yZWY0O1xuICBsZXQgbWF0Y2hlc1RvTG9hZCA9IG1hdGNoZXMuZmlsdGVyKG0gPT4gbS5zaG91bGRMb2FkKTtcbiAgbGV0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChtYXRjaGVzVG9Mb2FkLm1hcChtID0+IG0ucmVzb2x2ZSgpKSk7XG4gIHJldHVybiByZXN1bHRzLnJlZHVjZSgoYWNjLCByZXN1bHQsIGkpID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgW21hdGNoZXNUb0xvYWRbaV0ucm91dGUuaWRdOiByZXN1bHRcbiAgfSksIHt9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3lJbXBsKGRhdGFTdHJhdGVneUltcGwsIHR5cGUsIHN0YXRlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBmZXRjaGVyS2V5LCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCByZXF1ZXN0Q29udGV4dCkge1xuICBsZXQgbG9hZFJvdXRlRGVmaW5pdGlvbnNQcm9taXNlcyA9IG1hdGNoZXMubWFwKG0gPT4gbS5yb3V0ZS5sYXp5ID8gbG9hZExhenlSb3V0ZU1vZHVsZShtLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KSA6IHVuZGVmaW5lZCk7XG4gIGxldCBkc01hdGNoZXMgPSBtYXRjaGVzLm1hcCgobWF0Y2gsIGkpID0+IHtcbiAgICBsZXQgbG9hZFJvdXRlUHJvbWlzZSA9IGxvYWRSb3V0ZURlZmluaXRpb25zUHJvbWlzZXNbaV07XG4gICAgbGV0IHNob3VsZExvYWQgPSBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgLy8gYHJlc29sdmVgIGVuY2Fwc3VsYXRlcyByb3V0ZS5sYXp5KCksIGV4ZWN1dGluZyB0aGUgbG9hZGVyL2FjdGlvbixcbiAgICAvLyBhbmQgbWFwcGluZyByZXR1cm4gdmFsdWVzL3Rocm93biBlcnJvcnMgdG8gYSBgRGF0YVN0cmF0ZWd5UmVzdWx0YC4gIFVzZXJzXG4gICAgLy8gY2FuIHBhc3MgYSBjYWxsYmFjayB0byB0YWtlIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIGV4ZWN1dGlvblxuICAgIC8vIG9mIHRoZSBsb2FkZXIvYWN0aW9uXG4gICAgbGV0IHJlc29sdmUgPSBhc3luYyBoYW5kbGVyT3ZlcnJpZGUgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJPdmVycmlkZSAmJiByZXF1ZXN0Lm1ldGhvZCA9PT0gXCJHRVRcIiAmJiAobWF0Y2gucm91dGUubGF6eSB8fCBtYXRjaC5yb3V0ZS5sb2FkZXIpKSB7XG4gICAgICAgIHNob3VsZExvYWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNob3VsZExvYWQgPyBjYWxsTG9hZGVyT3JBY3Rpb24odHlwZSwgcmVxdWVzdCwgbWF0Y2gsIGxvYWRSb3V0ZVByb21pc2UsIGhhbmRsZXJPdmVycmlkZSwgcmVxdWVzdENvbnRleHQpIDogUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICByZXN1bHQ6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG1hdGNoLCB7XG4gICAgICBzaG91bGRMb2FkLFxuICAgICAgcmVzb2x2ZVxuICAgIH0pO1xuICB9KTtcbiAgLy8gU2VuZCBhbGwgbWF0Y2hlcyBoZXJlIHRvIGFsbG93IGZvciBhIG1pZGRsZXdhcmUtdHlwZSBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gaGFuZGxlciB3aWxsIGJlIGEgbm8tb3AgZm9yIHVubmVlZGVkIHJvdXRlcyBhbmQgd2UgZmlsdGVyIHRob3NlIHJlc3VsdHNcbiAgLy8gYmFjayBvdXQgYmVsb3cuXG4gIGxldCByZXN1bHRzID0gYXdhaXQgZGF0YVN0cmF0ZWd5SW1wbCh7XG4gICAgbWF0Y2hlczogZHNNYXRjaGVzLFxuICAgIHJlcXVlc3QsXG4gICAgcGFyYW1zOiBtYXRjaGVzWzBdLnBhcmFtcyxcbiAgICBmZXRjaGVyS2V5LFxuICAgIGNvbnRleHQ6IHJlcXVlc3RDb250ZXh0XG4gIH0pO1xuICAvLyBXYWl0IGZvciBhbGwgcm91dGVzIHRvIGxvYWQgaGVyZSBidXQgJ3N3YWxsb3cgdGhlIGVycm9yIHNpbmNlIHdlIHdhbnRcbiAgLy8gaXQgdG8gYnViYmxlIHVwIGZyb20gdGhlIGBhd2FpdCBsb2FkUm91dGVQcm9taXNlYCBpbiBgY2FsbExvYWRlck9yQWN0aW9uYCAtXG4gIC8vIGNhbGxlZCBmcm9tIGBtYXRjaC5yZXNvbHZlKClgXG4gIHRyeSB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwobG9hZFJvdXRlRGVmaW5pdGlvbnNQcm9taXNlcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOby1vcFxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufVxuLy8gRGVmYXVsdCBsb2dpYyBmb3IgY2FsbGluZyBhIGxvYWRlci9hY3Rpb24gaXMgdGhlIHVzZXIgaGFzIG5vIHNwZWNpZmllZCBhIGRhdGFTdHJhdGVneVxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBsb2FkUm91dGVQcm9taXNlLCBoYW5kbGVyT3ZlcnJpZGUsIHN0YXRpY0NvbnRleHQpIHtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IG9uUmVqZWN0O1xuICBsZXQgcnVuSGFuZGxlciA9IGhhbmRsZXIgPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDtcbiAgICAvLyBUaGlzIHdpbGwgbmV2ZXIgcmVzb2x2ZSBzbyBzYWZlIHRvIHR5cGUgaXQgYXMgUHJvbWlzZTxEYXRhU3RyYXRlZ3lSZXN1bHQ+IHRvXG4gICAgLy8gc2F0aXNmeSB0aGUgZnVuY3Rpb24gcmV0dXJuIHZhbHVlXG4gICAgbGV0IGFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICBvblJlamVjdCA9ICgpID0+IHJlamVjdCgpO1xuICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG4gICAgbGV0IGFjdHVhbEhhbmRsZXIgPSBjdHggPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIllvdSBjYW5ub3QgY2FsbCB0aGUgaGFuZGxlciBmb3IgYSByb3V0ZSB3aGljaCBkZWZpbmVzIGEgYm9vbGVhbiBcIiArIChcIlxcXCJcIiArIHR5cGUgKyBcIlxcXCIgW3JvdXRlSWQ6IFwiICsgbWF0Y2gucm91dGUuaWQgKyBcIl1cIikpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYW5kbGVyKHtcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgcGFyYW1zOiBtYXRjaC5wYXJhbXMsXG4gICAgICAgIGNvbnRleHQ6IHN0YXRpY0NvbnRleHRcbiAgICAgIH0sIC4uLihjdHggIT09IHVuZGVmaW5lZCA/IFtjdHhdIDogW10pKTtcbiAgICB9O1xuICAgIGxldCBoYW5kbGVyUHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgdmFsID0gYXdhaXQgKGhhbmRsZXJPdmVycmlkZSA/IGhhbmRsZXJPdmVycmlkZShjdHggPT4gYWN0dWFsSGFuZGxlcihjdHgpKSA6IGFjdHVhbEhhbmRsZXIoKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJkYXRhXCIsXG4gICAgICAgICAgcmVzdWx0OiB2YWxcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgcmVzdWx0OiBlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSkoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtoYW5kbGVyUHJvbWlzZSwgYWJvcnRQcm9taXNlXSk7XG4gIH07XG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICAvLyBJZiB3ZSBoYXZlIGEgcm91dGUubGF6eSBwcm9taXNlLCBhd2FpdCB0aGF0IGZpcnN0XG4gICAgaWYgKGxvYWRSb3V0ZVByb21pc2UpIHtcbiAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIC8vIFJ1biBzdGF0aWNhbGx5IGRlZmluZWQgaGFuZGxlciBpbiBwYXJhbGxlbCB3aXRoIGxhenkoKVxuICAgICAgICBsZXQgaGFuZGxlckVycm9yO1xuICAgICAgICBsZXQgW3ZhbHVlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgLy8gSWYgdGhlIGhhbmRsZXIgdGhyb3dzLCBkb24ndCBsZXQgaXQgaW1tZWRpYXRlbHkgYnViYmxlIG91dCxcbiAgICAgICAgLy8gc2luY2Ugd2UgbmVlZCB0byBsZXQgdGhlIGxhenkoKSBleGVjdXRpb24gZmluaXNoIHNvIHdlIGtub3cgaWYgdGhpc1xuICAgICAgICAvLyByb3V0ZSBoYXMgYSBib3VuZGFyeSB0aGF0IGNhbiBoYW5kbGUgdGhlIGVycm9yXG4gICAgICAgIHJ1bkhhbmRsZXIoaGFuZGxlcikuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgaGFuZGxlckVycm9yID0gZTtcbiAgICAgICAgfSksIGxvYWRSb3V0ZVByb21pc2VdKTtcbiAgICAgICAgaWYgKGhhbmRsZXJFcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgaGFuZGxlckVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTG9hZCBsYXp5IHJvdXRlIG1vZHVsZSwgdGhlbiBydW4gYW55IHJldHVybmVkIGhhbmRsZXJcbiAgICAgICAgYXdhaXQgbG9hZFJvdXRlUHJvbWlzZTtcbiAgICAgICAgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIC8vIEhhbmRsZXIgc3RpbGwgcnVucyBldmVuIGlmIHdlIGdvdCBpbnRlcnJ1cHRlZCB0byBtYWludGFpbiBjb25zaXN0ZW5jeVxuICAgICAgICAgIC8vIHdpdGggdW4tYWJvcnRhYmxlIGJlaGF2aW9yIG9mIGhhbmRsZXIgZXhlY3V0aW9uIG9uIG5vbi1sYXp5IG9yXG4gICAgICAgICAgLy8gcHJldmlvdXNseS1sYXp5LWxvYWRlZCByb3V0ZXNcbiAgICAgICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiYWN0aW9uXCIpIHtcbiAgICAgICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgICAgbGV0IHBhdGhuYW1lID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICAgICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgcm91dGVJZDogbWF0Y2gucm91dGUuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBsYXp5KCkgcm91dGUgaGFzIG5vIGxvYWRlciB0byBydW4uICBTaG9ydCBjaXJjdWl0IGhlcmUgc28gd2UgZG9uJ3RcbiAgICAgICAgICAvLyBoaXQgdGhlIGludmFyaWFudCBiZWxvdyB0aGF0IGVycm9ycyBvbiByZXR1cm5pbmcgdW5kZWZpbmVkLlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgICAgICByZXN1bHQ6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFoYW5kbGVyKSB7XG4gICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQocmVzdWx0LnJlc3VsdCAhPT0gdW5kZWZpbmVkLCBcIllvdSBkZWZpbmVkIFwiICsgKHR5cGUgPT09IFwiYWN0aW9uXCIgPyBcImFuIGFjdGlvblwiIDogXCJhIGxvYWRlclwiKSArIFwiIGZvciByb3V0ZSBcIiArIChcIlxcXCJcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJcXFwiIGJ1dCBkaWRuJ3QgcmV0dXJuIGFueXRoaW5nIGZyb20geW91ciBgXCIgKyB0eXBlICsgXCJgIFwiKSArIFwiZnVuY3Rpb24uIFBsZWFzZSByZXR1cm4gYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gV2Ugc2hvdWxkIGFscmVhZHkgYmUgY2F0Y2hpbmcgYW5kIGNvbnZlcnRpbmcgbm9ybWFsIGhhbmRsZXIgZXhlY3V0aW9ucyB0b1xuICAgIC8vIERhdGFTdHJhdGVneVJlc3VsdHMgYW5kIHJldHVybmluZyB0aGVtLCBzbyBhbnl0aGluZyB0aGF0IHRocm93cyBoZXJlIGlzIGFuXG4gICAgLy8gdW5leHBlY3RlZCBlcnJvciB3ZSBzdGlsbCBuZWVkIHRvIHdyYXBcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgIHJlc3VsdDogZVxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKG9uUmVqZWN0KSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuYXN5bmMgZnVuY3Rpb24gY29udmVydERhdGFTdHJhdGVneVJlc3VsdFRvRGF0YVJlc3VsdChkYXRhU3RyYXRlZ3lSZXN1bHQpIHtcbiAgbGV0IHtcbiAgICByZXN1bHQsXG4gICAgdHlwZVxuICB9ID0gZGF0YVN0cmF0ZWd5UmVzdWx0O1xuICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgICBpZiAoY29udGVudFR5cGUgJiYgL1xcYmFwcGxpY2F0aW9uXFwvanNvblxcYi8udGVzdChjb250ZW50VHlwZSkpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5ib2R5ID09IG51bGwpIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2VJbXBsKHJlc3VsdC5zdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICBkYXRhLFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgfTtcbiAgfVxuICBpZiAodHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgIGlmIChpc0RhdGFXaXRoUmVzcG9uc2VJbml0KHJlc3VsdCkpIHtcbiAgICAgIHZhciBfcmVzdWx0JGluaXQyO1xuICAgICAgaWYgKHJlc3VsdC5kYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdmFyIF9yZXN1bHQkaW5pdDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICAgIGVycm9yOiByZXN1bHQuZGF0YSxcbiAgICAgICAgICBzdGF0dXNDb2RlOiAoX3Jlc3VsdCRpbml0ID0gcmVzdWx0LmluaXQpID09IG51bGwgPyB2b2lkIDAgOiBfcmVzdWx0JGluaXQuc3RhdHVzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICAvLyBDb252ZXJ0IHRocm93biBkYXRhKCkgdG8gRXJyb3JSZXNwb25zZSBpbnN0YW5jZXNcbiAgICAgIHJlc3VsdCA9IG5ldyBFcnJvclJlc3BvbnNlSW1wbCgoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuc3RhdHVzKSB8fCA1MDAsIHVuZGVmaW5lZCwgcmVzdWx0LmRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgIGVycm9yOiByZXN1bHQsXG4gICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQpID8gcmVzdWx0LnN0YXR1cyA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbiAgaWYgKGlzRGVmZXJyZWREYXRhKHJlc3VsdCkpIHtcbiAgICB2YXIgX3Jlc3VsdCRpbml0MywgX3Jlc3VsdCRpbml0NDtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZCxcbiAgICAgIGRlZmVycmVkRGF0YTogcmVzdWx0LFxuICAgICAgc3RhdHVzQ29kZTogKF9yZXN1bHQkaW5pdDMgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDMuc3RhdHVzLFxuICAgICAgaGVhZGVyczogKChfcmVzdWx0JGluaXQ0ID0gcmVzdWx0LmluaXQpID09IG51bGwgPyB2b2lkIDAgOiBfcmVzdWx0JGluaXQ0LmhlYWRlcnMpICYmIG5ldyBIZWFkZXJzKHJlc3VsdC5pbml0LmhlYWRlcnMpXG4gICAgfTtcbiAgfVxuICBpZiAoaXNEYXRhV2l0aFJlc3BvbnNlSW5pdChyZXN1bHQpKSB7XG4gICAgdmFyIF9yZXN1bHQkaW5pdDUsIF9yZXN1bHQkaW5pdDY7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgc3RhdHVzQ29kZTogKF9yZXN1bHQkaW5pdDUgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDUuc3RhdHVzLFxuICAgICAgaGVhZGVyczogKF9yZXN1bHQkaW5pdDYgPSByZXN1bHQuaW5pdCkgIT0gbnVsbCAmJiBfcmVzdWx0JGluaXQ2LmhlYWRlcnMgPyBuZXcgSGVhZGVycyhyZXN1bHQuaW5pdC5oZWFkZXJzKSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59XG4vLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG5mdW5jdGlvbiBub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0LCByb3V0ZUlkLCBtYXRjaGVzLCBiYXNlbmFtZSwgdjdfcmVsYXRpdmVTcGxhdFBhdGgpIHtcbiAgbGV0IGxvY2F0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpO1xuICBpZiAoIUFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgIGxldCB0cmltbWVkTWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpO1xuICAgIGxvY2F0aW9uID0gbm9ybWFsaXplVG8obmV3IFVSTChyZXF1ZXN0LnVybCksIHRyaW1tZWRNYXRjaGVzLCBiYXNlbmFtZSwgdHJ1ZSwgbG9jYXRpb24sIHY3X3JlbGF0aXZlU3BsYXRQYXRoKTtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgfVxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5mdW5jdGlvbiBub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uKGxvY2F0aW9uLCBjdXJyZW50VXJsLCBiYXNlbmFtZSkge1xuICBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgLy8gU3RyaXAgb2ZmIHRoZSBwcm90b2NvbCtvcmlnaW4gZm9yIHNhbWUtb3JpZ2luICsgc2FtZS1iYXNlbmFtZSBhYnNvbHV0ZSByZWRpcmVjdHNcbiAgICBsZXQgbm9ybWFsaXplZExvY2F0aW9uID0gbG9jYXRpb247XG4gICAgbGV0IHVybCA9IG5vcm1hbGl6ZWRMb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBub3JtYWxpemVkTG9jYXRpb24pIDogbmV3IFVSTChub3JtYWxpemVkTG9jYXRpb24pO1xuICAgIGxldCBpc1NhbWVCYXNlbmFtZSA9IHN0cmlwQmFzZW5hbWUodXJsLnBhdGhuYW1lLCBiYXNlbmFtZSkgIT0gbnVsbDtcbiAgICBpZiAodXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgaXNTYW1lQmFzZW5hbWUpIHtcbiAgICAgIHJldHVybiB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoICsgdXJsLmhhc2g7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbi8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChoaXN0b3J5LCBsb2NhdGlvbiwgc2lnbmFsLCBzdWJtaXNzaW9uKSB7XG4gIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdHJpcEhhc2hGcm9tUGF0aChsb2NhdGlvbikpLnRvU3RyaW5nKCk7XG4gIGxldCBpbml0ID0ge1xuICAgIHNpZ25hbFxuICB9O1xuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlXG4gICAgfSA9IHN1Ym1pc3Npb247XG4gICAgLy8gRGlkbid0IHRoaW5rIHdlIG5lZWRlZCB0aGlzIGJ1dCBpdCB0dXJucyBvdXQgdW5saWtlIG90aGVyIG1ldGhvZHMsIHBhdGNoXG4gICAgLy8gd29uJ3QgYmUgcHJvcGVybHkgbm9ybWFsaXplZCB0byB1cHBlcmNhc2UgYW5kIHJlc3VsdHMgaW4gYSA0MDUgZXJyb3IuXG4gICAgLy8gU2VlOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1tZXRob2RcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICBpbml0LmhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IGZvcm1FbmNUeXBlXG4gICAgICB9KTtcbiAgICAgIGluaXQuYm9keSA9IEpTT04uc3RyaW5naWZ5KHN1Ym1pc3Npb24uanNvbik7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi50ZXh0O1xuICAgIH0gZWxzZSBpZiAoZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgJiYgc3VibWlzc2lvbi5mb3JtRGF0YSkge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhzdWJtaXNzaW9uLmZvcm1EYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLmZvcm1EYXRhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IFJlcXVlc3QodXJsLCBpbml0KTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNjb252ZXJ0aW5nLWFuLWVudHJ5LWxpc3QtdG8tYS1saXN0LW9mLW5hbWUtdmFsdWUtcGFpcnNcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiB2YWx1ZS5uYW1lKTtcbiAgfVxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuZnVuY3Rpb24gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKSB7XG4gIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2Ygc2VhcmNoUGFyYW1zLmVudHJpZXMoKSkge1xuICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZm9ybURhdGE7XG59XG5mdW5jdGlvbiBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIGFjdGl2ZURlZmVycmVkcywgc2tpcExvYWRlckVycm9yQnViYmxpbmcpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTtcbiAgbGV0IHBlbmRpbmdFcnJvciA9IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3IgOiB1bmRlZmluZWQ7XG4gIC8vIFByb2Nlc3MgbG9hZGVyIHJlc3VsdHMgaW50byBzdGF0ZS5sb2FkZXJEYXRhL3N0YXRlLmVycm9yc1xuICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgIGlmICghKG1hdGNoLnJvdXRlLmlkIGluIHJlc3VsdHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2lkXTtcbiAgICBpbnZhcmlhbnQoIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSwgXCJDYW5ub3QgaGFuZGxlIHJlZGlyZWN0IHJlc3VsdHMgaW4gcHJvY2Vzc0xvYWRlckRhdGFcIik7XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG4gICAgICBpZiAocGVuZGluZ0Vycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXJyb3IgPSBwZW5kaW5nRXJyb3I7XG4gICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGVycm9ycyA9IGVycm9ycyB8fCB7fTtcbiAgICAgIGlmIChza2lwTG9hZGVyRXJyb3JCdWJibGluZykge1xuICAgICAgICBlcnJvcnNbaWRdID0gZXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZXJyb3JcbiAgICAgICAgLy8gYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2guICBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlc1xuICAgICAgICAvLyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICAgIGlmIChlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPT0gbnVsbCkge1xuICAgICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcbiAgICAgIGlmICghZm91bmRFcnJvcikge1xuICAgICAgICBmb3VuZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgc3RhdHVzQ29kZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgICAvLyBFcnJvciBzdGF0dXMgY29kZXMgYWx3YXlzIG92ZXJyaWRlIHN1Y2Nlc3Mgc3RhdHVzIGNvZGVzLCBidXQgaWYgYWxsXG4gICAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgJiYgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiAhZm91bmRFcnJvcikge1xuICAgICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kYXRhO1xuICAgICAgICAvLyBFcnJvciBzdGF0dXMgY29kZXMgYWx3YXlzIG92ZXJyaWRlIHN1Y2Nlc3Mgc3RhdHVzIGNvZGVzLCBidXQgaWYgYWxsXG4gICAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8vIElmIHdlIGRpZG4ndCBjb25zdW1lIHRoZSBwZW5kaW5nIGFjdGlvbiBlcnJvciAoaS5lLiwgYWxsIGxvYWRlcnNcbiAgLy8gcmVzb2x2ZWQpLCB0aGVuIGNvbnN1bWUgaXQgaGVyZS4gIEFsc28gY2xlYXIgb3V0IGFueSBsb2FkZXJEYXRhIGZvciB0aGVcbiAgLy8gdGhyb3dpbmcgcm91dGVcbiAgaWYgKHBlbmRpbmdFcnJvciAhPT0gdW5kZWZpbmVkICYmIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICBlcnJvcnMgPSB7XG4gICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdFcnJvclxuICAgIH07XG4gICAgbG9hZGVyRGF0YVtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUgfHwgMjAwLFxuICAgIGxvYWRlckhlYWRlcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uUmVzdWx0LCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIGFjdGl2ZURlZmVycmVkcywgZmFsc2UgLy8gVGhpcyBtZXRob2QgaXMgb25seSBjYWxsZWQgY2xpZW50IHNpZGUgc28gd2UgYWx3YXlzIHdhbnQgdG8gYnViYmxlXG4gICk7XG4gIC8vIFByb2Nlc3MgcmVzdWx0cyBmcm9tIG91ciByZXZhbGlkYXRpbmcgZmV0Y2hlcnNcbiAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIG1hdGNoLFxuICAgICAgY29udHJvbGxlclxuICAgIH0gPSByZjtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNba2V5XTtcbiAgICBpbnZhcmlhbnQocmVzdWx0LCBcIkRpZCBub3QgZmluZCBjb3JyZXNwb25kaW5nIGZldGNoZXIgcmVzdWx0XCIpO1xuICAgIC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG4gICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gTm90aGluZyB0byBkbyBmb3IgYWJvcnRlZCBmZXRjaGVyc1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGlmICghKGVycm9ycyAmJiBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0pKSB7XG4gICAgICAgIGVycm9ycyA9IF9leHRlbmRzKHt9LCBlcnJvcnMsIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5mdW5jdGlvbiBtZXJnZUxvYWRlckRhdGEobG9hZGVyRGF0YSwgbmV3TG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSB7XG4gIGxldCBtZXJnZWRMb2FkZXJEYXRhID0gX2V4dGVuZHMoe30sIG5ld0xvYWRlckRhdGEpO1xuICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG4gICAgaWYgKG5ld0xvYWRlckRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCAmJiBtYXRjaC5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIGtleXMgbm90IGluY2x1ZGVkIGluIG5ld0xvYWRlckRhdGEgYW5kIHdoZXJlIGEgbG9hZGVyXG4gICAgICAvLyB3YXNuJ3QgcmVtb3ZlZCBieSBITVJcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgLy8gRG9uJ3Qga2VlcCBhbnkgbG9hZGVyIGRhdGEgYmVsb3cgdGhlIGJvdW5kYXJ5XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1lcmdlZExvYWRlckRhdGE7XG59XG5mdW5jdGlvbiBnZXRBY3Rpb25EYXRhRm9yQ29tbWl0KHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgaWYgKCFwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8ge1xuICAgIC8vIENsZWFyIG91dCBwcmlvciBhY3Rpb25EYXRhIG9uIGVycm9yc1xuICAgIGFjdGlvbkRhdGE6IHt9XG4gIH0gOiB7XG4gICAgYWN0aW9uRGF0YToge1xuICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmRhdGFcbiAgICB9XG4gIH07XG59XG4vLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuZnVuY3Rpb24gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCByb3V0ZUlkKSB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkID8gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpICsgMSkgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiBlbGlnaWJsZU1hdGNoZXMucmV2ZXJzZSgpLmZpbmQobSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8IG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcykge1xuICAvLyBQcmVmZXIgYSByb290IGxheW91dCByb3V0ZSBpZiBwcmVzZW50LCBvdGhlcndpc2Ugc2hpbSBpbiBhIHJvdXRlIG9iamVjdFxuICBsZXQgcm91dGUgPSByb3V0ZXMubGVuZ3RoID09PSAxID8gcm91dGVzWzBdIDogcm91dGVzLmZpbmQociA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSBcIi9cIikgfHwge1xuICAgIGlkOiBcIl9fc2hpbS1lcnJvci1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcihzdGF0dXMsIF90ZW1wNSkge1xuICBsZXQge1xuICAgIHBhdGhuYW1lLFxuICAgIHJvdXRlSWQsXG4gICAgbWV0aG9kLFxuICAgIHR5cGUsXG4gICAgbWVzc2FnZVxuICB9ID0gX3RlbXA1ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNTtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcbiAgaWYgKHN0YXR1cyA9PT0gNDAwKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiQmFkIFJlcXVlc3RcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZCArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGEgYGxvYWRlcmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGVmZXItYWN0aW9uXCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiaW52YWxpZC1ib2R5XCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiVW5hYmxlIHRvIGVuY29kZSBzdWJtaXNzaW9uIGJvZHlcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJGb3JiaWRkZW5cIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIlJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIgZG9lcyBub3QgbWF0Y2ggVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDQpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJOb3QgRm91bmRcIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHJvdXRlIG1hdGNoZXMgVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDUpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJNZXRob2QgTm90IEFsbG93ZWRcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYW4gYGFjdGlvbmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFxcXCJcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCJcXFwiXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZUltcGwoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpO1xufVxuLy8gRmluZCBhbnkgcmV0dXJuZWQgcmVkaXJlY3QgZXJyb3JzLCBzdGFydGluZyBmcm9tIHRoZSBsb3dlc3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmRSZWRpcmVjdChyZXN1bHRzKSB7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMocmVzdWx0cyk7XG4gIGZvciAobGV0IGkgPSBlbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IFtrZXksIHJlc3VsdF0gPSBlbnRyaWVzW2ldO1xuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleSxcbiAgICAgICAgcmVzdWx0XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHBhdGgpIDogcGF0aDtcbiAgcmV0dXJuIGNyZWF0ZVBhdGgoX2V4dGVuZHMoe30sIHBhcnNlZFBhdGgsIHtcbiAgICBoYXNoOiBcIlwiXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICBpZiAoYS5wYXRobmFtZSAhPT0gYi5wYXRobmFtZSB8fCBhLnNlYXJjaCAhPT0gYi5zZWFyY2gpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGEuaGFzaCA9PT0gXCJcIikge1xuICAgIC8vIC9wYWdlIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gYi5oYXNoICE9PSBcIlwiO1xuICB9IGVsc2UgaWYgKGEuaGFzaCA9PT0gYi5oYXNoKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoYi5oYXNoICE9PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNvdGhlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIElmIHRoZSBoYXNoIGlzIHJlbW92ZWQgdGhlIGJyb3dzZXIgd2lsbCByZS1wZXJmb3JtIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyXG4gIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2VcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNEYXRhU3RyYXRlZ3lSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQgIT0gbnVsbCAmJiB0eXBlb2YgcmVzdWx0ID09PSBcIm9iamVjdFwiICYmIFwidHlwZVwiIGluIHJlc3VsdCAmJiBcInJlc3VsdFwiIGluIHJlc3VsdCAmJiAocmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGF0YSB8fCByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcik7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0RGF0YVN0cmF0ZWd5UmVzdWx0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gaXNSZXNwb25zZShyZXN1bHQucmVzdWx0KSAmJiByZWRpcmVjdFN0YXR1c0NvZGVzLmhhcyhyZXN1bHQucmVzdWx0LnN0YXR1cyk7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5mdW5jdGlvbiBpc0Vycm9yUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3I7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5mdW5jdGlvbiBpc0RhdGFXaXRoUmVzcG9uc2VJbml0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT0gbnVsbCAmJiBcInR5cGVcIiBpbiB2YWx1ZSAmJiBcImRhdGFcIiBpbiB2YWx1ZSAmJiBcImluaXRcIiBpbiB2YWx1ZSAmJiB2YWx1ZS50eXBlID09PSBcIkRhdGFXaXRoUmVzcG9uc2VJbml0XCI7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkRGF0YSh2YWx1ZSkge1xuICBsZXQgZGVmZXJyZWQgPSB2YWx1ZTtcbiAgcmV0dXJuIGRlZmVycmVkICYmIHR5cGVvZiBkZWZlcnJlZCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuZGF0YSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLmNhbmNlbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5yZXNvbHZlRGF0YSA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZS5oZWFkZXJzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS5ib2R5ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3BvbnNlKHJlc3VsdCkge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZFJlcXVlc3RNZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5mdW5jdGlvbiBpc011dGF0aW9uTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRNdXRhdGlvbk1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVOYXZpZ2F0aW9uRGVmZXJyZWRSZXN1bHRzKG1hdGNoZXMsIHJlc3VsdHMsIHNpZ25hbCwgY3VycmVudE1hdGNoZXMsIGN1cnJlbnRMb2FkZXJEYXRhKSB7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMocmVzdWx0cyk7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCBbcm91dGVJZCwgcmVzdWx0XSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXMuZmluZChtID0+IChtID09IG51bGwgPyB2b2lkIDAgOiBtLnJvdXRlLmlkKSA9PT0gcm91dGVJZCk7XG4gICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG1hdGNoLCB0aGVuIHdlIGNhbiBoYXZlIGEgZGVmZXJyZWQgcmVzdWx0IHRvIGRvXG4gICAgLy8gYW55dGhpbmcgd2l0aC4gIFRoaXMgaXMgZm9yIHJldmFsaWRhdGluZyBmZXRjaGVycyB3aGVyZSB0aGUgcm91dGUgd2FzXG4gICAgLy8gcmVtb3ZlZCBkdXJpbmcgSE1SXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpICYmIGlzUmV2YWxpZGF0aW5nTG9hZGVyKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkbyBub3QgaGF2ZSB0byB0b3VjaCBhY3RpdmVEZWZlcnJlZHMgaGVyZSBzaW5jZSB3ZSByYWNlIHRoZW1cbiAgICAgIC8vIGFnYWluc3QgdGhlIHNpZ25hbCBpbiByZXNvbHZlRGVmZXJyZWREYXRhIGFuZCB0aGV5J2xsIGdldCBhYm9ydGVkXG4gICAgICAvLyB0aGVyZSBpZiBuZWVkZWRcbiAgICAgIGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIGZhbHNlKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW3JvdXRlSWRdID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVGZXRjaGVyRGVmZXJyZWRSZXN1bHRzKG1hdGNoZXMsIHJlc3VsdHMsIHJldmFsaWRhdGluZ0ZldGNoZXJzKSB7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgcm91dGVJZCxcbiAgICAgIGNvbnRyb2xsZXJcbiAgICB9ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbaW5kZXhdO1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2tleV07XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hlcy5maW5kKG0gPT4gKG0gPT0gbnVsbCA/IHZvaWQgMCA6IG0ucm91dGUuaWQpID09PSByb3V0ZUlkKTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gTm90ZTogd2UgZG8gbm90IGhhdmUgdG8gdG91Y2ggYWN0aXZlRGVmZXJyZWRzIGhlcmUgc2luY2Ugd2UgcmFjZSB0aGVtXG4gICAgICAvLyBhZ2FpbnN0IHRoZSBzaWduYWwgaW4gcmVzb2x2ZURlZmVycmVkRGF0YSBhbmQgdGhleSdsbCBnZXQgYWJvcnRlZFxuICAgICAgLy8gdGhlcmUgaWYgbmVlZGVkXG4gICAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBhbiBBYm9ydENvbnRyb2xsZXIgZm9yIHJldmFsaWRhdGluZyBmZXRjaGVyIGRlZmVycmVkIHJlc3VsdFwiKTtcbiAgICAgIGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBjb250cm9sbGVyLnNpZ25hbCwgdHJ1ZSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0c1trZXldID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuICBsZXQgYWJvcnRlZCA9IGF3YWl0IHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKTtcbiAgaWYgKGFib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YVxuICB9O1xufVxuZnVuY3Rpb24gaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCkge1xuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpLmdldEFsbChcImluZGV4XCIpLnNvbWUodiA9PiB2ID09PSBcIlwiKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSB7XG4gIGxldCBzZWFyY2ggPSB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb24pLnNlYXJjaCA6IGxvY2F0aW9uLnNlYXJjaDtcbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcbiAgbGV0IHBhdGhNYXRjaGVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcyk7XG4gIHJldHVybiBwYXRoTWF0Y2hlc1twYXRoTWF0Y2hlcy5sZW5ndGggLSAxXTtcbn1cbmZ1bmN0aW9uIGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihuYXZpZ2F0aW9uKSB7XG4gIGxldCB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlLFxuICAgIHRleHQsXG4gICAgZm9ybURhdGEsXG4gICAganNvblxuICB9ID0gbmF2aWdhdGlvbjtcbiAgaWYgKCFmb3JtTWV0aG9kIHx8ICFmb3JtQWN0aW9uIHx8ICFmb3JtRW5jVHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZm9ybURhdGEgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGpzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb24sXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gICAgfTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgbG9jYXRpb24sXG4gICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gIH07XG4gIHJldHVybiBuYXZpZ2F0aW9uO1xufVxuZnVuY3Rpb24gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZGF0YSkge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaGVyO1xuICB9IGVsc2Uge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGFcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiByZXN0b3JlQXBwbGllZFRyYW5zaXRpb25zKF93aW5kb3csIHRyYW5zaXRpb25zKSB7XG4gIHRyeSB7XG4gICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBfd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVFJBTlNJVElPTlNfU1RPUkFHRV9LRVkpO1xuICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICBsZXQganNvbiA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICBmb3IgKGxldCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoanNvbiB8fCB7fSkpIHtcbiAgICAgICAgaWYgKHYgJiYgQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICAgIHRyYW5zaXRpb25zLnNldChrLCBuZXcgU2V0KHYgfHwgW10pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgfVxufVxuZnVuY3Rpb24gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhfd2luZG93LCB0cmFuc2l0aW9ucykge1xuICBpZiAodHJhbnNpdGlvbnMuc2l6ZSA+IDApIHtcbiAgICBsZXQganNvbiA9IHt9O1xuICAgIGZvciAobGV0IFtrLCB2XSBvZiB0cmFuc2l0aW9ucykge1xuICAgICAganNvbltrXSA9IFsuLi52XTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIF93aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIGFwcGxpZWQgdmlldyB0cmFuc2l0aW9ucyBpbiBzZXNzaW9uU3RvcmFnZSAoXCIgKyBlcnJvciArIFwiKS5cIik7XG4gICAgfVxuICB9XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIEVycm9yUmVzcG9uc2VJbXBsIGFzIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCwgY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2ggYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzIGFzIFVOU0FGRV9jb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzLCBkZWNvZGVQYXRoIGFzIFVOU0FGRV9kZWNvZGVQYXRoLCBnZXRSZXNvbHZlVG9NYXRjaGVzIGFzIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzLCBpbnZhcmlhbnQgYXMgVU5TQUZFX2ludmFyaWFudCwgd2FybmluZyBhcyBVTlNBRkVfd2FybmluZywgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZVN0YXRpY0hhbmRsZXIsIGRhdGEsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IsIGdldFRvUGF0aG5hbWUsIGlzRGF0YVdpdGhSZXNwb25zZUluaXQsIGlzRGVmZXJyZWREYXRhLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgam9pblBhdGhzLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBub3JtYWxpemVQYXRobmFtZSwgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVwbGFjZSwgcmVzb2x2ZVBhdGgsIHJlc29sdmVUbywgc3RyaXBCYXNlbmFtZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuMjguMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIG1hdGNoUGF0aCwgVU5TQUZFX2RlY29kZVBhdGgsIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzLCBVTlNBRkVfd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCwgc3RyaXBCYXNlbmFtZSwgSURMRV9CTE9DS0VSLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgQWJvcnRlZERlZmVycmVkRXJyb3IsIGNyZWF0ZVJvdXRlciB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsIGNyZWF0ZVBhdGgsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXBsYWNlLCByZXNvbHZlUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8vIENyZWF0ZSByZWFjdC1zcGVjaWZpYyB0eXBlcyBmcm9tIHRoZSBhZ25vc3RpYyB0eXBlcyBpbiBAcmVtaXgtcnVuL3JvdXRlciB0b1xuLy8gZXhwb3J0IGZyb20gcmVhY3Qtcm91dGVyXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuY29uc3QgRGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cbmNvbnN0IEF3YWl0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBBd2FpdENvbnRleHQuZGlzcGxheU5hbWUgPSBcIkF3YWl0XCI7XG59XG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIGA8Um91dGVyPmAgQVBJXG4gKiB3aGVyZSBib3RoIHRoZSBsb2NhdGlvbiBhbmQgYSBuYXZpZ2F0b3IgbXVzdCBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGluIG9yZGVyXG4gKiB0byBhdm9pZCBcInRlYXJpbmdcIiB0aGF0IG1heSBvY2N1ciBpbiBhIHN1c3BlbnNlLWVuYWJsZWQgYXBwIGlmIHRoZSBhY3Rpb25cbiAqIGFuZC9vciBsb2NhdGlvbiB3ZXJlIHRvIGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgaGlzdG9yeSBpbnN0YW5jZS5cbiAqL1xuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXSxcbiAgaXNEYXRhUm91dGU6IGZhbHNlXG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuY29uc3QgUm91dGVFcnJvckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9ob29rcy91c2UtaHJlZlxuICovXG5mdW5jdGlvbiB1c2VIcmVmKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIGhhc2gsXG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoXG4gIH0gPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHtcbiAgICBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2hcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIGA8Um91dGVyPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogYDxOYXZMaW5rPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9ob29rcy91c2UtbWF0Y2hcbiAqL1xuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIFVOU0FGRV9kZWNvZGVQYXRoKHBhdGhuYW1lKSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG5jb25zdCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcgPSBcIllvdSBzaG91bGQgY2FsbCBuYXZpZ2F0ZSgpIGluIGEgUmVhY3QudXNlRWZmZWN0KCksIG5vdCB3aGVuIFwiICsgXCJ5b3VyIGNvbXBvbmVudCBpcyBmaXJzdCByZW5kZXJlZC5cIjtcblxuLy8gTXV0ZSB3YXJuaW5ncyBmb3IgY2FsbHMgdG8gdXNlTmF2aWdhdGUgaW4gU1NSIGVudmlyb25tZW50c1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChjYikge1xuICBsZXQgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWM7XG4gIGlmICghaXNTdGF0aWMpIHtcbiAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBnZXQgcmlkIG9mIHRoaXMgb25jZSByZWFjdCAxOC4zIGlzIHJlbGVhc2VkXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yNjM5NVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdChjYik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgYDxMaW5rPmBzLCBidXRcbiAqIG1heSBhbHNvIGJlIHVzZWQgYnkgb3RoZXIgZWxlbWVudHMgdG8gY2hhbmdlIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgbGV0IHtcbiAgICBpc0RhdGFSb3V0ZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAvLyBDb25kaXRpb25hbCB1c2FnZSBpcyBPSyBoZXJlIGJlY2F1c2UgdGhlIHVzYWdlIG9mIGEgZGF0YSByb3V0ZXIgaXMgc3RhdGljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICByZXR1cm4gaXNEYXRhUm91dGUgPyB1c2VOYXZpZ2F0ZVN0YWJsZSgpIDogdXNlTmF2aWdhdGVVbnN0YWJsZSgpO1xufVxuZnVuY3Rpb24gdXNlTmF2aWdhdGVVbnN0YWJsZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGZ1dHVyZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciBoaXN0b3J5IGxpc3RlbmVyIHlldFxuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCBvcHRpb25zLnJlbGF0aXZlID09PSBcInBhdGhcIik7XG5cbiAgICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeSAoYnV0IG9ubHkgaWYgd2UncmUgbm90IGluIGEgZGF0YSByb3V0ZXIsXG4gICAgLy8gb3RoZXJ3aXNlIGl0J2xsIHByZXBlbmQgdGhlIGJhc2VuYW1lIGluc2lkZSBvZiB0aGUgcm91dGVyKS5cbiAgICAvLyBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlIG5hdmlnYXRlIHRvIHRoZSByYXcgYmFzZW5hbWVcbiAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGFcbiAgICAvLyB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gICAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ID09IG51bGwgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG4gICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkocGF0aCwgb3B0aW9ucy5zdGF0ZSwgb3B0aW9ucyk7XG4gIH0sIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIGRhdGFSb3V0ZXJDb250ZXh0XSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250ZXh0IChpZiBwcm92aWRlZCkgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9ob29rcy91c2Utb3V0bGV0LWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuIFVzZWQgaW50ZXJuYWxseSBieSBgPE91dGxldD5gIHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9ob29rcy91c2Utb3V0bGV0XG4gKi9cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuICByZXR1cm4gb3V0bGV0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvaG9va3MvdXNlLXBhcmFtc1xuICovXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKHRvLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBmdXR1cmVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKSwgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gYDxPdXRsZXQ+YCB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L2hvb2tzL3VzZS1yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcpIHtcbiAgcmV0dXJuIHVzZVJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZyk7XG59XG5cbi8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIHdpdGggYWNjZXB0IG9wdGlvbmFsIHBhcmFtIGZvciBSb3V0ZXJQcm92aWRlciB1c2FnZVxuZnVuY3Rpb24gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuICBsZXQgbG9jYXRpb25Gcm9tQ29udGV4dCA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBsb2NhdGlvbjtcbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIldoZW4gb3ZlcnJpZGluZyB0aGUgbG9jYXRpb24gdXNpbmcgYDxSb3V0ZXMgbG9jYXRpb24+YCBvciBgdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pYCwgXCIgKyBcInRoZSBsb2NhdGlvbiBwYXRobmFtZSBtdXN0IGJlZ2luIHdpdGggdGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBcIiArIChcIm1hdGNoZWQgYnkgYWxsIHBhcmVudCByb3V0ZXMuIFRoZSBjdXJyZW50IHBhdGhuYW1lIGJhc2UgaXMgXFxcIlwiICsgcGFyZW50UGF0aG5hbWVCYXNlICsgXCJcXFwiIFwiKSArIChcImJ1dCBwYXRobmFtZSBcXFwiXCIgKyBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSArIFwiXFxcIiB3YXMgZ2l2ZW4gaW4gdGhlIGBsb2NhdGlvbmAgcHJvcC5cIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhdGhuYW1lO1xuICBpZiAocGFyZW50UGF0aG5hbWVCYXNlICE9PSBcIi9cIikge1xuICAgIC8vIERldGVybWluZSB0aGUgcmVtYWluaW5nIHBhdGhuYW1lIGJ5IHJlbW92aW5nIHRoZSAjIG9mIFVSTCBzZWdtZW50cyB0aGVcbiAgICAvLyBwYXJlbnRQYXRobmFtZUJhc2UgaGFzLCBpbnN0ZWFkIG9mIHJlbW92aW5nIGJhc2VkIG9uIGNoYXJhY3RlciBjb3VudC5cbiAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2UgY2FuJ3QgZ3VhcmFudGVlIHRoYXQgaW5jb21pbmcvb3V0Z29pbmcgZW5jb2RpbmdzL1xuICAgIC8vIGRlY29kaW5ncyB3aWxsIG1hdGNoIGV4YWN0bHkuXG4gICAgLy8gV2UgZGVjb2RlIHBhdGhzIGJlZm9yZSBtYXRjaGluZyBvbiBhIHBlci1zZWdtZW50IGJhc2lzIHdpdGhcbiAgICAvLyBkZWNvZGVVUklDb21wb25lbnQoKSwgYnV0IHdlIHJlLWVuY29kZSBwYXRobmFtZXMgdmlhIGBuZXcgVVJMKClgIHNvIHRoZXlcbiAgICAvLyBtYXRjaCB3aGF0IGB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVgIHdvdWxkIHJlZmxlY3QuICBUaG9zZSBkb24ndCAxMDAlXG4gICAgLy8gYWxpZ24gd2hlbiBpdCBjb21lcyB0byBlbmNvZGVkIFVSSSBjaGFyYWN0ZXJzIHN1Y2ggYXMgJSBhbmQgJi5cbiAgICAvL1xuICAgIC8vIFNvIHdlIG1heSBlbmQgdXAgd2l0aDpcbiAgICAvLyAgIHBhdGhuYW1lOiAgICAgICAgICAgXCIvZGVzY2VuZGFudC9hJTI1Yi9tYXRjaFwiXG4gICAgLy8gICBwYXJlbnRQYXRobmFtZUJhc2U6IFwiL2Rlc2NlbmRhbnQvYSViXCJcbiAgICAvL1xuICAgIC8vIEFuZCB0aGUgZGlyZWN0IHN1YnN0cmluZyByZW1vdmFsIGFwcHJvYWNoIHdvbid0IHdvcmsgOi9cbiAgICBsZXQgcGFyZW50U2VnbWVudHMgPSBwYXJlbnRQYXRobmFtZUJhc2UucmVwbGFjZSgvXlxcLy8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgICBsZXQgc2VnbWVudHMgPSBwYXRobmFtZS5yZXBsYWNlKC9eXFwvLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gXCIvXCIgKyBzZWdtZW50cy5zbGljZShwYXJlbnRTZWdtZW50cy5sZW5ndGgpLmpvaW4oXCIvXCIpO1xuICB9XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcocGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLCBcIk5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcobWF0Y2hlcyA9PSBudWxsIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLkNvbXBvbmVudCAhPT0gdW5kZWZpbmVkIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5sYXp5ICE9PSB1bmRlZmluZWQsIFwiTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIiArIFwiZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50IG9yIENvbXBvbmVudC4gVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBcIiArIFwibnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcXFwiZW1wdHlcXFwiIHBhZ2UuXCIpIDogdm9pZCAwO1xuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzICYmIG1hdGNoZXMubWFwKG1hdGNoID0+IE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lKS5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lXSksXG4gICAgcGF0aG5hbWVCYXNlOiBtYXRjaC5wYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGFyZW50UGF0aG5hbWVCYXNlIDogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWVCYXNlKS5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lQmFzZV0pXG4gIH0pKSwgcGFyZW50TWF0Y2hlcywgZGF0YVJvdXRlclN0YXRlLCBmdXR1cmUpO1xuXG4gIC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuICBpZiAobG9jYXRpb25BcmcgJiYgcmVuZGVyZWRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbG9jYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAga2V5OiBcImRlZmF1bHRcIlxuICAgICAgICB9LCBsb2NhdGlvbiksXG4gICAgICAgIG5hdmlnYXRpb25UeXBlOiBBY3Rpb24uUG9wXG4gICAgICB9XG4gICAgfSwgcmVuZGVyZWRNYXRjaGVzKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuZnVuY3Rpb24gRGVmYXVsdEVycm9yQ29tcG9uZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBkZXZJbmZvID0gbnVsbDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBoYW5kbGVkIGJ5IFJlYWN0IFJvdXRlciBkZWZhdWx0IEVycm9yQm91bmRhcnk6XCIsIGVycm9yKTtcbiAgICBkZXZJbmZvID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIlxcdUQ4M0RcXHVEQ0JGIEhleSBkZXZlbG9wZXIgXFx1RDgzRFxcdURDNEJcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIllvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9ycyBieSBwcm92aWRpbmcgeW91ciBvd24gXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiRXJyb3JCb3VuZGFyeVwiKSwgXCIgb3JcIiwgXCIgXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiZXJyb3JFbGVtZW50XCIpLCBcIiBwcm9wIG9uIHlvdXIgcm91dGUuXCIpKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwgbnVsbCwgXCJVbmV4cGVjdGVkIEFwcGxpY2F0aW9uIEVycm9yIVwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIlxuICAgIH1cbiAgfSwgbWVzc2FnZSksIHN0YWNrID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIiwge1xuICAgIHN0eWxlOiBwcmVTdHlsZXNcbiAgfSwgc3RhY2spIDogbnVsbCwgZGV2SW5mbyk7XG59XG5jb25zdCBkZWZhdWx0RXJyb3JFbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVycm9yQ29tcG9uZW50LCBudWxsKTtcbmNsYXNzIFJlbmRlckVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24sXG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IGVycm9yXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uICE9PSBcImlkbGVcIiAmJiBwcm9wcy5yZXZhbGlkYXRpb24gPT09IFwiaWRsZVwiKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogcHJvcHMuZXJyb3IsXG4gICAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb25cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvciAhPT0gdW5kZWZpbmVkID8gcHJvcHMuZXJyb3IgOiBzdGF0ZS5lcnJvcixcbiAgICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uIHx8IHN0YXRlLnJldmFsaWRhdGlvblxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgIT09IHVuZGVmaW5lZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMucm91dGVDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVFcnJvckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmVycm9yLFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgfSkpIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgcm91dGVDb250ZXh0LFxuICAgIG1hdGNoLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcblxuICAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuICBpZiAoZGF0YVJvdXRlckNvbnRleHQgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5KSkge1xuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSkge1xuICB2YXIgX2RhdGFSb3V0ZXJTdGF0ZTtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuICBpZiAoZGF0YVJvdXRlclN0YXRlID09PSB2b2lkIDApIHtcbiAgICBkYXRhUm91dGVyU3RhdGUgPSBudWxsO1xuICB9XG4gIGlmIChmdXR1cmUgPT09IHZvaWQgMCkge1xuICAgIGZ1dHVyZSA9IG51bGw7XG4gIH1cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIHZhciBfZnV0dXJlO1xuICAgIGlmICghZGF0YVJvdXRlclN0YXRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZS5lcnJvcnMpIHtcbiAgICAgIC8vIERvbid0IGJhaWwgaWYgd2UgaGF2ZSBkYXRhIHJvdXRlciBlcnJvcnMgc28gd2UgY2FuIHJlbmRlciB0aGVtIGluIHRoZVxuICAgICAgLy8gYm91bmRhcnkuICBVc2UgdGhlIHByZS1tYXRjaGVkIChvciBzaGltbWVkKSBtYXRjaGVzXG4gICAgICBtYXRjaGVzID0gZGF0YVJvdXRlclN0YXRlLm1hdGNoZXM7XG4gICAgfSBlbHNlIGlmICgoX2Z1dHVyZSA9IGZ1dHVyZSkgIT0gbnVsbCAmJiBfZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gJiYgcGFyZW50TWF0Y2hlcy5sZW5ndGggPT09IDAgJiYgIWRhdGFSb3V0ZXJTdGF0ZS5pbml0aWFsaXplZCAmJiBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlJ3JlIGluaXRpYWxpemluZyB3aXRoIHBhcnRpYWwgaHlkcmF0aW9uIGFuZCB3ZSBoYXZlXG4gICAgICAvLyByb3V0ZXIgbWF0Y2hlcy4gIFRoYXQgbWVhbnMgd2UncmUgYWN0aXZlbHkgcnVubmluZyBgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb25gXG4gICAgICAvLyBzbyB3ZSBzaG91bGQgcmVuZGVyIGRvd24gdGhlIHBhcnRpYWwgbWF0Y2hlcyB0byB0aGUgYXBwcm9wcmlhdGVcbiAgICAgIC8vIGBIeWRyYXRlRmFsbGJhY2tgLiAgV2Ugb25seSBkbyB0aGlzIGlmIGBwYXJlbnRNYXRjaGVzYCBpcyBlbXB0eSBzbyBpdFxuICAgICAgLy8gb25seSBpbXBhY3RzIHRoZSByb290IG1hdGNoZXMgZm9yIGBSb3V0ZXJQcm92aWRlcmAgYW5kIG5vIGRlc2NlbmRhbnRcbiAgICAgIC8vIGA8Um91dGVzPmBcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gIC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuICBsZXQgZXJyb3JzID0gKF9kYXRhUm91dGVyU3RhdGUgPSBkYXRhUm91dGVyU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZGF0YVJvdXRlclN0YXRlLmVycm9ycztcbiAgaWYgKGVycm9ycyAhPSBudWxsKSB7XG4gICAgbGV0IGVycm9ySW5kZXggPSByZW5kZXJlZE1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCAmJiAoZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbS5yb3V0ZS5pZF0pICE9PSB1bmRlZmluZWQpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgZXJyb3JzIG9uIHJvdXRlIElEczogXCIgKyBPYmplY3Qua2V5cyhlcnJvcnMpLmpvaW4oXCIsXCIpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBNYXRoLm1pbihyZW5kZXJlZE1hdGNoZXMubGVuZ3RoLCBlcnJvckluZGV4ICsgMSkpO1xuICB9XG5cbiAgLy8gSWYgd2UncmUgaW4gYSBwYXJ0aWFsIGh5ZHJhdGlvbiBtb2RlLCBkZXRlY3QgaWYgd2UgbmVlZCB0byByZW5kZXIgZG93biB0b1xuICAvLyBhIGdpdmVuIEh5ZHJhdGVGYWxsYmFjayB3aGlsZSB3ZSBsb2FkIHRoZSByZXN0IG9mIHRoZSBoeWRyYXRpb24gZGF0YVxuICBsZXQgcmVuZGVyRmFsbGJhY2sgPSBmYWxzZTtcbiAgbGV0IGZhbGxiYWNrSW5kZXggPSAtMTtcbiAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSAmJiBmdXR1cmUgJiYgZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG1hdGNoID0gcmVuZGVyZWRNYXRjaGVzW2ldO1xuICAgICAgLy8gVHJhY2sgdGhlIGRlZXBlc3QgZmFsbGJhY2sgdXAgdW50aWwgdGhlIGZpcnN0IHJvdXRlIHdpdGhvdXQgZGF0YVxuICAgICAgaWYgKG1hdGNoLnJvdXRlLkh5ZHJhdGVGYWxsYmFjayB8fCBtYXRjaC5yb3V0ZS5oeWRyYXRlRmFsbGJhY2tFbGVtZW50KSB7XG4gICAgICAgIGZhbGxiYWNrSW5kZXggPSBpO1xuICAgICAgfVxuICAgICAgaWYgKG1hdGNoLnJvdXRlLmlkKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgICBlcnJvcnNcbiAgICAgICAgfSA9IGRhdGFSb3V0ZXJTdGF0ZTtcbiAgICAgICAgbGV0IG5lZWRzVG9SdW5Mb2FkZXIgPSBtYXRjaC5yb3V0ZS5sb2FkZXIgJiYgbG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCAmJiAoIWVycm9ycyB8fCBlcnJvcnNbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWF0Y2gucm91dGUubGF6eSB8fCBuZWVkc1RvUnVuTG9hZGVyKSB7XG4gICAgICAgICAgLy8gV2UgZm91bmQgdGhlIGZpcnN0IHJvdXRlIHRoYXQncyBub3QgcmVhZHkgdG8gcmVuZGVyICh3YWl0aW5nIG9uXG4gICAgICAgICAgLy8gbGF6eSwgb3IgaGFzIGEgbG9hZGVyIHRoYXQgaGFzbid0IHJ1biB5ZXQpLiAgRmxhZyB0aGF0IHdlIG5lZWQgdG9cbiAgICAgICAgICAvLyByZW5kZXIgYSBmYWxsYmFjayBhbmQgcmVuZGVyIHVwIHVudGlsIHRoZSBhcHByb3ByaWF0ZSBmYWxsYmFja1xuICAgICAgICAgIHJlbmRlckZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZmFsbGJhY2tJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgZmFsbGJhY2tJbmRleCArIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW5kZXJlZE1hdGNoZXMgPSBbcmVuZGVyZWRNYXRjaGVzWzBdXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzL2ZhbGxiYWNrc1xuICAgIGxldCBlcnJvcjtcbiAgICBsZXQgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gZmFsc2U7XG4gICAgbGV0IGVycm9yRWxlbWVudCA9IG51bGw7XG4gICAgbGV0IGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgPSBudWxsO1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUpIHtcbiAgICAgIGVycm9yID0gZXJyb3JzICYmIG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzW21hdGNoLnJvdXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgIGVycm9yRWxlbWVudCA9IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBkZWZhdWx0RXJyb3JFbGVtZW50O1xuICAgICAgaWYgKHJlbmRlckZhbGxiYWNrKSB7XG4gICAgICAgIGlmIChmYWxsYmFja0luZGV4IDwgMCAmJiBpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHdhcm5pbmdPbmNlKFwicm91dGUtZmFsbGJhY2tcIiwgZmFsc2UsIFwiTm8gYEh5ZHJhdGVGYWxsYmFja2AgZWxlbWVudCBwcm92aWRlZCB0byByZW5kZXIgZHVyaW5nIGluaXRpYWwgaHlkcmF0aW9uXCIpO1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZmFsbGJhY2tJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgPSBtYXRjaC5yb3V0ZS5oeWRyYXRlRmFsbGJhY2tFbGVtZW50IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1hdGNoZXMgPSBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSk7XG4gICAgbGV0IGdldENoaWxkcmVuID0gKCkgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNoaWxkcmVuID0gZXJyb3JFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2spIHtcbiAgICAgICAgY2hpbGRyZW4gPSBoeWRyYXRlRmFsbGJhY2tFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5Db21wb25lbnQpIHtcbiAgICAgICAgLy8gTm90ZTogVGhpcyBpcyBhIGRlLW9wdGltaXplZCBwYXRoIHNpbmNlIFJlYWN0IHdvbid0IHJlLXVzZSB0aGVcbiAgICAgICAgLy8gUmVhY3RFbGVtZW50IHNpbmNlIGl0J3MgaWRlbnRpdHkgY2hhbmdlcyB3aXRoIGVhY2ggbmV3XG4gICAgICAgIC8vIFJlYWN0LmNyZWF0ZUVsZW1lbnQgY2FsbC4gIFdlIGtlZXAgdGhpcyBzbyBmb2xrcyBjYW4gdXNlXG4gICAgICAgIC8vIGA8Um91dGUgQ29tcG9uZW50PXsuLi59PmAgaW4gYDxSb3V0ZXM+YCBidXQgZ2VuZXJhbGx5IGBDb21wb25lbnRgXG4gICAgICAgIC8vIHVzYWdlIGlzIG9ubHkgYWR2aXNlZCBpbiBgUm91dGVyUHJvdmlkZXJgIHdoZW4gd2UgY2FuIGNvbnZlcnQgaXQgdG9cbiAgICAgICAgLy8gYGVsZW1lbnRgIGFoZWFkIG9mIHRpbWUuXG4gICAgICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQobWF0Y2gucm91dGUuQ29tcG9uZW50LCBudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuZWxlbWVudCkge1xuICAgICAgICBjaGlsZHJlbiA9IG1hdGNoLnJvdXRlLmVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IG91dGxldDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7XG4gICAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgICAgb3V0bGV0LFxuICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgaXNEYXRhUm91dGU6IGRhdGFSb3V0ZXJTdGF0ZSAhPSBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCBvbiB0aGlzIHJvdXRlLiAgT3RoZXJ3aXNlIGxldCBpdCBidWJibGUgdXAgdG9cbiAgICAvLyBhbiBhbmNlc3RvciBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudFxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkgfHwgbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGluZGV4ID09PSAwKSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlckVycm9yQm91bmRhcnksIHtcbiAgICAgIGxvY2F0aW9uOiBkYXRhUm91dGVyU3RhdGUubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5yZXZhbGlkYXRpb24sXG4gICAgICBjb21wb25lbnQ6IGVycm9yRWxlbWVudCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGNoaWxkcmVuOiBnZXRDaGlsZHJlbigpLFxuICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgIG91dGxldDogbnVsbCxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgaXNEYXRhUm91dGU6IHRydWVcbiAgICAgIH1cbiAgICB9KSA6IGdldENoaWxkcmVuKCk7XG4gIH0sIG51bGwpO1xufVxudmFyIERhdGFSb3V0ZXJIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJIb29rO1xufShEYXRhUm91dGVySG9vayB8fCB7fSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTG9hZGVyRGF0YVwiXSA9IFwidXNlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQWN0aW9uRGF0YVwiXSA9IFwidXNlQWN0aW9uRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVFcnJvclwiXSA9IFwidXNlUm91dGVFcnJvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGlvblwiXSA9IFwidXNlTmF2aWdhdGlvblwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVMb2FkZXJEYXRhXCJdID0gXCJ1c2VSb3V0ZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU1hdGNoZXNcIl0gPSBcInVzZU1hdGNoZXNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUlkXCJdID0gXCJ1c2VSb3V0ZUlkXCI7XG4gIHJldHVybiBEYXRhUm91dGVyU3RhdGVIb29rO1xufShEYXRhUm91dGVyU3RhdGVIb29rIHx8IHt9KTtcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJvdXRlO1xufVxuXG4vLyBJbnRlcm5hbCB2ZXJzaW9uIHdpdGggaG9va05hbWUtYXdhcmUgZGVidWdnaW5nXG5mdW5jdGlvbiB1c2VDdXJyZW50Um91dGVJZChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpO1xuICBsZXQgdGhpc1JvdXRlID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgaG9va05hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIElEIGZvciB0aGUgbmVhcmVzdCBjb250ZXh0dWFsIHJvdXRlXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlSWQoKSB7XG4gIHJldHVybiB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlSWQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvbigpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGlvbik7XG4gIHJldHVybiBzdGF0ZS5uYXZpZ2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVJldmFsaWRhdG9yKCkge1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByZXZhbGlkYXRlOiBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSxcbiAgICBzdGF0ZTogc3RhdGUucmV2YWxpZGF0aW9uXG4gIH0pLCBbZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsIHN0YXRlLnJldmFsaWRhdGlvbl0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLCB1c2VmdWwgZm9yIGFjY2Vzc2luZyBsb2FkZXJEYXRhIGZvclxuICogcGFyZW50L2NoaWxkIHJvdXRlcyBvciB0aGUgcm91dGUgXCJoYW5kbGVcIiBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG0gPT4gVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIGxvYWRlckRhdGEpKSwgW21hdGNoZXMsIGxvYWRlckRhdGFdKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXIgZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgbG9hZGVyXG4gKi9cbmZ1bmN0aW9uIHVzZUxvYWRlckRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGlmIChzdGF0ZS5lcnJvcnMgJiYgc3RhdGUuZXJyb3JzW3JvdXRlSWRdICE9IG51bGwpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiWW91IGNhbm5vdCBgdXNlTG9hZGVyRGF0YWAgaW4gYW4gZXJyb3JFbGVtZW50IChyb3V0ZUlkOiBcIiArIHJvdXRlSWQgKyBcIilcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXJEYXRhIGZvciB0aGUgZ2l2ZW4gcm91dGVJZFxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3Rpb24gZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5hY3Rpb25EYXRhID8gc3RhdGUuYWN0aW9uRGF0YVtyb3V0ZUlkXSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGVycm9yLCB3aGljaCBjb3VsZCBiZSBhIGxvYWRlci9hY3Rpb25cbiAqIGVycm9yIG9yIGEgcmVuZGVyIGVycm9yLiAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB5b3VyXG4gKiBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCB0byBkaXNwbGF5IGEgcHJvcGVyIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7XG4gIHZhciBfc3RhdGUkZXJyb3JzO1xuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcblxuICAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG4gIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlIGxvb2sgZm9yIGVycm9ycyBmcm9tIG91ciBkYXRhIHJvdXRlciBzdGF0ZVxuICByZXR1cm4gKF9zdGF0ZSRlcnJvcnMgPSBzdGF0ZS5lcnJvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZXJyb3JzW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGhhcHB5LXBhdGggZGF0YSBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIGA8QXdhaXQgLz5gIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHVzZUFzeW5jVmFsdWUoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZGF0YTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlcnJvciBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIGA8QXdhaXQgLz5gIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHVzZUFzeW5jRXJyb3IoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZXJyb3I7XG59XG5sZXQgYmxvY2tlcklkID0gMDtcblxuLyoqXG4gKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlXG4gKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWRcbiAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvclxuICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLlxuICovXG5mdW5jdGlvbiB1c2VCbG9ja2VyKHNob3VsZEJsb2NrKSB7XG4gIGxldCB7XG4gICAgcm91dGVyLFxuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBbYmxvY2tlcktleSwgc2V0QmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBzaG91bGRCbG9jayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gISFzaG91bGRCbG9jaztcbiAgICB9XG4gICAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHNob3VsZEJsb2NrKGFyZyk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhleSBwcm92aWRlZCB1cyBhIGZ1bmN0aW9uIGFuZCB3ZSd2ZSBnb3QgYW4gYWN0aXZlIGJhc2VuYW1lLCBzdHJpcFxuICAgIC8vIGl0IGZyb20gdGhlIGxvY2F0aW9ucyB3ZSBleHBvc2UgdG8gdGhlIHVzZXIgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIG9mXG4gICAgLy8gdXNlTG9jYXRpb25cbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBhcmc7XG4gICAgcmV0dXJuIHNob3VsZEJsb2NrKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogX2V4dGVuZHMoe30sIGN1cnJlbnRMb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLFxuICAgICAgbmV4dExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gIH0sIFtiYXNlbmFtZSwgc2hvdWxkQmxvY2tdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBpcyBpbiBjaGFyZ2Ugb2YgYmxvY2tlciBrZXkgYXNzaWdubWVudCBhbmQgZGVsZXRpb24gKHdoaWNoIGlzXG4gIC8vIHRpZ2h0bHkgY291cGxlZCB0byB0aGUga2V5KVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBrZXkgPSBTdHJpbmcoKytibG9ja2VySWQpO1xuICAgIHNldEJsb2NrZXJLZXkoa2V5KTtcbiAgICByZXR1cm4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoa2V5KTtcbiAgfSwgW3JvdXRlcl0pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGhhbmRsZXMgYXNzaWduaW5nIHRoZSBibG9ja2VyRnVuY3Rpb24uICBUaGlzIGlzIHRvIGhhbmRsZVxuICAvLyB1bnN0YWJsZSBibG9ja2VyIGZ1bmN0aW9uIGlkZW50aXRpZXMsIGFuZCBoYXBwZW5zIG9ubHkgYWZ0ZXIgdGhlIHByaW9yXG4gIC8vIGVmZmVjdCBzbyB3ZSBkb24ndCBnZXQgYW4gb3JwaGFuZWQgYmxvY2tlckZ1bmN0aW9uIGluIHRoZSByb3V0ZXIgd2l0aCBhXG4gIC8vIGtleSBvZiBcIlwiLiAgVW50aWwgdGhlbiB3ZSBqdXN0IGhhdmUgdGhlIElETEVfQkxPQ0tFUi5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlcktleSAhPT0gXCJcIikge1xuICAgICAgcm91dGVyLmdldEJsb2NrZXIoYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0pO1xuXG4gIC8vIFByZWZlciB0aGUgYmxvY2tlciBmcm9tIGBzdGF0ZWAgbm90IGByb3V0ZXIuc3RhdGVgIHNpbmNlIERhdGFSb3V0ZXJDb250ZXh0XG4gIC8vIGlzIG1lbW9pemVkIHNvIHRoaXMgZW5zdXJlcyB3ZSB1cGRhdGUgb24gYmxvY2tlciBzdGF0ZSB1cGRhdGVzXG4gIHJldHVybiBibG9ja2VyS2V5ICYmIHN0YXRlLmJsb2NrZXJzLmhhcyhibG9ja2VyS2V5KSA/IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KSA6IElETEVfQkxPQ0tFUjtcbn1cblxuLyoqXG4gKiBTdGFibGUgdmVyc2lvbiBvZiB1c2VOYXZpZ2F0ZSB0aGF0IGlzIHVzZWQgd2hlbiB3ZSBhcmUgaW4gdGhlIGNvbnRleHQgb2ZcbiAqIGEgUm91dGVyUHJvdmlkZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlU3RhYmxlKCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgaWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZykgOiB2b2lkIDA7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgcm91dGVyIHN1YnNjcmliZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywgX2V4dGVuZHMoe1xuICAgICAgICBmcm9tUm91dGVJZDogaWRcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGlkXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQkMSA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZCQxW2tleV0pIHtcbiAgICBhbHJlYWR5V2FybmVkJDFba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICB9XG59XG5cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcbmZ1bmN0aW9uIHdhcm5PbmNlKGtleSwgbWVzc2FnZSkge1xuICBpZiAoIWFscmVhZHlXYXJuZWRbbWVzc2FnZV0pIHtcbiAgICBhbHJlYWR5V2FybmVkW21lc3NhZ2VdID0gdHJ1ZTtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gIH1cbn1cbmNvbnN0IGxvZ0RlcHJlY2F0aW9uID0gKGZsYWcsIG1zZywgbGluaykgPT4gd2Fybk9uY2UoZmxhZywgXCJcXHUyNkEwXFx1RkUwRiBSZWFjdCBSb3V0ZXIgRnV0dXJlIEZsYWcgV2FybmluZzogXCIgKyBtc2cgKyBcIi4gXCIgKyAoXCJZb3UgY2FuIHVzZSB0aGUgYFwiICsgZmxhZyArIFwiYCBmdXR1cmUgZmxhZyB0byBvcHQtaW4gZWFybHkuIFwiKSArIChcIkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgXCIgKyBsaW5rICsgXCIuXCIpKTtcbmZ1bmN0aW9uIGxvZ1Y2RGVwcmVjYXRpb25XYXJuaW5ncyhyZW5kZXJGdXR1cmUsIHJvdXRlckZ1dHVyZSkge1xuICBpZiAoIShyZW5kZXJGdXR1cmUgIT0gbnVsbCAmJiByZW5kZXJGdXR1cmUudjdfc3RhcnRUcmFuc2l0aW9uKSkge1xuICAgIGxvZ0RlcHJlY2F0aW9uKFwidjdfc3RhcnRUcmFuc2l0aW9uXCIsIFwiUmVhY3QgUm91dGVyIHdpbGwgYmVnaW4gd3JhcHBpbmcgc3RhdGUgdXBkYXRlcyBpbiBgUmVhY3Quc3RhcnRUcmFuc2l0aW9uYCBpbiB2N1wiLCBcImh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L3VwZ3JhZGluZy9mdXR1cmUjdjdfc3RhcnR0cmFuc2l0aW9uXCIpO1xuICB9XG4gIGlmICghKHJlbmRlckZ1dHVyZSAhPSBudWxsICYmIHJlbmRlckZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkgJiYgKCFyb3V0ZXJGdXR1cmUgfHwgIXJvdXRlckZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkpIHtcbiAgICBsb2dEZXByZWNhdGlvbihcInY3X3JlbGF0aXZlU3BsYXRQYXRoXCIsIFwiUmVsYXRpdmUgcm91dGUgcmVzb2x1dGlvbiB3aXRoaW4gU3BsYXQgcm91dGVzIGlzIGNoYW5naW5nIGluIHY3XCIsIFwiaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvdXBncmFkaW5nL2Z1dHVyZSN2N19yZWxhdGl2ZXNwbGF0cGF0aFwiKTtcbiAgfVxuICBpZiAocm91dGVyRnV0dXJlKSB7XG4gICAgaWYgKCFyb3V0ZXJGdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGxvZ0RlcHJlY2F0aW9uKFwidjdfZmV0Y2hlclBlcnNpc3RcIiwgXCJUaGUgcGVyc2lzdGVuY2UgYmVoYXZpb3Igb2YgZmV0Y2hlcnMgaXMgY2hhbmdpbmcgaW4gdjdcIiwgXCJodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni91cGdyYWRpbmcvZnV0dXJlI3Y3X2ZldGNoZXJwZXJzaXN0XCIpO1xuICAgIH1cbiAgICBpZiAoIXJvdXRlckZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kKSB7XG4gICAgICBsb2dEZXByZWNhdGlvbihcInY3X25vcm1hbGl6ZUZvcm1NZXRob2RcIiwgXCJDYXNpbmcgb2YgYGZvcm1NZXRob2RgIGZpZWxkcyBpcyBiZWluZyBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBpbiB2N1wiLCBcImh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L3VwZ3JhZGluZy9mdXR1cmUjdjdfbm9ybWFsaXplZm9ybW1ldGhvZFwiKTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZXJGdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgICAgbG9nRGVwcmVjYXRpb24oXCJ2N19wYXJ0aWFsSHlkcmF0aW9uXCIsIFwiYFJvdXRlclByb3ZpZGVyYCBoeWRyYXRpb24gYmVoYXZpb3IgaXMgY2hhbmdpbmcgaW4gdjdcIiwgXCJodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni91cGdyYWRpbmcvZnV0dXJlI3Y3X3BhcnRpYWxoeWRyYXRpb25cIik7XG4gICAgfVxuICAgIGlmICghcm91dGVyRnV0dXJlLnY3X3NraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbikge1xuICAgICAgbG9nRGVwcmVjYXRpb24oXCJ2N19za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb25cIiwgXCJUaGUgcmV2YWxpZGF0aW9uIGJlaGF2aW9yIGFmdGVyIDR4eC81eHggYGFjdGlvbmAgcmVzcG9uc2VzIGlzIGNoYW5naW5nIGluIHY3XCIsIFwiaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvdXBncmFkaW5nL2Z1dHVyZSN2N19za2lwYWN0aW9uZXJyb3JyZXZhbGlkYXRpb25cIik7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICBpZiAodjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwpIHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gICAgfVxuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcblxuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsbGJhY2tFbGVtZW50ID09IG51bGwgfHwgIXJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiwgXCJgPFJvdXRlclByb3ZpZGVyIGZhbGxiYWNrRWxlbWVudD5gIGlzIGRlcHJlY2F0ZWQgd2hlbiB1c2luZyBcIiArIFwiYHY3X3BhcnRpYWxIeWRyYXRpb25gLCB1c2UgYSBgSHlkcmF0ZUZhbGxiYWNrYCBjb21wb25lbnQgaW5zdGVhZFwiKSA6IHZvaWQgMDtcbiAgICAvLyBPbmx5IGxvZyB0aGlzIG9uY2Ugb24gaW5pdGlhbCBtb3VudFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByb3V0ZXIsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgYmFzZW5hbWVcbiAgfSksIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IGxvZ1Y2RGVwcmVjYXRpb25XYXJuaW5ncyhmdXR1cmUsIHJvdXRlci5mdXR1cmUpLCBbcm91dGVyLCBmdXR1cmVdKTtcblxuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvcixcbiAgICBmdXR1cmU6IHtcbiAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiByb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXG4gICAgfVxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCB8fCByb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVzLCB7XG4gICAgcm91dGVzOiByb3V0ZXIucm91dGVzLFxuICAgIGZ1dHVyZTogcm91dGVyLmZ1dHVyZSxcbiAgICBzdGF0ZTogc3RhdGVcbiAgfSkgOiBmYWxsYmFja0VsZW1lbnQpKSksIG51bGwpO1xufVxuZnVuY3Rpb24gRGF0YVJvdXRlcyhfcmVmMikge1xuICBsZXQge1xuICAgIHJvdXRlcyxcbiAgICBmdXR1cmUsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUsIGZ1dHVyZSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9yb3V0ZXItY29tcG9uZW50cy9tZW1vcnktcm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWYzO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gbG9nVjZEZXByZWNhdGlvbldhcm5pbmdzKGZ1dHVyZSksIFtmdXR1cmVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmNCkge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWY0O1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBmdXR1cmUsXG4gICAgc3RhdGljOiBpc1N0YXRpY1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFpc1N0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgLy8gUmVzb2x2ZSB0aGUgcGF0aCBvdXRzaWRlIG9mIHRoZSBlZmZlY3Qgc28gdGhhdCB3aGVuIGVmZmVjdHMgcnVuIHR3aWNlIGluXG4gIC8vIFN0cmljdE1vZGUgdGhleSBuYXZpZ2F0ZSB0byB0aGUgc2FtZSBwbGFjZVxuICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBuYXZpZ2F0ZShKU09OLnBhcnNlKGpzb25QYXRoKSwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSksIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA7XG59XG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgYDxSb3V0ZXI+YCBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIGA8QnJvd3NlclJvdXRlcj5gXG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSBgPFN0YXRpY1JvdXRlcj5gIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjU7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7XG4gICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogZmFsc2VcbiAgICB9LCBmdXR1cmUpXG4gIH0pLCBbYmFzZW5hbWUsIGZ1dHVyZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG4gIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgbG9jYXRpb25Qcm9wID0gcGFyc2VQYXRoKGxvY2F0aW9uUHJvcCk7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgICBzZWFyY2gsXG4gICAgICAgIGhhc2gsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBrZXlcbiAgICAgIH0sXG4gICAgICBuYXZpZ2F0aW9uVHlwZVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleSwgbmF2aWdhdGlvblR5cGVdKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcobG9jYXRpb25Db250ZXh0ICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuICBpZiAobG9jYXRpb25Db250ZXh0ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiBsb2NhdGlvbkNvbnRleHRcbiAgfSkpO1xufVxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiBgPFJvdXRlPmAgZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdjYvY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn1cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGVycm9yRWxlbWVudCxcbiAgICByZXNvbHZlXG4gIH0gPSBfcmVmNztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0RXJyb3JCb3VuZGFyeSwge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgZXJyb3JFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb2x2ZUF3YWl0LCBudWxsLCBjaGlsZHJlbikpO1xufVxudmFyIEF3YWl0UmVuZGVyU3RhdHVzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG4gIHJldHVybiBBd2FpdFJlbmRlclN0YXR1cztcbn0oQXdhaXRSZW5kZXJTdGF0dXMgfHwge30pO1xuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVycm9yRWxlbWVudCxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgcHJvbWlzZSA9IG51bGw7XG4gICAgbGV0IHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gXCJfZXJyb3JcIiBpbiBwcm9taXNlID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBcIl9kYXRhXCIgaW4gcHJvbWlzZSA/IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MgOiBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSYXcgKHVudHJhY2tlZCkgcHJvbWlzZSAtIHRyYWNrIGl0XG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmUudGhlbihkYXRhID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgICB9KSwgZXJyb3IgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgIWVycm9yRWxlbWVudCkge1xuICAgICAgLy8gTm8gZXJyb3JFbGVtZW50LCB0aHJvdyB0byB0aGUgbmVhcmVzdCByb3V0ZS1sZXZlbCBlcnJvciBib3VuZGFyeVxuICAgICAgdGhyb3cgcHJvbWlzZS5fZXJyb3I7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yKSB7XG4gICAgICAvLyBSZW5kZXIgdmlhIG91ciBlcnJvckVsZW1lbnRcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBlcnJvckVsZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUaHJvdyB0byB0aGUgc3VzcGVuc2UgYm91bmRhcnlcbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIGA8QXdhaXQ+YFxuICovXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjg7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuICBsZXQgdG9SZW5kZXIgPSB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdG9SZW5kZXIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS92Ni91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgaWQ6IGVsZW1lbnQucHJvcHMuaWQgfHwgdHJlZVBhdGguam9pbihcIi1cIiksXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBDb21wb25lbnQ6IGVsZW1lbnQucHJvcHMuQ29tcG9uZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnksXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZSxcbiAgICAgIGxhenk6IGVsZW1lbnQucHJvcHMubGF6eVxuICAgIH07XG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpIHtcbiAgbGV0IHVwZGF0ZXMgPSB7XG4gICAgLy8gTm90ZTogdGhpcyBjaGVjayBhbHNvIG9jY3VycyBpbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gc28gdXBkYXRlXG4gICAgLy8gdGhlcmUgaWYgeW91IGNoYW5nZSB0aGlzIC0tIHBsZWFzZSBhbmQgdGhhbmsgeW91IVxuICAgIGhhc0Vycm9yQm91bmRhcnk6IHJvdXRlLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCByb3V0ZS5lcnJvckVsZW1lbnQgIT0gbnVsbFxuICB9O1xuICBpZiAocm91dGUuQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBDb21wb25lbnRgIGFuZCBgZWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgQ29tcG9uZW50YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkNvbXBvbmVudCksXG4gICAgICBDb21wb25lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5IeWRyYXRlRmFsbGJhY2spIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAocm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEh5ZHJhdGVGYWxsYmFja2AgYW5kIGBoeWRyYXRlRmFsbGJhY2tFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBIeWRyYXRlRmFsbGJhY2tgIHdpbGwgYmUgdXNlZC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSxcbiAgICAgIEh5ZHJhdGVGYWxsYmFjazogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cbiAgaWYgKHJvdXRlLkVycm9yQm91bmRhcnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAocm91dGUuZXJyb3JFbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgRXJyb3JCb3VuZGFyeWAgYW5kIGBlcnJvckVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYEVycm9yQm91bmRhcnlgIHdpbGwgYmUgdXNlZC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgZXJyb3JFbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5FcnJvckJvdW5kYXJ5KSxcbiAgICAgIEVycm9yQm91bmRhcnk6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB1cGRhdGVzO1xufVxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5Um91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllczogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsSW5kZXhcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEsXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICBkYXRhU3RyYXRlZ3k6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZGF0YVN0cmF0ZWd5LFxuICAgIHBhdGNoUm91dGVzT25OYXZpZ2F0aW9uOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnBhdGNoUm91dGVzT25OYXZpZ2F0aW9uXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZXhwb3J0IHsgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcywgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCwgbG9nVjZEZXByZWNhdGlvbldhcm5pbmdzIGFzIFVOU0FGRV9sb2dWNkRlcHJlY2F0aW9uV2FybmluZ3MsIG1hcFJvdXRlUHJvcGVydGllcyBhcyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCB1c2VSb3V0ZUlkIGFzIFVOU0FGRV91c2VSb3V0ZUlkLCB1c2VSb3V0ZXNJbXBsIGFzIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlQmxvY2tlciwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4yOC4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCBVTlNBRkVfbG9nVjZEZXByZWNhdGlvbldhcm5pbmdzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBSb3V0ZXIsIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIHVzZUhyZWYsIHVzZVJlc29sdmVkUGF0aCwgdXNlTG9jYXRpb24sIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfdXNlUm91dGVJZCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGlvbiwgdXNlQmxvY2tlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBVTlNBRkVfdXNlUm91dGVJZCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlbmRlck1hdGNoZXMsIHJlcGxhY2UsIHJlc29sdmVQYXRoLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgc3RyaXBCYXNlbmFtZSwgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgSURMRV9GRVRDSEVSLCBtYXRjaFBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5leHBvcnQgeyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmIChcbiAgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmXG4gIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5mdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvblNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcbiAgaWYgKGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgICAvLyBVc2UgYGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCguLi4pYCBoZXJlIGluc3RlYWQgb2YgaXRlcmF0aW5nIG9mXG4gICAgLy8gYGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpYCB0byB3b3JrLWFyb3VuZCBhIGJ1ZyBpbiBGaXJlZm94IHJlbGF0ZWQgdG9cbiAgICAvLyB3ZWIgZXh0ZW5zaW9ucy4gUmVsZXZhbnQgQnVnemlsbGEgdGlja2V0czpcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDE0NjAyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAyMzk4NFxuICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG4vLyBPbmUtdGltZSBjaGVjayBmb3Igc3VibWl0dGVyIHN1cHBvcnRcbmxldCBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IG51bGw7XG5mdW5jdGlvbiBpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkge1xuICBpZiAoX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPT09IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZvcm1EYXRhKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpZiBGb3JtRGF0YSBzdXBwb3J0cyB0aGUgc3VibWl0dGVyIHBhcmFtZXRlciwgdGhpcyB3aWxsIHRocm93XG4gICAgICAwKTtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXI7XG59XG5jb25zdCBzdXBwb3J0ZWRGb3JtRW5jVHlwZXMgPSBuZXcgU2V0KFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdKTtcbmZ1bmN0aW9uIGdldEZvcm1FbmNUeXBlKGVuY1R5cGUpIHtcbiAgaWYgKGVuY1R5cGUgIT0gbnVsbCAmJiAhc3VwcG9ydGVkRm9ybUVuY1R5cGVzLmhhcyhlbmNUeXBlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIlxcXCJcIiArIGVuY1R5cGUgKyBcIlxcXCIgaXMgbm90IGEgdmFsaWQgYGVuY1R5cGVgIGZvciBgPEZvcm0+YC9gPGZldGNoZXIuRm9ybT5gIFwiICsgKFwiYW5kIHdpbGwgZGVmYXVsdCB0byBcXFwiXCIgKyBkZWZhdWx0RW5jVHlwZSArIFwiXFxcIlwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGVuY1R5cGU7XG59XG5mdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSkge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuICBsZXQgYm9keTtcbiAgaWYgKGlzRm9ybUVsZW1lbnQodGFyZ2V0KSkge1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgZW5jVHlwZSA9IGdldEZvcm1FbmNUeXBlKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcbiAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGEgPGJ1dHRvbj4gb3IgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCI+IHdpdGhvdXQgYSA8Zm9ybT5cIik7XG4gICAgfVxuICAgIC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpKSB8fCBnZXRGb3JtRW5jVHlwZShmb3JtLmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIC8vIEJ1aWxkIGEgRm9ybURhdGEgb2JqZWN0IHBvcHVsYXRlZCBmcm9tIGEgZm9ybSBhbmQgc3VibWl0dGVyXG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSwgdGFyZ2V0KTtcbiAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgRm9ybURhdGEoZWwsIHN1Ym1pdHRlcilgIGZvcm1hdCxcbiAgICAvLyB0aGVuIHRhY2sgb24gdGhlIHN1Ym1pdHRlciB2YWx1ZSBhdCB0aGUgZW5kLiAgVGhpcyBpcyBhIGxpZ2h0d2VpZ2h0XG4gICAgLy8gc29sdXRpb24gdGhhdCBpcyBub3QgMTAwJSBzcGVjIGNvbXBsaWFudC4gIEZvciBjb21wbGV0ZSBzdXBwb3J0IGluIG9sZGVyXG4gICAgLy8gYnJvd3NlcnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBwYWNrYWdlXG4gICAgaWYgKCFpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gdGFyZ2V0O1xuICAgICAgaWYgKHR5cGUgPT09IFwiaW1hZ2VcIikge1xuICAgICAgICBsZXQgcHJlZml4ID0gbmFtZSA/IG5hbWUgKyBcIi5cIiA6IFwiXCI7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInhcIiwgXCIwXCIpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJlZml4ICsgXCJ5XCIsIFwiMFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgXCIgKyBcIjxpbnB1dCB0eXBlPVxcXCJzdWJtaXR8aW1hZ2VcXFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG51bGw7XG4gICAgZW5jVHlwZSA9IGRlZmF1bHRFbmNUeXBlO1xuICAgIGJvZHkgPSB0YXJnZXQ7XG4gIH1cbiAgLy8gU2VuZCBib2R5IGZvciA8Rm9ybSBlbmNUeXBlPVwidGV4dC9wbGFpblwiIHNvIHdlIGVuY29kZSBpdCBpbnRvIHRleHRcbiAgaWYgKGZvcm1EYXRhICYmIGVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgYm9keSA9IGZvcm1EYXRhO1xuICAgIGZvcm1EYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWN0aW9uLFxuICAgIG1ldGhvZDogbWV0aG9kLnRvTG93ZXJDYXNlKCksXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YSxcbiAgICBib2R5XG4gIH07XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2xpY2tcIiwgXCJyZWxhdGl2ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiwgXCJ2aWV3VHJhbnNpdGlvblwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwidmlld1RyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcImZldGNoZXJLZXlcIiwgXCJuYXZpZ2F0ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJyZWxhdGl2ZVwiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInZpZXdUcmFuc2l0aW9uXCJdO1xuLy8gSEVZIFlPVSEgRE9OJ1QgVE9VQ0ggVEhJUyBWQVJJQUJMRSFcbi8vXG4vLyBJdCBpcyByZXBsYWNlZCB3aXRoIHRoZSBwcm9wZXIgdmVyc2lvbiBhdCBidWlsZCB0aW1lIHZpYSBhIGJhYmVsIHBsdWdpbiBpblxuLy8gdGhlIHJvbGx1cCBjb25maWcuXG4vL1xuLy8gRXhwb3J0IGEgZ2xvYmFsIHByb3BlcnR5IG9udG8gdGhlIHdpbmRvdyBmb3IgUmVhY3QgUm91dGVyIGRldGVjdGlvbiBieSB0aGVcbi8vIENvcmUgV2ViIFZpdGFscyBUZWNobm9sb2d5IFJlcG9ydC4gIFRoaXMgd2F5IHRoZXkgY2FuIGNvbmZpZ3VyZSB0aGUgYHdhcHBhbHl6ZXJgXG4vLyB0byBkZXRlY3QgYW5kIHByb3Blcmx5IGNsYXNzaWZ5IGxpdmUgd2Vic2l0ZXMgYXMgYmVpbmcgYnVpbHQgd2l0aCBSZWFjdCBSb3V0ZXI6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSFRUUEFyY2hpdmUvd2FwcGFseXplci9ibG9iL21haW4vc3JjL3RlY2hub2xvZ2llcy9yLmpzb25cbmNvbnN0IFJFQUNUX1JPVVRFUl9WRVJTSU9OID0gXCI2XCI7XG50cnkge1xuICB3aW5kb3cuX19yZWFjdFJvdXRlclZlcnNpb24gPSBSRUFDVF9ST1VURVJfVkVSU0lPTjtcbn0gY2F0Y2ggKGUpIHtcbiAgLy8gbm8tb3Bcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgICBkYXRhU3RyYXRlZ3k6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZGF0YVN0cmF0ZWd5LFxuICAgIHBhdGNoUm91dGVzT25OYXZpZ2F0aW9uOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnBhdGNoUm91dGVzT25OYXZpZ2F0aW9uLFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIGRhdGFTdHJhdGVneTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5kYXRhU3RyYXRlZ3ksXG4gICAgcGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb246IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucGF0Y2hSb3V0ZXNPbk5hdmlnYXRpb24sXG4gICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuICBsZXQgc3RhdGUgPSAoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3JzKGVycm9ycykge1xuICBpZiAoIWVycm9ycykgcmV0dXJuIG51bGw7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZXJyb3JzKTtcbiAgbGV0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBlbnRyaWVzKSB7XG4gICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpblxuICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOilcbiAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiUm91dGVFcnJvclJlc3BvbnNlXCIpIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IG5ldyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbmNvbnN0IFZpZXdUcmFuc2l0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFZpZXdUcmFuc2l0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiVmlld1RyYW5zaXRpb25cIjtcbn1cbmNvbnN0IEZldGNoZXJzQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG5ldyBNYXAoKSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZldGNoZXJzQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRmV0Y2hlcnNcIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb21wb25lbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5jb25zdCBGTFVTSF9TWU5DID0gXCJmbHVzaFN5bmNcIjtcbmNvbnN0IGZsdXNoU3luY0ltcGwgPSBSZWFjdERPTVtGTFVTSF9TWU5DXTtcbmNvbnN0IFVTRV9JRCA9IFwidXNlSWRcIjtcbmNvbnN0IHVzZUlkSW1wbCA9IFJlYWN0W1VTRV9JRF07XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb25TYWZlKGNiKSB7XG4gIGlmIChzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgc3RhcnRUcmFuc2l0aW9uSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hTeW5jU2FmZShjYikge1xuICBpZiAoZmx1c2hTeW5jSW1wbCkge1xuICAgIGZsdXNoU3luY0ltcGwoY2IpO1xuICB9IGVsc2Uge1xuICAgIGNiKCk7XG4gIH1cbn1cbmNsYXNzIERlZmVycmVkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVzb2x2ZWRcIjtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMucmVqZWN0ID0gcmVhc29uID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCBbcGVuZGluZ1N0YXRlLCBzZXRQZW5kaW5nU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFt2dENvbnRleHQsIHNldFZ0Q29udGV4dF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICB9KTtcbiAgbGV0IFtyZW5kZXJEZmQsIHNldFJlbmRlckRmZF0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFtpbnRlcnJ1cHRpb24sIHNldEludGVycnVwdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VSZWYobmV3IE1hcCgpKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IG9wdEluU3RhcnRUcmFuc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soY2IgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24pIHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfSwgW3Y3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygobmV3U3RhdGUsIF9yZWYyKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVycyxcbiAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgICAgdmlld1RyYW5zaXRpb25PcHRzOiB2aWV3VHJhbnNpdGlvbk9wdHNcbiAgICB9ID0gX3JlZjI7XG4gICAgZGVsZXRlZEZldGNoZXJzLmZvckVhY2goa2V5ID0+IGZldGNoZXJEYXRhLmN1cnJlbnQuZGVsZXRlKGtleSkpO1xuICAgIG5ld1N0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoZXIuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZldGNoZXJEYXRhLmN1cnJlbnQuc2V0KGtleSwgZmV0Y2hlci5kYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlID0gcm91dGVyLndpbmRvdyA9PSBudWxsIHx8IHJvdXRlci53aW5kb3cuZG9jdW1lbnQgPT0gbnVsbCB8fCB0eXBlb2Ygcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uICE9PSBcImZ1bmN0aW9uXCI7XG4gICAgLy8gSWYgdGhpcyBpc24ndCBhIHZpZXcgdHJhbnNpdGlvbiBvciBpdCdzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBicm93c2VyLFxuICAgIC8vIGp1c3QgdXBkYXRlIGFuZCBiZSBkb25lIHdpdGggaXRcbiAgICBpZiAoIXZpZXdUcmFuc2l0aW9uT3B0cyB8fCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUpIHtcbiAgICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmbHVzaFN5bmMgKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgLy8gRmx1c2ggdGhyb3VnaCB0aGUgY29udGV4dCB0byBtYXJrIERPTSBlbGVtZW50cyBhcyB0cmFuc2l0aW9uPWluZ1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgcGVuZGluZyB0cmFuc2l0aW9uc1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgICBmbHVzaFN5bmM6IHRydWUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLy8gVXBkYXRlIHRoZSBET01cbiAgICAgIGxldCB0ID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQ2xlYW4gdXAgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcbiAgICAgIHQuZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRUcmFuc2l0aW9uKHQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnRUcmFuc2l0aW9uICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAvLyBJbnRlcnJ1cHRpbmcgYW4gaW4tcHJvZ3Jlc3MgdHJhbnNpdGlvbiwgY2FuY2VsIGFuZCBsZXQgZXZlcnl0aGluZyBmbHVzaFxuICAgICAgLy8gb3V0LCBhbmQgdGhlbiBraWNrIG9mZiBhIG5ldyB0cmFuc2l0aW9uIGZyb20gdGhlIGludGVycnVwdGlvbiBzdGF0ZVxuICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24oe1xuICAgICAgICBzdGF0ZTogbmV3U3RhdGUsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29tcGxldGVkIG5hdmlnYXRpb24gdXBkYXRlIHdpdGggb3B0ZWQtaW4gdmlldyB0cmFuc2l0aW9ucywgbGV0ICdlciByaXBcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShuZXdTdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIud2luZG93LCB0cmFuc2l0aW9uLCByZW5kZXJEZmQsIGZldGNoZXJEYXRhLCBvcHRJblN0YXJ0VHJhbnNpdGlvbl0pO1xuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG4gIC8vIFdoZW4gd2Ugc3RhcnQgYSB2aWV3IHRyYW5zaXRpb24sIGNyZWF0ZSBhIERlZmVycmVkIHdlIGNhbiB1c2UgZm9yIHRoZVxuICAvLyBldmVudHVhbCBcImNvbXBsZXRlZFwiIHJlbmRlclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmICF2dENvbnRleHQuZmx1c2hTeW5jKSB7XG4gICAgICBzZXRSZW5kZXJEZmQobmV3IERlZmVycmVkKCkpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dF0pO1xuICAvLyBPbmNlIHRoZSBkZWZlcnJlZCBpcyBjcmVhdGVkLCBraWNrIG9mZiBzdGFydFZpZXdUcmFuc2l0aW9uKCkgdG8gdXBkYXRlIHRoZVxuICAvLyBET00gYW5kIHRoZW4gd2FpdCBvbiB0aGUgRGVmZXJyZWQgdG8gcmVzb2x2ZSAoaW5kaWNhdGluZyB0aGUgRE9NIHVwZGF0ZSBoYXNcbiAgLy8gaGFwcGVuZWQpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgcm91dGVyLndpbmRvdykge1xuICAgICAgbGV0IG5ld1N0YXRlID0gcGVuZGluZ1N0YXRlO1xuICAgICAgbGV0IHJlbmRlclByb21pc2UgPSByZW5kZXJEZmQucHJvbWlzZTtcbiAgICAgIGxldCB0cmFuc2l0aW9uID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIGF3YWl0IHJlbmRlclByb21pc2U7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zaXRpb24uZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNldFRyYW5zaXRpb24odHJhbnNpdGlvbik7XG4gICAgfVxuICB9LCBbb3B0SW5TdGFydFRyYW5zaXRpb24sIHBlbmRpbmdTdGF0ZSwgcmVuZGVyRGZkLCByb3V0ZXIud2luZG93XSk7XG4gIC8vIFdoZW4gdGhlIG5ldyBsb2NhdGlvbiBmaW5hbGx5IHJlbmRlcnMgYW5kIGlzIGNvbW1pdHRlZCB0byB0aGUgRE9NLCB0aGlzXG4gIC8vIGVmZmVjdCB3aWxsIHJ1biB0byByZXNvbHZlIHRoZSB0cmFuc2l0aW9uXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgc3RhdGUubG9jYXRpb24ua2V5ID09PSBwZW5kaW5nU3RhdGUubG9jYXRpb24ua2V5KSB7XG4gICAgICByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgIH1cbiAgfSwgW3JlbmRlckRmZCwgdHJhbnNpdGlvbiwgc3RhdGUubG9jYXRpb24sIHBlbmRpbmdTdGF0ZV0pO1xuICAvLyBJZiB3ZSBnZXQgaW50ZXJydXB0ZWQgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uIGR1cmluZyBhIHRyYW5zaXRpb24sIHdlIHNraXBcbiAgLy8gdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBsZXQgaXQgY2xlYW51cCwgdGhlbiBraWNrIGl0IG9mZiBhZ2FpbiBoZXJlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmIGludGVycnVwdGlvbikge1xuICAgICAgc2V0UGVuZGluZ1N0YXRlKGludGVycnVwdGlvbi5zdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW50ZXJydXB0aW9uLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBpbnRlcnJ1cHRpb24ubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICAgIHNldEludGVycnVwdGlvbih1bmRlZmluZWQpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcsIGludGVycnVwdGlvbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgKyBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIikgOiB2b2lkIDA7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG4gIGxldCByb3V0ZXJGdXR1cmUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgfSksIFtyb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBVTlNBRkVfbG9nVjZEZXByZWNhdGlvbldhcm5pbmdzKGZ1dHVyZSwgcm91dGVyLmZ1dHVyZSksIFtmdXR1cmUsIHJvdXRlci5mdXR1cmVdKTtcbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmV0Y2hlcnNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGZldGNoZXJEYXRhLmN1cnJlbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVmlld1RyYW5zaXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZ0Q29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLFxuICAgIGZ1dHVyZTogcm91dGVyRnV0dXJlXG4gIH0sIHN0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbW9pemVkRGF0YVJvdXRlcywge1xuICAgIHJvdXRlczogcm91dGVyLnJvdXRlcyxcbiAgICBmdXR1cmU6IHJvdXRlci5mdXR1cmUsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpKSksIG51bGwpO1xufVxuLy8gTWVtb2l6ZSB0byBhdm9pZCByZS1yZW5kZXJzIHdoZW4gdXBkYXRpbmcgYFZpZXdUcmFuc2l0aW9uQ29udGV4dGBcbmNvbnN0IE1lbW9pemVkRGF0YVJvdXRlcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKERhdGFSb3V0ZXMpO1xuZnVuY3Rpb24gRGF0YVJvdXRlcyhfcmVmMykge1xuICBsZXQge1xuICAgIHJvdXRlcyxcbiAgICBmdXR1cmUsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYzO1xuICByZXR1cm4gVU5TQUZFX3VzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlLCBmdXR1cmUpO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjQ7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IFVOU0FGRV9sb2dWNkRlcHJlY2F0aW9uV2FybmluZ3MoZnV0dXJlKSwgW2Z1dHVyZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmNTtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gVU5TQUZFX2xvZ1Y2RGVwcmVjYXRpb25XYXJuaW5ncyhmdXR1cmUpLCBbZnV0dXJlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IFVOU0FGRV9sb2dWNkRlcHJlY2F0aW9uV2FybmluZ3MoZnV0dXJlKSwgW2Z1dHVyZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIGA8YT5gLlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjcsIHJlZikge1xuICBsZXQge1xuICAgICAgb25DbGljayxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICB0byxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHZpZXdUcmFuc2l0aW9uXG4gICAgfSA9IF9yZWY3LFxuICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNywgX2V4Y2x1ZGVkKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG4gIGxldCBhYnNvbHV0ZUhyZWY7XG4gIGxldCBpc0V4dGVybmFsID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgJiYgQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QodG8pKSB7XG4gICAgLy8gUmVuZGVyIHRoZSBhYnNvbHV0ZSBocmVmIHNlcnZlci0gYW5kIGNsaWVudC1zaWRlXG4gICAgYWJzb2x1dGVIcmVmID0gdG87XG4gICAgLy8gT25seSBjaGVjayBmb3IgZXh0ZXJuYWwgb3JpZ2lucyBjbGllbnQtc2lkZVxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgIGxldCB0YXJnZXRVcmwgPSB0by5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyB0bykgOiBuZXcgVVJMKHRvKTtcbiAgICAgICAgbGV0IHBhdGggPSBzdHJpcEJhc2VuYW1lKHRhcmdldFVybC5wYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgICAgICBpZiAodGFyZ2V0VXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgcGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gU3RyaXAgdGhlIHByb3RvY29sL29yaWdpbi9iYXNlbmFtZSBmb3Igc2FtZS1vcmlnaW4gYWJzb2x1dGUgVVJMc1xuICAgICAgICAgIHRvID0gcGF0aCArIHRhcmdldFVybC5zZWFyY2ggKyB0YXJnZXRVcmwuaGFzaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBXZSBjYW4ndCBkbyBleHRlcm5hbCBVUkwgZGV0ZWN0aW9uIHdpdGhvdXQgYSB2YWxpZCBVUkxcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiPExpbmsgdG89XFxcIlwiICsgdG8gKyBcIlxcXCI+IGNvbnRhaW5zIGFuIGludmFsaWQgVVJMIHdoaWNoIHdpbGwgcHJvYmFibHkgYnJlYWsgXCIgKyBcIndoZW4gY2xpY2tlZCAtIHBsZWFzZSB1cGRhdGUgdG8gYSB2YWxpZCBVUkwgcGF0aC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIHJlbGF0aXZlIFVSTHNcbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHZpZXdUcmFuc2l0aW9uXG4gIH0pO1xuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogYWJzb2x1dGVIcmVmIHx8IGhyZWYsXG4gICAgICBvbkNsaWNrOiBpc0V4dGVybmFsIHx8IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cbi8qKlxuICogQSBgPExpbms+YCB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY4LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICAgIGVuZCA9IGZhbHNlLFxuICAgICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICAgIHRvLFxuICAgICAgdmlld1RyYW5zaXRpb24sXG4gICAgICBjaGlsZHJlblxuICAgIH0gPSBfcmVmOCxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjgsIF9leGNsdWRlZDIpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlXG4gIH0pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3IsXG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGlzVHJhbnNpdGlvbmluZyA9IHJvdXRlclN0YXRlICE9IG51bGwgJiZcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgdXNlVmlld1RyYW5zaXRpb25TdGF0ZShwYXRoKSAmJiB2aWV3VHJhbnNpdGlvbiA9PT0gdHJ1ZTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWUgOiBwYXRoLnBhdGhuYW1lO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lIDogbnVsbDtcbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuICBpZiAobmV4dExvY2F0aW9uUGF0aG5hbWUgJiYgYmFzZW5hbWUpIHtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uUGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBuZXh0TG9jYXRpb25QYXRobmFtZTtcbiAgfVxuICAvLyBJZiB0aGUgYHRvYCBoYXMgYSB0cmFpbGluZyBzbGFzaCwgbG9vayBhdCB0aGF0IGV4YWN0IHNwb3QuICBPdGhlcndpc2UsXG4gIC8vIHdlJ3JlIGxvb2tpbmcgZm9yIGEgc2xhc2ggX2FmdGVyXyB3aGF0J3MgaW4gYHRvYC4gIEZvciBleGFtcGxlOlxuICAvL1xuICAvLyA8TmF2TGluayB0bz1cIi91c2Vyc1wiPiBhbmQgPE5hdkxpbmsgdG89XCIvdXNlcnMvXCI+XG4gIC8vIGJvdGggd2FudCB0byBsb29rIGZvciBhIC8gYXQgaW5kZXggNiB0byBtYXRjaCBVUkwgYC91c2Vycy9tYXR0YFxuICBjb25zdCBlbmRTbGFzaFBvc2l0aW9uID0gdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lLmxlbmd0aCAtIDEgOiB0b1BhdGhuYW1lLmxlbmd0aDtcbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdChlbmRTbGFzaFBvc2l0aW9uKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgcmVuZGVyUHJvcHMgPSB7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nLFxuICAgIGlzVHJhbnNpdGlvbmluZ1xuICB9O1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHJlbmRlclByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbCwgaXNUcmFuc2l0aW9uaW5nID8gXCJ0cmFuc2l0aW9uaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHJlbmRlclByb3BzKSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0byxcbiAgICB2aWV3VHJhbnNpdGlvbjogdmlld1RyYW5zaXRpb25cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4ocmVuZGVyUHJvcHMpIDogY2hpbGRyZW4pO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuY29uc3QgRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChfcmVmOSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGxldCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2QsXG4gICAgICBhY3Rpb24sXG4gICAgICBvblN1Ym1pdCxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdmlld1RyYW5zaXRpb25cbiAgICB9ID0gX3JlZjksXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmOSwgX2V4Y2x1ZGVkMyk7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXQoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSB1c2VGb3JtQWN0aW9uKGFjdGlvbiwge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgZm9ybU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICBsZXQgc3VibWl0SGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBzdWJtaXR0ZXIgPSBldmVudC5uYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgbGV0IHN1Ym1pdE1ldGhvZCA9IChzdWJtaXR0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpKSB8fCBtZXRob2Q7XG4gICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdmlld1RyYW5zaXRpb25cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtLmRpc3BsYXlOYW1lID0gXCJGb3JtXCI7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHdpbGwgZW11bGF0ZSB0aGUgYnJvd3NlcidzIHNjcm9sbCByZXN0b3JhdGlvbiBvbiBsb2NhdGlvblxuICogY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjEwKSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWYxMDtcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oe1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSG9va3Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgRGF0YVJvdXRlckhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0XCJdID0gXCJ1c2VTdWJtaXRcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRGZXRjaGVyXCJdID0gXCJ1c2VTdWJtaXRGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVySG9va1tcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIl0gPSBcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuLy8gSW50ZXJuYWwgaG9va3NcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3Y2L3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8vIEV4dGVybmFsIGhvb2tzXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gICAgdmlld1RyYW5zaXRpb25cbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUgdW5sZXNzIHRoZSByZXBsYWNlIHByb3AgaXMgZXhwbGljaXRseSBzZXRcbiAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VQcm9wIDogY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgdmlld1RyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlLCB2aWV3VHJhbnNpdGlvbl0pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtcy5cIikgOiB2b2lkIDA7XG4gIGxldCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGNyZWF0ZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkpO1xuICBsZXQgaGFzU2V0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT5cbiAgLy8gT25seSBtZXJnZSBpbiB0aGUgZGVmYXVsdHMgaWYgd2UgaGF2ZW4ndCB5ZXQgY2FsbGVkIHNldFNlYXJjaFBhcmFtcy5cbiAgLy8gT25jZSB3ZSBjYWxsIHRoYXQgd2Ugd2FudCB0aG9zZSB0byB0YWtlIHByZWNlZGVuY2UsIG90aGVyd2lzZSB5b3UgY2FuJ3RcbiAgLy8gcmVtb3ZlIGEgcGFyYW0gd2l0aCBzZXRTZWFyY2hQYXJhbXMoe30pIGlmIGl0IGhhcyBhbiBpbml0aWFsIHZhbHVlXG4gIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uLnNlYXJjaCwgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPyBudWxsIDogZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50KSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBuZXdTZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXModHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXQpO1xuICAgIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIG5ld1NlYXJjaFBhcmFtcywgbmF2aWdhdGVPcHRpb25zKTtcbiAgfSwgW25hdmlnYXRlLCBzZWFyY2hQYXJhbXNdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBjYWxsaW5nIHN1Ym1pdCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIuIFwiICsgXCJUcnkgY2FsbGluZyBzdWJtaXQgd2l0aGluIGEgYHVzZUVmZmVjdGAgb3IgY2FsbGJhY2sgaW5zdGVhZC5cIik7XG4gIH1cbn1cbmxldCBmZXRjaGVySWQgPSAwO1xubGV0IGdldFVuaXF1ZUZldGNoZXJJZCA9ICgpID0+IFwiX19cIiArIFN0cmluZygrK2ZldGNoZXJJZCkgKyBcIl9fXCI7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgc3VibWl0IGEgZm9ybSAob3JcbiAqIHNvbWUgYXJiaXRyYXJ5IGRhdGEpIHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZVN1Ym1pdCgpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVN1Ym1pdCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGN1cnJlbnRSb3V0ZUlkID0gVU5TQUZFX3VzZVJvdXRlSWQoKTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKTtcbiAgICBsZXQge1xuICAgICAgYWN0aW9uLFxuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgYm9keVxuICAgIH0gPSBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSk7XG4gICAgaWYgKG9wdGlvbnMubmF2aWdhdGUgPT09IGZhbHNlKSB7XG4gICAgICBsZXQga2V5ID0gb3B0aW9ucy5mZXRjaGVyS2V5IHx8IGdldFVuaXF1ZUZldGNoZXJJZCgpO1xuICAgICAgcm91dGVyLmZldGNoKGtleSwgY3VycmVudFJvdXRlSWQsIG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgYm9keSxcbiAgICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICAgIGZsdXNoU3luYzogb3B0aW9ucy5mbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUob3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBib2R5LFxuICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZSxcbiAgICAgICAgcmVwbGFjZTogb3B0aW9ucy5yZXBsYWNlLFxuICAgICAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSxcbiAgICAgICAgZnJvbVJvdXRlSWQ6IGN1cnJlbnRSb3V0ZUlkLFxuICAgICAgICBmbHVzaFN5bmM6IG9wdGlvbnMuZmx1c2hTeW5jLFxuICAgICAgICB2aWV3VHJhbnNpdGlvbjogb3B0aW9ucy52aWV3VHJhbnNpdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgY3VycmVudFJvdXRlSWRdKTtcbn1cbi8vIHY3OiBFdmVudHVhbGx5IHdlIHNob3VsZCBkZXByZWNhdGUgdGhpcyBlbnRpcmVseSBpbiBmYXZvciBvZiB1c2luZyB0aGVcbi8vIHJvdXRlciBtZXRob2QgZGlyZWN0bHk/XG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTtcbiAgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuICBsZXQgcGF0aCA9IF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgoYWN0aW9uID8gYWN0aW9uIDogXCIuXCIsIHtcbiAgICByZWxhdGl2ZVxuICB9KSk7XG4gIC8vIElmIG5vIGFjdGlvbiB3YXMgc3BlY2lmaWVkLCBicm93c2VycyB3aWxsIHBlcnNpc3QgY3VycmVudCBzZWFyY2ggcGFyYW1zXG4gIC8vIHdoZW4gZGV0ZXJtaW5pbmcgdGhlIHBhdGgsIHNvIG1hdGNoIHRoYXQgYmVoYXZpb3JcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGlmIChhY3Rpb24gPT0gbnVsbCkge1xuICAgIC8vIFNhZmUgdG8gd3JpdGUgdG8gdGhpcyBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZVxuICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aChcIi5cIikgd2hpY2ggd2lsbCBuZXZlciBpbmNsdWRlIGEgc2VhcmNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgLy8gV2hlbiBncmFiYmluZyBzZWFyY2ggcGFyYW1zIGZyb20gdGhlIFVSTCwgcmVtb3ZlIGFueSBpbmNsdWRlZCA/aW5kZXggcGFyYW1cbiAgICAvLyBzaW5jZSBpdCBtaWdodCBub3QgYXBwbHkgdG8gb3VyIGNvbnRleHR1YWwgcm91dGUuICBXZSBhZGQgaXQgYmFjayBiYXNlZFxuICAgIC8vIG9uIG1hdGNoLnJvdXRlLmluZGV4IGJlbG93XG4gICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aC5zZWFyY2gpO1xuICAgIGxldCBpbmRleFZhbHVlcyA9IHBhcmFtcy5nZXRBbGwoXCJpbmRleFwiKTtcbiAgICBsZXQgaGFzTmFrZWRJbmRleFBhcmFtID0gaW5kZXhWYWx1ZXMuc29tZSh2ID0+IHYgPT09IFwiXCIpO1xuICAgIGlmIChoYXNOYWtlZEluZGV4UGFyYW0pIHtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIGluZGV4VmFsdWVzLmZpbHRlcih2ID0+IHYpLmZvckVhY2godiA9PiBwYXJhbXMuYXBwZW5kKFwiaW5kZXhcIiwgdikpO1xuICAgICAgbGV0IHFzID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgICBwYXRoLnNlYXJjaCA9IHFzID8gXCI/XCIgKyBxcyA6IFwiXCI7XG4gICAgfVxuICB9XG4gIGlmICgoIWFjdGlvbiB8fCBhY3Rpb24gPT09IFwiLlwiKSAmJiBtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfVxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2VcbiAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlXG4gIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cbi8vIFRPRE86ICh2NykgQ2hhbmdlIHRoZSB1c2VGZXRjaGVyIGdlbmVyaWMgZGVmYXVsdCBmcm9tIGBhbnlgIHRvIGB1bmtub3duYFxuLyoqXG4gKiBJbnRlcmFjdHMgd2l0aCByb3V0ZSBsb2FkZXJzIGFuZCBhY3Rpb25zIHdpdGhvdXQgY2F1c2luZyBhIG5hdmlnYXRpb24uIEdyZWF0XG4gKiBmb3IgYW55IGludGVyYWN0aW9uIHRoYXQgc3RheXMgb24gdGhlIHNhbWUgcGFnZS5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hlcihfdGVtcDMpIHtcbiAgdmFyIF9yb3V0ZSRtYXRjaGVzO1xuICBsZXQge1xuICAgIGtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IGZldGNoZXJEYXRhID0gUmVhY3QudXNlQ29udGV4dChGZXRjaGVyc0NvbnRleHQpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhZmV0Y2hlckRhdGEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIEZldGNoZXJzQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgLy8gRmV0Y2hlciBrZXkgaGFuZGxpbmdcbiAgLy8gT0sgdG8gY2FsbCBjb25kaXRpb25hbGx5IHRvIGZlYXR1cmUgZGV0ZWN0IGB1c2VJZGBcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIGxldCBkZWZhdWx0S2V5ID0gdXNlSWRJbXBsID8gdXNlSWRJbXBsKCkgOiBcIlwiO1xuICBsZXQgW2ZldGNoZXJLZXksIHNldEZldGNoZXJLZXldID0gUmVhY3QudXNlU3RhdGUoa2V5IHx8IGRlZmF1bHRLZXkpO1xuICBpZiAoa2V5ICYmIGtleSAhPT0gZmV0Y2hlcktleSkge1xuICAgIHNldEZldGNoZXJLZXkoa2V5KTtcbiAgfSBlbHNlIGlmICghZmV0Y2hlcktleSkge1xuICAgIC8vIFdlIHdpbGwgb25seSBmYWxsIHRocm91Z2ggaGVyZSB3aGVuIGB1c2VJZGAgaXMgbm90IGF2YWlsYWJsZVxuICAgIHNldEZldGNoZXJLZXkoZ2V0VW5pcXVlRmV0Y2hlcklkKCkpO1xuICB9XG4gIC8vIFJlZ2lzdHJhdGlvbi9jbGVhbnVwXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIFRlbGwgdGhlIHJvdXRlciB3ZSd2ZSB1bm1vdW50ZWQgLSBpZiB2N19mZXRjaGVyUGVyc2lzdCBpcyBlbmFibGVkIHRoaXNcbiAgICAgIC8vIHdpbGwgbm90IGRlbGV0ZSBpbW1lZGlhdGVseSBidXQgaW5zdGVhZCBxdWV1ZSB1cCBhIGRlbGV0ZSBhZnRlciB0aGVcbiAgICAgIC8vIGZldGNoZXIgcmV0dXJucyB0byBhbiBgaWRsZWAgc3RhdGVcbiAgICAgIHJvdXRlci5kZWxldGVGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIH07XG4gIH0sIFtyb3V0ZXIsIGZldGNoZXJLZXldKTtcbiAgLy8gRmV0Y2hlciBhZGRpdGlvbnNcbiAgbGV0IGxvYWQgPSBSZWFjdC51c2VDYWxsYmFjaygoaHJlZiwgb3B0cykgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByb3V0ZXIuZmV0Y2goZmV0Y2hlcktleSwgcm91dGVJZCwgaHJlZiwgb3B0cyk7XG4gIH0sIFtmZXRjaGVyS2V5LCByb3V0ZUlkLCByb3V0ZXJdKTtcbiAgbGV0IHN1Ym1pdEltcGwgPSB1c2VTdWJtaXQoKTtcbiAgbGV0IHN1Ym1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKCh0YXJnZXQsIG9wdHMpID0+IHtcbiAgICBzdWJtaXRJbXBsKHRhcmdldCwgX2V4dGVuZHMoe30sIG9wdHMsIHtcbiAgICAgIG5hdmlnYXRlOiBmYWxzZSxcbiAgICAgIGZldGNoZXJLZXlcbiAgICB9KSk7XG4gIH0sIFtmZXRjaGVyS2V5LCBzdWJtaXRJbXBsXSk7XG4gIGxldCBGZXRjaGVyRm9ybSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBGZXRjaGVyRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIG5hdmlnYXRlOiBmYWxzZSxcbiAgICAgICAgZmV0Y2hlcktleTogZmV0Y2hlcktleSxcbiAgICAgICAgcmVmOiByZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBGZXRjaGVyRm9ybS5kaXNwbGF5TmFtZSA9IFwiZmV0Y2hlci5Gb3JtXCI7XG4gICAgfVxuICAgIHJldHVybiBGZXRjaGVyRm9ybTtcbiAgfSwgW2ZldGNoZXJLZXldKTtcbiAgLy8gRXhwb3NlZCBGZXRjaGVyV2l0aENvbXBvbmVudHNcbiAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoZmV0Y2hlcktleSkgfHwgSURMRV9GRVRDSEVSO1xuICBsZXQgZGF0YSA9IGZldGNoZXJEYXRhLmdldChmZXRjaGVyS2V5KTtcbiAgbGV0IGZldGNoZXJXaXRoQ29tcG9uZW50cyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gX2V4dGVuZHMoe1xuICAgIEZvcm06IEZldGNoZXJGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIsIHtcbiAgICBkYXRhXG4gIH0pLCBbRmV0Y2hlckZvcm0sIHN1Ym1pdCwgbG9hZCwgZmV0Y2hlciwgZGF0YV0pO1xuICByZXR1cm4gZmV0Y2hlcldpdGhDb21wb25lbnRzO1xufVxuLyoqXG4gKiBQcm92aWRlcyBhbGwgZmV0Y2hlcnMgY3VycmVudGx5IG9uIHRoZSBwYWdlLiBVc2VmdWwgZm9yIGxheW91dHMgYW5kIHBhcmVudFxuICogcm91dGVzIHRoYXQgbmVlZCB0byBwcm92aWRlIHBlbmRpbmcvb3B0aW1pc3RpYyBVSSByZWdhcmRpbmcgdGhlIGZldGNoLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaGVycygpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcnMpO1xuICByZXR1cm4gQXJyYXkuZnJvbShzdGF0ZS5mZXRjaGVycy5lbnRyaWVzKCkpLm1hcChfcmVmMTEgPT4ge1xuICAgIGxldCBba2V5LCBmZXRjaGVyXSA9IF9yZWYxMTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGZldGNoZXIsIHtcbiAgICAgIGtleVxuICAgIH0pO1xuICB9KTtcbn1cbmNvbnN0IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSA9IFwicmVhY3Qtcm91dGVyLXNjcm9sbC1wb3NpdGlvbnNcIjtcbmxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHt9O1xuLyoqXG4gKiBXaGVuIHJlbmRlcmVkIGluc2lkZSBhIFJvdXRlclByb3ZpZGVyLCB3aWxsIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9ucyBvbiBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihfdGVtcDQpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNDtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IG1hdGNoZXMgPSB1c2VNYXRjaGVzKCk7XG4gIGxldCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xuICAvLyBUcmlnZ2VyIG1hbnVhbCBzY3JvbGwgcmVzdG9yYXRpb24gd2hpbGUgd2UncmUgYWN0aXZlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgLy8gU2F2ZSBwb3NpdGlvbnMgb24gcGFnZWhpZGVcbiAgdXNlUGFnZUhpZGUoUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChuYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgbGV0IGtleSA9IChnZXRLZXkgPyBnZXRLZXkobG9jYXRpb24sIG1hdGNoZXMpIDogbnVsbCkgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IHdpbmRvdy5zY3JvbGxZO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiRmFpbGVkIHRvIHNhdmUgc2Nyb2xsIHBvc2l0aW9ucyBpbiBzZXNzaW9uU3RvcmFnZSwgPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHdpbGwgbm90IHdvcmsgcHJvcGVybHkgKFwiICsgZXJyb3IgKyBcIikuXCIpIDogdm9pZCAwO1xuICAgIH1cbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICB9LCBbc3RvcmFnZUtleSwgZ2V0S2V5LCBuYXZpZ2F0aW9uLnN0YXRlLCBsb2NhdGlvbiwgbWF0Y2hlc10pKTtcbiAgLy8gUmVhZCBpbiBhbnkgc2F2ZWQgc2Nyb2xsIGxvY2F0aW9uc1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSk7XG4gICAgICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBKU09OLnBhcnNlKHNlc3Npb25Qb3NpdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgICAgIH1cbiAgICB9LCBbc3RvcmFnZUtleV0pO1xuICAgIC8vIEVuYWJsZSBzY3JvbGwgcmVzdG9yYXRpb24gaW4gdGhlIHJvdXRlclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgZ2V0S2V5V2l0aG91dEJhc2VuYW1lID0gZ2V0S2V5ICYmIGJhc2VuYW1lICE9PSBcIi9cIiA/IChsb2NhdGlvbiwgbWF0Y2hlcykgPT4gZ2V0S2V5KCAvLyBTdHJpcCB0aGUgYmFzZW5hbWUgdG8gbWF0Y2ggdXNlTG9jYXRpb24oKVxuICAgICAgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLCBtYXRjaGVzKSA6IGdldEtleTtcbiAgICAgIGxldCBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gPSByb3V0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlci5lbmFibGVTY3JvbGxSZXN0b3JhdGlvbihzYXZlZFNjcm9sbFBvc2l0aW9ucywgKCkgPT4gd2luZG93LnNjcm9sbFksIGdldEtleVdpdGhvdXRCYXNlbmFtZSk7XG4gICAgICByZXR1cm4gKCkgPT4gZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uICYmIGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbigpO1xuICAgIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBnZXRLZXldKTtcbiAgICAvLyBSZXN0b3JlIHNjcm9sbGluZyB3aGVuIHN0YXRlLnJlc3RvcmVTY3JvbGxQb3NpdGlvbiBjaGFuZ2VzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIC8vIEV4cGxpY2l0IGZhbHNlIG1lYW5zIGRvbid0IGRvIGFueXRoaW5nICh1c2VkIGZvciBzdWJtaXNzaW9ucylcbiAgICAgIGlmIChyZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGJlZW4gaGVyZSBiZWZvcmUsIHNjcm9sbCB0byBpdFxuICAgICAgaWYgKHR5cGVvZiByZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHJlc3RvcmVTY3JvbGxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHRyeSB0byBzY3JvbGwgdG8gdGhlIGhhc2hcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRlY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5oYXNoLnNsaWNlKDEpKSk7XG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEb24ndCByZXNldCBpZiB0aGlzIG5hdmlnYXRpb24gb3B0ZWQgb3V0XG4gICAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIG90aGVyd2lzZSBnbyB0byB0aGUgdG9wIG9uIG5ldyBsb2NhdGlvbnNcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9LCBbbG9jYXRpb24sIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiwgcHJldmVudFNjcm9sbFJlc2V0XSk7XG4gIH1cbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYGJlZm9yZXVubG9hZGAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlQmVmb3JlVW5sb2FkKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgcGFnZWhpZGVgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuICBUaGlzIGV2ZW50IGlzIGJldHRlciBzdXBwb3J0ZWQgdGhhbiBiZWZvcmV1bmxvYWQgYWNyb3NzIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VQYWdlSGlkZShjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIHVzZUJsb2NrZXIgdG8gc2hvdyBhIHdpbmRvdy5jb25maXJtIHByb21wdCB0byB1c2VycyBpbnN0ZWFkXG4gKiBvZiBidWlsZGluZyBhIGN1c3RvbSBVSSB3aXRoIHVzZUJsb2NrZXIuXG4gKlxuICogV2FybmluZzogVGhpcyBoYXMgKmEgbG90IG9mIHJvdWdoIGVkZ2VzKiBhbmQgYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IChhbmRcbiAqIHZlcnkgaW5jb3JyZWN0bHkgaW4gc29tZSBjYXNlcykgYWNyb3NzIGJyb3dzZXJzIGlmIHVzZXIgY2xpY2sgYWRkaXRpb25cbiAqIGJhY2svZm9yd2FyZCBuYXZpZ2F0aW9ucyB3aGlsZSB0aGUgY29uZmlybSBpcyBvcGVuLiAgVXNlIGF0IHlvdXIgb3duIHJpc2suXG4gKi9cbmZ1bmN0aW9uIHVzZVByb21wdChfcmVmMTIpIHtcbiAgbGV0IHtcbiAgICB3aGVuLFxuICAgIG1lc3NhZ2VcbiAgfSA9IF9yZWYxMjtcbiAgbGV0IGJsb2NrZXIgPSB1c2VCbG9ja2VyKHdoZW4pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIikge1xuICAgICAgbGV0IHByb2NlZWQgPSB3aW5kb3cuY29uZmlybShtZXNzYWdlKTtcbiAgICAgIGlmIChwcm9jZWVkKSB7XG4gICAgICAgIC8vIFRoaXMgdGltZW91dCBpcyBuZWVkZWQgdG8gYXZvaWQgYSB3ZWlyZCBcInJhY2VcIiBvbiBQT1AgbmF2aWdhdGlvbnNcbiAgICAgICAgLy8gYmV0d2VlbiB0aGUgYHdpbmRvdy5oaXN0b3J5YCByZXZlcnQgbmF2aWdhdGlvbiBhbmQgdGhlIHJlc3VsdCBvZlxuICAgICAgICAvLyBgd2luZG93LmNvbmZpcm1gXG4gICAgICAgIHNldFRpbWVvdXQoYmxvY2tlci5wcm9jZWVkLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtibG9ja2VyLCBtZXNzYWdlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmICF3aGVuKSB7XG4gICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgfVxuICB9LCBbYmxvY2tlciwgd2hlbl0pO1xufVxuLyoqXG4gKiBSZXR1cm4gYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlcmUgaXMgYW4gYWN0aXZlIHZpZXcgdHJhbnNpdGlvbiB0byB0aGVcbiAqIGdpdmVuIGhyZWYuICBZb3UgY2FuIHVzZSB0aGlzIHZhbHVlIHRvIHJlbmRlciBDU1MgY2xhc3NlcyBvciB2aWV3VHJhbnNpdGlvbk5hbWVcbiAqIHN0eWxlcyBvbnRvIHlvdXIgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0gaHJlZiBUaGUgZGVzdGluYXRpb24gaHJlZlxuICogQHBhcmFtIFtvcHRzLnJlbGF0aXZlXSBSZWxhdGl2ZSByb3V0aW5nIHR5cGUgKFwicm91dGVcIiB8IFwicGF0aFwiKVxuICovXG5mdW5jdGlvbiB1c2VWaWV3VHJhbnNpdGlvblN0YXRlKHRvLCBvcHRzKSB7XG4gIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICBvcHRzID0ge307XG4gIH1cbiAgbGV0IHZ0Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVmlld1RyYW5zaXRpb25Db250ZXh0KTtcbiAgISh2dENvbnRleHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcImB1c2VWaWV3VHJhbnNpdGlvblN0YXRlYCBtdXN0IGJlIHVzZWQgd2l0aGluIGByZWFjdC1yb3V0ZXItZG9tYCdzIGBSb3V0ZXJQcm92aWRlcmAuICBcIiArIFwiRGlkIHlvdSBhY2NpZGVudGFsbHkgaW1wb3J0IGBSb3V0ZXJQcm92aWRlcmAgZnJvbSBgcmVhY3Qtcm91dGVyYD9cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2sudXNlVmlld1RyYW5zaXRpb25TdGF0ZSk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IG9wdHMucmVsYXRpdmVcbiAgfSk7XG4gIGlmICghdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgY3VycmVudFBhdGggPSBzdHJpcEJhc2VuYW1lKHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCB2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dFBhdGggPSBzdHJpcEJhc2VuYW1lKHZ0Q29udGV4dC5uZXh0TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCB2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lO1xuICAvLyBUcmFuc2l0aW9uIGlzIGFjdGl2ZSBpZiB3ZSdyZSBnb2luZyB0byBvciBjb21pbmcgZnJvbSB0aGUgaW5kaWNhdGVkXG4gIC8vIGRlc3RpbmF0aW9uLiAgVGhpcyBlbnN1cmVzIHRoYXQgb3RoZXIgUFVTSCBuYXZpZ2F0aW9ucyB0aGF0IHJldmVyc2VcbiAgLy8gYW4gaW5kaWNhdGVkIHRyYW5zaXRpb24gYXBwbHkuICBJLmUuLCBvbiB0aGUgbGlzdCB2aWV3IHlvdSBoYXZlOlxuICAvL1xuICAvLyAgIDxOYXZMaW5rIHRvPVwiL2RldGFpbHMvMVwiIHZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBJZiB5b3UgY2xpY2sgdGhlIGJyZWFkY3J1bWIgYmFjayB0byB0aGUgbGlzdCB2aWV3OlxuICAvL1xuICAvLyAgIDxOYXZMaW5rIHRvPVwiL2xpc3RcIiB2aWV3VHJhbnNpdGlvbj5cbiAgLy9cbiAgLy8gV2Ugc2hvdWxkIGFwcGx5IHRoZSB0cmFuc2l0aW9uIGJlY2F1c2UgaXQncyBpbmRpY2F0ZWQgYXMgYWN0aXZlIGdvaW5nXG4gIC8vIGZyb20gL2xpc3QgLT4gL2RldGFpbHMvMSBhbmQgdGhlcmVmb3JlIHNob3VsZCBiZSBhY3RpdmUgb24gdGhlIHJldmVyc2VcbiAgLy8gKGV2ZW4gdGhvdWdoIHRoaXMgaXNuJ3Qgc3RyaWN0bHkgYSBQT1AgcmV2ZXJzZSlcbiAgcmV0dXJuIG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBuZXh0UGF0aCkgIT0gbnVsbCB8fCBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgY3VycmVudFBhdGgpICE9IG51bGw7XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgRm9ybSwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgUm91dGVyUHJvdmlkZXIsIFNjcm9sbFJlc3RvcmF0aW9uLCBGZXRjaGVyc0NvbnRleHQgYXMgVU5TQUZFX0ZldGNoZXJzQ29udGV4dCwgVmlld1RyYW5zaXRpb25Db250ZXh0IGFzIFVOU0FGRV9WaWV3VHJhbnNpdGlvbkNvbnRleHQsIHVzZVNjcm9sbFJlc3RvcmF0aW9uIGFzIFVOU0FGRV91c2VTY3JvbGxSZXN0b3JhdGlvbiwgY3JlYXRlQnJvd3NlclJvdXRlciwgY3JlYXRlSGFzaFJvdXRlciwgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZVByb21wdCBhcyB1bnN0YWJsZV91c2VQcm9tcHQsIHVzZUJlZm9yZVVubG9hZCwgdXNlRmV0Y2hlciwgdXNlRmV0Y2hlcnMsIHVzZUZvcm1BY3Rpb24sIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcywgdXNlU3VibWl0LCB1c2VWaWV3VHJhbnNpdGlvblN0YXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4vZXJyb3I0MDQubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9lcnJvcjQwNC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9IZWFkZXIubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9IZWFkZXIubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4vTW9kYWwubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9Nb2RhbC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9pbnB1dC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL2lucHV0Lm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IGNuIGZyb20gXCJjbGFzc25hbWVzXCI7XG5pbXBvcnQgKiBhcyBzdHlsZXMgZnJvbSBcIi4vaW5wdXQubW9kdWxlLmNzc1wiO1xuZXhwb3J0IGNvbnN0IElucHV0ID0gKF9hKSA9PiB7XG4gICAgdmFyIHsgY2xhc3NOYW1lcyB9ID0gX2EsIGlucHV0QXR0cmlidXRlcyA9IF9fcmVzdChfYSwgW1wiY2xhc3NOYW1lc1wiXSk7XG4gICAgcmV0dXJuIChfanN4KFwiaW5wdXRcIiwgT2JqZWN0LmFzc2lnbih7IGNsYXNzTmFtZTogY24oc3R5bGVzLmlucHV0LCBjbGFzc05hbWVzKSB9LCBpbnB1dEF0dHJpYnV0ZXMpKSk7XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9VaU1vZGFsLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4vVWlNb2RhbC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuZXhwb3J0IGNvbnN0IFBvcnRhbCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGVsZW1lbnQgPSBkb2N1bWVudC5ib2R5IH0gPSBwcm9wcztcbiAgICByZXR1cm4gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBlbGVtZW50KTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9VaU1vZGFsLm1vZHVsZS5jc3NcIjtcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gXCIuLi9Qb3J0YWwvUG9ydGFsXCI7XG5leHBvcnQgY29uc3QgTW9kYWwgPSAoeyBjaGlsZHJlbiwgb25DbG9zZSB9KSA9PiAoX2pzeChQb3J0YWwsIHsgY2hpbGRyZW46IF9qc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IHN0eWxlcy51aU1vZGFsT3ZlcmxheSwgY2hpbGRyZW46IF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBzdHlsZXMudWlNb2RhbENvbnRlbnQsIGNoaWxkcmVuOiBbX2pzeChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogc3R5bGVzLnVpTW9kYWxDbG9zZUJ1dHRvbiwgb25DbGljazogb25DbG9zZSwgY2hpbGRyZW46IFwiWFwiIH0pLCBjaGlsZHJlbl0gfSkgfSkgfSkpO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9yZWdpc3RyYXRpb25Gb3JtLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4vcmVnaXN0cmF0aW9uRm9ybS5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIGlzQ2hlY2tCb3hJbnB1dCA9IChlbGVtZW50KSA9PiBlbGVtZW50LnR5cGUgPT09ICdjaGVja2JveCc7XG5cbnZhciBpc0RhdGVPYmplY3QgPSAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgRGF0ZTtcblxudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gKHZhbHVlKSA9PiB2YWx1ZSA9PSBudWxsO1xuXG5jb25zdCBpc09iamVjdFR5cGUgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG52YXIgaXNPYmplY3QgPSAodmFsdWUpID0+ICFpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkgJiZcbiAgICAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiZcbiAgICBpc09iamVjdFR5cGUodmFsdWUpICYmXG4gICAgIWlzRGF0ZU9iamVjdCh2YWx1ZSk7XG5cbnZhciBnZXRFdmVudFZhbHVlID0gKGV2ZW50KSA9PiBpc09iamVjdChldmVudCkgJiYgZXZlbnQudGFyZ2V0XG4gICAgPyBpc0NoZWNrQm94SW5wdXQoZXZlbnQudGFyZ2V0KVxuICAgICAgICA/IGV2ZW50LnRhcmdldC5jaGVja2VkXG4gICAgICAgIDogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgOiBldmVudDtcblxudmFyIGdldE5vZGVQYXJlbnROYW1lID0gKG5hbWUpID0+IG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUuc2VhcmNoKC9cXC5cXGQrKFxcLnwkKS8pKSB8fCBuYW1lO1xuXG52YXIgaXNOYW1lSW5GaWVsZEFycmF5ID0gKG5hbWVzLCBuYW1lKSA9PiBuYW1lcy5oYXMoZ2V0Tm9kZVBhcmVudE5hbWUobmFtZSkpO1xuXG52YXIgaXNQbGFpbk9iamVjdCA9ICh0ZW1wT2JqZWN0KSA9PiB7XG4gICAgY29uc3QgcHJvdG90eXBlQ29weSA9IHRlbXBPYmplY3QuY29uc3RydWN0b3IgJiYgdGVtcE9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgcmV0dXJuIChpc09iamVjdChwcm90b3R5cGVDb3B5KSAmJiBwcm90b3R5cGVDb3B5Lmhhc093blByb3BlcnR5KCdpc1Byb3RvdHlwZU9mJykpO1xufTtcblxudmFyIGlzV2ViID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2Ygd2luZG93LkhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmZ1bmN0aW9uIGNsb25lT2JqZWN0KGRhdGEpIHtcbiAgICBsZXQgY29weTtcbiAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShkYXRhKTtcbiAgICBjb25zdCBpc0ZpbGVMaXN0SW5zdGFuY2UgPSB0eXBlb2YgRmlsZUxpc3QgIT09ICd1bmRlZmluZWQnID8gZGF0YSBpbnN0YW5jZW9mIEZpbGVMaXN0IDogZmFsc2U7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIGNvcHkgPSBuZXcgRGF0ZShkYXRhKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICBjb3B5ID0gbmV3IFNldChkYXRhKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIShpc1dlYiAmJiAoZGF0YSBpbnN0YW5jZW9mIEJsb2IgfHwgaXNGaWxlTGlzdEluc3RhbmNlKSkgJiZcbiAgICAgICAgKGlzQXJyYXkgfHwgaXNPYmplY3QoZGF0YSkpKSB7XG4gICAgICAgIGNvcHkgPSBpc0FycmF5ID8gW10gOiB7fTtcbiAgICAgICAgaWYgKCFpc0FycmF5ICYmICFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICBjb3B5ID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlba2V5XSA9IGNsb25lT2JqZWN0KGRhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciBjb21wYWN0ID0gKHZhbHVlKSA9PiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuXG52YXIgaXNVbmRlZmluZWQgPSAodmFsKSA9PiB2YWwgPT09IHVuZGVmaW5lZDtcblxudmFyIGdldCA9IChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICAgIGlmICghcGF0aCB8fCAhaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBjb21wYWN0KHBhdGguc3BsaXQoL1ssW1xcXS5dKz8vKSkucmVkdWNlKChyZXN1bHQsIGtleSkgPT4gaXNOdWxsT3JVbmRlZmluZWQocmVzdWx0KSA/IHJlc3VsdCA6IHJlc3VsdFtrZXldLCBvYmplY3QpO1xuICAgIHJldHVybiBpc1VuZGVmaW5lZChyZXN1bHQpIHx8IHJlc3VsdCA9PT0gb2JqZWN0XG4gICAgICAgID8gaXNVbmRlZmluZWQob2JqZWN0W3BhdGhdKVxuICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWVcbiAgICAgICAgICAgIDogb2JqZWN0W3BhdGhdXG4gICAgICAgIDogcmVzdWx0O1xufTtcblxudmFyIGlzQm9vbGVhbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG5cbnZhciBpc0tleSA9ICh2YWx1ZSkgPT4gL15cXHcqJC8udGVzdCh2YWx1ZSk7XG5cbnZhciBzdHJpbmdUb1BhdGggPSAoaW5wdXQpID0+IGNvbXBhY3QoaW5wdXQucmVwbGFjZSgvW1wifCddfFxcXS9nLCAnJykuc3BsaXQoL1xcLnxcXFsvKSk7XG5cbnZhciBzZXQgPSAob2JqZWN0LCBwYXRoLCB2YWx1ZSkgPT4ge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGNvbnN0IHRlbXBQYXRoID0gaXNLZXkocGF0aCkgPyBbcGF0aF0gOiBzdHJpbmdUb1BhdGgocGF0aCk7XG4gICAgY29uc3QgbGVuZ3RoID0gdGVtcFBhdGgubGVuZ3RoO1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGVtcFBhdGhbaW5kZXhdO1xuICAgICAgICBsZXQgbmV3VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICBuZXdWYWx1ZSA9XG4gICAgICAgICAgICAgICAgaXNPYmplY3Qob2JqVmFsdWUpIHx8IEFycmF5LmlzQXJyYXkob2JqVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiAhaXNOYU4oK3RlbXBQYXRoW2luZGV4ICsgMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJyB8fCBrZXkgPT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0W2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG5jb25zdCBFVkVOVFMgPSB7XG4gICAgQkxVUjogJ2JsdXInLFxuICAgIEZPQ1VTX09VVDogJ2ZvY3Vzb3V0JyxcbiAgICBDSEFOR0U6ICdjaGFuZ2UnLFxufTtcbmNvbnN0IFZBTElEQVRJT05fTU9ERSA9IHtcbiAgICBvbkJsdXI6ICdvbkJsdXInLFxuICAgIG9uQ2hhbmdlOiAnb25DaGFuZ2UnLFxuICAgIG9uU3VibWl0OiAnb25TdWJtaXQnLFxuICAgIG9uVG91Y2hlZDogJ29uVG91Y2hlZCcsXG4gICAgYWxsOiAnYWxsJyxcbn07XG5jb25zdCBJTlBVVF9WQUxJREFUSU9OX1JVTEVTID0ge1xuICAgIG1heDogJ21heCcsXG4gICAgbWluOiAnbWluJyxcbiAgICBtYXhMZW5ndGg6ICdtYXhMZW5ndGgnLFxuICAgIG1pbkxlbmd0aDogJ21pbkxlbmd0aCcsXG4gICAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICAgIHZhbGlkYXRlOiAndmFsaWRhdGUnLFxufTtcblxuY29uc3QgSG9va0Zvcm1Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogVGhpcyBjdXN0b20gaG9vayBhbGxvd3MgeW91IHRvIGFjY2VzcyB0aGUgZm9ybSBjb250ZXh0LiB1c2VGb3JtQ29udGV4dCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGRlZXBseSBuZXN0ZWQgc3RydWN0dXJlcywgd2hlcmUgaXQgd291bGQgYmVjb21lIGluY29udmVuaWVudCB0byBwYXNzIHRoZSBjb250ZXh0IGFzIGEgcHJvcC4gVG8gYmUgdXNlZCB3aXRoIHtAbGluayBGb3JtUHJvdmlkZXJ9LlxuICpcbiAqIEByZW1hcmtzXG4gKiBbQVBJXShodHRwczovL3JlYWN0LWhvb2stZm9ybS5jb20vZG9jcy91c2Vmb3JtY29udGV4dCkg4oCiIFtEZW1vXShodHRwczovL2NvZGVzYW5kYm94LmlvL3MvcmVhY3QtaG9vay1mb3JtLXY3LWZvcm0tY29udGV4dC15dHVkaSlcbiAqXG4gKiBAcmV0dXJucyByZXR1cm4gYWxsIHVzZUZvcm0gbWV0aG9kc1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgbWV0aG9kcyA9IHVzZUZvcm0oKTtcbiAqICAgY29uc3Qgb25TdWJtaXQgPSBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8Rm9ybVByb3ZpZGVyIHsuLi5tZXRob2RzfSA+XG4gKiAgICAgICA8Zm9ybSBvblN1Ym1pdD17bWV0aG9kcy5oYW5kbGVTdWJtaXQob25TdWJtaXQpfT5cbiAqICAgICAgICAgPE5lc3RlZElucHV0IC8+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgLz5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L0Zvcm1Qcm92aWRlcj5cbiAqICAgKTtcbiAqIH1cbiAqXG4gKiAgZnVuY3Rpb24gTmVzdGVkSW5wdXQoKSB7XG4gKiAgIGNvbnN0IHsgcmVnaXN0ZXIgfSA9IHVzZUZvcm1Db250ZXh0KCk7IC8vIHJldHJpZXZlIGFsbCBob29rIG1ldGhvZHNcbiAqICAgcmV0dXJuIDxpbnB1dCB7Li4ucmVnaXN0ZXIoXCJ0ZXN0XCIpfSAvPjtcbiAqIH1cbiAqIGBgYFxuICovXG5jb25zdCB1c2VGb3JtQ29udGV4dCA9ICgpID0+IFJlYWN0LnVzZUNvbnRleHQoSG9va0Zvcm1Db250ZXh0KTtcbi8qKlxuICogQSBwcm92aWRlciBjb21wb25lbnQgdGhhdCBwcm9wYWdhdGVzIHRoZSBgdXNlRm9ybWAgbWV0aG9kcyB0byBhbGwgY2hpbGRyZW4gY29tcG9uZW50cyB2aWEgW1JlYWN0IENvbnRleHRdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9jb250ZXh0Lmh0bWwpIEFQSS4gVG8gYmUgdXNlZCB3aXRoIHtAbGluayB1c2VGb3JtQ29udGV4dH0uXG4gKlxuICogQHJlbWFya3NcbiAqIFtBUEldKGh0dHBzOi8vcmVhY3QtaG9vay1mb3JtLmNvbS9kb2NzL3VzZWZvcm1jb250ZXh0KSDigKIgW0RlbW9dKGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9yZWFjdC1ob29rLWZvcm0tdjctZm9ybS1jb250ZXh0LXl0dWRpKVxuICpcbiAqIEBwYXJhbSBwcm9wcyAtIGFsbCB1c2VGb3JtIG1ldGhvZHNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IG1ldGhvZHMgPSB1c2VGb3JtKCk7XG4gKiAgIGNvbnN0IG9uU3VibWl0ID0gZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEZvcm1Qcm92aWRlciB7Li4ubWV0aG9kc30gPlxuICogICAgICAgPGZvcm0gb25TdWJtaXQ9e21ldGhvZHMuaGFuZGxlU3VibWl0KG9uU3VibWl0KX0+XG4gKiAgICAgICAgIDxOZXN0ZWRJbnB1dCAvPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIC8+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgPC9Gb3JtUHJvdmlkZXI+XG4gKiAgICk7XG4gKiB9XG4gKlxuICogIGZ1bmN0aW9uIE5lc3RlZElucHV0KCkge1xuICogICBjb25zdCB7IHJlZ2lzdGVyIH0gPSB1c2VGb3JtQ29udGV4dCgpOyAvLyByZXRyaWV2ZSBhbGwgaG9vayBtZXRob2RzXG4gKiAgIHJldHVybiA8aW5wdXQgey4uLnJlZ2lzdGVyKFwidGVzdFwiKX0gLz47XG4gKiB9XG4gKiBgYGBcbiAqL1xuY29uc3QgRm9ybVByb3ZpZGVyID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgLi4uZGF0YSB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEhvb2tGb3JtQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogZGF0YSB9LCBjaGlsZHJlbikpO1xufTtcblxudmFyIGdldFByb3h5Rm9ybVN0YXRlID0gKGZvcm1TdGF0ZSwgY29udHJvbCwgbG9jYWxQcm94eUZvcm1TdGF0ZSwgaXNSb290ID0gdHJ1ZSkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgZGVmYXVsdFZhbHVlczogY29udHJvbC5fZGVmYXVsdFZhbHVlcyxcbiAgICB9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZvcm1TdGF0ZSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBrZXksIHtcbiAgICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9rZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wuX3Byb3h5Rm9ybVN0YXRlW19rZXldICE9PSBWQUxJREFUSU9OX01PREUuYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuX3Byb3h5Rm9ybVN0YXRlW19rZXldID0gIWlzUm9vdCB8fCBWQUxJREFUSU9OX01PREUuYWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbFByb3h5Rm9ybVN0YXRlICYmIChsb2NhbFByb3h5Rm9ybVN0YXRlW19rZXldID0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1TdGF0ZVtfa2V5XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIGlzRW1wdHlPYmplY3QgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSAmJiAhT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aDtcblxudmFyIHNob3VsZFJlbmRlckZvcm1TdGF0ZSA9IChmb3JtU3RhdGVEYXRhLCBfcHJveHlGb3JtU3RhdGUsIHVwZGF0ZUZvcm1TdGF0ZSwgaXNSb290KSA9PiB7XG4gICAgdXBkYXRlRm9ybVN0YXRlKGZvcm1TdGF0ZURhdGEpO1xuICAgIGNvbnN0IHsgbmFtZSwgLi4uZm9ybVN0YXRlIH0gPSBmb3JtU3RhdGVEYXRhO1xuICAgIHJldHVybiAoaXNFbXB0eU9iamVjdChmb3JtU3RhdGUpIHx8XG4gICAgICAgIE9iamVjdC5rZXlzKGZvcm1TdGF0ZSkubGVuZ3RoID49IE9iamVjdC5rZXlzKF9wcm94eUZvcm1TdGF0ZSkubGVuZ3RoIHx8XG4gICAgICAgIE9iamVjdC5rZXlzKGZvcm1TdGF0ZSkuZmluZCgoa2V5KSA9PiBfcHJveHlGb3JtU3RhdGVba2V5XSA9PT1cbiAgICAgICAgICAgICghaXNSb290IHx8IFZBTElEQVRJT05fTU9ERS5hbGwpKSk7XG59O1xuXG52YXIgY29udmVydFRvQXJyYXlQYXlsb2FkID0gKHZhbHVlKSA9PiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV0pO1xuXG52YXIgc2hvdWxkU3Vic2NyaWJlQnlOYW1lID0gKG5hbWUsIHNpZ25hbE5hbWUsIGV4YWN0KSA9PiAhbmFtZSB8fFxuICAgICFzaWduYWxOYW1lIHx8XG4gICAgbmFtZSA9PT0gc2lnbmFsTmFtZSB8fFxuICAgIGNvbnZlcnRUb0FycmF5UGF5bG9hZChuYW1lKS5zb21lKChjdXJyZW50TmFtZSkgPT4gY3VycmVudE5hbWUgJiZcbiAgICAgICAgKGV4YWN0XG4gICAgICAgICAgICA/IGN1cnJlbnROYW1lID09PSBzaWduYWxOYW1lXG4gICAgICAgICAgICA6IGN1cnJlbnROYW1lLnN0YXJ0c1dpdGgoc2lnbmFsTmFtZSkgfHxcbiAgICAgICAgICAgICAgICBzaWduYWxOYW1lLnN0YXJ0c1dpdGgoY3VycmVudE5hbWUpKSk7XG5cbmZ1bmN0aW9uIHVzZVN1YnNjcmliZShwcm9wcykge1xuICAgIGNvbnN0IF9wcm9wcyA9IFJlYWN0LnVzZVJlZihwcm9wcyk7XG4gICAgX3Byb3BzLmN1cnJlbnQgPSBwcm9wcztcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSAhcHJvcHMuZGlzYWJsZWQgJiZcbiAgICAgICAgICAgIF9wcm9wcy5jdXJyZW50LnN1YmplY3QgJiZcbiAgICAgICAgICAgIF9wcm9wcy5jdXJyZW50LnN1YmplY3Quc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBfcHJvcHMuY3VycmVudC5uZXh0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gJiYgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH07XG4gICAgfSwgW3Byb3BzLmRpc2FibGVkXSk7XG59XG5cbi8qKlxuICogVGhpcyBjdXN0b20gaG9vayBhbGxvd3MgeW91IHRvIHN1YnNjcmliZSB0byBlYWNoIGZvcm0gc3RhdGUsIGFuZCBpc29sYXRlIHRoZSByZS1yZW5kZXIgYXQgdGhlIGN1c3RvbSBob29rIGxldmVsLiBJdCBoYXMgaXRzIHNjb3BlIGluIHRlcm1zIG9mIGZvcm0gc3RhdGUgc3Vic2NyaXB0aW9uLCBzbyBpdCB3b3VsZCBub3QgYWZmZWN0IG90aGVyIHVzZUZvcm1TdGF0ZSBhbmQgdXNlRm9ybS4gVXNpbmcgdGhpcyBob29rIGNhbiByZWR1Y2UgdGhlIHJlLXJlbmRlciBpbXBhY3Qgb24gbGFyZ2UgYW5kIGNvbXBsZXggZm9ybSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogW0FQSV0oaHR0cHM6Ly9yZWFjdC1ob29rLWZvcm0uY29tL2RvY3MvdXNlZm9ybXN0YXRlKSDigKIgW0RlbW9dKGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy91c2Vmb3Jtc3RhdGUtNzV4bHkpXG4gKlxuICogQHBhcmFtIHByb3BzIC0gaW5jbHVkZSBvcHRpb25zIG9uIHNwZWNpZnkgZmllbGRzIHRvIHN1YnNjcmliZS4ge0BsaW5rIFVzZUZvcm1TdGF0ZVJldHVybn1cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IHsgcmVnaXN0ZXIsIGhhbmRsZVN1Ym1pdCwgY29udHJvbCB9ID0gdXNlRm9ybSh7XG4gKiAgICAgZGVmYXVsdFZhbHVlczoge1xuICogICAgIGZpcnN0TmFtZTogXCJmaXJzdE5hbWVcIlxuICogICB9fSk7XG4gKiAgIGNvbnN0IHsgZGlydHlGaWVsZHMgfSA9IHVzZUZvcm1TdGF0ZSh7XG4gKiAgICAgY29udHJvbFxuICogICB9KTtcbiAqICAgY29uc3Qgb25TdWJtaXQgPSAoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXQob25TdWJtaXQpfT5cbiAqICAgICAgIDxpbnB1dCB7Li4ucmVnaXN0ZXIoXCJmaXJzdE5hbWVcIil9IHBsYWNlaG9sZGVyPVwiRmlyc3QgTmFtZVwiIC8+XG4gKiAgICAgICB7ZGlydHlGaWVsZHMuZmlyc3ROYW1lICYmIDxwPkZpZWxkIGlzIGRpcnR5LjwvcD59XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIC8+XG4gKiAgICAgPC9mb3JtPlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHVzZUZvcm1TdGF0ZShwcm9wcykge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB1c2VGb3JtQ29udGV4dCgpO1xuICAgIGNvbnN0IHsgY29udHJvbCA9IG1ldGhvZHMuY29udHJvbCwgZGlzYWJsZWQsIG5hbWUsIGV4YWN0IH0gPSBwcm9wcyB8fCB7fTtcbiAgICBjb25zdCBbZm9ybVN0YXRlLCB1cGRhdGVGb3JtU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoY29udHJvbC5fZm9ybVN0YXRlKTtcbiAgICBjb25zdCBfbW91bnRlZCA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgICBjb25zdCBfbG9jYWxQcm94eUZvcm1TdGF0ZSA9IFJlYWN0LnVzZVJlZih7XG4gICAgICAgIGlzRGlydHk6IGZhbHNlLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBkaXJ0eUZpZWxkczogZmFsc2UsXG4gICAgICAgIHRvdWNoZWRGaWVsZHM6IGZhbHNlLFxuICAgICAgICB2YWxpZGF0aW5nRmllbGRzOiBmYWxzZSxcbiAgICAgICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgIGVycm9yczogZmFsc2UsXG4gICAgfSk7XG4gICAgY29uc3QgX25hbWUgPSBSZWFjdC51c2VSZWYobmFtZSk7XG4gICAgX25hbWUuY3VycmVudCA9IG5hbWU7XG4gICAgdXNlU3Vic2NyaWJlKHtcbiAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgIG5leHQ6ICh2YWx1ZSkgPT4gX21vdW50ZWQuY3VycmVudCAmJlxuICAgICAgICAgICAgc2hvdWxkU3Vic2NyaWJlQnlOYW1lKF9uYW1lLmN1cnJlbnQsIHZhbHVlLm5hbWUsIGV4YWN0KSAmJlxuICAgICAgICAgICAgc2hvdWxkUmVuZGVyRm9ybVN0YXRlKHZhbHVlLCBfbG9jYWxQcm94eUZvcm1TdGF0ZS5jdXJyZW50LCBjb250cm9sLl91cGRhdGVGb3JtU3RhdGUpICYmXG4gICAgICAgICAgICB1cGRhdGVGb3JtU3RhdGUoe1xuICAgICAgICAgICAgICAgIC4uLmNvbnRyb2wuX2Zvcm1TdGF0ZSxcbiAgICAgICAgICAgICAgICAuLi52YWx1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBzdWJqZWN0OiBjb250cm9sLl9zdWJqZWN0cy5zdGF0ZSxcbiAgICB9KTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBfbW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgX2xvY2FsUHJveHlGb3JtU3RhdGUuY3VycmVudC5pc1ZhbGlkICYmIGNvbnRyb2wuX3VwZGF0ZVZhbGlkKHRydWUpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgX21vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgIH0sIFtjb250cm9sXSk7XG4gICAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gZ2V0UHJveHlGb3JtU3RhdGUoZm9ybVN0YXRlLCBjb250cm9sLCBfbG9jYWxQcm94eUZvcm1TdGF0ZS5jdXJyZW50LCBmYWxzZSksIFtmb3JtU3RhdGUsIGNvbnRyb2xdKTtcbn1cblxudmFyIGlzU3RyaW5nID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuXG52YXIgZ2VuZXJhdGVXYXRjaE91dHB1dCA9IChuYW1lcywgX25hbWVzLCBmb3JtVmFsdWVzLCBpc0dsb2JhbCwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gICAgaWYgKGlzU3RyaW5nKG5hbWVzKSkge1xuICAgICAgICBpc0dsb2JhbCAmJiBfbmFtZXMud2F0Y2guYWRkKG5hbWVzKTtcbiAgICAgICAgcmV0dXJuIGdldChmb3JtVmFsdWVzLCBuYW1lcywgZGVmYXVsdFZhbHVlKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZXMpKSB7XG4gICAgICAgIHJldHVybiBuYW1lcy5tYXAoKGZpZWxkTmFtZSkgPT4gKGlzR2xvYmFsICYmIF9uYW1lcy53YXRjaC5hZGQoZmllbGROYW1lKSwgZ2V0KGZvcm1WYWx1ZXMsIGZpZWxkTmFtZSkpKTtcbiAgICB9XG4gICAgaXNHbG9iYWwgJiYgKF9uYW1lcy53YXRjaEFsbCA9IHRydWUpO1xuICAgIHJldHVybiBmb3JtVmFsdWVzO1xufTtcblxuLyoqXG4gKiBDdXN0b20gaG9vayB0byBzdWJzY3JpYmUgdG8gZmllbGQgY2hhbmdlIGFuZCBpc29sYXRlIHJlLXJlbmRlcmluZyBhdCB0aGUgY29tcG9uZW50IGxldmVsLlxuICpcbiAqIEByZW1hcmtzXG4gKlxuICogW0FQSV0oaHR0cHM6Ly9yZWFjdC1ob29rLWZvcm0uY29tL2RvY3MvdXNld2F0Y2gpIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS12Ny10cy11c2V3YXRjaC1oOWk1ZSlcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBjb25zdCB7IGNvbnRyb2wgfSA9IHVzZUZvcm0oKTtcbiAqIGNvbnN0IHZhbHVlcyA9IHVzZVdhdGNoKHtcbiAqICAgbmFtZTogXCJmaWVsZE5hbWVcIlxuICogICBjb250cm9sLFxuICogfSlcbiAqIGBgYFxuICovXG5mdW5jdGlvbiB1c2VXYXRjaChwcm9wcykge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB1c2VGb3JtQ29udGV4dCgpO1xuICAgIGNvbnN0IHsgY29udHJvbCA9IG1ldGhvZHMuY29udHJvbCwgbmFtZSwgZGVmYXVsdFZhbHVlLCBkaXNhYmxlZCwgZXhhY3QsIH0gPSBwcm9wcyB8fCB7fTtcbiAgICBjb25zdCBfbmFtZSA9IFJlYWN0LnVzZVJlZihuYW1lKTtcbiAgICBfbmFtZS5jdXJyZW50ID0gbmFtZTtcbiAgICB1c2VTdWJzY3JpYmUoe1xuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgc3ViamVjdDogY29udHJvbC5fc3ViamVjdHMudmFsdWVzLFxuICAgICAgICBuZXh0OiAoZm9ybVN0YXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkU3Vic2NyaWJlQnlOYW1lKF9uYW1lLmN1cnJlbnQsIGZvcm1TdGF0ZS5uYW1lLCBleGFjdCkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZShjbG9uZU9iamVjdChnZW5lcmF0ZVdhdGNoT3V0cHV0KF9uYW1lLmN1cnJlbnQsIGNvbnRyb2wuX25hbWVzLCBmb3JtU3RhdGUudmFsdWVzIHx8IGNvbnRyb2wuX2Zvcm1WYWx1ZXMsIGZhbHNlLCBkZWZhdWx0VmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgW3ZhbHVlLCB1cGRhdGVWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShjb250cm9sLl9nZXRXYXRjaChuYW1lLCBkZWZhdWx0VmFsdWUpKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gY29udHJvbC5fcmVtb3ZlVW5tb3VudGVkKCkpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBDdXN0b20gaG9vayB0byB3b3JrIHdpdGggY29udHJvbGxlZCBjb21wb25lbnQsIHRoaXMgZnVuY3Rpb24gcHJvdmlkZSB5b3Ugd2l0aCBib3RoIGZvcm0gYW5kIGZpZWxkIGxldmVsIHN0YXRlLiBSZS1yZW5kZXIgaXMgaXNvbGF0ZWQgYXQgdGhlIGhvb2sgbGV2ZWwuXG4gKlxuICogQHJlbWFya3NcbiAqIFtBUEldKGh0dHBzOi8vcmVhY3QtaG9vay1mb3JtLmNvbS9kb2NzL3VzZWNvbnRyb2xsZXIpIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3VzZWNvbnRyb2xsZXItMG84cHgpXG4gKlxuICogQHBhcmFtIHByb3BzIC0gdGhlIHBhdGggbmFtZSB0byB0aGUgZm9ybSBmaWVsZCB2YWx1ZSwgYW5kIHZhbGlkYXRpb24gcnVsZXMuXG4gKlxuICogQHJldHVybnMgZmllbGQgcHJvcGVydGllcywgZmllbGQgYW5kIGZvcm0gc3RhdGUuIHtAbGluayBVc2VDb250cm9sbGVyUmV0dXJufVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGZ1bmN0aW9uIElucHV0KHByb3BzKSB7XG4gKiAgIGNvbnN0IHsgZmllbGQsIGZpZWxkU3RhdGUsIGZvcm1TdGF0ZSB9ID0gdXNlQ29udHJvbGxlcihwcm9wcyk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxpbnB1dCB7Li4uZmllbGR9IHBsYWNlaG9sZGVyPXtwcm9wcy5uYW1lfSAvPlxuICogICAgICAgPHA+e2ZpZWxkU3RhdGUuaXNUb3VjaGVkICYmIFwiVG91Y2hlZFwifTwvcD5cbiAqICAgICAgIDxwPntmb3JtU3RhdGUuaXNTdWJtaXR0ZWQgPyBcInN1Ym1pdHRlZFwiIDogXCJcIn08L3A+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gdXNlQ29udHJvbGxlcihwcm9wcykge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB1c2VGb3JtQ29udGV4dCgpO1xuICAgIGNvbnN0IHsgbmFtZSwgZGlzYWJsZWQsIGNvbnRyb2wgPSBtZXRob2RzLmNvbnRyb2wsIHNob3VsZFVucmVnaXN0ZXIgfSA9IHByb3BzO1xuICAgIGNvbnN0IGlzQXJyYXlGaWVsZCA9IGlzTmFtZUluRmllbGRBcnJheShjb250cm9sLl9uYW1lcy5hcnJheSwgbmFtZSk7XG4gICAgY29uc3QgdmFsdWUgPSB1c2VXYXRjaCh7XG4gICAgICAgIGNvbnRyb2wsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0KGNvbnRyb2wuX2Zvcm1WYWx1ZXMsIG5hbWUsIGdldChjb250cm9sLl9kZWZhdWx0VmFsdWVzLCBuYW1lLCBwcm9wcy5kZWZhdWx0VmFsdWUpKSxcbiAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgfSk7XG4gICAgY29uc3QgZm9ybVN0YXRlID0gdXNlRm9ybVN0YXRlKHtcbiAgICAgICAgY29udHJvbCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgfSk7XG4gICAgY29uc3QgX3JlZ2lzdGVyUHJvcHMgPSBSZWFjdC51c2VSZWYoY29udHJvbC5yZWdpc3RlcihuYW1lLCB7XG4gICAgICAgIC4uLnByb3BzLnJ1bGVzLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgLi4uKGlzQm9vbGVhbihwcm9wcy5kaXNhYmxlZCkgPyB7IGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCB9IDoge30pLFxuICAgIH0pKTtcbiAgICBjb25zdCBmaWVsZFN0YXRlID0gUmVhY3QudXNlTWVtbygoKSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh7fSwge1xuICAgICAgICBpbnZhbGlkOiB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiAoKSA9PiAhIWdldChmb3JtU3RhdGUuZXJyb3JzLCBuYW1lKSxcbiAgICAgICAgfSxcbiAgICAgICAgaXNEaXJ0eToge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogKCkgPT4gISFnZXQoZm9ybVN0YXRlLmRpcnR5RmllbGRzLCBuYW1lKSxcbiAgICAgICAgfSxcbiAgICAgICAgaXNUb3VjaGVkOiB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiAoKSA9PiAhIWdldChmb3JtU3RhdGUudG91Y2hlZEZpZWxkcywgbmFtZSksXG4gICAgICAgIH0sXG4gICAgICAgIGlzVmFsaWRhdGluZzoge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogKCkgPT4gISFnZXQoZm9ybVN0YXRlLnZhbGlkYXRpbmdGaWVsZHMsIG5hbWUpLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogKCkgPT4gZ2V0KGZvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpLFxuICAgICAgICB9LFxuICAgIH0pLCBbZm9ybVN0YXRlLCBuYW1lXSk7XG4gICAgY29uc3QgZmllbGQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICAuLi4oaXNCb29sZWFuKGRpc2FibGVkKSB8fCBmb3JtU3RhdGUuZGlzYWJsZWRcbiAgICAgICAgICAgID8geyBkaXNhYmxlZDogZm9ybVN0YXRlLmRpc2FibGVkIHx8IGRpc2FibGVkIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICBvbkNoYW5nZTogKGV2ZW50KSA9PiBfcmVnaXN0ZXJQcm9wcy5jdXJyZW50Lm9uQ2hhbmdlKHtcbiAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnZXRFdmVudFZhbHVlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IEVWRU5UUy5DSEFOR0UsXG4gICAgICAgIH0pLFxuICAgICAgICBvbkJsdXI6ICgpID0+IF9yZWdpc3RlclByb3BzLmN1cnJlbnQub25CbHVyKHtcbiAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnZXQoY29udHJvbC5fZm9ybVZhbHVlcywgbmFtZSksXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiBFVkVOVFMuQkxVUixcbiAgICAgICAgfSksXG4gICAgICAgIHJlZjogKGVsbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoY29udHJvbC5fZmllbGRzLCBuYW1lKTtcbiAgICAgICAgICAgIGlmIChmaWVsZCAmJiBlbG0pIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5fZi5yZWYgPSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzOiAoKSA9PiBlbG0uZm9jdXMoKSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiAoKSA9PiBlbG0uc2VsZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIHNldEN1c3RvbVZhbGlkaXR5OiAobWVzc2FnZSkgPT4gZWxtLnNldEN1c3RvbVZhbGlkaXR5KG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgICAgICByZXBvcnRWYWxpZGl0eTogKCkgPT4gZWxtLnJlcG9ydFZhbGlkaXR5KCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KSwgW1xuICAgICAgICBuYW1lLFxuICAgICAgICBjb250cm9sLl9mb3JtVmFsdWVzLFxuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgZm9ybVN0YXRlLmRpc2FibGVkLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgY29udHJvbC5fZmllbGRzLFxuICAgIF0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IF9zaG91bGRVbnJlZ2lzdGVyRmllbGQgPSBjb250cm9sLl9vcHRpb25zLnNob3VsZFVucmVnaXN0ZXIgfHwgc2hvdWxkVW5yZWdpc3RlcjtcbiAgICAgICAgY29uc3QgdXBkYXRlTW91bnRlZCA9IChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoY29udHJvbC5fZmllbGRzLCBuYW1lKTtcbiAgICAgICAgICAgIGlmIChmaWVsZCAmJiBmaWVsZC5fZikge1xuICAgICAgICAgICAgICAgIGZpZWxkLl9mLm1vdW50ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZU1vdW50ZWQobmFtZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChfc2hvdWxkVW5yZWdpc3RlckZpZWxkKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNsb25lT2JqZWN0KGdldChjb250cm9sLl9vcHRpb25zLmRlZmF1bHRWYWx1ZXMsIG5hbWUpKTtcbiAgICAgICAgICAgIHNldChjb250cm9sLl9kZWZhdWx0VmFsdWVzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoZ2V0KGNvbnRyb2wuX2Zvcm1WYWx1ZXMsIG5hbWUpKSkge1xuICAgICAgICAgICAgICAgIHNldChjb250cm9sLl9mb3JtVmFsdWVzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIChpc0FycmF5RmllbGRcbiAgICAgICAgICAgICAgICA/IF9zaG91bGRVbnJlZ2lzdGVyRmllbGQgJiYgIWNvbnRyb2wuX3N0YXRlLmFjdGlvblxuICAgICAgICAgICAgICAgIDogX3Nob3VsZFVucmVnaXN0ZXJGaWVsZClcbiAgICAgICAgICAgICAgICA/IGNvbnRyb2wudW5yZWdpc3RlcihuYW1lKVxuICAgICAgICAgICAgICAgIDogdXBkYXRlTW91bnRlZChuYW1lLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgfSwgW25hbWUsIGNvbnRyb2wsIGlzQXJyYXlGaWVsZCwgc2hvdWxkVW5yZWdpc3Rlcl0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChpc0Jvb2xlYW4oZGlzYWJsZWQpICYmIGdldChjb250cm9sLl9maWVsZHMsIG5hbWUpKSB7XG4gICAgICAgICAgICBjb250cm9sLl91cGRhdGVEaXNhYmxlZEZpZWxkKHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IGNvbnRyb2wuX2ZpZWxkcyxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBnZXQoY29udHJvbC5fZmllbGRzLCBuYW1lKS5fZi52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwgW2Rpc2FibGVkLCBuYW1lLCBjb250cm9sXSk7XG4gICAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICAgICAgZmllbGQsXG4gICAgICAgIGZvcm1TdGF0ZSxcbiAgICAgICAgZmllbGRTdGF0ZSxcbiAgICB9KSwgW2ZpZWxkLCBmb3JtU3RhdGUsIGZpZWxkU3RhdGVdKTtcbn1cblxuLyoqXG4gKiBDb21wb25lbnQgYmFzZWQgb24gYHVzZUNvbnRyb2xsZXJgIGhvb2sgdG8gd29yayB3aXRoIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICpcbiAqIEByZW1hcmtzXG4gKiBbQVBJXShodHRwczovL3JlYWN0LWhvb2stZm9ybS5jb20vZG9jcy91c2Vjb250cm9sbGVyL2NvbnRyb2xsZXIpIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS12Ni1jb250cm9sbGVyLXRzLWp3eXp3KSDigKIgW1ZpZGVvXShodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU4yVU5rX1VDVnlBKVxuICpcbiAqIEBwYXJhbSBwcm9wcyAtIHRoZSBwYXRoIG5hbWUgdG8gdGhlIGZvcm0gZmllbGQgdmFsdWUsIGFuZCB2YWxpZGF0aW9uIHJ1bGVzLlxuICpcbiAqIEByZXR1cm5zIHByb3ZpZGUgZmllbGQgaGFuZGxlciBmdW5jdGlvbnMsIGZpZWxkIGFuZCBmb3JtIHN0YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgeyBjb250cm9sIH0gPSB1c2VGb3JtPEZvcm1WYWx1ZXM+KHtcbiAqICAgICBkZWZhdWx0VmFsdWVzOiB7XG4gKiAgICAgICB0ZXN0OiBcIlwiXG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGZvcm0+XG4gKiAgICAgICA8Q29udHJvbGxlclxuICogICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICogICAgICAgICBuYW1lPVwidGVzdFwiXG4gKiAgICAgICAgIHJlbmRlcj17KHsgZmllbGQ6IHsgb25DaGFuZ2UsIG9uQmx1ciwgdmFsdWUsIHJlZiB9LCBmb3JtU3RhdGUsIGZpZWxkU3RhdGUgfSkgPT4gKFxuICogICAgICAgICAgIDw+XG4gKiAgICAgICAgICAgICA8aW5wdXRcbiAqICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfSAvLyBzZW5kIHZhbHVlIHRvIGhvb2sgZm9ybVxuICogICAgICAgICAgICAgICBvbkJsdXI9e29uQmx1cn0gLy8gbm90aWZ5IHdoZW4gaW5wdXQgaXMgdG91Y2hlZFxuICogICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9IC8vIHJldHVybiB1cGRhdGVkIHZhbHVlXG4gKiAgICAgICAgICAgICAgIHJlZj17cmVmfSAvLyBzZXQgcmVmIGZvciBmb2N1cyBtYW5hZ2VtZW50XG4gKiAgICAgICAgICAgICAvPlxuICogICAgICAgICAgICAgPHA+e2Zvcm1TdGF0ZS5pc1N1Ym1pdHRlZCA/IFwic3VibWl0dGVkXCIgOiBcIlwifTwvcD5cbiAqICAgICAgICAgICAgIDxwPntmaWVsZFN0YXRlLmlzVG91Y2hlZCA/IFwidG91Y2hlZFwiIDogXCJcIn08L3A+XG4gKiAgICAgICAgICAgPC8+XG4gKiAgICAgICAgICl9XG4gKiAgICAgICAvPlxuICogICAgIDwvZm9ybT5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5jb25zdCBDb250cm9sbGVyID0gKHByb3BzKSA9PiBwcm9wcy5yZW5kZXIodXNlQ29udHJvbGxlcihwcm9wcykpO1xuXG5jb25zdCBmbGF0dGVuID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0VHlwZShvYmpba2V5XSkgJiYgb2JqW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG5lc3RlZCA9IGZsYXR0ZW4ob2JqW2tleV0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBuZXN0ZWRLZXkgb2YgT2JqZWN0LmtleXMobmVzdGVkKSkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtgJHtrZXl9LiR7bmVzdGVkS2V5fWBdID0gbmVzdGVkW25lc3RlZEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvdXRwdXRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuXG5jb25zdCBQT1NUX1JFUVVFU1QgPSAncG9zdCc7XG4vKipcbiAqIEZvcm0gY29tcG9uZW50IHRvIG1hbmFnZSBzdWJtaXNzaW9uLlxuICpcbiAqIEBwYXJhbSBwcm9wcyAtIHRvIHNldHVwIHN1Ym1pc3Npb24gZGV0YWlsLiB7QGxpbmsgRm9ybVByb3BzfVxuICpcbiAqIEByZXR1cm5zIGZvcm0gY29tcG9uZW50IG9yIGhlYWRsZXNzIHJlbmRlciBwcm9wLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgeyBjb250cm9sLCBmb3JtU3RhdGU6IHsgZXJyb3JzIH0gfSA9IHVzZUZvcm0oKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEZvcm0gYWN0aW9uPVwiL2FwaVwiIGNvbnRyb2w9e2NvbnRyb2x9PlxuICogICAgICAgPGlucHV0IHsuLi5yZWdpc3RlcihcIm5hbWVcIil9IC8+XG4gKiAgICAgICA8cD57ZXJyb3JzPy5yb290Py5zZXJ2ZXIgJiYgJ1NlcnZlciBlcnJvcid9PC9wPlxuICogICAgICAgPGJ1dHRvbj5TdWJtaXQ8L2J1dHRvbj5cbiAqICAgICA8L0Zvcm0+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gRm9ybShwcm9wcykge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB1c2VGb3JtQ29udGV4dCgpO1xuICAgIGNvbnN0IFttb3VudGVkLCBzZXRNb3VudGVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCB7IGNvbnRyb2wgPSBtZXRob2RzLmNvbnRyb2wsIG9uU3VibWl0LCBjaGlsZHJlbiwgYWN0aW9uLCBtZXRob2QgPSBQT1NUX1JFUVVFU1QsIGhlYWRlcnMsIGVuY1R5cGUsIG9uRXJyb3IsIHJlbmRlciwgb25TdWNjZXNzLCB2YWxpZGF0ZVN0YXR1cywgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgY29uc3Qgc3VibWl0ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICBsZXQgdHlwZSA9ICcnO1xuICAgICAgICBhd2FpdCBjb250cm9sLmhhbmRsZVN1Ym1pdChhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgIGxldCBmb3JtRGF0YUpzb24gPSAnJztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9ybURhdGFKc29uID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgY29uc3QgZmxhdHRlbkZvcm1WYWx1ZXMgPSBmbGF0dGVuKGNvbnRyb2wuX2Zvcm1WYWx1ZXMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZmxhdHRlbkZvcm1WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBmbGF0dGVuRm9ybVZhbHVlc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvblN1Ym1pdCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG9uU3VibWl0KHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhSnNvbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRTdHJpbmdpZnlTdWJtaXNzaW9uRGF0YSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgJiYgaGVhZGVyc1snQ29udGVudC1UeXBlJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNUeXBlLFxuICAgICAgICAgICAgICAgICAgICBdLnNvbWUoKHZhbHVlKSA9PiB2YWx1ZSAmJiB2YWx1ZS5pbmNsdWRlcygnanNvbicpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihlbmNUeXBlID8geyAnQ29udGVudC1UeXBlJzogZW5jVHlwZSB9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHNob3VsZFN0cmluZ2lmeVN1Ym1pc3Npb25EYXRhID8gZm9ybURhdGFKc29uIDogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWxpZGF0ZVN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIXZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJlc3BvbnNlLnN0YXR1cyA8IDIwMCB8fCByZXNwb25zZS5zdGF0dXMgPj0gMzAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvciAmJiBvbkVycm9yKHsgcmVzcG9uc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gU3RyaW5nKHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MgJiYgb25TdWNjZXNzKHsgcmVzcG9uc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvciAmJiBvbkVycm9yKHsgZXJyb3IgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KShldmVudCk7XG4gICAgICAgIGlmIChoYXNFcnJvciAmJiBwcm9wcy5jb250cm9sKSB7XG4gICAgICAgICAgICBwcm9wcy5jb250cm9sLl9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICBpc1N1Ym1pdFN1Y2Nlc3NmdWw6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm9wcy5jb250cm9sLnNldEVycm9yKCdyb290LnNlcnZlcicsIHtcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE1vdW50ZWQodHJ1ZSk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiByZW5kZXIgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgcmVuZGVyKHtcbiAgICAgICAgc3VibWl0LFxuICAgIH0pKSkgOiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgeyBub1ZhbGlkYXRlOiBtb3VudGVkLCBhY3Rpb246IGFjdGlvbiwgbWV0aG9kOiBtZXRob2QsIGVuY1R5cGU6IGVuY1R5cGUsIG9uU3VibWl0OiBzdWJtaXQsIC4uLnJlc3QgfSwgY2hpbGRyZW4pKTtcbn1cblxudmFyIGFwcGVuZEVycm9ycyA9IChuYW1lLCB2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEsIGVycm9ycywgdHlwZSwgbWVzc2FnZSkgPT4gdmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhXG4gICAgPyB7XG4gICAgICAgIC4uLmVycm9yc1tuYW1lXSxcbiAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgIC4uLihlcnJvcnNbbmFtZV0gJiYgZXJyb3JzW25hbWVdLnR5cGVzID8gZXJyb3JzW25hbWVdLnR5cGVzIDoge30pLFxuICAgICAgICAgICAgW3R5cGVdOiBtZXNzYWdlIHx8IHRydWUsXG4gICAgICAgIH0sXG4gICAgfVxuICAgIDoge307XG5cbnZhciBnZW5lcmF0ZUlkID0gKCkgPT4ge1xuICAgIGNvbnN0IGQgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gRGF0ZS5ub3coKSA6IHBlcmZvcm1hbmNlLm5vdygpICogMTAwMDtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCAoYykgPT4ge1xuICAgICAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNiArIGQpICUgMTYgfCAwO1xuICAgICAgICByZXR1cm4gKGMgPT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufTtcblxudmFyIGdldEZvY3VzRmllbGROYW1lID0gKG5hbWUsIGluZGV4LCBvcHRpb25zID0ge30pID0+IG9wdGlvbnMuc2hvdWxkRm9jdXMgfHwgaXNVbmRlZmluZWQob3B0aW9ucy5zaG91bGRGb2N1cylcbiAgICA/IG9wdGlvbnMuZm9jdXNOYW1lIHx8XG4gICAgICAgIGAke25hbWV9LiR7aXNVbmRlZmluZWQob3B0aW9ucy5mb2N1c0luZGV4KSA/IGluZGV4IDogb3B0aW9ucy5mb2N1c0luZGV4fS5gXG4gICAgOiAnJztcblxudmFyIGdldFZhbGlkYXRpb25Nb2RlcyA9IChtb2RlKSA9PiAoe1xuICAgIGlzT25TdWJtaXQ6ICFtb2RlIHx8IG1vZGUgPT09IFZBTElEQVRJT05fTU9ERS5vblN1Ym1pdCxcbiAgICBpc09uQmx1cjogbW9kZSA9PT0gVkFMSURBVElPTl9NT0RFLm9uQmx1cixcbiAgICBpc09uQ2hhbmdlOiBtb2RlID09PSBWQUxJREFUSU9OX01PREUub25DaGFuZ2UsXG4gICAgaXNPbkFsbDogbW9kZSA9PT0gVkFMSURBVElPTl9NT0RFLmFsbCxcbiAgICBpc09uVG91Y2g6IG1vZGUgPT09IFZBTElEQVRJT05fTU9ERS5vblRvdWNoZWQsXG59KTtcblxudmFyIGlzV2F0Y2hlZCA9IChuYW1lLCBfbmFtZXMsIGlzQmx1ckV2ZW50KSA9PiAhaXNCbHVyRXZlbnQgJiZcbiAgICAoX25hbWVzLndhdGNoQWxsIHx8XG4gICAgICAgIF9uYW1lcy53YXRjaC5oYXMobmFtZSkgfHxcbiAgICAgICAgWy4uLl9uYW1lcy53YXRjaF0uc29tZSgod2F0Y2hOYW1lKSA9PiBuYW1lLnN0YXJ0c1dpdGgod2F0Y2hOYW1lKSAmJlxuICAgICAgICAgICAgL15cXC5cXHcrLy50ZXN0KG5hbWUuc2xpY2Uod2F0Y2hOYW1lLmxlbmd0aCkpKSk7XG5cbmNvbnN0IGl0ZXJhdGVGaWVsZHNCeUFjdGlvbiA9IChmaWVsZHMsIGFjdGlvbiwgZmllbGRzTmFtZXMsIGFib3J0RWFybHkpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBmaWVsZHNOYW1lcyB8fCBPYmplY3Qua2V5cyhmaWVsZHMpKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KGZpZWxkcywga2V5KTtcbiAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICBjb25zdCB7IF9mLCAuLi5jdXJyZW50RmllbGQgfSA9IGZpZWxkO1xuICAgICAgICAgICAgaWYgKF9mKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9mLnJlZnMgJiYgX2YucmVmc1swXSAmJiBhY3Rpb24oX2YucmVmc1swXSwga2V5KSAmJiAhYWJvcnRFYXJseSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX2YucmVmICYmIGFjdGlvbihfZi5yZWYsIF9mLm5hbWUpICYmICFhYm9ydEVhcmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZXJhdGVGaWVsZHNCeUFjdGlvbihjdXJyZW50RmllbGQsIGFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QoY3VycmVudEZpZWxkKSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYXRlRmllbGRzQnlBY3Rpb24oY3VycmVudEZpZWxkLCBhY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG59O1xuXG52YXIgdXBkYXRlRmllbGRBcnJheVJvb3RFcnJvciA9IChlcnJvcnMsIGVycm9yLCBuYW1lKSA9PiB7XG4gICAgY29uc3QgZmllbGRBcnJheUVycm9ycyA9IGNvbnZlcnRUb0FycmF5UGF5bG9hZChnZXQoZXJyb3JzLCBuYW1lKSk7XG4gICAgc2V0KGZpZWxkQXJyYXlFcnJvcnMsICdyb290JywgZXJyb3JbbmFtZV0pO1xuICAgIHNldChlcnJvcnMsIG5hbWUsIGZpZWxkQXJyYXlFcnJvcnMpO1xuICAgIHJldHVybiBlcnJvcnM7XG59O1xuXG52YXIgaXNGaWxlSW5wdXQgPSAoZWxlbWVudCkgPT4gZWxlbWVudC50eXBlID09PSAnZmlsZSc7XG5cbnZhciBpc0Z1bmN0aW9uID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc0hUTUxFbGVtZW50ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKCFpc1dlYikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG93bmVyID0gdmFsdWUgPyB2YWx1ZS5vd25lckRvY3VtZW50IDogMDtcbiAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2ZcbiAgICAgICAgKG93bmVyICYmIG93bmVyLmRlZmF1bHRWaWV3ID8gb3duZXIuZGVmYXVsdFZpZXcuSFRNTEVsZW1lbnQgOiBIVE1MRWxlbWVudCkpO1xufTtcblxudmFyIGlzTWVzc2FnZSA9ICh2YWx1ZSkgPT4gaXNTdHJpbmcodmFsdWUpO1xuXG52YXIgaXNSYWRpb0lucHV0ID0gKGVsZW1lbnQpID0+IGVsZW1lbnQudHlwZSA9PT0gJ3JhZGlvJztcblxudmFyIGlzUmVnZXggPSAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwO1xuXG5jb25zdCBkZWZhdWx0UmVzdWx0ID0ge1xuICAgIHZhbHVlOiBmYWxzZSxcbiAgICBpc1ZhbGlkOiBmYWxzZSxcbn07XG5jb25zdCB2YWxpZFJlc3VsdCA9IHsgdmFsdWU6IHRydWUsIGlzVmFsaWQ6IHRydWUgfTtcbnZhciBnZXRDaGVja2JveFZhbHVlID0gKG9wdGlvbnMpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBvcHRpb25zXG4gICAgICAgICAgICAgICAgLmZpbHRlcigob3B0aW9uKSA9PiBvcHRpb24gJiYgb3B0aW9uLmNoZWNrZWQgJiYgIW9wdGlvbi5kaXNhYmxlZClcbiAgICAgICAgICAgICAgICAubWFwKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWVzLCBpc1ZhbGlkOiAhIXZhbHVlcy5sZW5ndGggfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9uc1swXS5jaGVja2VkICYmICFvcHRpb25zWzBdLmRpc2FibGVkXG4gICAgICAgICAgICA/IC8vIEB0cy1leHBlY3QtZXJyb3IgZXhwZWN0ZWQgdG8gd29yayBpbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIG9wdGlvbnNbMF0uYXR0cmlidXRlcyAmJiAhaXNVbmRlZmluZWQob3B0aW9uc1swXS5hdHRyaWJ1dGVzLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IGlzVW5kZWZpbmVkKG9wdGlvbnNbMF0udmFsdWUpIHx8IG9wdGlvbnNbMF0udmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHZhbGlkUmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHsgdmFsdWU6IG9wdGlvbnNbMF0udmFsdWUsIGlzVmFsaWQ6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICA6IHZhbGlkUmVzdWx0XG4gICAgICAgICAgICA6IGRlZmF1bHRSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0UmVzdWx0O1xufTtcblxuY29uc3QgZGVmYXVsdFJldHVybiA9IHtcbiAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICB2YWx1ZTogbnVsbCxcbn07XG52YXIgZ2V0UmFkaW9WYWx1ZSA9IChvcHRpb25zKSA9PiBBcnJheS5pc0FycmF5KG9wdGlvbnMpXG4gICAgPyBvcHRpb25zLnJlZHVjZSgocHJldmlvdXMsIG9wdGlvbikgPT4gb3B0aW9uICYmIG9wdGlvbi5jaGVja2VkICYmICFvcHRpb24uZGlzYWJsZWRcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG9wdGlvbi52YWx1ZSxcbiAgICAgICAgfVxuICAgICAgICA6IHByZXZpb3VzLCBkZWZhdWx0UmV0dXJuKVxuICAgIDogZGVmYXVsdFJldHVybjtcblxuZnVuY3Rpb24gZ2V0VmFsaWRhdGVFcnJvcihyZXN1bHQsIHJlZiwgdHlwZSA9ICd2YWxpZGF0ZScpIHtcbiAgICBpZiAoaXNNZXNzYWdlKHJlc3VsdCkgfHxcbiAgICAgICAgKEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQuZXZlcnkoaXNNZXNzYWdlKSkgfHxcbiAgICAgICAgKGlzQm9vbGVhbihyZXN1bHQpICYmICFyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbWVzc2FnZTogaXNNZXNzYWdlKHJlc3VsdCkgPyByZXN1bHQgOiAnJyxcbiAgICAgICAgICAgIHJlZixcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnZhciBnZXRWYWx1ZUFuZE1lc3NhZ2UgPSAodmFsaWRhdGlvbkRhdGEpID0+IGlzT2JqZWN0KHZhbGlkYXRpb25EYXRhKSAmJiAhaXNSZWdleCh2YWxpZGF0aW9uRGF0YSlcbiAgICA/IHZhbGlkYXRpb25EYXRhXG4gICAgOiB7XG4gICAgICAgIHZhbHVlOiB2YWxpZGF0aW9uRGF0YSxcbiAgICAgICAgbWVzc2FnZTogJycsXG4gICAgfTtcblxudmFyIHZhbGlkYXRlRmllbGQgPSBhc3luYyAoZmllbGQsIGZvcm1WYWx1ZXMsIHZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSwgc2hvdWxkVXNlTmF0aXZlVmFsaWRhdGlvbiwgaXNGaWVsZEFycmF5KSA9PiB7XG4gICAgY29uc3QgeyByZWYsIHJlZnMsIHJlcXVpcmVkLCBtYXhMZW5ndGgsIG1pbkxlbmd0aCwgbWluLCBtYXgsIHBhdHRlcm4sIHZhbGlkYXRlLCBuYW1lLCB2YWx1ZUFzTnVtYmVyLCBtb3VudCwgZGlzYWJsZWQsIH0gPSBmaWVsZC5fZjtcbiAgICBjb25zdCBpbnB1dFZhbHVlID0gZ2V0KGZvcm1WYWx1ZXMsIG5hbWUpO1xuICAgIGlmICghbW91bnQgfHwgZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZnMgPyByZWZzWzBdIDogcmVmO1xuICAgIGNvbnN0IHNldEN1c3RvbVZhbGlkaXR5ID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZFVzZU5hdGl2ZVZhbGlkYXRpb24gJiYgaW5wdXRSZWYucmVwb3J0VmFsaWRpdHkpIHtcbiAgICAgICAgICAgIGlucHV0UmVmLnNldEN1c3RvbVZhbGlkaXR5KGlzQm9vbGVhbihtZXNzYWdlKSA/ICcnIDogbWVzc2FnZSB8fCAnJyk7XG4gICAgICAgICAgICBpbnB1dFJlZi5yZXBvcnRWYWxpZGl0eSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBlcnJvciA9IHt9O1xuICAgIGNvbnN0IGlzUmFkaW8gPSBpc1JhZGlvSW5wdXQocmVmKTtcbiAgICBjb25zdCBpc0NoZWNrQm94ID0gaXNDaGVja0JveElucHV0KHJlZik7XG4gICAgY29uc3QgaXNSYWRpb09yQ2hlY2tib3ggPSBpc1JhZGlvIHx8IGlzQ2hlY2tCb3g7XG4gICAgY29uc3QgaXNFbXB0eSA9ICgodmFsdWVBc051bWJlciB8fCBpc0ZpbGVJbnB1dChyZWYpKSAmJlxuICAgICAgICBpc1VuZGVmaW5lZChyZWYudmFsdWUpICYmXG4gICAgICAgIGlzVW5kZWZpbmVkKGlucHV0VmFsdWUpKSB8fFxuICAgICAgICAoaXNIVE1MRWxlbWVudChyZWYpICYmIHJlZi52YWx1ZSA9PT0gJycpIHx8XG4gICAgICAgIGlucHV0VmFsdWUgPT09ICcnIHx8XG4gICAgICAgIChBcnJheS5pc0FycmF5KGlucHV0VmFsdWUpICYmICFpbnB1dFZhbHVlLmxlbmd0aCk7XG4gICAgY29uc3QgYXBwZW5kRXJyb3JzQ3VycnkgPSBhcHBlbmRFcnJvcnMuYmluZChudWxsLCBuYW1lLCB2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEsIGVycm9yKTtcbiAgICBjb25zdCBnZXRNaW5NYXhNZXNzYWdlID0gKGV4Y2VlZE1heCwgbWF4TGVuZ3RoTWVzc2FnZSwgbWluTGVuZ3RoTWVzc2FnZSwgbWF4VHlwZSA9IElOUFVUX1ZBTElEQVRJT05fUlVMRVMubWF4TGVuZ3RoLCBtaW5UeXBlID0gSU5QVVRfVkFMSURBVElPTl9SVUxFUy5taW5MZW5ndGgpID0+IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGV4Y2VlZE1heCA/IG1heExlbmd0aE1lc3NhZ2UgOiBtaW5MZW5ndGhNZXNzYWdlO1xuICAgICAgICBlcnJvcltuYW1lXSA9IHtcbiAgICAgICAgICAgIHR5cGU6IGV4Y2VlZE1heCA/IG1heFR5cGUgOiBtaW5UeXBlLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHJlZixcbiAgICAgICAgICAgIC4uLmFwcGVuZEVycm9yc0N1cnJ5KGV4Y2VlZE1heCA/IG1heFR5cGUgOiBtaW5UeXBlLCBtZXNzYWdlKSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGlmIChpc0ZpZWxkQXJyYXlcbiAgICAgICAgPyAhQXJyYXkuaXNBcnJheShpbnB1dFZhbHVlKSB8fCAhaW5wdXRWYWx1ZS5sZW5ndGhcbiAgICAgICAgOiByZXF1aXJlZCAmJlxuICAgICAgICAgICAgKCghaXNSYWRpb09yQ2hlY2tib3ggJiYgKGlzRW1wdHkgfHwgaXNOdWxsT3JVbmRlZmluZWQoaW5wdXRWYWx1ZSkpKSB8fFxuICAgICAgICAgICAgICAgIChpc0Jvb2xlYW4oaW5wdXRWYWx1ZSkgJiYgIWlucHV0VmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgKGlzQ2hlY2tCb3ggJiYgIWdldENoZWNrYm94VmFsdWUocmVmcykuaXNWYWxpZCkgfHxcbiAgICAgICAgICAgICAgICAoaXNSYWRpbyAmJiAhZ2V0UmFkaW9WYWx1ZShyZWZzKS5pc1ZhbGlkKSkpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgbWVzc2FnZSB9ID0gaXNNZXNzYWdlKHJlcXVpcmVkKVxuICAgICAgICAgICAgPyB7IHZhbHVlOiAhIXJlcXVpcmVkLCBtZXNzYWdlOiByZXF1aXJlZCB9XG4gICAgICAgICAgICA6IGdldFZhbHVlQW5kTWVzc2FnZShyZXF1aXJlZCk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgZXJyb3JbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogSU5QVVRfVkFMSURBVElPTl9SVUxFUy5yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICAgICAgICAgICAgLi4uYXBwZW5kRXJyb3JzQ3VycnkoSU5QVVRfVkFMSURBVElPTl9SVUxFUy5yZXF1aXJlZCwgbWVzc2FnZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICBzZXRDdXN0b21WYWxpZGl0eShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc0VtcHR5ICYmICghaXNOdWxsT3JVbmRlZmluZWQobWluKSB8fCAhaXNOdWxsT3JVbmRlZmluZWQobWF4KSkpIHtcbiAgICAgICAgbGV0IGV4Y2VlZE1heDtcbiAgICAgICAgbGV0IGV4Y2VlZE1pbjtcbiAgICAgICAgY29uc3QgbWF4T3V0cHV0ID0gZ2V0VmFsdWVBbmRNZXNzYWdlKG1heCk7XG4gICAgICAgIGNvbnN0IG1pbk91dHB1dCA9IGdldFZhbHVlQW5kTWVzc2FnZShtaW4pO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGlucHV0VmFsdWUpICYmICFpc05hTihpbnB1dFZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVOdW1iZXIgPSByZWYudmFsdWVBc051bWJlciB8fFxuICAgICAgICAgICAgICAgIChpbnB1dFZhbHVlID8gK2lucHV0VmFsdWUgOiBpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQobWF4T3V0cHV0LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGV4Y2VlZE1heCA9IHZhbHVlTnVtYmVyID4gbWF4T3V0cHV0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChtaW5PdXRwdXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZXhjZWVkTWluID0gdmFsdWVOdW1iZXIgPCBtaW5PdXRwdXQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZURhdGUgPSByZWYudmFsdWVBc0RhdGUgfHwgbmV3IERhdGUoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0VGltZVRvRGF0ZSA9ICh0aW1lKSA9PiBuZXcgRGF0ZShuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpICsgJyAnICsgdGltZSk7XG4gICAgICAgICAgICBjb25zdCBpc1RpbWUgPSByZWYudHlwZSA9PSAndGltZSc7XG4gICAgICAgICAgICBjb25zdCBpc1dlZWsgPSByZWYudHlwZSA9PSAnd2Vlayc7XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcobWF4T3V0cHV0LnZhbHVlKSAmJiBpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZXhjZWVkTWF4ID0gaXNUaW1lXG4gICAgICAgICAgICAgICAgICAgID8gY29udmVydFRpbWVUb0RhdGUoaW5wdXRWYWx1ZSkgPiBjb252ZXJ0VGltZVRvRGF0ZShtYXhPdXRwdXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogaXNXZWVrXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGlucHV0VmFsdWUgPiBtYXhPdXRwdXQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWVEYXRlID4gbmV3IERhdGUobWF4T3V0cHV0LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhtaW5PdXRwdXQudmFsdWUpICYmIGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBleGNlZWRNaW4gPSBpc1RpbWVcbiAgICAgICAgICAgICAgICAgICAgPyBjb252ZXJ0VGltZVRvRGF0ZShpbnB1dFZhbHVlKSA8IGNvbnZlcnRUaW1lVG9EYXRlKG1pbk91dHB1dC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiBpc1dlZWtcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaW5wdXRWYWx1ZSA8IG1pbk91dHB1dC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZURhdGUgPCBuZXcgRGF0ZShtaW5PdXRwdXQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleGNlZWRNYXggfHwgZXhjZWVkTWluKSB7XG4gICAgICAgICAgICBnZXRNaW5NYXhNZXNzYWdlKCEhZXhjZWVkTWF4LCBtYXhPdXRwdXQubWVzc2FnZSwgbWluT3V0cHV0Lm1lc3NhZ2UsIElOUFVUX1ZBTElEQVRJT05fUlVMRVMubWF4LCBJTlBVVF9WQUxJREFUSU9OX1JVTEVTLm1pbik7XG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSkge1xuICAgICAgICAgICAgICAgIHNldEN1c3RvbVZhbGlkaXR5KGVycm9yW25hbWVdLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoKG1heExlbmd0aCB8fCBtaW5MZW5ndGgpICYmXG4gICAgICAgICFpc0VtcHR5ICYmXG4gICAgICAgIChpc1N0cmluZyhpbnB1dFZhbHVlKSB8fCAoaXNGaWVsZEFycmF5ICYmIEFycmF5LmlzQXJyYXkoaW5wdXRWYWx1ZSkpKSkge1xuICAgICAgICBjb25zdCBtYXhMZW5ndGhPdXRwdXQgPSBnZXRWYWx1ZUFuZE1lc3NhZ2UobWF4TGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbWluTGVuZ3RoT3V0cHV0ID0gZ2V0VmFsdWVBbmRNZXNzYWdlKG1pbkxlbmd0aCk7XG4gICAgICAgIGNvbnN0IGV4Y2VlZE1heCA9ICFpc051bGxPclVuZGVmaW5lZChtYXhMZW5ndGhPdXRwdXQudmFsdWUpICYmXG4gICAgICAgICAgICBpbnB1dFZhbHVlLmxlbmd0aCA+ICttYXhMZW5ndGhPdXRwdXQudmFsdWU7XG4gICAgICAgIGNvbnN0IGV4Y2VlZE1pbiA9ICFpc051bGxPclVuZGVmaW5lZChtaW5MZW5ndGhPdXRwdXQudmFsdWUpICYmXG4gICAgICAgICAgICBpbnB1dFZhbHVlLmxlbmd0aCA8ICttaW5MZW5ndGhPdXRwdXQudmFsdWU7XG4gICAgICAgIGlmIChleGNlZWRNYXggfHwgZXhjZWVkTWluKSB7XG4gICAgICAgICAgICBnZXRNaW5NYXhNZXNzYWdlKGV4Y2VlZE1heCwgbWF4TGVuZ3RoT3V0cHV0Lm1lc3NhZ2UsIG1pbkxlbmd0aE91dHB1dC5tZXNzYWdlKTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgc2V0Q3VzdG9tVmFsaWRpdHkoZXJyb3JbbmFtZV0ubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYXR0ZXJuICYmICFpc0VtcHR5ICYmIGlzU3RyaW5nKGlucHV0VmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWU6IHBhdHRlcm5WYWx1ZSwgbWVzc2FnZSB9ID0gZ2V0VmFsdWVBbmRNZXNzYWdlKHBhdHRlcm4pO1xuICAgICAgICBpZiAoaXNSZWdleChwYXR0ZXJuVmFsdWUpICYmICFpbnB1dFZhbHVlLm1hdGNoKHBhdHRlcm5WYWx1ZSkpIHtcbiAgICAgICAgICAgIGVycm9yW25hbWVdID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IElOUFVUX1ZBTElEQVRJT05fUlVMRVMucGF0dGVybixcbiAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHJlZixcbiAgICAgICAgICAgICAgICAuLi5hcHBlbmRFcnJvcnNDdXJyeShJTlBVVF9WQUxJREFUSU9OX1JVTEVTLnBhdHRlcm4sIG1lc3NhZ2UpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgc2V0Q3VzdG9tVmFsaWRpdHkobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWxpZGF0ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRlKGlucHV0VmFsdWUsIGZvcm1WYWx1ZXMpO1xuICAgICAgICAgICAgY29uc3QgdmFsaWRhdGVFcnJvciA9IGdldFZhbGlkYXRlRXJyb3IocmVzdWx0LCBpbnB1dFJlZik7XG4gICAgICAgICAgICBpZiAodmFsaWRhdGVFcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9yW25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi52YWxpZGF0ZUVycm9yLFxuICAgICAgICAgICAgICAgICAgICAuLi5hcHBlbmRFcnJvcnNDdXJyeShJTlBVVF9WQUxJREFUSU9OX1JVTEVTLnZhbGlkYXRlLCB2YWxpZGF0ZUVycm9yLm1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKCF2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VzdG9tVmFsaWRpdHkodmFsaWRhdGVFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdCh2YWxpZGF0ZSkpIHtcbiAgICAgICAgICAgIGxldCB2YWxpZGF0aW9uUmVzdWx0ID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWxpZGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNFbXB0eU9iamVjdCh2YWxpZGF0aW9uUmVzdWx0KSAmJiAhdmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0ZUVycm9yID0gZ2V0VmFsaWRhdGVFcnJvcihhd2FpdCB2YWxpZGF0ZVtrZXldKGlucHV0VmFsdWUsIGZvcm1WYWx1ZXMpLCBpbnB1dFJlZiwga2V5KTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGVFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udmFsaWRhdGVFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFwcGVuZEVycm9yc0N1cnJ5KGtleSwgdmFsaWRhdGVFcnJvci5tZXNzYWdlKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VzdG9tVmFsaWRpdHkodmFsaWRhdGVFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JbbmFtZV0gPSB2YWxpZGF0aW9uUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0VtcHR5T2JqZWN0KHZhbGlkYXRpb25SZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICAgICAgICAgICAgICAgIC4uLnZhbGlkYXRpb25SZXN1bHQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNldEN1c3RvbVZhbGlkaXR5KHRydWUpO1xuICAgIHJldHVybiBlcnJvcjtcbn07XG5cbnZhciBhcHBlbmRBdCA9IChkYXRhLCB2YWx1ZSkgPT4gW1xuICAgIC4uLmRhdGEsXG4gICAgLi4uY29udmVydFRvQXJyYXlQYXlsb2FkKHZhbHVlKSxcbl07XG5cbnZhciBmaWxsRW1wdHlBcnJheSA9ICh2YWx1ZSkgPT4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoKCkgPT4gdW5kZWZpbmVkKSA6IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaW5zZXJ0KGRhdGEsIGluZGV4LCB2YWx1ZSkge1xuICAgIHJldHVybiBbXG4gICAgICAgIC4uLmRhdGEuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAuLi5jb252ZXJ0VG9BcnJheVBheWxvYWQodmFsdWUpLFxuICAgICAgICAuLi5kYXRhLnNsaWNlKGluZGV4KSxcbiAgICBdO1xufVxuXG52YXIgbW92ZUFycmF5QXQgPSAoZGF0YSwgZnJvbSwgdG8pID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoaXNVbmRlZmluZWQoZGF0YVt0b10pKSB7XG4gICAgICAgIGRhdGFbdG9dID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBkYXRhLnNwbGljZSh0bywgMCwgZGF0YS5zcGxpY2UoZnJvbSwgMSlbMF0pO1xuICAgIHJldHVybiBkYXRhO1xufTtcblxudmFyIHByZXBlbmRBdCA9IChkYXRhLCB2YWx1ZSkgPT4gW1xuICAgIC4uLmNvbnZlcnRUb0FycmF5UGF5bG9hZCh2YWx1ZSksXG4gICAgLi4uY29udmVydFRvQXJyYXlQYXlsb2FkKGRhdGEpLFxuXTtcblxuZnVuY3Rpb24gcmVtb3ZlQXRJbmRleGVzKGRhdGEsIGluZGV4ZXMpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3QgdGVtcCA9IFsuLi5kYXRhXTtcbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgdGVtcC5zcGxpY2UoaW5kZXggLSBpLCAxKTtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGFjdCh0ZW1wKS5sZW5ndGggPyB0ZW1wIDogW107XG59XG52YXIgcmVtb3ZlQXJyYXlBdCA9IChkYXRhLCBpbmRleCkgPT4gaXNVbmRlZmluZWQoaW5kZXgpXG4gICAgPyBbXVxuICAgIDogcmVtb3ZlQXRJbmRleGVzKGRhdGEsIGNvbnZlcnRUb0FycmF5UGF5bG9hZChpbmRleCkuc29ydCgoYSwgYikgPT4gYSAtIGIpKTtcblxudmFyIHN3YXBBcnJheUF0ID0gKGRhdGEsIGluZGV4QSwgaW5kZXhCKSA9PiB7XG4gICAgW2RhdGFbaW5kZXhBXSwgZGF0YVtpbmRleEJdXSA9IFtkYXRhW2luZGV4Ql0sIGRhdGFbaW5kZXhBXV07XG59O1xuXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgdXBkYXRlUGF0aCkge1xuICAgIGNvbnN0IGxlbmd0aCA9IHVwZGF0ZVBhdGguc2xpY2UoMCwgLTEpLmxlbmd0aDtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBpc1VuZGVmaW5lZChvYmplY3QpID8gaW5kZXgrKyA6IG9iamVjdFt1cGRhdGVQYXRoW2luZGV4KytdXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cbmZ1bmN0aW9uIGlzRW1wdHlBcnJheShvYmopIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFpc1VuZGVmaW5lZChvYmpba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgIGNvbnN0IHBhdGhzID0gQXJyYXkuaXNBcnJheShwYXRoKVxuICAgICAgICA/IHBhdGhcbiAgICAgICAgOiBpc0tleShwYXRoKVxuICAgICAgICAgICAgPyBbcGF0aF1cbiAgICAgICAgICAgIDogc3RyaW5nVG9QYXRoKHBhdGgpO1xuICAgIGNvbnN0IGNoaWxkT2JqZWN0ID0gcGF0aHMubGVuZ3RoID09PSAxID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIHBhdGhzKTtcbiAgICBjb25zdCBpbmRleCA9IHBhdGhzLmxlbmd0aCAtIDE7XG4gICAgY29uc3Qga2V5ID0gcGF0aHNbaW5kZXhdO1xuICAgIGlmIChjaGlsZE9iamVjdCkge1xuICAgICAgICBkZWxldGUgY2hpbGRPYmplY3Rba2V5XTtcbiAgICB9XG4gICAgaWYgKGluZGV4ICE9PSAwICYmXG4gICAgICAgICgoaXNPYmplY3QoY2hpbGRPYmplY3QpICYmIGlzRW1wdHlPYmplY3QoY2hpbGRPYmplY3QpKSB8fFxuICAgICAgICAgICAgKEFycmF5LmlzQXJyYXkoY2hpbGRPYmplY3QpICYmIGlzRW1wdHlBcnJheShjaGlsZE9iamVjdCkpKSkge1xuICAgICAgICB1bnNldChvYmplY3QsIHBhdGhzLnNsaWNlKDAsIC0xKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG59XG5cbnZhciB1cGRhdGVBdCA9IChmaWVsZFZhbHVlcywgaW5kZXgsIHZhbHVlKSA9PiB7XG4gICAgZmllbGRWYWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgcmV0dXJuIGZpZWxkVmFsdWVzO1xufTtcblxuLyoqXG4gKiBBIGN1c3RvbSBob29rIHRoYXQgZXhwb3NlcyBjb252ZW5pZW50IG1ldGhvZHMgdG8gcGVyZm9ybSBvcGVyYXRpb25zIHdpdGggYSBsaXN0IG9mIGR5bmFtaWMgaW5wdXRzIHRoYXQgbmVlZCB0byBiZSBhcHBlbmRlZCwgdXBkYXRlZCwgcmVtb3ZlZCBldGMuIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS11c2VmaWVsZGFycmF5LXNzdWduKSDigKIgW1ZpZGVvXShodHRwczovL3lvdXR1LmJlLzRNcmJmR1NGWTJBKVxuICpcbiAqIEByZW1hcmtzXG4gKiBbQVBJXShodHRwczovL3JlYWN0LWhvb2stZm9ybS5jb20vZG9jcy91c2VmaWVsZGFycmF5KSDigKIgW0RlbW9dKGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9yZWFjdC1ob29rLWZvcm0tdXNlZmllbGRhcnJheS1zc3VnbilcbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSB1c2VGaWVsZEFycmF5IHByb3BzXG4gKlxuICogQHJldHVybnMgbWV0aG9kcyAtIGZ1bmN0aW9ucyB0byBtYW5pcHVsYXRlIHdpdGggdGhlIEZpZWxkIEFycmF5cyAoZHluYW1pYyBpbnB1dHMpIHtAbGluayBVc2VGaWVsZEFycmF5UmV0dXJufVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgeyByZWdpc3RlciwgY29udHJvbCwgaGFuZGxlU3VibWl0LCByZXNldCwgdHJpZ2dlciwgc2V0RXJyb3IgfSA9IHVzZUZvcm0oe1xuICogICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAqICAgICAgIHRlc3Q6IFtdXG4gKiAgICAgfVxuICogICB9KTtcbiAqICAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCB9ID0gdXNlRmllbGRBcnJheSh7XG4gKiAgICAgY29udHJvbCxcbiAqICAgICBuYW1lOiBcInRlc3RcIlxuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdChkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpKX0+XG4gKiAgICAgICB7ZmllbGRzLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAqICAgICAgICAgIDxpbnB1dCBrZXk9e2l0ZW0uaWR9IHsuLi5yZWdpc3RlcihgdGVzdC4ke2luZGV4fS5maXJzdE5hbWVgKX0gIC8+XG4gKiAgICAgICApKX1cbiAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IGFwcGVuZCh7IGZpcnN0TmFtZTogXCJiaWxsXCIgfSl9PlxuICogICAgICAgICBhcHBlbmRcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiAvPlxuICogICAgIDwvZm9ybT5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiB1c2VGaWVsZEFycmF5KHByb3BzKSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IHVzZUZvcm1Db250ZXh0KCk7XG4gICAgY29uc3QgeyBjb250cm9sID0gbWV0aG9kcy5jb250cm9sLCBuYW1lLCBrZXlOYW1lID0gJ2lkJywgc2hvdWxkVW5yZWdpc3RlciwgcnVsZXMsIH0gPSBwcm9wcztcbiAgICBjb25zdCBbZmllbGRzLCBzZXRGaWVsZHNdID0gUmVhY3QudXNlU3RhdGUoY29udHJvbC5fZ2V0RmllbGRBcnJheShuYW1lKSk7XG4gICAgY29uc3QgaWRzID0gUmVhY3QudXNlUmVmKGNvbnRyb2wuX2dldEZpZWxkQXJyYXkobmFtZSkubWFwKGdlbmVyYXRlSWQpKTtcbiAgICBjb25zdCBfZmllbGRJZHMgPSBSZWFjdC51c2VSZWYoZmllbGRzKTtcbiAgICBjb25zdCBfbmFtZSA9IFJlYWN0LnVzZVJlZihuYW1lKTtcbiAgICBjb25zdCBfYWN0aW9uZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAgIF9uYW1lLmN1cnJlbnQgPSBuYW1lO1xuICAgIF9maWVsZElkcy5jdXJyZW50ID0gZmllbGRzO1xuICAgIGNvbnRyb2wuX25hbWVzLmFycmF5LmFkZChuYW1lKTtcbiAgICBydWxlcyAmJlxuICAgICAgICBjb250cm9sLnJlZ2lzdGVyKG5hbWUsIHJ1bGVzKTtcbiAgICB1c2VTdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiAoeyB2YWx1ZXMsIG5hbWU6IGZpZWxkQXJyYXlOYW1lLCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoZmllbGRBcnJheU5hbWUgPT09IF9uYW1lLmN1cnJlbnQgfHwgIWZpZWxkQXJyYXlOYW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZXMgPSBnZXQodmFsdWVzLCBfbmFtZS5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZFZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RmllbGRzKGZpZWxkVmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgaWRzLmN1cnJlbnQgPSBmaWVsZFZhbHVlcy5tYXAoZ2VuZXJhdGVJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdWJqZWN0OiBjb250cm9sLl9zdWJqZWN0cy5hcnJheSxcbiAgICB9KTtcbiAgICBjb25zdCB1cGRhdGVWYWx1ZXMgPSBSZWFjdC51c2VDYWxsYmFjaygodXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMpID0+IHtcbiAgICAgICAgX2FjdGlvbmVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBjb250cm9sLl91cGRhdGVGaWVsZEFycmF5KG5hbWUsIHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICB9LCBbY29udHJvbCwgbmFtZV0pO1xuICAgIGNvbnN0IGFwcGVuZCA9ICh2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCBhcHBlbmRWYWx1ZSA9IGNvbnZlcnRUb0FycmF5UGF5bG9hZChjbG9uZU9iamVjdCh2YWx1ZSkpO1xuICAgICAgICBjb25zdCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcyA9IGFwcGVuZEF0KGNvbnRyb2wuX2dldEZpZWxkQXJyYXkobmFtZSksIGFwcGVuZFZhbHVlKTtcbiAgICAgICAgY29udHJvbC5fbmFtZXMuZm9jdXMgPSBnZXRGb2N1c0ZpZWxkTmFtZShuYW1lLCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcy5sZW5ndGggLSAxLCBvcHRpb25zKTtcbiAgICAgICAgaWRzLmN1cnJlbnQgPSBhcHBlbmRBdChpZHMuY3VycmVudCwgYXBwZW5kVmFsdWUubWFwKGdlbmVyYXRlSWQpKTtcbiAgICAgICAgdXBkYXRlVmFsdWVzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgc2V0RmllbGRzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgY29udHJvbC5fdXBkYXRlRmllbGRBcnJheShuYW1lLCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcywgYXBwZW5kQXQsIHtcbiAgICAgICAgICAgIGFyZ0E6IGZpbGxFbXB0eUFycmF5KHZhbHVlKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBwcmVwZW5kID0gKHZhbHVlLCBvcHRpb25zKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXBlbmRWYWx1ZSA9IGNvbnZlcnRUb0FycmF5UGF5bG9hZChjbG9uZU9iamVjdCh2YWx1ZSkpO1xuICAgICAgICBjb25zdCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcyA9IHByZXBlbmRBdChjb250cm9sLl9nZXRGaWVsZEFycmF5KG5hbWUpLCBwcmVwZW5kVmFsdWUpO1xuICAgICAgICBjb250cm9sLl9uYW1lcy5mb2N1cyA9IGdldEZvY3VzRmllbGROYW1lKG5hbWUsIDAsIG9wdGlvbnMpO1xuICAgICAgICBpZHMuY3VycmVudCA9IHByZXBlbmRBdChpZHMuY3VycmVudCwgcHJlcGVuZFZhbHVlLm1hcChnZW5lcmF0ZUlkKSk7XG4gICAgICAgIHVwZGF0ZVZhbHVlcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIHNldEZpZWxkcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIGNvbnRyb2wuX3VwZGF0ZUZpZWxkQXJyYXkobmFtZSwgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMsIHByZXBlbmRBdCwge1xuICAgICAgICAgICAgYXJnQTogZmlsbEVtcHR5QXJyYXkodmFsdWUpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZSA9IChpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcyA9IHJlbW92ZUFycmF5QXQoY29udHJvbC5fZ2V0RmllbGRBcnJheShuYW1lKSwgaW5kZXgpO1xuICAgICAgICBpZHMuY3VycmVudCA9IHJlbW92ZUFycmF5QXQoaWRzLmN1cnJlbnQsIGluZGV4KTtcbiAgICAgICAgdXBkYXRlVmFsdWVzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgc2V0RmllbGRzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgIUFycmF5LmlzQXJyYXkoZ2V0KGNvbnRyb2wuX2ZpZWxkcywgbmFtZSkpICYmXG4gICAgICAgICAgICBzZXQoY29udHJvbC5fZmllbGRzLCBuYW1lLCB1bmRlZmluZWQpO1xuICAgICAgICBjb250cm9sLl91cGRhdGVGaWVsZEFycmF5KG5hbWUsIHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzLCByZW1vdmVBcnJheUF0LCB7XG4gICAgICAgICAgICBhcmdBOiBpbmRleCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnQkMSA9IChpbmRleCwgdmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgaW5zZXJ0VmFsdWUgPSBjb252ZXJ0VG9BcnJheVBheWxvYWQoY2xvbmVPYmplY3QodmFsdWUpKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMgPSBpbnNlcnQoY29udHJvbC5fZ2V0RmllbGRBcnJheShuYW1lKSwgaW5kZXgsIGluc2VydFZhbHVlKTtcbiAgICAgICAgY29udHJvbC5fbmFtZXMuZm9jdXMgPSBnZXRGb2N1c0ZpZWxkTmFtZShuYW1lLCBpbmRleCwgb3B0aW9ucyk7XG4gICAgICAgIGlkcy5jdXJyZW50ID0gaW5zZXJ0KGlkcy5jdXJyZW50LCBpbmRleCwgaW5zZXJ0VmFsdWUubWFwKGdlbmVyYXRlSWQpKTtcbiAgICAgICAgdXBkYXRlVmFsdWVzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgc2V0RmllbGRzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgY29udHJvbC5fdXBkYXRlRmllbGRBcnJheShuYW1lLCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcywgaW5zZXJ0LCB7XG4gICAgICAgICAgICBhcmdBOiBpbmRleCxcbiAgICAgICAgICAgIGFyZ0I6IGZpbGxFbXB0eUFycmF5KHZhbHVlKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBzd2FwID0gKGluZGV4QSwgaW5kZXhCKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzID0gY29udHJvbC5fZ2V0RmllbGRBcnJheShuYW1lKTtcbiAgICAgICAgc3dhcEFycmF5QXQodXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMsIGluZGV4QSwgaW5kZXhCKTtcbiAgICAgICAgc3dhcEFycmF5QXQoaWRzLmN1cnJlbnQsIGluZGV4QSwgaW5kZXhCKTtcbiAgICAgICAgdXBkYXRlVmFsdWVzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgc2V0RmllbGRzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgY29udHJvbC5fdXBkYXRlRmllbGRBcnJheShuYW1lLCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcywgc3dhcEFycmF5QXQsIHtcbiAgICAgICAgICAgIGFyZ0E6IGluZGV4QSxcbiAgICAgICAgICAgIGFyZ0I6IGluZGV4QixcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH07XG4gICAgY29uc3QgbW92ZSA9IChmcm9tLCB0bykgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcyA9IGNvbnRyb2wuX2dldEZpZWxkQXJyYXkobmFtZSk7XG4gICAgICAgIG1vdmVBcnJheUF0KHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzLCBmcm9tLCB0byk7XG4gICAgICAgIG1vdmVBcnJheUF0KGlkcy5jdXJyZW50LCBmcm9tLCB0byk7XG4gICAgICAgIHVwZGF0ZVZhbHVlcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIHNldEZpZWxkcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIGNvbnRyb2wuX3VwZGF0ZUZpZWxkQXJyYXkobmFtZSwgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMsIG1vdmVBcnJheUF0LCB7XG4gICAgICAgICAgICBhcmdBOiBmcm9tLFxuICAgICAgICAgICAgYXJnQjogdG8sXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZSA9IChpbmRleCwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlVmFsdWUgPSBjbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzID0gdXBkYXRlQXQoY29udHJvbC5fZ2V0RmllbGRBcnJheShuYW1lKSwgaW5kZXgsIHVwZGF0ZVZhbHVlKTtcbiAgICAgICAgaWRzLmN1cnJlbnQgPSBbLi4udXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXNdLm1hcCgoaXRlbSwgaSkgPT4gIWl0ZW0gfHwgaSA9PT0gaW5kZXggPyBnZW5lcmF0ZUlkKCkgOiBpZHMuY3VycmVudFtpXSk7XG4gICAgICAgIHVwZGF0ZVZhbHVlcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIHNldEZpZWxkcyhbLi4udXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXNdKTtcbiAgICAgICAgY29udHJvbC5fdXBkYXRlRmllbGRBcnJheShuYW1lLCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcywgdXBkYXRlQXQsIHtcbiAgICAgICAgICAgIGFyZ0E6IGluZGV4LFxuICAgICAgICAgICAgYXJnQjogdXBkYXRlVmFsdWUsXG4gICAgICAgIH0sIHRydWUsIGZhbHNlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlcGxhY2UgPSAodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMgPSBjb252ZXJ0VG9BcnJheVBheWxvYWQoY2xvbmVPYmplY3QodmFsdWUpKTtcbiAgICAgICAgaWRzLmN1cnJlbnQgPSB1cGRhdGVkRmllbGRBcnJheVZhbHVlcy5tYXAoZ2VuZXJhdGVJZCk7XG4gICAgICAgIHVwZGF0ZVZhbHVlcyhbLi4udXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXNdKTtcbiAgICAgICAgc2V0RmllbGRzKFsuLi51cGRhdGVkRmllbGRBcnJheVZhbHVlc10pO1xuICAgICAgICBjb250cm9sLl91cGRhdGVGaWVsZEFycmF5KG5hbWUsIFsuLi51cGRhdGVkRmllbGRBcnJheVZhbHVlc10sIChkYXRhKSA9PiBkYXRhLCB7fSwgdHJ1ZSwgZmFsc2UpO1xuICAgIH07XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29udHJvbC5fc3RhdGUuYWN0aW9uID0gZmFsc2U7XG4gICAgICAgIGlzV2F0Y2hlZChuYW1lLCBjb250cm9sLl9uYW1lcykgJiZcbiAgICAgICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgIC4uLmNvbnRyb2wuX2Zvcm1TdGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAoX2FjdGlvbmVkLmN1cnJlbnQgJiZcbiAgICAgICAgICAgICghZ2V0VmFsaWRhdGlvbk1vZGVzKGNvbnRyb2wuX29wdGlvbnMubW9kZSkuaXNPblN1Ym1pdCB8fFxuICAgICAgICAgICAgICAgIGNvbnRyb2wuX2Zvcm1TdGF0ZS5pc1N1Ym1pdHRlZCkpIHtcbiAgICAgICAgICAgIGlmIChjb250cm9sLl9vcHRpb25zLnJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbC5fZXhlY3V0ZVNjaGVtYShbbmFtZV0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGdldChyZXN1bHQuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdFcnJvciA9IGdldChjb250cm9sLl9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nRXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKCFlcnJvciAmJiBleGlzdGluZ0Vycm9yLnR5cGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChleGlzdGluZ0Vycm9yLnR5cGUgIT09IGVycm9yLnR5cGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nRXJyb3IubWVzc2FnZSAhPT0gZXJyb3IubWVzc2FnZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGVycm9yICYmIGVycm9yLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZXQoY29udHJvbC5fZm9ybVN0YXRlLmVycm9ycywgbmFtZSwgZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bnNldChjb250cm9sLl9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogY29udHJvbC5fZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldChjb250cm9sLl9maWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZCAmJlxuICAgICAgICAgICAgICAgICAgICBmaWVsZC5fZiAmJlxuICAgICAgICAgICAgICAgICAgICAhKGdldFZhbGlkYXRpb25Nb2Rlcyhjb250cm9sLl9vcHRpb25zLnJlVmFsaWRhdGVNb2RlKS5pc09uU3VibWl0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRWYWxpZGF0aW9uTW9kZXMoY29udHJvbC5fb3B0aW9ucy5tb2RlKS5pc09uU3VibWl0KSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUZpZWxkKGZpZWxkLCBjb250cm9sLl9mb3JtVmFsdWVzLCBjb250cm9sLl9vcHRpb25zLmNyaXRlcmlhTW9kZSA9PT0gVkFMSURBVElPTl9NT0RFLmFsbCwgY29udHJvbC5fb3B0aW9ucy5zaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uLCB0cnVlKS50aGVuKChlcnJvcikgPT4gIWlzRW1wdHlPYmplY3QoZXJyb3IpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLl9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IHVwZGF0ZUZpZWxkQXJyYXlSb290RXJyb3IoY29udHJvbC5fZm9ybVN0YXRlLmVycm9ycywgZXJyb3IsIG5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250cm9sLl9zdWJqZWN0cy52YWx1ZXMubmV4dCh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdmFsdWVzOiB7IC4uLmNvbnRyb2wuX2Zvcm1WYWx1ZXMgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRyb2wuX25hbWVzLmZvY3VzICYmXG4gICAgICAgICAgICBpdGVyYXRlRmllbGRzQnlBY3Rpb24oY29udHJvbC5fZmllbGRzLCAocmVmLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbC5fbmFtZXMuZm9jdXMgJiZcbiAgICAgICAgICAgICAgICAgICAga2V5LnN0YXJ0c1dpdGgoY29udHJvbC5fbmFtZXMuZm9jdXMpICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZi5mb2N1cykge1xuICAgICAgICAgICAgICAgICAgICByZWYuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjb250cm9sLl9uYW1lcy5mb2N1cyA9ICcnO1xuICAgICAgICBjb250cm9sLl91cGRhdGVWYWxpZCgpO1xuICAgICAgICBfYWN0aW9uZWQuY3VycmVudCA9IGZhbHNlO1xuICAgIH0sIFtmaWVsZHMsIG5hbWUsIGNvbnRyb2xdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAhZ2V0KGNvbnRyb2wuX2Zvcm1WYWx1ZXMsIG5hbWUpICYmIGNvbnRyb2wuX3VwZGF0ZUZpZWxkQXJyYXkobmFtZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAoY29udHJvbC5fb3B0aW9ucy5zaG91bGRVbnJlZ2lzdGVyIHx8IHNob3VsZFVucmVnaXN0ZXIpICYmXG4gICAgICAgICAgICAgICAgY29udHJvbC51bnJlZ2lzdGVyKG5hbWUpO1xuICAgICAgICB9O1xuICAgIH0sIFtuYW1lLCBjb250cm9sLCBrZXlOYW1lLCBzaG91bGRVbnJlZ2lzdGVyXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3dhcDogUmVhY3QudXNlQ2FsbGJhY2soc3dhcCwgW3VwZGF0ZVZhbHVlcywgbmFtZSwgY29udHJvbF0pLFxuICAgICAgICBtb3ZlOiBSZWFjdC51c2VDYWxsYmFjayhtb3ZlLCBbdXBkYXRlVmFsdWVzLCBuYW1lLCBjb250cm9sXSksXG4gICAgICAgIHByZXBlbmQ6IFJlYWN0LnVzZUNhbGxiYWNrKHByZXBlbmQsIFt1cGRhdGVWYWx1ZXMsIG5hbWUsIGNvbnRyb2xdKSxcbiAgICAgICAgYXBwZW5kOiBSZWFjdC51c2VDYWxsYmFjayhhcHBlbmQsIFt1cGRhdGVWYWx1ZXMsIG5hbWUsIGNvbnRyb2xdKSxcbiAgICAgICAgcmVtb3ZlOiBSZWFjdC51c2VDYWxsYmFjayhyZW1vdmUsIFt1cGRhdGVWYWx1ZXMsIG5hbWUsIGNvbnRyb2xdKSxcbiAgICAgICAgaW5zZXJ0OiBSZWFjdC51c2VDYWxsYmFjayhpbnNlcnQkMSwgW3VwZGF0ZVZhbHVlcywgbmFtZSwgY29udHJvbF0pLFxuICAgICAgICB1cGRhdGU6IFJlYWN0LnVzZUNhbGxiYWNrKHVwZGF0ZSwgW3VwZGF0ZVZhbHVlcywgbmFtZSwgY29udHJvbF0pLFxuICAgICAgICByZXBsYWNlOiBSZWFjdC51c2VDYWxsYmFjayhyZXBsYWNlLCBbdXBkYXRlVmFsdWVzLCBuYW1lLCBjb250cm9sXSksXG4gICAgICAgIGZpZWxkczogUmVhY3QudXNlTWVtbygoKSA9PiBmaWVsZHMubWFwKChmaWVsZCwgaW5kZXgpID0+ICh7XG4gICAgICAgICAgICAuLi5maWVsZCxcbiAgICAgICAgICAgIFtrZXlOYW1lXTogaWRzLmN1cnJlbnRbaW5kZXhdIHx8IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgfSkpLCBbZmllbGRzLCBrZXlOYW1lXSksXG4gICAgfTtcbn1cblxudmFyIGNyZWF0ZVN1YmplY3QgPSAoKSA9PiB7XG4gICAgbGV0IF9vYnNlcnZlcnMgPSBbXTtcbiAgICBjb25zdCBuZXh0ID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgX29ic2VydmVycykge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCAmJiBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3Vic2NyaWJlID0gKG9ic2VydmVyKSA9PiB7XG4gICAgICAgIF9vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIF9vYnNlcnZlcnMgPSBfb2JzZXJ2ZXJzLmZpbHRlcigobykgPT4gbyAhPT0gb2JzZXJ2ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgICBfb2JzZXJ2ZXJzID0gW107XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgb2JzZXJ2ZXJzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYnNlcnZlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHQsXG4gICAgICAgIHN1YnNjcmliZSxcbiAgICAgICAgdW5zdWJzY3JpYmUsXG4gICAgfTtcbn07XG5cbnZhciBpc1ByaW1pdGl2ZSA9ICh2YWx1ZSkgPT4gaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHx8ICFpc09iamVjdFR5cGUodmFsdWUpO1xuXG5mdW5jdGlvbiBkZWVwRXF1YWwob2JqZWN0MSwgb2JqZWN0Mikge1xuICAgIGlmIChpc1ByaW1pdGl2ZShvYmplY3QxKSB8fCBpc1ByaW1pdGl2ZShvYmplY3QyKSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0MSA9PT0gb2JqZWN0MjtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZU9iamVjdChvYmplY3QxKSAmJiBpc0RhdGVPYmplY3Qob2JqZWN0MikpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDEuZ2V0VGltZSgpID09PSBvYmplY3QyLmdldFRpbWUoKTtcbiAgICB9XG4gICAgY29uc3Qga2V5czEgPSBPYmplY3Qua2V5cyhvYmplY3QxKTtcbiAgICBjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKG9iamVjdDIpO1xuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMxKSB7XG4gICAgICAgIGNvbnN0IHZhbDEgPSBvYmplY3QxW2tleV07XG4gICAgICAgIGlmICgha2V5czIuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkgIT09ICdyZWYnKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwyID0gb2JqZWN0MltrZXldO1xuICAgICAgICAgICAgaWYgKChpc0RhdGVPYmplY3QodmFsMSkgJiYgaXNEYXRlT2JqZWN0KHZhbDIpKSB8fFxuICAgICAgICAgICAgICAgIChpc09iamVjdCh2YWwxKSAmJiBpc09iamVjdCh2YWwyKSkgfHxcbiAgICAgICAgICAgICAgICAoQXJyYXkuaXNBcnJheSh2YWwxKSAmJiBBcnJheS5pc0FycmF5KHZhbDIpKVxuICAgICAgICAgICAgICAgID8gIWRlZXBFcXVhbCh2YWwxLCB2YWwyKVxuICAgICAgICAgICAgICAgIDogdmFsMSAhPT0gdmFsMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIGlzTXVsdGlwbGVTZWxlY3QgPSAoZWxlbWVudCkgPT4gZWxlbWVudC50eXBlID09PSBgc2VsZWN0LW11bHRpcGxlYDtcblxudmFyIGlzUmFkaW9PckNoZWNrYm94ID0gKHJlZikgPT4gaXNSYWRpb0lucHV0KHJlZikgfHwgaXNDaGVja0JveElucHV0KHJlZik7XG5cbnZhciBsaXZlID0gKHJlZikgPT4gaXNIVE1MRWxlbWVudChyZWYpICYmIHJlZi5pc0Nvbm5lY3RlZDtcblxudmFyIG9iamVjdEhhc0Z1bmN0aW9uID0gKGRhdGEpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGRhdGFba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIG1hcmtGaWVsZHNEaXJ0eShkYXRhLCBmaWVsZHMgPSB7fSkge1xuICAgIGNvbnN0IGlzUGFyZW50Tm9kZUFycmF5ID0gQXJyYXkuaXNBcnJheShkYXRhKTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkgfHwgaXNQYXJlbnROb2RlQXJyYXkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVtrZXldKSB8fFxuICAgICAgICAgICAgICAgIChpc09iamVjdChkYXRhW2tleV0pICYmICFvYmplY3RIYXNGdW5jdGlvbihkYXRhW2tleV0pKSkge1xuICAgICAgICAgICAgICAgIGZpZWxkc1trZXldID0gQXJyYXkuaXNBcnJheShkYXRhW2tleV0pID8gW10gOiB7fTtcbiAgICAgICAgICAgICAgICBtYXJrRmllbGRzRGlydHkoZGF0YVtrZXldLCBmaWVsZHNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNOdWxsT3JVbmRlZmluZWQoZGF0YVtrZXldKSkge1xuICAgICAgICAgICAgICAgIGZpZWxkc1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmllbGRzO1xufVxuZnVuY3Rpb24gZ2V0RGlydHlGaWVsZHNGcm9tRGVmYXVsdFZhbHVlcyhkYXRhLCBmb3JtVmFsdWVzLCBkaXJ0eUZpZWxkc0Zyb21WYWx1ZXMpIHtcbiAgICBjb25zdCBpc1BhcmVudE5vZGVBcnJheSA9IEFycmF5LmlzQXJyYXkoZGF0YSk7XG4gICAgaWYgKGlzT2JqZWN0KGRhdGEpIHx8IGlzUGFyZW50Tm9kZUFycmF5KSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFba2V5XSkgfHxcbiAgICAgICAgICAgICAgICAoaXNPYmplY3QoZGF0YVtrZXldKSAmJiAhb2JqZWN0SGFzRnVuY3Rpb24oZGF0YVtrZXldKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoZm9ybVZhbHVlcykgfHxcbiAgICAgICAgICAgICAgICAgICAgaXNQcmltaXRpdmUoZGlydHlGaWVsZHNGcm9tVmFsdWVzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpcnR5RmllbGRzRnJvbVZhbHVlc1trZXldID0gQXJyYXkuaXNBcnJheShkYXRhW2tleV0pXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG1hcmtGaWVsZHNEaXJ0eShkYXRhW2tleV0sIFtdKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7IC4uLm1hcmtGaWVsZHNEaXJ0eShkYXRhW2tleV0pIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXREaXJ0eUZpZWxkc0Zyb21EZWZhdWx0VmFsdWVzKGRhdGFba2V5XSwgaXNOdWxsT3JVbmRlZmluZWQoZm9ybVZhbHVlcykgPyB7fSA6IGZvcm1WYWx1ZXNba2V5XSwgZGlydHlGaWVsZHNGcm9tVmFsdWVzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpcnR5RmllbGRzRnJvbVZhbHVlc1trZXldID0gIWRlZXBFcXVhbChkYXRhW2tleV0sIGZvcm1WYWx1ZXNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpcnR5RmllbGRzRnJvbVZhbHVlcztcbn1cbnZhciBnZXREaXJ0eUZpZWxkcyA9IChkZWZhdWx0VmFsdWVzLCBmb3JtVmFsdWVzKSA9PiBnZXREaXJ0eUZpZWxkc0Zyb21EZWZhdWx0VmFsdWVzKGRlZmF1bHRWYWx1ZXMsIGZvcm1WYWx1ZXMsIG1hcmtGaWVsZHNEaXJ0eShmb3JtVmFsdWVzKSk7XG5cbnZhciBnZXRGaWVsZFZhbHVlQXMgPSAodmFsdWUsIHsgdmFsdWVBc051bWJlciwgdmFsdWVBc0RhdGUsIHNldFZhbHVlQXMgfSkgPT4gaXNVbmRlZmluZWQodmFsdWUpXG4gICAgPyB2YWx1ZVxuICAgIDogdmFsdWVBc051bWJlclxuICAgICAgICA/IHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgPyBOYU5cbiAgICAgICAgICAgIDogdmFsdWVcbiAgICAgICAgICAgICAgICA/ICt2YWx1ZVxuICAgICAgICAgICAgICAgIDogdmFsdWVcbiAgICAgICAgOiB2YWx1ZUFzRGF0ZSAmJiBpc1N0cmluZyh2YWx1ZSlcbiAgICAgICAgICAgID8gbmV3IERhdGUodmFsdWUpXG4gICAgICAgICAgICA6IHNldFZhbHVlQXNcbiAgICAgICAgICAgICAgICA/IHNldFZhbHVlQXModmFsdWUpXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcblxuZnVuY3Rpb24gZ2V0RmllbGRWYWx1ZShfZikge1xuICAgIGNvbnN0IHJlZiA9IF9mLnJlZjtcbiAgICBpZiAoX2YucmVmcyA/IF9mLnJlZnMuZXZlcnkoKHJlZikgPT4gcmVmLmRpc2FibGVkKSA6IHJlZi5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0ZpbGVJbnB1dChyZWYpKSB7XG4gICAgICAgIHJldHVybiByZWYuZmlsZXM7XG4gICAgfVxuICAgIGlmIChpc1JhZGlvSW5wdXQocmVmKSkge1xuICAgICAgICByZXR1cm4gZ2V0UmFkaW9WYWx1ZShfZi5yZWZzKS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzTXVsdGlwbGVTZWxlY3QocmVmKSkge1xuICAgICAgICByZXR1cm4gWy4uLnJlZi5zZWxlY3RlZE9wdGlvbnNdLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChpc0NoZWNrQm94SW5wdXQocmVmKSkge1xuICAgICAgICByZXR1cm4gZ2V0Q2hlY2tib3hWYWx1ZShfZi5yZWZzKS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldEZpZWxkVmFsdWVBcyhpc1VuZGVmaW5lZChyZWYudmFsdWUpID8gX2YucmVmLnZhbHVlIDogcmVmLnZhbHVlLCBfZik7XG59XG5cbnZhciBnZXRSZXNvbHZlck9wdGlvbnMgPSAoZmllbGRzTmFtZXMsIF9maWVsZHMsIGNyaXRlcmlhTW9kZSwgc2hvdWxkVXNlTmF0aXZlVmFsaWRhdGlvbikgPT4ge1xuICAgIGNvbnN0IGZpZWxkcyA9IHt9O1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBmaWVsZHNOYW1lcykge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgZmllbGQgJiYgc2V0KGZpZWxkcywgbmFtZSwgZmllbGQuX2YpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjcml0ZXJpYU1vZGUsXG4gICAgICAgIG5hbWVzOiBbLi4uZmllbGRzTmFtZXNdLFxuICAgICAgICBmaWVsZHMsXG4gICAgICAgIHNob3VsZFVzZU5hdGl2ZVZhbGlkYXRpb24sXG4gICAgfTtcbn07XG5cbnZhciBnZXRSdWxlVmFsdWUgPSAocnVsZSkgPT4gaXNVbmRlZmluZWQocnVsZSlcbiAgICA/IHJ1bGVcbiAgICA6IGlzUmVnZXgocnVsZSlcbiAgICAgICAgPyBydWxlLnNvdXJjZVxuICAgICAgICA6IGlzT2JqZWN0KHJ1bGUpXG4gICAgICAgICAgICA/IGlzUmVnZXgocnVsZS52YWx1ZSlcbiAgICAgICAgICAgICAgICA/IHJ1bGUudmFsdWUuc291cmNlXG4gICAgICAgICAgICAgICAgOiBydWxlLnZhbHVlXG4gICAgICAgICAgICA6IHJ1bGU7XG5cbmNvbnN0IEFTWU5DX0ZVTkNUSU9OID0gJ0FzeW5jRnVuY3Rpb24nO1xudmFyIGhhc1Byb21pc2VWYWxpZGF0aW9uID0gKGZpZWxkUmVmZXJlbmNlKSA9PiAhIWZpZWxkUmVmZXJlbmNlICYmXG4gICAgISFmaWVsZFJlZmVyZW5jZS52YWxpZGF0ZSAmJlxuICAgICEhKChpc0Z1bmN0aW9uKGZpZWxkUmVmZXJlbmNlLnZhbGlkYXRlKSAmJlxuICAgICAgICBmaWVsZFJlZmVyZW5jZS52YWxpZGF0ZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBBU1lOQ19GVU5DVElPTikgfHxcbiAgICAgICAgKGlzT2JqZWN0KGZpZWxkUmVmZXJlbmNlLnZhbGlkYXRlKSAmJlxuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhmaWVsZFJlZmVyZW5jZS52YWxpZGF0ZSkuZmluZCgodmFsaWRhdGVGdW5jdGlvbikgPT4gdmFsaWRhdGVGdW5jdGlvbi5jb25zdHJ1Y3Rvci5uYW1lID09PSBBU1lOQ19GVU5DVElPTikpKTtcblxudmFyIGhhc1ZhbGlkYXRpb24gPSAob3B0aW9ucykgPT4gb3B0aW9ucy5tb3VudCAmJlxuICAgIChvcHRpb25zLnJlcXVpcmVkIHx8XG4gICAgICAgIG9wdGlvbnMubWluIHx8XG4gICAgICAgIG9wdGlvbnMubWF4IHx8XG4gICAgICAgIG9wdGlvbnMubWF4TGVuZ3RoIHx8XG4gICAgICAgIG9wdGlvbnMubWluTGVuZ3RoIHx8XG4gICAgICAgIG9wdGlvbnMucGF0dGVybiB8fFxuICAgICAgICBvcHRpb25zLnZhbGlkYXRlKTtcblxuZnVuY3Rpb24gc2NoZW1hRXJyb3JMb29rdXAoZXJyb3JzLCBfZmllbGRzLCBuYW1lKSB7XG4gICAgY29uc3QgZXJyb3IgPSBnZXQoZXJyb3JzLCBuYW1lKTtcbiAgICBpZiAoZXJyb3IgfHwgaXNLZXkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgbmFtZXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBuYW1lcy5qb2luKCcuJyk7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KF9maWVsZHMsIGZpZWxkTmFtZSk7XG4gICAgICAgIGNvbnN0IGZvdW5kRXJyb3IgPSBnZXQoZXJyb3JzLCBmaWVsZE5hbWUpO1xuICAgICAgICBpZiAoZmllbGQgJiYgIUFycmF5LmlzQXJyYXkoZmllbGQpICYmIG5hbWUgIT09IGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbmFtZSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3VuZEVycm9yICYmIGZvdW5kRXJyb3IudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZvdW5kRXJyb3IsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgIH07XG59XG5cbnZhciBza2lwVmFsaWRhdGlvbiA9IChpc0JsdXJFdmVudCwgaXNUb3VjaGVkLCBpc1N1Ym1pdHRlZCwgcmVWYWxpZGF0ZU1vZGUsIG1vZGUpID0+IHtcbiAgICBpZiAobW9kZS5pc09uQWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzU3VibWl0dGVkICYmIG1vZGUuaXNPblRvdWNoKSB7XG4gICAgICAgIHJldHVybiAhKGlzVG91Y2hlZCB8fCBpc0JsdXJFdmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU3VibWl0dGVkID8gcmVWYWxpZGF0ZU1vZGUuaXNPbkJsdXIgOiBtb2RlLmlzT25CbHVyKSB7XG4gICAgICAgIHJldHVybiAhaXNCbHVyRXZlbnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU3VibWl0dGVkID8gcmVWYWxpZGF0ZU1vZGUuaXNPbkNoYW5nZSA6IG1vZGUuaXNPbkNoYW5nZSkge1xuICAgICAgICByZXR1cm4gaXNCbHVyRXZlbnQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcblxudmFyIHVuc2V0RW1wdHlBcnJheSA9IChyZWYsIG5hbWUpID0+ICFjb21wYWN0KGdldChyZWYsIG5hbWUpKS5sZW5ndGggJiYgdW5zZXQocmVmLCBuYW1lKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbW9kZTogVkFMSURBVElPTl9NT0RFLm9uU3VibWl0LFxuICAgIHJlVmFsaWRhdGVNb2RlOiBWQUxJREFUSU9OX01PREUub25DaGFuZ2UsXG4gICAgc2hvdWxkRm9jdXNFcnJvcjogdHJ1ZSxcbn07XG5mdW5jdGlvbiBjcmVhdGVGb3JtQ29udHJvbChwcm9wcyA9IHt9KSB7XG4gICAgbGV0IF9vcHRpb25zID0ge1xuICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgfTtcbiAgICBsZXQgX2Zvcm1TdGF0ZSA9IHtcbiAgICAgICAgc3VibWl0Q291bnQ6IDAsXG4gICAgICAgIGlzRGlydHk6IGZhbHNlLFxuICAgICAgICBpc0xvYWRpbmc6IGlzRnVuY3Rpb24oX29wdGlvbnMuZGVmYXVsdFZhbHVlcyksXG4gICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2UsXG4gICAgICAgIGlzU3VibWl0dGVkOiBmYWxzZSxcbiAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgICAgaXNTdWJtaXRTdWNjZXNzZnVsOiBmYWxzZSxcbiAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgIHRvdWNoZWRGaWVsZHM6IHt9LFxuICAgICAgICBkaXJ0eUZpZWxkczoge30sXG4gICAgICAgIHZhbGlkYXRpbmdGaWVsZHM6IHt9LFxuICAgICAgICBlcnJvcnM6IF9vcHRpb25zLmVycm9ycyB8fCB7fSxcbiAgICAgICAgZGlzYWJsZWQ6IF9vcHRpb25zLmRpc2FibGVkIHx8IGZhbHNlLFxuICAgIH07XG4gICAgbGV0IF9maWVsZHMgPSB7fTtcbiAgICBsZXQgX2RlZmF1bHRWYWx1ZXMgPSBpc09iamVjdChfb3B0aW9ucy5kZWZhdWx0VmFsdWVzKSB8fCBpc09iamVjdChfb3B0aW9ucy52YWx1ZXMpXG4gICAgICAgID8gY2xvbmVPYmplY3QoX29wdGlvbnMuZGVmYXVsdFZhbHVlcyB8fCBfb3B0aW9ucy52YWx1ZXMpIHx8IHt9XG4gICAgICAgIDoge307XG4gICAgbGV0IF9mb3JtVmFsdWVzID0gX29wdGlvbnMuc2hvdWxkVW5yZWdpc3RlclxuICAgICAgICA/IHt9XG4gICAgICAgIDogY2xvbmVPYmplY3QoX2RlZmF1bHRWYWx1ZXMpO1xuICAgIGxldCBfc3RhdGUgPSB7XG4gICAgICAgIGFjdGlvbjogZmFsc2UsXG4gICAgICAgIG1vdW50OiBmYWxzZSxcbiAgICAgICAgd2F0Y2g6IGZhbHNlLFxuICAgIH07XG4gICAgbGV0IF9uYW1lcyA9IHtcbiAgICAgICAgbW91bnQ6IG5ldyBTZXQoKSxcbiAgICAgICAgdW5Nb3VudDogbmV3IFNldCgpLFxuICAgICAgICBhcnJheTogbmV3IFNldCgpLFxuICAgICAgICB3YXRjaDogbmV3IFNldCgpLFxuICAgIH07XG4gICAgbGV0IGRlbGF5RXJyb3JDYWxsYmFjaztcbiAgICBsZXQgdGltZXIgPSAwO1xuICAgIGNvbnN0IF9wcm94eUZvcm1TdGF0ZSA9IHtcbiAgICAgICAgaXNEaXJ0eTogZmFsc2UsXG4gICAgICAgIGRpcnR5RmllbGRzOiBmYWxzZSxcbiAgICAgICAgdmFsaWRhdGluZ0ZpZWxkczogZmFsc2UsXG4gICAgICAgIHRvdWNoZWRGaWVsZHM6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgICAgZXJyb3JzOiBmYWxzZSxcbiAgICB9O1xuICAgIGNvbnN0IF9zdWJqZWN0cyA9IHtcbiAgICAgICAgdmFsdWVzOiBjcmVhdGVTdWJqZWN0KCksXG4gICAgICAgIGFycmF5OiBjcmVhdGVTdWJqZWN0KCksXG4gICAgICAgIHN0YXRlOiBjcmVhdGVTdWJqZWN0KCksXG4gICAgfTtcbiAgICBjb25zdCB2YWxpZGF0aW9uTW9kZUJlZm9yZVN1Ym1pdCA9IGdldFZhbGlkYXRpb25Nb2Rlcyhfb3B0aW9ucy5tb2RlKTtcbiAgICBjb25zdCB2YWxpZGF0aW9uTW9kZUFmdGVyU3VibWl0ID0gZ2V0VmFsaWRhdGlvbk1vZGVzKF9vcHRpb25zLnJlVmFsaWRhdGVNb2RlKTtcbiAgICBjb25zdCBzaG91bGREaXNwbGF5QWxsQXNzb2NpYXRlZEVycm9ycyA9IF9vcHRpb25zLmNyaXRlcmlhTW9kZSA9PT0gVkFMSURBVElPTl9NT0RFLmFsbDtcbiAgICBjb25zdCBkZWJvdW5jZSA9IChjYWxsYmFjaykgPT4gKHdhaXQpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCB3YWl0KTtcbiAgICB9O1xuICAgIGNvbnN0IF91cGRhdGVWYWxpZCA9IGFzeW5jIChzaG91bGRVcGRhdGVWYWxpZCkgPT4ge1xuICAgICAgICBpZiAoIV9vcHRpb25zLmRpc2FibGVkICYmIChfcHJveHlGb3JtU3RhdGUuaXNWYWxpZCB8fCBzaG91bGRVcGRhdGVWYWxpZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBfb3B0aW9ucy5yZXNvbHZlclxuICAgICAgICAgICAgICAgID8gaXNFbXB0eU9iamVjdCgoYXdhaXQgX2V4ZWN1dGVTY2hlbWEoKSkuZXJyb3JzKVxuICAgICAgICAgICAgICAgIDogYXdhaXQgZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uKF9maWVsZHMsIHRydWUpO1xuICAgICAgICAgICAgaWYgKGlzVmFsaWQgIT09IF9mb3JtU3RhdGUuaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgX3VwZGF0ZUlzVmFsaWRhdGluZyA9IChuYW1lcywgaXNWYWxpZGF0aW5nKSA9PiB7XG4gICAgICAgIGlmICghX29wdGlvbnMuZGlzYWJsZWQgJiZcbiAgICAgICAgICAgIChfcHJveHlGb3JtU3RhdGUuaXNWYWxpZGF0aW5nIHx8IF9wcm94eUZvcm1TdGF0ZS52YWxpZGF0aW5nRmllbGRzKSkge1xuICAgICAgICAgICAgKG5hbWVzIHx8IEFycmF5LmZyb20oX25hbWVzLm1vdW50KSkuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWRhdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZXQoX2Zvcm1TdGF0ZS52YWxpZGF0aW5nRmllbGRzLCBuYW1lLCBpc1ZhbGlkYXRpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuc2V0KF9mb3JtU3RhdGUudmFsaWRhdGluZ0ZpZWxkcywgbmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGluZ0ZpZWxkczogX2Zvcm1TdGF0ZS52YWxpZGF0aW5nRmllbGRzLFxuICAgICAgICAgICAgICAgIGlzVmFsaWRhdGluZzogIWlzRW1wdHlPYmplY3QoX2Zvcm1TdGF0ZS52YWxpZGF0aW5nRmllbGRzKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBfdXBkYXRlRmllbGRBcnJheSA9IChuYW1lLCB2YWx1ZXMgPSBbXSwgbWV0aG9kLCBhcmdzLCBzaG91bGRTZXRWYWx1ZXMgPSB0cnVlLCBzaG91bGRVcGRhdGVGaWVsZHNBbmRTdGF0ZSA9IHRydWUpID0+IHtcbiAgICAgICAgaWYgKGFyZ3MgJiYgbWV0aG9kICYmICFfb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgX3N0YXRlLmFjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlRmllbGRzQW5kU3RhdGUgJiYgQXJyYXkuaXNBcnJheShnZXQoX2ZpZWxkcywgbmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZXMgPSBtZXRob2QoZ2V0KF9maWVsZHMsIG5hbWUpLCBhcmdzLmFyZ0EsIGFyZ3MuYXJnQik7XG4gICAgICAgICAgICAgICAgc2hvdWxkU2V0VmFsdWVzICYmIHNldChfZmllbGRzLCBuYW1lLCBmaWVsZFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlRmllbGRzQW5kU3RhdGUgJiZcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGdldChfZm9ybVN0YXRlLmVycm9ycywgbmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gbWV0aG9kKGdldChfZm9ybVN0YXRlLmVycm9ycywgbmFtZSksIGFyZ3MuYXJnQSwgYXJncy5hcmdCKTtcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRWYWx1ZXMgJiYgc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lLCBlcnJvcnMpO1xuICAgICAgICAgICAgICAgIHVuc2V0RW1wdHlBcnJheShfZm9ybVN0YXRlLmVycm9ycywgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3Byb3h5Rm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMgJiZcbiAgICAgICAgICAgICAgICBzaG91bGRVcGRhdGVGaWVsZHNBbmRTdGF0ZSAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZ2V0KF9mb3JtU3RhdGUudG91Y2hlZEZpZWxkcywgbmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG91Y2hlZEZpZWxkcyA9IG1ldGhvZChnZXQoX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzLCBuYW1lKSwgYXJncy5hcmdBLCBhcmdzLmFyZ0IpO1xuICAgICAgICAgICAgICAgIHNob3VsZFNldFZhbHVlcyAmJiBzZXQoX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzLCBuYW1lLCB0b3VjaGVkRmllbGRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfcHJveHlGb3JtU3RhdGUuZGlydHlGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICBfZm9ybVN0YXRlLmRpcnR5RmllbGRzID0gZ2V0RGlydHlGaWVsZHMoX2RlZmF1bHRWYWx1ZXMsIF9mb3JtVmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGlzRGlydHk6IF9nZXREaXJ0eShuYW1lLCB2YWx1ZXMpLFxuICAgICAgICAgICAgICAgIGRpcnR5RmllbGRzOiBfZm9ybVN0YXRlLmRpcnR5RmllbGRzLFxuICAgICAgICAgICAgICAgIGVycm9yczogX2Zvcm1TdGF0ZS5lcnJvcnMsXG4gICAgICAgICAgICAgICAgaXNWYWxpZDogX2Zvcm1TdGF0ZS5pc1ZhbGlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXQoX2Zvcm1WYWx1ZXMsIG5hbWUsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUVycm9ycyA9IChuYW1lLCBlcnJvcikgPT4ge1xuICAgICAgICBzZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUsIGVycm9yKTtcbiAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgZXJyb3JzOiBfZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBfc2V0RXJyb3JzID0gKGVycm9ycykgPT4ge1xuICAgICAgICBfZm9ybVN0YXRlLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgZXJyb3JzOiBfZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZVZhbGlkQW5kVmFsdWUgPSAobmFtZSwgc2hvdWxkU2tpcFNldFZhbHVlQXMsIHZhbHVlLCByZWYpID0+IHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZ2V0KF9mb3JtVmFsdWVzLCBuYW1lLCBpc1VuZGVmaW5lZCh2YWx1ZSkgPyBnZXQoX2RlZmF1bHRWYWx1ZXMsIG5hbWUpIDogdmFsdWUpO1xuICAgICAgICAgICAgaXNVbmRlZmluZWQoZGVmYXVsdFZhbHVlKSB8fFxuICAgICAgICAgICAgICAgIChyZWYgJiYgcmVmLmRlZmF1bHRDaGVja2VkKSB8fFxuICAgICAgICAgICAgICAgIHNob3VsZFNraXBTZXRWYWx1ZUFzXG4gICAgICAgICAgICAgICAgPyBzZXQoX2Zvcm1WYWx1ZXMsIG5hbWUsIHNob3VsZFNraXBTZXRWYWx1ZUFzID8gZGVmYXVsdFZhbHVlIDogZ2V0RmllbGRWYWx1ZShmaWVsZC5fZikpXG4gICAgICAgICAgICAgICAgOiBzZXRGaWVsZFZhbHVlKG5hbWUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICBfc3RhdGUubW91bnQgJiYgX3VwZGF0ZVZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZVRvdWNoQW5kRGlydHkgPSAobmFtZSwgZmllbGRWYWx1ZSwgaXNCbHVyRXZlbnQsIHNob3VsZERpcnR5LCBzaG91bGRSZW5kZXIpID0+IHtcbiAgICAgICAgbGV0IHNob3VsZFVwZGF0ZUZpZWxkID0gZmFsc2U7XG4gICAgICAgIGxldCBpc1ByZXZpb3VzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFfb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgY29uc3QgZGlzYWJsZWRGaWVsZCA9ICEhKGdldChfZmllbGRzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAgIGdldChfZmllbGRzLCBuYW1lKS5fZiAmJlxuICAgICAgICAgICAgICAgIGdldChfZmllbGRzLCBuYW1lKS5fZi5kaXNhYmxlZCk7XG4gICAgICAgICAgICBpZiAoIWlzQmx1ckV2ZW50IHx8IHNob3VsZERpcnR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKF9wcm94eUZvcm1TdGF0ZS5pc0RpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlzUHJldmlvdXNEaXJ0eSA9IF9mb3JtU3RhdGUuaXNEaXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgX2Zvcm1TdGF0ZS5pc0RpcnR5ID0gb3V0cHV0LmlzRGlydHkgPSBfZ2V0RGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlRmllbGQgPSBpc1ByZXZpb3VzRGlydHkgIT09IG91dHB1dC5pc0RpcnR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpc0N1cnJlbnRGaWVsZFByaXN0aW5lID0gZGlzYWJsZWRGaWVsZCB8fCBkZWVwRXF1YWwoZ2V0KF9kZWZhdWx0VmFsdWVzLCBuYW1lKSwgZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaXNQcmV2aW91c0RpcnR5ID0gISEoIWRpc2FibGVkRmllbGQgJiYgZ2V0KF9mb3JtU3RhdGUuZGlydHlGaWVsZHMsIG5hbWUpKTtcbiAgICAgICAgICAgICAgICBpc0N1cnJlbnRGaWVsZFByaXN0aW5lIHx8IGRpc2FibGVkRmllbGRcbiAgICAgICAgICAgICAgICAgICAgPyB1bnNldChfZm9ybVN0YXRlLmRpcnR5RmllbGRzLCBuYW1lKVxuICAgICAgICAgICAgICAgICAgICA6IHNldChfZm9ybVN0YXRlLmRpcnR5RmllbGRzLCBuYW1lLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBvdXRwdXQuZGlydHlGaWVsZHMgPSBfZm9ybVN0YXRlLmRpcnR5RmllbGRzO1xuICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZUZpZWxkID1cbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlRmllbGQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChfcHJveHlGb3JtU3RhdGUuZGlydHlGaWVsZHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ByZXZpb3VzRGlydHkgIT09ICFpc0N1cnJlbnRGaWVsZFByaXN0aW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0JsdXJFdmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUHJldmlvdXNGaWVsZFRvdWNoZWQgPSBnZXQoX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzUHJldmlvdXNGaWVsZFRvdWNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0KF9mb3JtU3RhdGUudG91Y2hlZEZpZWxkcywgbmFtZSwgaXNCbHVyRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQudG91Y2hlZEZpZWxkcyA9IF9mb3JtU3RhdGUudG91Y2hlZEZpZWxkcztcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlRmllbGQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlRmllbGQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX3Byb3h5Rm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmV2aW91c0ZpZWxkVG91Y2hlZCAhPT0gaXNCbHVyRXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZUZpZWxkICYmIHNob3VsZFJlbmRlciAmJiBfc3ViamVjdHMuc3RhdGUubmV4dChvdXRwdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaG91bGRVcGRhdGVGaWVsZCA/IG91dHB1dCA6IHt9O1xuICAgIH07XG4gICAgY29uc3Qgc2hvdWxkUmVuZGVyQnlFcnJvciA9IChuYW1lLCBpc1ZhbGlkLCBlcnJvciwgZmllbGRTdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBwcmV2aW91c0ZpZWxkRXJyb3IgPSBnZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpO1xuICAgICAgICBjb25zdCBzaG91bGRVcGRhdGVWYWxpZCA9IF9wcm94eUZvcm1TdGF0ZS5pc1ZhbGlkICYmXG4gICAgICAgICAgICBpc0Jvb2xlYW4oaXNWYWxpZCkgJiZcbiAgICAgICAgICAgIF9mb3JtU3RhdGUuaXNWYWxpZCAhPT0gaXNWYWxpZDtcbiAgICAgICAgaWYgKF9vcHRpb25zLmRlbGF5RXJyb3IgJiYgZXJyb3IpIHtcbiAgICAgICAgICAgIGRlbGF5RXJyb3JDYWxsYmFjayA9IGRlYm91bmNlKCgpID0+IHVwZGF0ZUVycm9ycyhuYW1lLCBlcnJvcikpO1xuICAgICAgICAgICAgZGVsYXlFcnJvckNhbGxiYWNrKF9vcHRpb25zLmRlbGF5RXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIGRlbGF5RXJyb3JDYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICAgID8gc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lLCBlcnJvcilcbiAgICAgICAgICAgICAgICA6IHVuc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGVycm9yID8gIWRlZXBFcXVhbChwcmV2aW91c0ZpZWxkRXJyb3IsIGVycm9yKSA6IHByZXZpb3VzRmllbGRFcnJvcikgfHxcbiAgICAgICAgICAgICFpc0VtcHR5T2JqZWN0KGZpZWxkU3RhdGUpIHx8XG4gICAgICAgICAgICBzaG91bGRVcGRhdGVWYWxpZCkge1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlZEZvcm1TdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAuLi5maWVsZFN0YXRlLFxuICAgICAgICAgICAgICAgIC4uLihzaG91bGRVcGRhdGVWYWxpZCAmJiBpc0Jvb2xlYW4oaXNWYWxpZCkgPyB7IGlzVmFsaWQgfSA6IHt9KSxcbiAgICAgICAgICAgICAgICBlcnJvcnM6IF9mb3JtU3RhdGUuZXJyb3JzLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX2Zvcm1TdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAuLi5fZm9ybVN0YXRlLFxuICAgICAgICAgICAgICAgIC4uLnVwZGF0ZWRGb3JtU3RhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQodXBkYXRlZEZvcm1TdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IF9leGVjdXRlU2NoZW1hID0gYXN5bmMgKG5hbWUpID0+IHtcbiAgICAgICAgX3VwZGF0ZUlzVmFsaWRhdGluZyhuYW1lLCB0cnVlKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgX29wdGlvbnMucmVzb2x2ZXIoX2Zvcm1WYWx1ZXMsIF9vcHRpb25zLmNvbnRleHQsIGdldFJlc29sdmVyT3B0aW9ucyhuYW1lIHx8IF9uYW1lcy5tb3VudCwgX2ZpZWxkcywgX29wdGlvbnMuY3JpdGVyaWFNb2RlLCBfb3B0aW9ucy5zaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uKSk7XG4gICAgICAgIF91cGRhdGVJc1ZhbGlkYXRpbmcobmFtZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBjb25zdCBleGVjdXRlU2NoZW1hQW5kVXBkYXRlU3RhdGUgPSBhc3luYyAobmFtZXMpID0+IHtcbiAgICAgICAgY29uc3QgeyBlcnJvcnMgfSA9IGF3YWl0IF9leGVjdXRlU2NoZW1hKG5hbWVzKTtcbiAgICAgICAgaWYgKG5hbWVzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGdldChlcnJvcnMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICAgICAgID8gc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lLCBlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgOiB1bnNldChfZm9ybVN0YXRlLmVycm9ycywgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfZm9ybVN0YXRlLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH07XG4gICAgY29uc3QgZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uID0gYXN5bmMgKGZpZWxkcywgc2hvdWxkT25seUNoZWNrVmFsaWQsIGNvbnRleHQgPSB7XG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgIH0pID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGZpZWxkcykge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNbbmFtZV07XG4gICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IF9mLCAuLi5maWVsZFZhbHVlIH0gPSBmaWVsZDtcbiAgICAgICAgICAgICAgICBpZiAoX2YpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNGaWVsZEFycmF5Um9vdCA9IF9uYW1lcy5hcnJheS5oYXMoX2YubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzUHJvbWlzZUZ1bmN0aW9uID0gZmllbGQuX2YgJiYgaGFzUHJvbWlzZVZhbGlkYXRpb24oZmllbGQuX2YpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcm9taXNlRnVuY3Rpb24gJiYgX3Byb3h5Rm9ybVN0YXRlLnZhbGlkYXRpbmdGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF91cGRhdGVJc1ZhbGlkYXRpbmcoW25hbWVdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZEVycm9yID0gYXdhaXQgdmFsaWRhdGVGaWVsZChmaWVsZCwgX2Zvcm1WYWx1ZXMsIHNob3VsZERpc3BsYXlBbGxBc3NvY2lhdGVkRXJyb3JzLCBfb3B0aW9ucy5zaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uICYmICFzaG91bGRPbmx5Q2hlY2tWYWxpZCwgaXNGaWVsZEFycmF5Um9vdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1Byb21pc2VGdW5jdGlvbiAmJiBfcHJveHlGb3JtU3RhdGUudmFsaWRhdGluZ0ZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZUlzVmFsaWRhdGluZyhbbmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZEVycm9yW19mLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkT25seUNoZWNrVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAhc2hvdWxkT25seUNoZWNrVmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChnZXQoZmllbGRFcnJvciwgX2YubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGlzRmllbGRBcnJheVJvb3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB1cGRhdGVGaWVsZEFycmF5Um9vdEVycm9yKF9mb3JtU3RhdGUuZXJyb3JzLCBmaWVsZEVycm9yLCBfZi5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHNldChfZm9ybVN0YXRlLmVycm9ycywgX2YubmFtZSwgZmllbGRFcnJvcltfZi5uYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBfZi5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICFpc0VtcHR5T2JqZWN0KGZpZWxkVmFsdWUpICYmXG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCBleGVjdXRlQnVpbHRJblZhbGlkYXRpb24oZmllbGRWYWx1ZSwgc2hvdWxkT25seUNoZWNrVmFsaWQsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dC52YWxpZDtcbiAgICB9O1xuICAgIGNvbnN0IF9yZW1vdmVVbm1vdW50ZWQgPSAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBfbmFtZXMudW5Nb3VudCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgICAgICBmaWVsZCAmJlxuICAgICAgICAgICAgICAgIChmaWVsZC5fZi5yZWZzXG4gICAgICAgICAgICAgICAgICAgID8gZmllbGQuX2YucmVmcy5ldmVyeSgocmVmKSA9PiAhbGl2ZShyZWYpKVxuICAgICAgICAgICAgICAgICAgICA6ICFsaXZlKGZpZWxkLl9mLnJlZikpICYmXG4gICAgICAgICAgICAgICAgdW5yZWdpc3RlcihuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBfbmFtZXMudW5Nb3VudCA9IG5ldyBTZXQoKTtcbiAgICB9O1xuICAgIGNvbnN0IF9nZXREaXJ0eSA9IChuYW1lLCBkYXRhKSA9PiAhX29wdGlvbnMuZGlzYWJsZWQgJiZcbiAgICAgICAgKG5hbWUgJiYgZGF0YSAmJiBzZXQoX2Zvcm1WYWx1ZXMsIG5hbWUsIGRhdGEpLFxuICAgICAgICAgICAgIWRlZXBFcXVhbChnZXRWYWx1ZXMoKSwgX2RlZmF1bHRWYWx1ZXMpKTtcbiAgICBjb25zdCBfZ2V0V2F0Y2ggPSAobmFtZXMsIGRlZmF1bHRWYWx1ZSwgaXNHbG9iYWwpID0+IGdlbmVyYXRlV2F0Y2hPdXRwdXQobmFtZXMsIF9uYW1lcywge1xuICAgICAgICAuLi4oX3N0YXRlLm1vdW50XG4gICAgICAgICAgICA/IF9mb3JtVmFsdWVzXG4gICAgICAgICAgICA6IGlzVW5kZWZpbmVkKGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgICAgICAgICA/IF9kZWZhdWx0VmFsdWVzXG4gICAgICAgICAgICAgICAgOiBpc1N0cmluZyhuYW1lcylcbiAgICAgICAgICAgICAgICAgICAgPyB7IFtuYW1lc106IGRlZmF1bHRWYWx1ZSB9XG4gICAgICAgICAgICAgICAgICAgIDogZGVmYXVsdFZhbHVlKSxcbiAgICB9LCBpc0dsb2JhbCwgZGVmYXVsdFZhbHVlKTtcbiAgICBjb25zdCBfZ2V0RmllbGRBcnJheSA9IChuYW1lKSA9PiBjb21wYWN0KGdldChfc3RhdGUubW91bnQgPyBfZm9ybVZhbHVlcyA6IF9kZWZhdWx0VmFsdWVzLCBuYW1lLCBfb3B0aW9ucy5zaG91bGRVbnJlZ2lzdGVyID8gZ2V0KF9kZWZhdWx0VmFsdWVzLCBuYW1lLCBbXSkgOiBbXSkpO1xuICAgIGNvbnN0IHNldEZpZWxkVmFsdWUgPSAobmFtZSwgdmFsdWUsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgbGV0IGZpZWxkVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZFJlZmVyZW5jZSA9IGZpZWxkLl9mO1xuICAgICAgICAgICAgaWYgKGZpZWxkUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgIWZpZWxkUmVmZXJlbmNlLmRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgICAgIHNldChfZm9ybVZhbHVlcywgbmFtZSwgZ2V0RmllbGRWYWx1ZUFzKHZhbHVlLCBmaWVsZFJlZmVyZW5jZSkpO1xuICAgICAgICAgICAgICAgIGZpZWxkVmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICBpc0hUTUxFbGVtZW50KGZpZWxkUmVmZXJlbmNlLnJlZikgJiYgaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChpc011bHRpcGxlU2VsZWN0KGZpZWxkUmVmZXJlbmNlLnJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgWy4uLmZpZWxkUmVmZXJlbmNlLnJlZi5vcHRpb25zXS5mb3JFYWNoKChvcHRpb25SZWYpID0+IChvcHRpb25SZWYuc2VsZWN0ZWQgPSBmaWVsZFZhbHVlLmluY2x1ZGVzKG9wdGlvblJlZi52YWx1ZSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmllbGRSZWZlcmVuY2UucmVmcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGVja0JveElucHV0KGZpZWxkUmVmZXJlbmNlLnJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkUmVmZXJlbmNlLnJlZnMubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmllbGRSZWZlcmVuY2UucmVmcy5mb3JFYWNoKChjaGVja2JveFJlZikgPT4gKCFjaGVja2JveFJlZi5kZWZhdWx0Q2hlY2tlZCB8fCAhY2hlY2tib3hSZWYuZGlzYWJsZWQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjaGVja2JveFJlZi5jaGVja2VkID0gQXJyYXkuaXNBcnJheShmaWVsZFZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAhIWZpZWxkVmFsdWUuZmluZCgoZGF0YSkgPT4gZGF0YSA9PT0gY2hlY2tib3hSZWYudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZpZWxkVmFsdWUgPT09IGNoZWNrYm94UmVmLnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZpZWxkUmVmZXJlbmNlLnJlZnNbMF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZpZWxkUmVmZXJlbmNlLnJlZnNbMF0uY2hlY2tlZCA9ICEhZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFJlZmVyZW5jZS5yZWZzLmZvckVhY2goKHJhZGlvUmVmKSA9PiAocmFkaW9SZWYuY2hlY2tlZCA9IHJhZGlvUmVmLnZhbHVlID09PSBmaWVsZFZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNGaWxlSW5wdXQoZmllbGRSZWZlcmVuY2UucmVmKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZFJlZmVyZW5jZS5yZWYudmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkUmVmZXJlbmNlLnJlZi52YWx1ZSA9IGZpZWxkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmllbGRSZWZlcmVuY2UucmVmLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdWJqZWN0cy52YWx1ZXMubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHsgLi4uX2Zvcm1WYWx1ZXMgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIChvcHRpb25zLnNob3VsZERpcnR5IHx8IG9wdGlvbnMuc2hvdWxkVG91Y2gpICYmXG4gICAgICAgICAgICB1cGRhdGVUb3VjaEFuZERpcnR5KG5hbWUsIGZpZWxkVmFsdWUsIG9wdGlvbnMuc2hvdWxkVG91Y2gsIG9wdGlvbnMuc2hvdWxkRGlydHksIHRydWUpO1xuICAgICAgICBvcHRpb25zLnNob3VsZFZhbGlkYXRlICYmIHRyaWdnZXIobmFtZSk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRWYWx1ZXMgPSAobmFtZSwgdmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZEtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IHZhbHVlW2ZpZWxkS2V5XTtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGAke25hbWV9LiR7ZmllbGRLZXl9YDtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KF9maWVsZHMsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAoX25hbWVzLmFycmF5LmhhcyhuYW1lKSB8fFxuICAgICAgICAgICAgICAgIGlzT2JqZWN0KGZpZWxkVmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgKGZpZWxkICYmICFmaWVsZC5fZikpICYmXG4gICAgICAgICAgICAgICAgIWlzRGF0ZU9iamVjdChmaWVsZFZhbHVlKVxuICAgICAgICAgICAgICAgID8gc2V0VmFsdWVzKGZpZWxkTmFtZSwgZmllbGRWYWx1ZSwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICA6IHNldEZpZWxkVmFsdWUoZmllbGROYW1lLCBmaWVsZFZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0VmFsdWUgPSAobmFtZSwgdmFsdWUsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgY29uc3QgaXNGaWVsZEFycmF5ID0gX25hbWVzLmFycmF5LmhhcyhuYW1lKTtcbiAgICAgICAgY29uc3QgY2xvbmVWYWx1ZSA9IGNsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgc2V0KF9mb3JtVmFsdWVzLCBuYW1lLCBjbG9uZVZhbHVlKTtcbiAgICAgICAgaWYgKGlzRmllbGRBcnJheSkge1xuICAgICAgICAgICAgX3N1YmplY3RzLmFycmF5Lm5leHQoe1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB7IC4uLl9mb3JtVmFsdWVzIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICgoX3Byb3h5Rm9ybVN0YXRlLmlzRGlydHkgfHwgX3Byb3h5Rm9ybVN0YXRlLmRpcnR5RmllbGRzKSAmJlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2hvdWxkRGlydHkpIHtcbiAgICAgICAgICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRpcnR5RmllbGRzOiBnZXREaXJ0eUZpZWxkcyhfZGVmYXVsdFZhbHVlcywgX2Zvcm1WYWx1ZXMpLFxuICAgICAgICAgICAgICAgICAgICBpc0RpcnR5OiBfZ2V0RGlydHkobmFtZSwgY2xvbmVWYWx1ZSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmaWVsZCAmJiAhZmllbGQuX2YgJiYgIWlzTnVsbE9yVW5kZWZpbmVkKGNsb25lVmFsdWUpXG4gICAgICAgICAgICAgICAgPyBzZXRWYWx1ZXMobmFtZSwgY2xvbmVWYWx1ZSwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICA6IHNldEZpZWxkVmFsdWUobmFtZSwgY2xvbmVWYWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaXNXYXRjaGVkKG5hbWUsIF9uYW1lcykgJiYgX3N1YmplY3RzLnN0YXRlLm5leHQoeyAuLi5fZm9ybVN0YXRlIH0pO1xuICAgICAgICBfc3ViamVjdHMudmFsdWVzLm5leHQoe1xuICAgICAgICAgICAgbmFtZTogX3N0YXRlLm1vdW50ID8gbmFtZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbHVlczogeyAuLi5fZm9ybVZhbHVlcyB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IG9uQ2hhbmdlID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIF9zdGF0ZS5tb3VudCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgbGV0IG5hbWUgPSB0YXJnZXQubmFtZTtcbiAgICAgICAgbGV0IGlzRmllbGRWYWx1ZVVwZGF0ZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgY29uc3QgZ2V0Q3VycmVudEZpZWxkVmFsdWUgPSAoKSA9PiB0YXJnZXQudHlwZSA/IGdldEZpZWxkVmFsdWUoZmllbGQuX2YpIDogZ2V0RXZlbnRWYWx1ZShldmVudCk7XG4gICAgICAgIGNvbnN0IF91cGRhdGVJc0ZpZWxkVmFsdWVVcGRhdGVkID0gKGZpZWxkVmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlzRmllbGRWYWx1ZVVwZGF0ZWQgPVxuICAgICAgICAgICAgICAgIE51bWJlci5pc05hTihmaWVsZFZhbHVlKSB8fFxuICAgICAgICAgICAgICAgICAgICAoaXNEYXRlT2JqZWN0KGZpZWxkVmFsdWUpICYmIGlzTmFOKGZpZWxkVmFsdWUuZ2V0VGltZSgpKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgZGVlcEVxdWFsKGZpZWxkVmFsdWUsIGdldChfZm9ybVZhbHVlcywgbmFtZSwgZmllbGRWYWx1ZSkpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIGxldCBlcnJvcjtcbiAgICAgICAgICAgIGxldCBpc1ZhbGlkO1xuICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGdldEN1cnJlbnRGaWVsZFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBpc0JsdXJFdmVudCA9IGV2ZW50LnR5cGUgPT09IEVWRU5UUy5CTFVSIHx8IGV2ZW50LnR5cGUgPT09IEVWRU5UUy5GT0NVU19PVVQ7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRTa2lwVmFsaWRhdGlvbiA9ICghaGFzVmFsaWRhdGlvbihmaWVsZC5fZikgJiZcbiAgICAgICAgICAgICAgICAhX29wdGlvbnMucmVzb2x2ZXIgJiZcbiAgICAgICAgICAgICAgICAhZ2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAgICFmaWVsZC5fZi5kZXBzKSB8fFxuICAgICAgICAgICAgICAgIHNraXBWYWxpZGF0aW9uKGlzQmx1ckV2ZW50LCBnZXQoX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzLCBuYW1lKSwgX2Zvcm1TdGF0ZS5pc1N1Ym1pdHRlZCwgdmFsaWRhdGlvbk1vZGVBZnRlclN1Ym1pdCwgdmFsaWRhdGlvbk1vZGVCZWZvcmVTdWJtaXQpO1xuICAgICAgICAgICAgY29uc3Qgd2F0Y2hlZCA9IGlzV2F0Y2hlZChuYW1lLCBfbmFtZXMsIGlzQmx1ckV2ZW50KTtcbiAgICAgICAgICAgIHNldChfZm9ybVZhbHVlcywgbmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoaXNCbHVyRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5fZi5vbkJsdXIgJiYgZmllbGQuX2Yub25CbHVyKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBkZWxheUVycm9yQ2FsbGJhY2sgJiYgZGVsYXlFcnJvckNhbGxiYWNrKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQuX2Yub25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5fZi5vbkNoYW5nZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaWVsZFN0YXRlID0gdXBkYXRlVG91Y2hBbmREaXJ0eShuYW1lLCBmaWVsZFZhbHVlLCBpc0JsdXJFdmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkUmVuZGVyID0gIWlzRW1wdHlPYmplY3QoZmllbGRTdGF0ZSkgfHwgd2F0Y2hlZDtcbiAgICAgICAgICAgICFpc0JsdXJFdmVudCAmJlxuICAgICAgICAgICAgICAgIF9zdWJqZWN0cy52YWx1ZXMubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogeyAuLi5fZm9ybVZhbHVlcyB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNob3VsZFNraXBWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9wcm94eUZvcm1TdGF0ZS5pc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfb3B0aW9ucy5tb2RlID09PSAnb25CbHVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQmx1ckV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZVZhbGlkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdXBkYXRlVmFsaWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKHNob3VsZFJlbmRlciAmJlxuICAgICAgICAgICAgICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7IG5hbWUsIC4uLih3YXRjaGVkID8ge30gOiBmaWVsZFN0YXRlKSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAhaXNCbHVyRXZlbnQgJiYgd2F0Y2hlZCAmJiBfc3ViamVjdHMuc3RhdGUubmV4dCh7IC4uLl9mb3JtU3RhdGUgfSk7XG4gICAgICAgICAgICBpZiAoX29wdGlvbnMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gYXdhaXQgX2V4ZWN1dGVTY2hlbWEoW25hbWVdKTtcbiAgICAgICAgICAgICAgICBfdXBkYXRlSXNGaWVsZFZhbHVlVXBkYXRlZChmaWVsZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGaWVsZFZhbHVlVXBkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0Vycm9yTG9va3VwUmVzdWx0ID0gc2NoZW1hRXJyb3JMb29rdXAoX2Zvcm1TdGF0ZS5lcnJvcnMsIF9maWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvckxvb2t1cFJlc3VsdCA9IHNjaGVtYUVycm9yTG9va3VwKGVycm9ycywgX2ZpZWxkcywgcHJldmlvdXNFcnJvckxvb2t1cFJlc3VsdC5uYW1lIHx8IG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9yTG9va3VwUmVzdWx0LmVycm9yO1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gZXJyb3JMb29rdXBSZXN1bHQubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGlzRW1wdHlPYmplY3QoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdXBkYXRlSXNWYWxpZGF0aW5nKFtuYW1lXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSAoYXdhaXQgdmFsaWRhdGVGaWVsZChmaWVsZCwgX2Zvcm1WYWx1ZXMsIHNob3VsZERpc3BsYXlBbGxBc3NvY2lhdGVkRXJyb3JzLCBfb3B0aW9ucy5zaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uKSlbbmFtZV07XG4gICAgICAgICAgICAgICAgX3VwZGF0ZUlzVmFsaWRhdGluZyhbbmFtZV0pO1xuICAgICAgICAgICAgICAgIF91cGRhdGVJc0ZpZWxkVmFsdWVVcGRhdGVkKGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChpc0ZpZWxkVmFsdWVVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9wcm94eUZvcm1TdGF0ZS5pc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gYXdhaXQgZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uKF9maWVsZHMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRmllbGRWYWx1ZVVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5fZi5kZXBzICYmXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoZmllbGQuX2YuZGVwcyk7XG4gICAgICAgICAgICAgICAgc2hvdWxkUmVuZGVyQnlFcnJvcihuYW1lLCBpc1ZhbGlkLCBlcnJvciwgZmllbGRTdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IF9mb2N1c0lucHV0ID0gKHJlZiwga2V5KSA9PiB7XG4gICAgICAgIGlmIChnZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIGtleSkgJiYgcmVmLmZvY3VzKSB7XG4gICAgICAgICAgICByZWYuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9O1xuICAgIGNvbnN0IHRyaWdnZXIgPSBhc3luYyAobmFtZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgIGxldCBpc1ZhbGlkO1xuICAgICAgICBsZXQgdmFsaWRhdGlvblJlc3VsdDtcbiAgICAgICAgY29uc3QgZmllbGROYW1lcyA9IGNvbnZlcnRUb0FycmF5UGF5bG9hZChuYW1lKTtcbiAgICAgICAgaWYgKF9vcHRpb25zLnJlc29sdmVyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBhd2FpdCBleGVjdXRlU2NoZW1hQW5kVXBkYXRlU3RhdGUoaXNVbmRlZmluZWQobmFtZSkgPyBuYW1lIDogZmllbGROYW1lcyk7XG4gICAgICAgICAgICBpc1ZhbGlkID0gaXNFbXB0eU9iamVjdChlcnJvcnMpO1xuICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdCA9IG5hbWVcbiAgICAgICAgICAgICAgICA/ICFmaWVsZE5hbWVzLnNvbWUoKG5hbWUpID0+IGdldChlcnJvcnMsIG5hbWUpKVxuICAgICAgICAgICAgICAgIDogaXNWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0ID0gKGF3YWl0IFByb21pc2UuYWxsKGZpZWxkTmFtZXMubWFwKGFzeW5jIChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBmaWVsZE5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBleGVjdXRlQnVpbHRJblZhbGlkYXRpb24oZmllbGQgJiYgZmllbGQuX2YgPyB7IFtmaWVsZE5hbWVdOiBmaWVsZCB9IDogZmllbGQpO1xuICAgICAgICAgICAgfSkpKS5ldmVyeShCb29sZWFuKTtcbiAgICAgICAgICAgICEoIXZhbGlkYXRpb25SZXN1bHQgJiYgIV9mb3JtU3RhdGUuaXNWYWxpZCkgJiYgX3VwZGF0ZVZhbGlkKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0ID0gaXNWYWxpZCA9IGF3YWl0IGV4ZWN1dGVCdWlsdEluVmFsaWRhdGlvbihfZmllbGRzKTtcbiAgICAgICAgfVxuICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICAuLi4oIWlzU3RyaW5nKG5hbWUpIHx8XG4gICAgICAgICAgICAgICAgKF9wcm94eUZvcm1TdGF0ZS5pc1ZhbGlkICYmIGlzVmFsaWQgIT09IF9mb3JtU3RhdGUuaXNWYWxpZClcbiAgICAgICAgICAgICAgICA/IHt9XG4gICAgICAgICAgICAgICAgOiB7IG5hbWUgfSksXG4gICAgICAgICAgICAuLi4oX29wdGlvbnMucmVzb2x2ZXIgfHwgIW5hbWUgPyB7IGlzVmFsaWQgfSA6IHt9KSxcbiAgICAgICAgICAgIGVycm9yczogX2Zvcm1TdGF0ZS5lcnJvcnMsXG4gICAgICAgIH0pO1xuICAgICAgICBvcHRpb25zLnNob3VsZEZvY3VzICYmXG4gICAgICAgICAgICAhdmFsaWRhdGlvblJlc3VsdCAmJlxuICAgICAgICAgICAgaXRlcmF0ZUZpZWxkc0J5QWN0aW9uKF9maWVsZHMsIF9mb2N1c0lucHV0LCBuYW1lID8gZmllbGROYW1lcyA6IF9uYW1lcy5tb3VudCk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0aW9uUmVzdWx0O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VmFsdWVzID0gKGZpZWxkTmFtZXMpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgICAgICAgLi4uKF9zdGF0ZS5tb3VudCA/IF9mb3JtVmFsdWVzIDogX2RlZmF1bHRWYWx1ZXMpLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXNVbmRlZmluZWQoZmllbGROYW1lcylcbiAgICAgICAgICAgID8gdmFsdWVzXG4gICAgICAgICAgICA6IGlzU3RyaW5nKGZpZWxkTmFtZXMpXG4gICAgICAgICAgICAgICAgPyBnZXQodmFsdWVzLCBmaWVsZE5hbWVzKVxuICAgICAgICAgICAgICAgIDogZmllbGROYW1lcy5tYXAoKG5hbWUpID0+IGdldCh2YWx1ZXMsIG5hbWUpKTtcbiAgICB9O1xuICAgIGNvbnN0IGdldEZpZWxkU3RhdGUgPSAobmFtZSwgZm9ybVN0YXRlKSA9PiAoe1xuICAgICAgICBpbnZhbGlkOiAhIWdldCgoZm9ybVN0YXRlIHx8IF9mb3JtU3RhdGUpLmVycm9ycywgbmFtZSksXG4gICAgICAgIGlzRGlydHk6ICEhZ2V0KChmb3JtU3RhdGUgfHwgX2Zvcm1TdGF0ZSkuZGlydHlGaWVsZHMsIG5hbWUpLFxuICAgICAgICBlcnJvcjogZ2V0KChmb3JtU3RhdGUgfHwgX2Zvcm1TdGF0ZSkuZXJyb3JzLCBuYW1lKSxcbiAgICAgICAgaXNWYWxpZGF0aW5nOiAhIWdldChfZm9ybVN0YXRlLnZhbGlkYXRpbmdGaWVsZHMsIG5hbWUpLFxuICAgICAgICBpc1RvdWNoZWQ6ICEhZ2V0KChmb3JtU3RhdGUgfHwgX2Zvcm1TdGF0ZSkudG91Y2hlZEZpZWxkcywgbmFtZSksXG4gICAgfSk7XG4gICAgY29uc3QgY2xlYXJFcnJvcnMgPSAobmFtZSkgPT4ge1xuICAgICAgICBuYW1lICYmXG4gICAgICAgICAgICBjb252ZXJ0VG9BcnJheVBheWxvYWQobmFtZSkuZm9yRWFjaCgoaW5wdXROYW1lKSA9PiB1bnNldChfZm9ybVN0YXRlLmVycm9ycywgaW5wdXROYW1lKSk7XG4gICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgIGVycm9yczogbmFtZSA/IF9mb3JtU3RhdGUuZXJyb3JzIDoge30sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgc2V0RXJyb3IgPSAobmFtZSwgZXJyb3IsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgcmVmID0gKGdldChfZmllbGRzLCBuYW1lLCB7IF9mOiB7fSB9KS5fZiB8fCB7fSkucmVmO1xuICAgICAgICBjb25zdCBjdXJyZW50RXJyb3IgPSBnZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpIHx8IHt9O1xuICAgICAgICAvLyBEb24ndCBvdmVycmlkZSBleGlzdGluZyBlcnJvciBtZXNzYWdlcyBlbHNld2hlcmUgaW4gdGhlIG9iamVjdCB0cmVlLlxuICAgICAgICBjb25zdCB7IHJlZjogY3VycmVudFJlZiwgbWVzc2FnZSwgdHlwZSwgLi4ucmVzdE9mRXJyb3JUcmVlIH0gPSBjdXJyZW50RXJyb3I7XG4gICAgICAgIHNldChfZm9ybVN0YXRlLmVycm9ycywgbmFtZSwge1xuICAgICAgICAgICAgLi4ucmVzdE9mRXJyb3JUcmVlLFxuICAgICAgICAgICAgLi4uZXJyb3IsXG4gICAgICAgICAgICByZWYsXG4gICAgICAgIH0pO1xuICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZXJyb3JzOiBfZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLnNob3VsZEZvY3VzICYmIHJlZiAmJiByZWYuZm9jdXMgJiYgcmVmLmZvY3VzKCk7XG4gICAgfTtcbiAgICBjb25zdCB3YXRjaCA9IChuYW1lLCBkZWZhdWx0VmFsdWUpID0+IGlzRnVuY3Rpb24obmFtZSlcbiAgICAgICAgPyBfc3ViamVjdHMudmFsdWVzLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiAocGF5bG9hZCkgPT4gbmFtZShfZ2V0V2F0Y2godW5kZWZpbmVkLCBkZWZhdWx0VmFsdWUpLCBwYXlsb2FkKSxcbiAgICAgICAgfSlcbiAgICAgICAgOiBfZ2V0V2F0Y2gobmFtZSwgZGVmYXVsdFZhbHVlLCB0cnVlKTtcbiAgICBjb25zdCB1bnJlZ2lzdGVyID0gKG5hbWUsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkTmFtZSBvZiBuYW1lID8gY29udmVydFRvQXJyYXlQYXlsb2FkKG5hbWUpIDogX25hbWVzLm1vdW50KSB7XG4gICAgICAgICAgICBfbmFtZXMubW91bnQuZGVsZXRlKGZpZWxkTmFtZSk7XG4gICAgICAgICAgICBfbmFtZXMuYXJyYXkuZGVsZXRlKGZpZWxkTmFtZSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMua2VlcFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdW5zZXQoX2ZpZWxkcywgZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICB1bnNldChfZm9ybVZhbHVlcywgZmllbGROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICFvcHRpb25zLmtlZXBFcnJvciAmJiB1bnNldChfZm9ybVN0YXRlLmVycm9ycywgZmllbGROYW1lKTtcbiAgICAgICAgICAgICFvcHRpb25zLmtlZXBEaXJ0eSAmJiB1bnNldChfZm9ybVN0YXRlLmRpcnR5RmllbGRzLCBmaWVsZE5hbWUpO1xuICAgICAgICAgICAgIW9wdGlvbnMua2VlcFRvdWNoZWQgJiYgdW5zZXQoX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzLCBmaWVsZE5hbWUpO1xuICAgICAgICAgICAgIW9wdGlvbnMua2VlcElzVmFsaWRhdGluZyAmJlxuICAgICAgICAgICAgICAgIHVuc2V0KF9mb3JtU3RhdGUudmFsaWRhdGluZ0ZpZWxkcywgZmllbGROYW1lKTtcbiAgICAgICAgICAgICFfb3B0aW9ucy5zaG91bGRVbnJlZ2lzdGVyICYmXG4gICAgICAgICAgICAgICAgIW9wdGlvbnMua2VlcERlZmF1bHRWYWx1ZSAmJlxuICAgICAgICAgICAgICAgIHVuc2V0KF9kZWZhdWx0VmFsdWVzLCBmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIF9zdWJqZWN0cy52YWx1ZXMubmV4dCh7XG4gICAgICAgICAgICB2YWx1ZXM6IHsgLi4uX2Zvcm1WYWx1ZXMgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgIC4uLl9mb3JtU3RhdGUsXG4gICAgICAgICAgICAuLi4oIW9wdGlvbnMua2VlcERpcnR5ID8ge30gOiB7IGlzRGlydHk6IF9nZXREaXJ0eSgpIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgIW9wdGlvbnMua2VlcElzVmFsaWQgJiYgX3VwZGF0ZVZhbGlkKCk7XG4gICAgfTtcbiAgICBjb25zdCBfdXBkYXRlRGlzYWJsZWRGaWVsZCA9ICh7IGRpc2FibGVkLCBuYW1lLCBmaWVsZCwgZmllbGRzLCB2YWx1ZSwgfSkgPT4ge1xuICAgICAgICBpZiAoKGlzQm9vbGVhbihkaXNhYmxlZCkgJiYgX3N0YXRlLm1vdW50KSB8fCAhIWRpc2FibGVkKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFZhbHVlID0gZGlzYWJsZWRcbiAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIDogaXNVbmRlZmluZWQodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgID8gZ2V0RmllbGRWYWx1ZShmaWVsZCA/IGZpZWxkLl9mIDogZ2V0KGZpZWxkcywgbmFtZSkuX2YpXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWU7XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQgfHwgKCFkaXNhYmxlZCAmJiAhaXNVbmRlZmluZWQoaW5wdXRWYWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgc2V0KF9mb3JtVmFsdWVzLCBuYW1lLCBpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZVRvdWNoQW5kRGlydHkobmFtZSwgaW5wdXRWYWx1ZSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVnaXN0ZXIgPSAobmFtZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgIGxldCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgY29uc3QgZGlzYWJsZWRJc0RlZmluZWQgPSBpc0Jvb2xlYW4ob3B0aW9ucy5kaXNhYmxlZCkgfHwgaXNCb29sZWFuKF9vcHRpb25zLmRpc2FibGVkKTtcbiAgICAgICAgc2V0KF9maWVsZHMsIG5hbWUsIHtcbiAgICAgICAgICAgIC4uLihmaWVsZCB8fCB7fSksXG4gICAgICAgICAgICBfZjoge1xuICAgICAgICAgICAgICAgIC4uLihmaWVsZCAmJiBmaWVsZC5fZiA/IGZpZWxkLl9mIDogeyByZWY6IHsgbmFtZSB9IH0pLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgbW91bnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBfbmFtZXMubW91bnQuYWRkKG5hbWUpO1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIF91cGRhdGVEaXNhYmxlZEZpZWxkKHtcbiAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogaXNCb29sZWFuKG9wdGlvbnMuZGlzYWJsZWQpXG4gICAgICAgICAgICAgICAgICAgID8gb3B0aW9ucy5kaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICA6IF9vcHRpb25zLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG9wdGlvbnMudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZVZhbGlkQW5kVmFsdWUobmFtZSwgdHJ1ZSwgb3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLihkaXNhYmxlZElzRGVmaW5lZFxuICAgICAgICAgICAgICAgID8geyBkaXNhYmxlZDogb3B0aW9ucy5kaXNhYmxlZCB8fCBfb3B0aW9ucy5kaXNhYmxlZCB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICAuLi4oX29wdGlvbnMucHJvZ3Jlc3NpdmVcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICEhb3B0aW9ucy5yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgbWluOiBnZXRSdWxlVmFsdWUob3B0aW9ucy5taW4pLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IGdldFJ1bGVWYWx1ZShvcHRpb25zLm1heCksXG4gICAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogZ2V0UnVsZVZhbHVlKG9wdGlvbnMubWluTGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiBnZXRSdWxlVmFsdWUob3B0aW9ucy5tYXhMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBnZXRSdWxlVmFsdWUob3B0aW9ucy5wYXR0ZXJuKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgb25DaGFuZ2UsXG4gICAgICAgICAgICBvbkJsdXI6IG9uQ2hhbmdlLFxuICAgICAgICAgICAgcmVmOiAocmVmKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgICAgICAgICByZWdpc3RlcihuYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkUmVmID0gaXNVbmRlZmluZWQocmVmLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWYucXVlcnlTZWxlY3RvckFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcmVmLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LHNlbGVjdCx0ZXh0YXJlYScpWzBdIHx8IHJlZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVmXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlZjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFkaW9PckNoZWNrYm94ID0gaXNSYWRpb09yQ2hlY2tib3goZmllbGRSZWYpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZzID0gZmllbGQuX2YucmVmcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGlvT3JDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWZzLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uID09PSBmaWVsZFJlZilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZmllbGRSZWYgPT09IGZpZWxkLl9mLnJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldChfZmllbGRzLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkLl9mLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihyYWRpb09yQ2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVmcy5maWx0ZXIobGl2ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKEFycmF5LmlzQXJyYXkoZ2V0KF9kZWZhdWx0VmFsdWVzLCBuYW1lKSkgPyBbe31dIDogW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogeyB0eXBlOiBmaWVsZFJlZi50eXBlLCBuYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7IHJlZjogZmllbGRSZWYgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsaWRBbmRWYWx1ZShuYW1lLCBmYWxzZSwgdW5kZWZpbmVkLCBmaWVsZFJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5fZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuX2YubW91bnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAoX29wdGlvbnMuc2hvdWxkVW5yZWdpc3RlciB8fCBvcHRpb25zLnNob3VsZFVucmVnaXN0ZXIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhKGlzTmFtZUluRmllbGRBcnJheShfbmFtZXMuYXJyYXksIG5hbWUpICYmIF9zdGF0ZS5hY3Rpb24pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBfbmFtZXMudW5Nb3VudC5hZGQobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IF9mb2N1c0Vycm9yID0gKCkgPT4gX29wdGlvbnMuc2hvdWxkRm9jdXNFcnJvciAmJlxuICAgICAgICBpdGVyYXRlRmllbGRzQnlBY3Rpb24oX2ZpZWxkcywgX2ZvY3VzSW5wdXQsIF9uYW1lcy5tb3VudCk7XG4gICAgY29uc3QgX2Rpc2FibGVGb3JtID0gKGRpc2FibGVkKSA9PiB7XG4gICAgICAgIGlmIChpc0Jvb2xlYW4oZGlzYWJsZWQpKSB7XG4gICAgICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7IGRpc2FibGVkIH0pO1xuICAgICAgICAgICAgaXRlcmF0ZUZpZWxkc0J5QWN0aW9uKF9maWVsZHMsIChyZWYsIG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50RmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICByZWYuZGlzYWJsZWQgPSBjdXJyZW50RmllbGQuX2YuZGlzYWJsZWQgfHwgZGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRGaWVsZC5fZi5yZWZzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpZWxkLl9mLnJlZnMuZm9yRWFjaCgoaW5wdXRSZWYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFJlZi5kaXNhYmxlZCA9IGN1cnJlbnRGaWVsZC5fZi5kaXNhYmxlZCB8fCBkaXNhYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVTdWJtaXQgPSAob25WYWxpZCwgb25JbnZhbGlkKSA9PiBhc3luYyAoZSkgPT4ge1xuICAgICAgICBsZXQgb25WYWxpZEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnBlcnNpc3QgJiYgZS5wZXJzaXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBpZiAob25JbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgb25JbnZhbGlkKHsgLi4uX2Zvcm1TdGF0ZS5lcnJvcnMgfSwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZpZWxkVmFsdWVzID0gY2xvbmVPYmplY3QoX2Zvcm1WYWx1ZXMpO1xuICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX29wdGlvbnMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyb3JzLCB2YWx1ZXMgfSA9IGF3YWl0IF9leGVjdXRlU2NoZW1hKCk7XG4gICAgICAgICAgICBfZm9ybVN0YXRlLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgICAgIGZpZWxkVmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uKF9maWVsZHMpO1xuICAgICAgICB9XG4gICAgICAgIHVuc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCAncm9vdCcpO1xuICAgICAgICBpZiAoaXNFbXB0eU9iamVjdChfZm9ybVN0YXRlLmVycm9ycykpIHtcbiAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICBlcnJvcnM6IHt9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG9uVmFsaWQoZmllbGRWYWx1ZXMsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25WYWxpZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAob25JbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgb25JbnZhbGlkKHsgLi4uX2Zvcm1TdGF0ZS5lcnJvcnMgfSwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZm9jdXNFcnJvcigpO1xuICAgICAgICAgICAgc2V0VGltZW91dChfZm9jdXNFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgaXNTdWJtaXR0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgaXNTdWJtaXRTdWNjZXNzZnVsOiBpc0VtcHR5T2JqZWN0KF9mb3JtU3RhdGUuZXJyb3JzKSAmJiAhb25WYWxpZEVycm9yLFxuICAgICAgICAgICAgc3VibWl0Q291bnQ6IF9mb3JtU3RhdGUuc3VibWl0Q291bnQgKyAxLFxuICAgICAgICAgICAgZXJyb3JzOiBfZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvblZhbGlkRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG9uVmFsaWRFcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVzZXRGaWVsZCA9IChuYW1lLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgaWYgKGdldChfZmllbGRzLCBuYW1lKSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG9wdGlvbnMuZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKG5hbWUsIGNsb25lT2JqZWN0KGdldChfZGVmYXVsdFZhbHVlcywgbmFtZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKG5hbWUsIG9wdGlvbnMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXQoX2RlZmF1bHRWYWx1ZXMsIG5hbWUsIGNsb25lT2JqZWN0KG9wdGlvbnMuZGVmYXVsdFZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMua2VlcFRvdWNoZWQpIHtcbiAgICAgICAgICAgICAgICB1bnNldChfZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBEaXJ0eSkge1xuICAgICAgICAgICAgICAgIHVuc2V0KF9mb3JtU3RhdGUuZGlydHlGaWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIF9mb3JtU3RhdGUuaXNEaXJ0eSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICAgICAgID8gX2dldERpcnR5KG5hbWUsIGNsb25lT2JqZWN0KGdldChfZGVmYXVsdFZhbHVlcywgbmFtZSkpKVxuICAgICAgICAgICAgICAgICAgICA6IF9nZXREaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBFcnJvcikge1xuICAgICAgICAgICAgICAgIHVuc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICBfcHJveHlGb3JtU3RhdGUuaXNWYWxpZCAmJiBfdXBkYXRlVmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHsgLi4uX2Zvcm1TdGF0ZSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgX3Jlc2V0ID0gKGZvcm1WYWx1ZXMsIGtlZXBTdGF0ZU9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGVkVmFsdWVzID0gZm9ybVZhbHVlcyA/IGNsb25lT2JqZWN0KGZvcm1WYWx1ZXMpIDogX2RlZmF1bHRWYWx1ZXM7XG4gICAgICAgIGNvbnN0IGNsb25lVXBkYXRlZFZhbHVlcyA9IGNsb25lT2JqZWN0KHVwZGF0ZWRWYWx1ZXMpO1xuICAgICAgICBjb25zdCBpc0VtcHR5UmVzZXRWYWx1ZXMgPSBpc0VtcHR5T2JqZWN0KGZvcm1WYWx1ZXMpO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBpc0VtcHR5UmVzZXRWYWx1ZXMgPyBfZGVmYXVsdFZhbHVlcyA6IGNsb25lVXBkYXRlZFZhbHVlcztcbiAgICAgICAgaWYgKCFrZWVwU3RhdGVPcHRpb25zLmtlZXBEZWZhdWx0VmFsdWVzKSB7XG4gICAgICAgICAgICBfZGVmYXVsdFZhbHVlcyA9IHVwZGF0ZWRWYWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFrZWVwU3RhdGVPcHRpb25zLmtlZXBWYWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChrZWVwU3RhdGVPcHRpb25zLmtlZXBEaXJ0eVZhbHVlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkc1RvQ2hlY2sgPSBuZXcgU2V0KFtcbiAgICAgICAgICAgICAgICAgICAgLi4uX25hbWVzLm1vdW50LFxuICAgICAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyhnZXREaXJ0eUZpZWxkcyhfZGVmYXVsdFZhbHVlcywgX2Zvcm1WYWx1ZXMpKSxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkTmFtZSBvZiBBcnJheS5mcm9tKGZpZWxkc1RvQ2hlY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldChfZm9ybVN0YXRlLmRpcnR5RmllbGRzLCBmaWVsZE5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNldCh2YWx1ZXMsIGZpZWxkTmFtZSwgZ2V0KF9mb3JtVmFsdWVzLCBmaWVsZE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzZXRWYWx1ZShmaWVsZE5hbWUsIGdldCh2YWx1ZXMsIGZpZWxkTmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpc1dlYiAmJiBpc1VuZGVmaW5lZChmb3JtVmFsdWVzKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgX25hbWVzLm1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCAmJiBmaWVsZC5fZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkUmVmZXJlbmNlID0gQXJyYXkuaXNBcnJheShmaWVsZC5fZi5yZWZzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZpZWxkLl9mLnJlZnNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmaWVsZC5fZi5yZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSFRNTEVsZW1lbnQoZmllbGRSZWZlcmVuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm0gPSBmaWVsZFJlZmVyZW5jZS5jbG9zZXN0KCdmb3JtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZmllbGRzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZm9ybVZhbHVlcyA9IF9vcHRpb25zLnNob3VsZFVucmVnaXN0ZXJcbiAgICAgICAgICAgICAgICA/IGtlZXBTdGF0ZU9wdGlvbnMua2VlcERlZmF1bHRWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgPyBjbG9uZU9iamVjdChfZGVmYXVsdFZhbHVlcylcbiAgICAgICAgICAgICAgICAgICAgOiB7fVxuICAgICAgICAgICAgICAgIDogY2xvbmVPYmplY3QodmFsdWVzKTtcbiAgICAgICAgICAgIF9zdWJqZWN0cy5hcnJheS5uZXh0KHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHsgLi4udmFsdWVzIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9zdWJqZWN0cy52YWx1ZXMubmV4dCh7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiB7IC4uLnZhbHVlcyB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgX25hbWVzID0ge1xuICAgICAgICAgICAgbW91bnQ6IGtlZXBTdGF0ZU9wdGlvbnMua2VlcERpcnR5VmFsdWVzID8gX25hbWVzLm1vdW50IDogbmV3IFNldCgpLFxuICAgICAgICAgICAgdW5Nb3VudDogbmV3IFNldCgpLFxuICAgICAgICAgICAgYXJyYXk6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIHdhdGNoOiBuZXcgU2V0KCksXG4gICAgICAgICAgICB3YXRjaEFsbDogZmFsc2UsXG4gICAgICAgICAgICBmb2N1czogJycsXG4gICAgICAgIH07XG4gICAgICAgIF9zdGF0ZS5tb3VudCA9XG4gICAgICAgICAgICAhX3Byb3h5Rm9ybVN0YXRlLmlzVmFsaWQgfHxcbiAgICAgICAgICAgICAgICAhIWtlZXBTdGF0ZU9wdGlvbnMua2VlcElzVmFsaWQgfHxcbiAgICAgICAgICAgICAgICAhIWtlZXBTdGF0ZU9wdGlvbnMua2VlcERpcnR5VmFsdWVzO1xuICAgICAgICBfc3RhdGUud2F0Y2ggPSAhIV9vcHRpb25zLnNob3VsZFVucmVnaXN0ZXI7XG4gICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgIHN1Ym1pdENvdW50OiBrZWVwU3RhdGVPcHRpb25zLmtlZXBTdWJtaXRDb3VudFxuICAgICAgICAgICAgICAgID8gX2Zvcm1TdGF0ZS5zdWJtaXRDb3VudFxuICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgIGlzRGlydHk6IGlzRW1wdHlSZXNldFZhbHVlc1xuICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICA6IGtlZXBTdGF0ZU9wdGlvbnMua2VlcERpcnR5XG4gICAgICAgICAgICAgICAgICAgID8gX2Zvcm1TdGF0ZS5pc0RpcnR5XG4gICAgICAgICAgICAgICAgICAgIDogISEoa2VlcFN0YXRlT3B0aW9ucy5rZWVwRGVmYXVsdFZhbHVlcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWRlZXBFcXVhbChmb3JtVmFsdWVzLCBfZGVmYXVsdFZhbHVlcykpLFxuICAgICAgICAgICAgaXNTdWJtaXR0ZWQ6IGtlZXBTdGF0ZU9wdGlvbnMua2VlcElzU3VibWl0dGVkXG4gICAgICAgICAgICAgICAgPyBfZm9ybVN0YXRlLmlzU3VibWl0dGVkXG4gICAgICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIGRpcnR5RmllbGRzOiBpc0VtcHR5UmVzZXRWYWx1ZXNcbiAgICAgICAgICAgICAgICA/IHt9XG4gICAgICAgICAgICAgICAgOiBrZWVwU3RhdGVPcHRpb25zLmtlZXBEaXJ0eVZhbHVlc1xuICAgICAgICAgICAgICAgICAgICA/IGtlZXBTdGF0ZU9wdGlvbnMua2VlcERlZmF1bHRWYWx1ZXMgJiYgX2Zvcm1WYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZ2V0RGlydHlGaWVsZHMoX2RlZmF1bHRWYWx1ZXMsIF9mb3JtVmFsdWVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBfZm9ybVN0YXRlLmRpcnR5RmllbGRzXG4gICAgICAgICAgICAgICAgICAgIDoga2VlcFN0YXRlT3B0aW9ucy5rZWVwRGVmYXVsdFZhbHVlcyAmJiBmb3JtVmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGdldERpcnR5RmllbGRzKF9kZWZhdWx0VmFsdWVzLCBmb3JtVmFsdWVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBrZWVwU3RhdGVPcHRpb25zLmtlZXBEaXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2Zvcm1TdGF0ZS5kaXJ0eUZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30sXG4gICAgICAgICAgICB0b3VjaGVkRmllbGRzOiBrZWVwU3RhdGVPcHRpb25zLmtlZXBUb3VjaGVkXG4gICAgICAgICAgICAgICAgPyBfZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHNcbiAgICAgICAgICAgICAgICA6IHt9LFxuICAgICAgICAgICAgZXJyb3JzOiBrZWVwU3RhdGVPcHRpb25zLmtlZXBFcnJvcnMgPyBfZm9ybVN0YXRlLmVycm9ycyA6IHt9LFxuICAgICAgICAgICAgaXNTdWJtaXRTdWNjZXNzZnVsOiBrZWVwU3RhdGVPcHRpb25zLmtlZXBJc1N1Ym1pdFN1Y2Nlc3NmdWxcbiAgICAgICAgICAgICAgICA/IF9mb3JtU3RhdGUuaXNTdWJtaXRTdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgcmVzZXQgPSAoZm9ybVZhbHVlcywga2VlcFN0YXRlT3B0aW9ucykgPT4gX3Jlc2V0KGlzRnVuY3Rpb24oZm9ybVZhbHVlcylcbiAgICAgICAgPyBmb3JtVmFsdWVzKF9mb3JtVmFsdWVzKVxuICAgICAgICA6IGZvcm1WYWx1ZXMsIGtlZXBTdGF0ZU9wdGlvbnMpO1xuICAgIGNvbnN0IHNldEZvY3VzID0gKG5hbWUsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgY29uc3QgZmllbGRSZWZlcmVuY2UgPSBmaWVsZCAmJiBmaWVsZC5fZjtcbiAgICAgICAgaWYgKGZpZWxkUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZFJlZiA9IGZpZWxkUmVmZXJlbmNlLnJlZnNcbiAgICAgICAgICAgICAgICA/IGZpZWxkUmVmZXJlbmNlLnJlZnNbMF1cbiAgICAgICAgICAgICAgICA6IGZpZWxkUmVmZXJlbmNlLnJlZjtcbiAgICAgICAgICAgIGlmIChmaWVsZFJlZi5mb2N1cykge1xuICAgICAgICAgICAgICAgIGZpZWxkUmVmLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zaG91bGRTZWxlY3QgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNGdW5jdGlvbihmaWVsZFJlZi5zZWxlY3QpICYmXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkUmVmLnNlbGVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBfdXBkYXRlRm9ybVN0YXRlID0gKHVwZGF0ZWRGb3JtU3RhdGUpID0+IHtcbiAgICAgICAgX2Zvcm1TdGF0ZSA9IHtcbiAgICAgICAgICAgIC4uLl9mb3JtU3RhdGUsXG4gICAgICAgICAgICAuLi51cGRhdGVkRm9ybVN0YXRlLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgX3Jlc2V0RGVmYXVsdFZhbHVlcyA9ICgpID0+IGlzRnVuY3Rpb24oX29wdGlvbnMuZGVmYXVsdFZhbHVlcykgJiZcbiAgICAgICAgX29wdGlvbnMuZGVmYXVsdFZhbHVlcygpLnRoZW4oKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgcmVzZXQodmFsdWVzLCBfb3B0aW9ucy5yZXNldE9wdGlvbnMpO1xuICAgICAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udHJvbDoge1xuICAgICAgICAgICAgcmVnaXN0ZXIsXG4gICAgICAgICAgICB1bnJlZ2lzdGVyLFxuICAgICAgICAgICAgZ2V0RmllbGRTdGF0ZSxcbiAgICAgICAgICAgIGhhbmRsZVN1Ym1pdCxcbiAgICAgICAgICAgIHNldEVycm9yLFxuICAgICAgICAgICAgX2V4ZWN1dGVTY2hlbWEsXG4gICAgICAgICAgICBfZ2V0V2F0Y2gsXG4gICAgICAgICAgICBfZ2V0RGlydHksXG4gICAgICAgICAgICBfdXBkYXRlVmFsaWQsXG4gICAgICAgICAgICBfcmVtb3ZlVW5tb3VudGVkLFxuICAgICAgICAgICAgX3VwZGF0ZUZpZWxkQXJyYXksXG4gICAgICAgICAgICBfdXBkYXRlRGlzYWJsZWRGaWVsZCxcbiAgICAgICAgICAgIF9nZXRGaWVsZEFycmF5LFxuICAgICAgICAgICAgX3Jlc2V0LFxuICAgICAgICAgICAgX3Jlc2V0RGVmYXVsdFZhbHVlcyxcbiAgICAgICAgICAgIF91cGRhdGVGb3JtU3RhdGUsXG4gICAgICAgICAgICBfZGlzYWJsZUZvcm0sXG4gICAgICAgICAgICBfc3ViamVjdHMsXG4gICAgICAgICAgICBfcHJveHlGb3JtU3RhdGUsXG4gICAgICAgICAgICBfc2V0RXJyb3JzLFxuICAgICAgICAgICAgZ2V0IF9maWVsZHMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9maWVsZHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IF9mb3JtVmFsdWVzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfZm9ybVZhbHVlcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgX3N0YXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3RhdGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0IF9zdGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIF9zdGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBfZGVmYXVsdFZhbHVlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2RlZmF1bHRWYWx1ZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IF9uYW1lcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX25hbWVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBfbmFtZXModmFsdWUpIHtcbiAgICAgICAgICAgICAgICBfbmFtZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgX2Zvcm1TdGF0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Zvcm1TdGF0ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQgX2Zvcm1TdGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIF9mb3JtU3RhdGUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgX29wdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9vcHRpb25zO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBfb3B0aW9ucyh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIF9vcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5fb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgLi4udmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHRyaWdnZXIsXG4gICAgICAgIHJlZ2lzdGVyLFxuICAgICAgICBoYW5kbGVTdWJtaXQsXG4gICAgICAgIHdhdGNoLFxuICAgICAgICBzZXRWYWx1ZSxcbiAgICAgICAgZ2V0VmFsdWVzLFxuICAgICAgICByZXNldCxcbiAgICAgICAgcmVzZXRGaWVsZCxcbiAgICAgICAgY2xlYXJFcnJvcnMsXG4gICAgICAgIHVucmVnaXN0ZXIsXG4gICAgICAgIHNldEVycm9yLFxuICAgICAgICBzZXRGb2N1cyxcbiAgICAgICAgZ2V0RmllbGRTdGF0ZSxcbiAgICB9O1xufVxuXG4vKipcbiAqIEN1c3RvbSBob29rIHRvIG1hbmFnZSB0aGUgZW50aXJlIGZvcm0uXG4gKlxuICogQHJlbWFya3NcbiAqIFtBUEldKGh0dHBzOi8vcmVhY3QtaG9vay1mb3JtLmNvbS9kb2NzL3VzZWZvcm0pIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS1nZXQtc3RhcnRlZC10cy01a3NtbSkg4oCiIFtWaWRlb10oaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Sa1h2NEFYWENfNClcbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSBmb3JtIGNvbmZpZ3VyYXRpb24gYW5kIHZhbGlkYXRpb24gcGFyYW1ldGVycy5cbiAqXG4gKiBAcmV0dXJucyBtZXRob2RzIC0gaW5kaXZpZHVhbCBmdW5jdGlvbnMgdG8gbWFuYWdlIHRoZSBmb3JtIHN0YXRlLiB7QGxpbmsgVXNlRm9ybVJldHVybn1cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IHsgcmVnaXN0ZXIsIGhhbmRsZVN1Ym1pdCwgd2F0Y2gsIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSB9ID0gdXNlRm9ybSgpO1xuICogICBjb25zdCBvblN1Ym1pdCA9IGRhdGEgPT4gY29uc29sZS5sb2coZGF0YSk7XG4gKlxuICogICBjb25zb2xlLmxvZyh3YXRjaChcImV4YW1wbGVcIikpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0KG9uU3VibWl0KX0+XG4gKiAgICAgICA8aW5wdXQgZGVmYXVsdFZhbHVlPVwidGVzdFwiIHsuLi5yZWdpc3RlcihcImV4YW1wbGVcIil9IC8+XG4gKiAgICAgICA8aW5wdXQgey4uLnJlZ2lzdGVyKFwiZXhhbXBsZVJlcXVpcmVkXCIsIHsgcmVxdWlyZWQ6IHRydWUgfSl9IC8+XG4gKiAgICAgICB7ZXJyb3JzLmV4YW1wbGVSZXF1aXJlZCAmJiA8c3Bhbj5UaGlzIGZpZWxkIGlzIHJlcXVpcmVkPC9zcGFuPn1cbiAqICAgICAgIDxidXR0b24+U3VibWl0PC9idXR0b24+XG4gKiAgICAgPC9mb3JtPlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHVzZUZvcm0ocHJvcHMgPSB7fSkge1xuICAgIGNvbnN0IF9mb3JtQ29udHJvbCA9IFJlYWN0LnVzZVJlZigpO1xuICAgIGNvbnN0IF92YWx1ZXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgICBjb25zdCBbZm9ybVN0YXRlLCB1cGRhdGVGb3JtU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgICAgICBpc0RpcnR5OiBmYWxzZSxcbiAgICAgICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICAgICAgaXNMb2FkaW5nOiBpc0Z1bmN0aW9uKHByb3BzLmRlZmF1bHRWYWx1ZXMpLFxuICAgICAgICBpc1N1Ym1pdHRlZDogZmFsc2UsXG4gICAgICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgICAgIGlzU3VibWl0U3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICBzdWJtaXRDb3VudDogMCxcbiAgICAgICAgZGlydHlGaWVsZHM6IHt9LFxuICAgICAgICB0b3VjaGVkRmllbGRzOiB7fSxcbiAgICAgICAgdmFsaWRhdGluZ0ZpZWxkczoge30sXG4gICAgICAgIGVycm9yczogcHJvcHMuZXJyb3JzIHx8IHt9LFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQgfHwgZmFsc2UsXG4gICAgICAgIGRlZmF1bHRWYWx1ZXM6IGlzRnVuY3Rpb24ocHJvcHMuZGVmYXVsdFZhbHVlcylcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICA6IHByb3BzLmRlZmF1bHRWYWx1ZXMsXG4gICAgfSk7XG4gICAgaWYgKCFfZm9ybUNvbnRyb2wuY3VycmVudCkge1xuICAgICAgICBfZm9ybUNvbnRyb2wuY3VycmVudCA9IHtcbiAgICAgICAgICAgIC4uLmNyZWF0ZUZvcm1Db250cm9sKHByb3BzKSxcbiAgICAgICAgICAgIGZvcm1TdGF0ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY29udHJvbCA9IF9mb3JtQ29udHJvbC5jdXJyZW50LmNvbnRyb2w7XG4gICAgY29udHJvbC5fb3B0aW9ucyA9IHByb3BzO1xuICAgIHVzZVN1YnNjcmliZSh7XG4gICAgICAgIHN1YmplY3Q6IGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLFxuICAgICAgICBuZXh0OiAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmIChzaG91bGRSZW5kZXJGb3JtU3RhdGUodmFsdWUsIGNvbnRyb2wuX3Byb3h5Rm9ybVN0YXRlLCBjb250cm9sLl91cGRhdGVGb3JtU3RhdGUsIHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRm9ybVN0YXRlKHsgLi4uY29udHJvbC5fZm9ybVN0YXRlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBjb250cm9sLl9kaXNhYmxlRm9ybShwcm9wcy5kaXNhYmxlZCksIFtjb250cm9sLCBwcm9wcy5kaXNhYmxlZF0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChjb250cm9sLl9wcm94eUZvcm1TdGF0ZS5pc0RpcnR5KSB7XG4gICAgICAgICAgICBjb25zdCBpc0RpcnR5ID0gY29udHJvbC5fZ2V0RGlydHkoKTtcbiAgICAgICAgICAgIGlmIChpc0RpcnR5ICE9PSBmb3JtU3RhdGUuaXNEaXJ0eSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICBpc0RpcnR5LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2NvbnRyb2wsIGZvcm1TdGF0ZS5pc0RpcnR5XSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHByb3BzLnZhbHVlcyAmJiAhZGVlcEVxdWFsKHByb3BzLnZhbHVlcywgX3ZhbHVlcy5jdXJyZW50KSkge1xuICAgICAgICAgICAgY29udHJvbC5fcmVzZXQocHJvcHMudmFsdWVzLCBjb250cm9sLl9vcHRpb25zLnJlc2V0T3B0aW9ucyk7XG4gICAgICAgICAgICBfdmFsdWVzLmN1cnJlbnQgPSBwcm9wcy52YWx1ZXM7XG4gICAgICAgICAgICB1cGRhdGVGb3JtU3RhdGUoKHN0YXRlKSA9PiAoeyAuLi5zdGF0ZSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250cm9sLl9yZXNldERlZmF1bHRWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgIH0sIFtwcm9wcy52YWx1ZXMsIGNvbnRyb2xdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAocHJvcHMuZXJyb3JzKSB7XG4gICAgICAgICAgICBjb250cm9sLl9zZXRFcnJvcnMocHJvcHMuZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH0sIFtwcm9wcy5lcnJvcnMsIGNvbnRyb2xdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNvbnRyb2wuX3N0YXRlLm1vdW50KSB7XG4gICAgICAgICAgICBjb250cm9sLl91cGRhdGVWYWxpZCgpO1xuICAgICAgICAgICAgY29udHJvbC5fc3RhdGUubW91bnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250cm9sLl9zdGF0ZS53YXRjaCkge1xuICAgICAgICAgICAgY29udHJvbC5fc3RhdGUud2F0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoeyAuLi5jb250cm9sLl9mb3JtU3RhdGUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbC5fcmVtb3ZlVW5tb3VudGVkKCk7XG4gICAgfSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgcHJvcHMuc2hvdWxkVW5yZWdpc3RlciAmJlxuICAgICAgICAgICAgY29udHJvbC5fc3ViamVjdHMudmFsdWVzLm5leHQoe1xuICAgICAgICAgICAgICAgIHZhbHVlczogY29udHJvbC5fZ2V0V2F0Y2goKSxcbiAgICAgICAgICAgIH0pO1xuICAgIH0sIFtwcm9wcy5zaG91bGRVbnJlZ2lzdGVyLCBjb250cm9sXSk7XG4gICAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICAgICAgLi4uX2Zvcm1Db250cm9sLmN1cnJlbnQsXG4gICAgICAgIGZvcm1TdGF0ZTogZ2V0UHJveHlGb3JtU3RhdGUoZm9ybVN0YXRlLCBjb250cm9sKSxcbiAgICB9KSwgW2Zvcm1TdGF0ZSwgY29udHJvbF0pO1xufVxuXG5leHBvcnQgeyBDb250cm9sbGVyLCBGb3JtLCBGb3JtUHJvdmlkZXIsIGFwcGVuZEVycm9ycywgZ2V0LCBzZXQsIHVzZUNvbnRyb2xsZXIsIHVzZUZpZWxkQXJyYXksIHVzZUZvcm0sIHVzZUZvcm1Db250ZXh0LCB1c2VGb3JtU3RhdGUsIHVzZVdhdGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20ubWpzLm1hcFxuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBtb2RhbFN0eWxlcyBmcm9tIFwiLi9yZWdpc3RyYXRpb25Gb3JtLm1vZHVsZS5jc3NcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi8uLi91aS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHsgaXNFbWFpbCB9IGZyb20gXCJ2YWxpZGF0b3JcIjtcbmNvbnN0IFJlZ2lzdHJhdGlvbkZvcm0gPSAoeyBvbkNsb3NlIH0pID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyByZWdpc3RlciwgaGFuZGxlU3VibWl0LCBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sIH0gPSB1c2VGb3JtKCk7XG4gICAgY29uc3Qgb25TdWJtaXQgPSAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZvcm0gRGF0YTpcIiwgZGF0YSk7XG4gICAgfTtcbiAgICByZXR1cm4gKF9qc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsT3ZlcmxheSwgY2hpbGRyZW46IF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5tb2RhbENvbnRlbnQsIGNoaWxkcmVuOiBbX2pzeChcImgyXCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5tb2RhbFRpdGxlLCBjaGlsZHJlbjogXCJSZWdpc3RlclwiIH0pLCBfanN4KFwicFwiLCB7IGNsYXNzTmFtZTogbW9kYWxTdHlsZXMubW9kYWxTdWJ0aXRsZSwgY2hpbGRyZW46IFwiUGxlYXNlIGZpbGwgaW4gdGhlIGZpZWxkcyBiZWxvdzpcIiB9KSwgX2pzeHMoXCJmb3JtXCIsIHsgb25TdWJtaXQ6IGhhbmRsZVN1Ym1pdChvblN1Ym1pdCksIGNoaWxkcmVuOiBbX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsSW5wdXRHcm91cCwgY2hpbGRyZW46IFtfanN4KFwiaW5wdXRcIiwgT2JqZWN0LmFzc2lnbih7fSwgcmVnaXN0ZXIoXCJmaXJzdG5hbWVcIiwgeyByZXF1aXJlZDogXCJGaXJzdCBOYW1lIGlzIHJlcXVpcmVkXCIgfSksIHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiLCB0eXBlOiBcInRleHRcIiB9KSksIGVycm9ycy5maXJzdG5hbWUgJiYgKF9qc3goXCJwXCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5lcnJvciwgY2hpbGRyZW46IGVycm9ycy5maXJzdG5hbWUubWVzc2FnZSB9KSksIF9qc3goXCJpbnB1dFwiLCBPYmplY3QuYXNzaWduKHt9LCByZWdpc3RlcihcImxhc3RuYW1lXCIsIHsgcmVxdWlyZWQ6IFwiTGFzdCBOYW1lIGlzIHJlcXVpcmVkXCIgfSksIHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIsIHR5cGU6IFwidGV4dFwiIH0pKSwgZXJyb3JzLmxhc3RuYW1lICYmIChfanN4KFwicFwiLCB7IGNsYXNzTmFtZTogbW9kYWxTdHlsZXMuZXJyb3IsIGNoaWxkcmVuOiBlcnJvcnMubGFzdG5hbWUubWVzc2FnZSB9KSksIF9qc3goXCJpbnB1dFwiLCBPYmplY3QuYXNzaWduKHt9LCByZWdpc3RlcihcImVtYWlsXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBcIkVtYWlsIGlzIHJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZTogKHZhbHVlKSA9PiBpc0VtYWlsKHZhbHVlKSB8fCBcIkludmFsaWQgZW1haWwgYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyBwbGFjZWhvbGRlcjogXCJFbWFpbFwiLCB0eXBlOiBcImVtYWlsXCIgfSkpLCBlcnJvcnMuZW1haWwgJiYgKF9qc3goXCJwXCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5lcnJvciwgY2hpbGRyZW46IGVycm9ycy5lbWFpbC5tZXNzYWdlIH0pKSwgX2pzeChcImlucHV0XCIsIE9iamVjdC5hc3NpZ24oe30sIHJlZ2lzdGVyKFwicGFzc3dvcmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFwiUGFzc3dvcmQgaXMgcmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiA4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMjQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJQYXNzd29yZCBtdXN0IGJlIGF0IG1vc3QgMjQgY2hhcmFjdGVyc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHsgcGxhY2Vob2xkZXI6IFwiUGFzc3dvcmRcIiwgdHlwZTogXCJwYXNzd29yZFwiIH0pKSwgZXJyb3JzLnBhc3N3b3JkICYmIChfanN4KFwicFwiLCB7IGNsYXNzTmFtZTogbW9kYWxTdHlsZXMuZXJyb3IsIGNoaWxkcmVuOiBlcnJvcnMucGFzc3dvcmQubWVzc2FnZSB9KSksIF9qc3goXCJpbnB1dFwiLCBPYmplY3QuYXNzaWduKHt9LCByZWdpc3RlcihcImNvbmZpcm1fcGFzc3dvcmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFwiQ29uZmlybSBQYXNzd29yZCBpcyByZXF1aXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyBwbGFjZWhvbGRlcjogXCJDb25maXJtIHBhc3N3b3JkXCIsIHR5cGU6IFwicGFzc3dvcmRcIiB9KSksIGVycm9ycy5jb25maXJtX3Bhc3N3b3JkICYmIChfanN4KFwicFwiLCB7IGNsYXNzTmFtZTogbW9kYWxTdHlsZXMuZXJyb3IsIGNoaWxkcmVuOiBlcnJvcnMuY29uZmlybV9wYXNzd29yZC5tZXNzYWdlIH0pKV0gfSksIF9qc3goQnV0dG9uLCB7IHR5cGU6IFwic3VibWl0XCIsIGxhYmVsOiBcIlJlZ2lzdGVyXCIsIGNsYXNzTmFtZTogXCJwaW5rXCIgfSksIF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5zdWJzY3JpYmUsIGNoaWxkcmVuOiBbX2pzeChcImlucHV0XCIsIE9iamVjdC5hc3NpZ24oe30sIHJlZ2lzdGVyKFwiY2hlY2tib3hcIiksIHsgdHlwZTogXCJjaGVja2JveFwiIH0pKSwgX2pzeChcInBcIiwgeyBjaGlsZHJlbjogXCJZZXMsIEkgd2FudCBzdWJzY3JpYmUgdG8gbmV3c2xldHRlciBub3dcIiB9KSwgX2pzeChcInBcIiwgeyBjaGlsZHJlbjogKF9hID0gZXJyb3JzLmNoZWNrYm94KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVzc2FnZSB9KV0gfSksIF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5tb2RhbERpdmlkZXIsIGNoaWxkcmVuOiBbX2pzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLmRpdmlkZXJMaW5lIH0pLCBfanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogbW9kYWxTdHlsZXMuZGl2aWRlclRleHQsIGNoaWxkcmVuOiBcIk9SXCIgfSksIF9qc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5kaXZpZGVyTGluZSB9KV0gfSksIF9qc3goQnV0dG9uLCB7IHR5cGU6IFwic3VibWl0XCIsIGxhYmVsOiBcIkNvbnRpbnVlIFdpdGggR29vZ2xlXCIsIHZhcmlhbnQ6IFwicGlua1wiLCBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsR29vZ2xlQnV0dG9uIH0pLCBfanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5tb2RhbEZvb3RlciwgY2hpbGRyZW46IF9qc3hzKFwicFwiLCB7IGNoaWxkcmVuOiBbXCJBbHJlYWR5IGhhdmUgYW4gYWNjb3VudD9cIiwgXCIgXCIsIF9qc3goXCJhXCIsIHsgaHJlZjogXCIjXCIsIGNsYXNzTmFtZTogbW9kYWxTdHlsZXMubW9kYWxMaW5rLCBvbkNsaWNrOiBvbkNsb3NlLCBjaGlsZHJlbjogXCJCYWNrIHRvIExvZyBJblwiIH0pXSB9KSB9KV0gfSldIH0pIH0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZWdpc3RyYXRpb25Gb3JtO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgbW9kYWxTdHlsZXMgZnJvbSBcIi4vTW9kYWwubW9kdWxlLmNzc1wiO1xuaW1wb3J0IGdvb2dsZUltZyBmcm9tIFwiLi4vLi4vLi4vcHVibGljL2Fzc2V0cy9pbWcvZ29vZ2xlX2ltZy5wbmdcIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIi4uLy4uL3VpL0lucHV0XCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi4vLi4vdWkvQnV0dG9uXCI7XG5pbXBvcnQgeyBNb2RhbCBhcyBVaU1vZGFsIH0gZnJvbSBcIi4uLy4uL3VpL01vZGFsXCI7XG5pbXBvcnQgUmVnaXN0cmF0aW9uRm9ybSBmcm9tIFwiLi4vcmVnaXN0cmF0aW9uRm9ybS9SZWdpc3RyYXRpb25Gb3JtXCI7XG5jb25zdCBNb2RhbCA9ICh7IG9uQ2xvc2UgfSkgPT4ge1xuICAgIGNvbnN0IFtjcmVhdGVBY2NvdW50LCBzZXRDcmVhdGVBY2NvdW50XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBvcGVuTmV3QWNjb3VudCA9ICgpID0+IHtcbiAgICAgICAgc2V0Q3JlYXRlQWNjb3VudCh0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGNsb3NlTmV3QWNjb3VudCA9ICgpID0+IHtcbiAgICAgICAgc2V0Q3JlYXRlQWNjb3VudChmYWxzZSk7XG4gICAgfTtcbiAgICByZXR1cm4gKF9qc3hzKFVpTW9kYWwsIHsgb25DbG9zZTogb25DbG9zZSwgY2hpbGRyZW46IFtfanN4KFwiaDJcIiwgeyBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsVGl0bGUsIGNoaWxkcmVuOiBcIkxvZyBJblwiIH0pLCBfanN4KFwicFwiLCB7IGNsYXNzTmFtZTogbW9kYWxTdHlsZXMubW9kYWxTdWJ0aXRsZSwgY2hpbGRyZW46IFwiUGxlYXNlIGVudGVyIHlvdXIgZS1tYWlsIGFuZCBwYXNzd29yZDpcIiB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsSW5wdXRHcm91cCwgY2hpbGRyZW46IFtfanN4KElucHV0LCB7IHBsYWNlaG9sZGVyOiBcIkVtYWlsXCIsIHR5cGU6IFwiZW1haWxcIiB9KSwgX2pzeChJbnB1dCwgeyBwbGFjZWhvbGRlcjogXCJQYXNzd29yZFwiLCB0eXBlOiBcInBhc3N3b3JkXCIgfSldIH0pLCBfanN4KEJ1dHRvbiwgeyBsYWJlbDogXCJMb2cgSW5cIiwgY2xhc3NOYW1lOiBcInBpbmsgbGFyZ2VcIiB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsRGl2aWRlciwgY2hpbGRyZW46IFtfanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogbW9kYWxTdHlsZXMuZGl2aWRlckxpbmUgfSksIF9qc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5kaXZpZGVyVGV4dCwgY2hpbGRyZW46IFwiT1JcIiB9KSwgX2pzeChcInNwYW5cIiwgeyBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLmRpdmlkZXJMaW5lIH0pXSB9KSwgX2pzeChCdXR0b24sIHsgbGFiZWw6IFwiQ29udGludWUgV2l0aCBHb29nbGVcIiwgdmFyaWFudDogXCJ0cmFuc3BhcmVudFwiLCBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsR29vZ2xlQnV0dG9uLCBjaGlsZHJlbjogX2pzeChcImltZ1wiLCB7IHNyYzogZ29vZ2xlSW1nLCBhbHQ6IFwiR29vZ2xlXCIgfSkgfSksIF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5tb2RhbEZvb3RlciwgY2hpbGRyZW46IFtfanN4cyhcInBcIiwgeyBjaGlsZHJlbjogW1wiRm9yZ290IHlvdXIgcGFzc3dvcmQ/XCIsIFwiIFwiLCBfanN4KFwiYVwiLCB7IGhyZWY6IFwiL1wiLCBjbGFzc05hbWU6IG1vZGFsU3R5bGVzLm1vZGFsTGluaywgY2hpbGRyZW46IFwiUmVjb3ZlciBwYXNzd29yZFwiIH0pXSB9KSwgX2pzeHMoXCJwXCIsIHsgb25DbGljazogb3Blbk5ld0FjY291bnQsIGNoaWxkcmVuOiBbXCJOZXcgdG8gQmxvb20gQmVhdXR5P1wiLCBcIiBcIiwgX2pzeChcImFcIiwgeyBocmVmOiBcIiNcIiwgY2xhc3NOYW1lOiBtb2RhbFN0eWxlcy5tb2RhbExpbmssIGNoaWxkcmVuOiBcIkNyZWF0ZSBhbiBBY2NvdW50XCIgfSldIH0pXSB9KSwgY3JlYXRlQWNjb3VudCAmJiBfanN4KFJlZ2lzdHJhdGlvbkZvcm0sIHsgb25DbG9zZTogY2xvc2VOZXdBY2NvdW50IH0pXSB9KSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL1NlYXJjaC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL1NlYXJjaC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIi4uLy4uL3VpL0lucHV0XCI7XG5pbXBvcnQgc2VhcmNoU3R5bGVzIGZyb20gXCIuL1NlYXJjaC5tb2R1bGUuY3NzXCI7XG4vLyBUT0RPOiDRgdC+0LfQtNCw0YLRjCB1aS3QutC+0LzQv9C+0L3QtdC90YIgU2VhcmNoSW5wdXRcbmV4cG9ydCBjb25zdCBTZWFyY2ggPSAoeyBvbkNsb3NlIH0pID0+IHtcbiAgICByZXR1cm4gKF9qc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IHNlYXJjaFN0eWxlcy5vdmVybGF5TW9kYWxTZWFyY2gsIGNoaWxkcmVuOiBfanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBzZWFyY2hTdHlsZXMubW9kYWxTZWFyY2hJbnB1dCwgY2hpbGRyZW46IF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBzZWFyY2hTdHlsZXMuc2VhcmNoSW5wdXQsIGNoaWxkcmVuOiBbX2pzeChJbnB1dCwgeyBwbGFjZWhvbGRlcjogXCJTZWFyY2hcIiwgdHlwZTogXCJzZWFyY2hcIiwgY2xhc3NOYW1lOiBzZWFyY2hTdHlsZXMuc3R5bGVkSW5wdXQgfSksIF9qc3goXCJidXR0b25cIiwgeyBvbkNsaWNrOiBvbkNsb3NlLCBjbGFzc05hbWU6IHNlYXJjaFN0eWxlcy5jbG9zZVNlYXJjaEJ1dHRvbiwgY2hpbGRyZW46IFwiWFwiIH0pXSB9KSB9KSB9KSk7XG59O1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzZWFyY2ggZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9hc3NldHMvaW1nL3NlYXJjaC5zdmdcIjtcbmltcG9ydCBhY2NvdW50IGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wdWJsaWMvYXNzZXRzL2ltZy9hY2NvdW50LnN2Z1wiO1xuaW1wb3J0IGNhcnQgZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9hc3NldHMvaW1nL2NhcnQuc3ZnXCI7XG5pbXBvcnQgaGVhZGVyU3R5bGVzIGZyb20gXCIuL0hlYWRlci5tb2R1bGUuY3NzXCI7XG5pbXBvcnQgTW9kYWwgZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvbW9kYWwvTW9kYWxcIjtcbmltcG9ydCB7IFNlYXJjaCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL3NlYXJjaC9TZWFyY2hcIjtcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcigpIHtcbiAgICBjb25zdCBbbW9kYWxBY3RpdmUsIHNldE1vZGFsQWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbc2VhcmNoQWN0aXZlLCBzZXRTZWFyY2hBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGhhbmRsZU1vZGFsT3BlbiA9ICgpID0+IHtcbiAgICAgICAgc2V0TW9kYWxBY3RpdmUodHJ1ZSk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVNb2RhbENsb3NlID0gKCkgPT4ge1xuICAgICAgICBzZXRNb2RhbEFjdGl2ZShmYWxzZSk7XG4gICAgfTtcbiAgICBjb25zdCBvcGVuU2VhcmNoTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIHNldFNlYXJjaEFjdGl2ZSh0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGNsb3NlU2VhcmNoTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIHNldFNlYXJjaEFjdGl2ZShmYWxzZSk7XG4gICAgfTtcbiAgICByZXR1cm4gKF9qc3hzKF9GcmFnbWVudCwgeyBjaGlsZHJlbjogW19qc3goXCJoZWFkZXJcIiwgeyBjbGFzc05hbWU6IGhlYWRlclN0eWxlcy5oZWFkZXIsIGNoaWxkcmVuOiBfanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLmhlYWRlckNvbnRhaW5lciwgY2hpbGRyZW46IFtfanN4KE5hdkxpbmssIHsgdG86IFwiL1wiLCBjbGFzc05hbWU6IGhlYWRlclN0eWxlcy50aXRsZSwgY2hpbGRyZW46IF9qc3hzKFwiaDNcIiwgeyBjbGFzc05hbWU6IGhlYWRlclN0eWxlcy50aXRsZSwgY2hpbGRyZW46IFtcIkJsb29tIFwiLCBfanN4KFwic3BhblwiLCB7IGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLnRpdGxlU3BhbiwgY2hpbGRyZW46IFwiQmVhdXR5XCIgfSldIH0pIH0pLCBfanN4cyhcIm5hdlwiLCB7IGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLmhlYWRlck5hdiwgY2hpbGRyZW46IFtfanN4KE5hdkxpbmssIHsgdG86IFwiL3Nob3AtYWxsXCIsIGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLmhlYWRlck5hdkxpbmssIGNoaWxkcmVuOiBcIlNIT1AgQUxMXCIgfSksIF9qc3goTmF2TGluaywgeyB0bzogXCIvYmVzdHNlbGxlcnNcIiwgY2xhc3NOYW1lOiBoZWFkZXJTdHlsZXMuaGVhZGVyTmF2TGluaywgY2hpbGRyZW46IFwiQkVTVFNFTExFUlNcIiB9KSwgX2pzeChOYXZMaW5rLCB7IHRvOiBcIi9jb2xsZWN0aW9uXCIsIGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLmhlYWRlck5hdkxpbmssIGNoaWxkcmVuOiBcIkNPTExFQ1RJT05cIiB9KSwgX2pzeChOYXZMaW5rLCB7IHRvOiBcIi9hYm91dFwiLCBjbGFzc05hbWU6IGhlYWRlclN0eWxlcy5oZWFkZXJOYXZMaW5rLCBjaGlsZHJlbjogXCJBQk9VVCBVU1wiIH0pLCBfanN4KE5hdkxpbmssIHsgdG86IFwiL2Jsb2dcIiwgY2xhc3NOYW1lOiBoZWFkZXJTdHlsZXMuaGVhZGVyTmF2TGluaywgY2hpbGRyZW46IFwiQkxPR1wiIH0pXSB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGhlYWRlclN0eWxlcy5pY29ucywgY2hpbGRyZW46IFtfanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLmljb25JdGVtLCBvbkNsaWNrOiBvcGVuU2VhcmNoTW9kYWwsIGNoaWxkcmVuOiBbX2pzeChcImltZ1wiLCB7IHNyYzogc2VhcmNoLCBhbHQ6IFwic2VhcmNoXCIsIGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLmljb25JdGVtSW1nIH0pLCBfanN4KFwic3BhblwiLCB7IGNoaWxkcmVuOiBcIlNFQVJDSFwiIH0pXSB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGhlYWRlclN0eWxlcy5pY29uSXRlbSwgb25DbGljazogaGFuZGxlTW9kYWxPcGVuLCBjaGlsZHJlbjogW19qc3goXCJpbWdcIiwgeyBzcmM6IGFjY291bnQsIGFsdDogXCJhY2NvdW50XCIsIGNsYXNzTmFtZTogaGVhZGVyU3R5bGVzLmljb25JdGVtSW1nIH0pLCBfanN4KFwic3BhblwiLCB7IGNoaWxkcmVuOiBcIkFDQ09VTlRcIiB9KV0gfSksIF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBoZWFkZXJTdHlsZXMuaWNvbkl0ZW0sIGNoaWxkcmVuOiBbX2pzeChcImltZ1wiLCB7IHNyYzogY2FydCwgYWx0OiBcImNhcnRcIiwgY2xhc3NOYW1lOiBoZWFkZXJTdHlsZXMuaWNvbkl0ZW1JbWcgfSksIF9qc3goXCJzcGFuXCIsIHsgY2hpbGRyZW46IFwiQ0FSVFwiIH0pXSB9KV0gfSldIH0pIH0pLCBtb2RhbEFjdGl2ZSAmJiBfanN4KE1vZGFsLCB7IG9uQ2xvc2U6IGhhbmRsZU1vZGFsQ2xvc2UgfSksIHNlYXJjaEFjdGl2ZSAmJiBfanN4KFNlYXJjaCwgeyBvbkNsb3NlOiBjbG9zZVNlYXJjaE1vZGFsIH0pXSB9KSk7XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL0Zvb3Rlci5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL0Zvb3Rlci5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBmb290ZXJTdHlsZXMgZnJvbSBcIi4vRm9vdGVyLm1vZHVsZS5jc3NcIjtcbmltcG9ydCBmYWNlYm9vayBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHVibGljL2Fzc2V0cy9pbWcvZmFjZWJvb2sucG5nXCI7XG5pbXBvcnQgcGludGVyc3QgZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9hc3NldHMvaW1nL3BpbnRlcnN0LnBuZ1wiO1xuaW1wb3J0IHR3aXR0ZXIgZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9hc3NldHMvaW1nL3R3aXR0ZXIucG5nXCI7XG5pbXBvcnQgaW5zdGFncmFtIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wdWJsaWMvYXNzZXRzL2ltZy9pbnN0YWdyYW0ucG5nXCI7XG5pbXBvcnQgdGVsZWdyYW0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9hc3NldHMvaW1nL3RlbGVncmFtLnBuZ1wiO1xuZXhwb3J0IGZ1bmN0aW9uIEZvb3RlcigpIHtcbiAgICByZXR1cm4gKF9qc3hzKFwiZm9vdGVyXCIsIHsgY2xhc3NOYW1lOiBmb290ZXJTdHlsZXMuZm9vdGVyQ29udGFpbmVyLCBjaGlsZHJlbjogW19qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBgJHtmb290ZXJTdHlsZXMuZm9vdGVyU2VjdGlvbn0gJHtmb290ZXJTdHlsZXMuc29jaWFsSWNvbnN9YCwgY2hpbGRyZW46IFtfanN4KFwiYVwiLCB7IGhyZWY6IFwiaHR0cHM6Ly9mYWNlYm9vay5jb21cIiwgdGFyZ2V0OiBcIl9ibGFua1wiLCByZWw6IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiLCBjaGlsZHJlbjogX2pzeChcImltZ1wiLCB7IHNyYzogZmFjZWJvb2ssIGFsdDogXCJGYWNlYm9va1wiIH0pIH0pLCBfanN4KFwiYVwiLCB7IGhyZWY6IFwiaHR0cHM6Ly9waW50ZXJlc3QuY29tXCIsIHRhcmdldDogXCJfYmxhbmtcIiwgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiwgY2hpbGRyZW46IF9qc3goXCJpbWdcIiwgeyBzcmM6IHBpbnRlcnN0LCBhbHQ6IFwiUGludGVyZXN0XCIgfSkgfSksIF9qc3goXCJhXCIsIHsgaHJlZjogXCJodHRwczovL3R3aXR0ZXIuY29tXCIsIHRhcmdldDogXCJfYmxhbmtcIiwgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiwgY2hpbGRyZW46IF9qc3goXCJpbWdcIiwgeyBzcmM6IHR3aXR0ZXIsIGFsdDogXCJUd2l0dGVyXCIgfSkgfSksIF9qc3goXCJhXCIsIHsgaHJlZjogXCJodHRwczovL2luc3RhZ3JhbS5jb21cIiwgdGFyZ2V0OiBcIl9ibGFua1wiLCByZWw6IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiLCBjaGlsZHJlbjogX2pzeChcImltZ1wiLCB7IHNyYzogaW5zdGFncmFtLCBhbHQ6IFwiSW5zdGFncmFtXCIgfSkgfSksIF9qc3goXCJhXCIsIHsgaHJlZjogXCJodHRwczovL3RlbGVncmFtLm9yZ1wiLCB0YXJnZXQ6IFwiX2JsYW5rXCIsIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCIsIGNoaWxkcmVuOiBfanN4KFwiaW1nXCIsIHsgc3JjOiB0ZWxlZ3JhbSwgYWx0OiBcIlRlbGVncmFtXCIgfSkgfSldIH0pLCBfanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogZm9vdGVyU3R5bGVzLmZvb3Rlck1haW4sIGNoaWxkcmVuOiBbX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGAke2Zvb3RlclN0eWxlcy5mb290ZXJTZWN0aW9ufSAke2Zvb3RlclN0eWxlcy5jb21wYW55SW5mb31gLCBjaGlsZHJlbjogW19qc3hzKFwiaDNcIiwgeyBjaGlsZHJlbjogW19qc3goXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBmb290ZXJTdHlsZXMuYnJhbmROYW1lLCBjaGlsZHJlbjogXCJCbG9vbVwiIH0pLCBcIiBCZWF1dHlcIl0gfSksIF9qc3goXCJwXCIsIHsgY2hpbGRyZW46IFwiRGlzY292ZXIgbmF0dXJlJ3MgYmVhdXR5IHdpdGggb3VyIG5hdHVyYWwgY2FyZSBwcm9kdWN0cy5cIiB9KSwgX2pzeHMoXCJwXCIsIHsgY2hpbGRyZW46IFtfanN4KFwic3BhblwiLCB7IGNoaWxkcmVuOiBcIlxcdUQ4M0RcXHVEQ0RFICszOCAwNTAgMTIzIDQ1IDY3XCIgfSksIF9qc3goXCJiclwiLCB7fSksIF9qc3goXCJzcGFuXCIsIHsgY2hpbGRyZW46IFwiXFx1RDgzRFxcdURDRTcgYmxvb21idEBnbWFpbC5jb21cIiB9KSwgX2pzeChcImJyXCIsIHt9KSwgX2pzeChcInNwYW5cIiwgeyBjaGlsZHJlbjogXCJcXHVEODNEXFx1RENDRCBLeWl2LCBVa3JhaW5lXCIgfSldIH0pXSB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGZvb3RlclN0eWxlcy5mb290ZXJTZWN0aW9uLCBjaGlsZHJlbjogW19qc3goXCJoM1wiLCB7IGNoaWxkcmVuOiBcIkhlbHBcIiB9KSwgX2pzeHMoXCJ1bFwiLCB7IGNoaWxkcmVuOiBbX2pzeChcImxpXCIsIHsgY2hpbGRyZW46IF9qc3goXCJhXCIsIHsgaHJlZjogXCIjXCIsIGNoaWxkcmVuOiBcIkNvbnRhY3QgdXNcIiB9KSB9KSwgX2pzeChcImxpXCIsIHsgY2hpbGRyZW46IF9qc3goXCJhXCIsIHsgaHJlZjogXCIjXCIsIGNoaWxkcmVuOiBcIkZBUVwiIH0pIH0pLCBfanN4KFwibGlcIiwgeyBjaGlsZHJlbjogX2pzeChcImFcIiwgeyBocmVmOiBcIiNcIiwgY2hpbGRyZW46IFwiU2hpcHBpbmcgJiBSZXR1cm5zXCIgfSkgfSldIH0pXSB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGZvb3RlclN0eWxlcy5mb290ZXJTZWN0aW9uLCBjaGlsZHJlbjogW19qc3goXCJoM1wiLCB7IGNoaWxkcmVuOiBcIk15IEFjY291bnRcIiB9KSwgX2pzeHMoXCJ1bFwiLCB7IGNoaWxkcmVuOiBbX2pzeChcImxpXCIsIHsgY2hpbGRyZW46IF9qc3goXCJhXCIsIHsgaHJlZjogXCIjXCIsIGNoaWxkcmVuOiBcIkFkZHJlc3Nlc1wiIH0pIH0pLCBfanN4KFwibGlcIiwgeyBjaGlsZHJlbjogX2pzeChcImFcIiwgeyBocmVmOiBcIiNcIiwgY2hpbGRyZW46IFwiT3JkZXIgU3RhdHVzXCIgfSkgfSksIF9qc3goXCJsaVwiLCB7IGNoaWxkcmVuOiBfanN4KFwiYVwiLCB7IGhyZWY6IFwiI1wiLCBjaGlsZHJlbjogXCJXaXNobGlzdFwiIH0pIH0pXSB9KV0gfSksIF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBgJHtmb290ZXJTdHlsZXMuZm9vdGVyU2VjdGlvbn0gJHtmb290ZXJTdHlsZXMudGhpcmR9YCwgY2hpbGRyZW46IFtfanN4KFwiaDNcIiwgeyBjaGlsZHJlbjogXCJDdXN0b21lciBDYXJlXCIgfSksIF9qc3goXCJ1bFwiLCB7IGNoaWxkcmVuOiBfanN4KFwibGlcIiwgeyBjaGlsZHJlbjogX2pzeChcImFcIiwgeyBocmVmOiBcIiNcIiwgY2hpbGRyZW46IFwiQWJvdXQgdXNcIiB9KSB9KSB9KV0gfSksIF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBgJHtmb290ZXJTdHlsZXMuZm9vdGVyU2VjdGlvbn0gJHtmb290ZXJTdHlsZXMuZm9vdGVyU3Vic2NyaWJlfWAsIGNoaWxkcmVuOiBbX2pzeChcImgzXCIsIHsgY2hpbGRyZW46IFwiU2lnbiBVcCBmb3IgRW1haWxzXCIgfSksIF9qc3goXCJwXCIsIHsgY2hpbGRyZW46IFwiU3RheSBpbmZvcm1lZCwgc3Vic2NyaWJlIHRvIG91ciBuZXdzbGV0dGVyIG5vdyFcIiB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGZvb3RlclN0eWxlcy5zdWJzY3JpYmVGb3JtLCBjaGlsZHJlbjogW19qc3goXCJpbnB1dFwiLCB7IHR5cGU6IFwiZW1haWxcIiwgcGxhY2Vob2xkZXI6IFwiRW1haWxcIiB9KSwgX2pzeChcImFcIiwgeyBjbGFzc05hbWU6IGZvb3RlclN0eWxlcy5zdWJzY3JpYmVGb3JtTGluaywgY2hpbGRyZW46IFwiU3Vic2NyaWJlIFxcdTIxOTJcIiB9KV0gfSldIH0pXSB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGZvb3RlclN0eWxlcy5mb290ZXJCb3R0b20sIGNoaWxkcmVuOiBbX2pzeChcInBcIiwgeyBjaGlsZHJlbjogXCJcXHUwMEE5IDIwMjMgQmxvb20gQmVhdXR5XCIgfSksIF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBmb290ZXJTdHlsZXMuZm9vdGVyTGlua3MsIGNoaWxkcmVuOiBbX2pzeChcImFcIiwgeyBjbGFzc05hbWU6IGZvb3RlclN0eWxlcy5mb290ZXJMaW5rLCBocmVmOiBcIiNcIiwgY2hpbGRyZW46IFwiUHJpdmFjeSBQb2xpY3lcIiB9KSwgX2pzeChcImFcIiwgeyBjbGFzc05hbWU6IGZvb3RlclN0eWxlcy5mb290ZXJMaW5rLCBocmVmOiBcIiNcIiwgY2hpbGRyZW46IFwiVGVybXMgYW5kIENvbmRpdGlvbnNcIiB9KV0gfSldIH0pXSB9KSk7XG59XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VyUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBOb3RGb3VuZFBhZ2UgZnJvbSBcIi4uLy4uLy4uL3BhZ2VzL05vdEZvdW5kUGFnZVwiO1xuaW1wb3J0IHsgUm9vdExheW91dCB9IGZyb20gXCIuL2xheW91dHMvcm9vdC1sYXlvdXRcIjtcbmV4cG9ydCBjb25zdCByb3V0ZXIgPSBjcmVhdGVCcm93c2VyUm91dGVyKFtcbiAgICB7XG4gICAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgICBlbGVtZW50OiBfanN4KFJvb3RMYXlvdXQsIHt9KSxcbiAgICAgICAgZXJyb3JFbGVtZW50OiBfanN4KE5vdEZvdW5kUGFnZSwge30pLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4OiB0cnVlLFxuICAgICAgICAgICAgICAgIGxhenkoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IEhvbWVQYWdlIH0gPSB5aWVsZCBpbXBvcnQoXCIuLi8uLi8uLi9wYWdlcy9Ib21lUGFnZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IENvbXBvbmVudDogSG9tZVBhZ2UgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogXCJhYm91dC9cIixcbiAgICAgICAgICAgICAgICBsYXp5KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBBYm91dFVzIH0gPSB5aWVsZCBpbXBvcnQoXCIuLi8uLi8uLi9wYWdlcy9BYm91dFVzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgQ29tcG9uZW50OiBBYm91dFVzIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6IFwic2hvcC1hbGwvXCIsXG4gICAgICAgICAgICAgICAgbGF6eSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgU2hvcEFsbCB9ID0geWllbGQgaW1wb3J0KFwiLi4vLi4vLi4vcGFnZXMvU2hvcEFsbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IENvbXBvbmVudDogU2hvcEFsbCB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBcImNvbGxlY3Rpb24vXCIsXG4gICAgICAgICAgICAgICAgbGF6eSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgQ29sbGVjdGlvbiB9ID0geWllbGQgaW1wb3J0KFwiLi4vLi4vLi4vcGFnZXMvQ29sbGVjdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IENvbXBvbmVudDogQ29sbGVjdGlvbiB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBcImJlc3RzZWxsZXJzL1wiLFxuICAgICAgICAgICAgICAgIGxhenkoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IEJlc3RzZWxsZXJzIH0gPSB5aWVsZCBpbXBvcnQoXCIuLi8uLi8uLi9wYWdlcy9CZXN0c2VsbGVyc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IENvbXBvbmVudDogQmVzdHNlbGxlcnMgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogXCJibG9nL1wiLFxuICAgICAgICAgICAgICAgIGxhenkoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IEJsb2cgfSA9IHlpZWxkIGltcG9ydChcIi4uLy4uLy4uL3BhZ2VzL0Jsb2dcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBDb21wb25lbnQ6IEJsb2cgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbl0pO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgT3V0bGV0IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvSGVhZGVyXCI7XG5pbXBvcnQgeyBGb290ZXIgfSBmcm9tIFwiLi9jb21wb25lbnRzL0Zvb3RlclwiO1xuZXhwb3J0IGNvbnN0IFJvb3RMYXlvdXQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChfanN4cyhfRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtfanN4KEhlYWRlciwge30pLCBfanN4KFwibWFpblwiLCB7IGNoaWxkcmVuOiBfanN4KE91dGxldCwge30pIH0pLCBfanN4KEZvb3Rlciwge30pXSB9KSk7XG59O1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IGVycm9yU3R1bGVzIGZyb20gXCIuLi9zdHlsZXMvZXJyb3I0MDQubW9kdWxlLmNzc1wiO1xuY29uc3QgTm90Rm91bmRQYWdlID0gKCkgPT4ge1xuICAgIHJldHVybiAoX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGVycm9yU3R1bGVzLmVycm9yQ29udGFpbmVyLCBjaGlsZHJlbjogW19qc3goXCJoMVwiLCB7IGNoaWxkcmVuOiBcIlNvcnJ5IGR1ZGUgYnV0IHBhZ2Ugbm90IGZvdW5kIDQwNFwiIH0pLCBfanN4KE5hdkxpbmssIHsgdG86IFwiL1wiLCBjaGlsZHJlbjogXCJIb21lIFBhZ2VcIiB9KV0gfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IE5vdEZvdW5kUGFnZTtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBSb3V0ZXJQcm92aWRlciBhcyBSZWFjdFJvdXRlclByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IHJvdXRlciB9IGZyb20gXCIuL3JvdXRlclwiO1xuZXhwb3J0IGNvbnN0IFJvdXRlclByb3ZpZGVyID0gKCkgPT4gKF9qc3goUmVhY3RSb3V0ZXJQcm92aWRlciwgeyByb3V0ZXI6IHJvdXRlciwgZmFsbGJhY2tFbGVtZW50OiBfanN4KFwicFwiLCB7IGNoaWxkcmVuOiBcIkxvYWRpbmcuLi5cIiB9KSB9KSk7XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5pbXBvcnQgQXBwIGZyb20gXCIuL2FwcC9BcHBcIjtcbmNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XG5yb290LnJlbmRlcihfanN4KFJlYWN0LlN0cmljdE1vZGUsIHsgY2hpbGRyZW46IF9qc3goQXBwLCB7fSkgfSkpO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBcIi4vQXBwLmNzc1wiO1xuaW1wb3J0IHsgUm91dGVyUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlcnMvcm91dGVyXCI7XG5mdW5jdGlvbiBBcHAoKSB7XG4gICAgcmV0dXJuIF9qc3goUm91dGVyUHJvdmlkZXIsIHt9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwibG9jYWxzIiwiZXhwb3J0cyIsIl9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyIsImkiLCJfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsImFhIiwiY2EiLCJwIiwiYSIsImIiLCJjIiwiYXJndW1lbnRzIiwiZGEiLCJTZXQiLCJlYSIsImZhIiwiaGEiLCJhZGQiLCJpYSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImphIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJrYSIsImxhIiwibWEiLCJ2IiwiZCIsImUiLCJmIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ0eXBlIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInJhIiwic2EiLCJ0b1VwcGVyQ2FzZSIsInRhIiwic2xpY2UiLCJwYSIsImlzTmFOIiwicWEiLCJjYWxsIiwidGVzdCIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJyZXBsYWNlIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwiU3ltYm9sIiwiZm9yIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJBIiwiYXNzaWduIiwiTWEiLCJFcnJvciIsInN0YWNrIiwidHJpbSIsIm1hdGNoIiwiTmEiLCJPYSIsInByZXBhcmVTdGFja1RyYWNlIiwiZGVmaW5lUHJvcGVydHkiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwibCIsImgiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwibmFtZSIsIlBhIiwidGFnIiwicmVuZGVyIiwiUWEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiQXJyYXkiLCJpc0FycmF5IiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInBiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInFiIiwicmIiLCJzYiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5Iiwia2V5cyIsImNoYXJBdCIsInN1YnN0cmluZyIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInNvdXJjZSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk5iIiwiYXBwbHkiLCJtIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImtleSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJuIiwidCIsIkoiLCJ4IiwidSIsInciLCJGIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsInNldFRpbWVvdXQiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiUHJvbWlzZSIsIkpmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsIkkiLCJ6ZyIsIkFnIiwiQmciLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwibW9kZSIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJlZnMiLCJNZyIsIk5nIiwiT2ciLCJpbmRleCIsIlBnIiwiUWciLCJwcm9wcyIsIlJnIiwiaW1wbGVtZW50YXRpb24iLCJTZyIsIlRnIiwicSIsInIiLCJ5IiwibmV4dCIsImRvbmUiLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiX2N1cnJlbnRWYWx1ZSIsImJoIiwiY2hpbGRMYW5lcyIsImNoIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJkaCIsImVoIiwiY29udGV4dCIsIm1lbW9pemVkVmFsdWUiLCJmaCIsImdoIiwiaGgiLCJpbnRlcmxlYXZlZCIsImloIiwiamgiLCJraCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImxoIiwibWgiLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwibmgiLCJLIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInRhZ05hbWUiLCJ6aCIsIkFoIiwiQmgiLCJMIiwiQ2giLCJyZXZlYWxPcmRlciIsIkRoIiwiRWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIkZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIkdoIiwiSGgiLCJNIiwiTiIsIk8iLCJJaCIsIkpoIiwiS2giLCJMaCIsIlAiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJVaCIsIlZoIiwiV2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImdldFNuYXBzaG90IiwiYmkiLCJjaSIsIlEiLCJkaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImlpIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJSIiwiQmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiQ2kiLCJkZWZhdWx0UHJvcHMiLCJEaSIsIkVpIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkZpIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHaSIsImNvbnRleHRUeXBlIiwic3RhdGUiLCJ1cGRhdGVyIiwiSGkiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJJaSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiSmkiLCJtZXNzYWdlIiwiZGlnZXN0IiwiS2kiLCJMaSIsImNvbnNvbGUiLCJlcnJvciIsIk1pIiwiV2Vha01hcCIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJSaSIsImNvbXBvbmVudFN0YWNrIiwiU2kiLCJwaW5nQ2FjaGUiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJhaiIsImNvbXBhcmUiLCJiaiIsImNqIiwiZGoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJqaiIsImtqIiwicGVuZGluZ0NvbnRleHQiLCJsaiIsInpqIiwiQWoiLCJCaiIsIkNqIiwibWoiLCJuaiIsIm9qIiwiZmFsbGJhY2siLCJwaiIsInFqIiwic2oiLCJkYXRhc2V0IiwiZGdzdCIsInRqIiwidWoiLCJfcmVhY3RSZXRyeSIsInJqIiwic3VidHJlZUZsYWdzIiwidmoiLCJ3aiIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsInhqIiwiRGoiLCJTIiwiRWoiLCJGaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlUiLCJLaiIsIldlYWtTZXQiLCJWIiwiTGoiLCJXIiwiTWoiLCJOaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIldqIiwiWCIsIlhqIiwiWWoiLCJaaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiaXNIaWRkZW4iLCJmayIsImdrIiwiZGlzcGxheSIsImhrIiwiaWsiLCJqayIsImtrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJWayIsImxrIiwiY2VpbCIsIm1rIiwibmsiLCJvayIsIlkiLCJaIiwicGsiLCJxayIsInJrIiwic2siLCJ0ayIsIkluZmluaXR5IiwidWsiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkVrIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUGsiLCJ0aW1lb3V0SGFuZGxlIiwiUWsiLCJSayIsIlNrIiwiVGsiLCJVayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIk9qIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIldrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWGsiLCJZayIsIiRrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImFsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImJsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsImlsIiwieWoiLCJaayIsImtsIiwicmVwb3J0RXJyb3IiLCJsbCIsIl9pbnRlcm5hbFJvb3QiLCJtbCIsIm5sIiwib2wiLCJwbCIsInJsIiwicWwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInNsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidGwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInVsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInZsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwiX19zZWxmIiwiX19zb3VyY2UiLCJGcmFnbWVudCIsImpzeCIsImpzeHMiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiYWN0IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsInBvcCIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwic2V0SW1tZWRpYXRlIiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwibmF2aWdhdG9yIiwic2NoZWR1bGluZyIsImlzSW5wdXRQZW5kaW5nIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiZmxvb3IiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4IiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwiaW5zZXJ0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiQnV0dG9uIiwiY2xhc3NOYW1lIiwibGFiZWwiLCJ2YXJpYW50IiwiYnV0dG9uQ2xhc3MiLCJfdHlwZW9mIiwibyIsIl90b0RhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3RvRmxvYXQiLCJfdG9JbnQiLCJfdG9Cb29sZWFuIiwiX2VxdWFscyIsIl9jb250YWlucyIsIl9tYXRjaGVzIiwiX2lzRW1haWwiLCJfaXNVUkwiLCJfaXNNQUNBZGRyZXNzIiwiX2lzSVAiLCJfaXNJUFJhbmdlIiwiX2lzRlFETiIsIl9pc0RhdGUiLCJfaXNUaW1lIiwiX2lzQm9vbGVhbiIsIl9pc0xvY2FsZSIsIl9pc0FiYVJvdXRpbmciLCJfaXNBbHBoYSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2lzQWxwaGFudW1lcmljIiwiX2lzTnVtZXJpYyIsIl9pc1Bhc3Nwb3J0TnVtYmVyIiwiX2lzUG9ydCIsIl9pc0xvd2VyY2FzZSIsIl9pc1VwcGVyY2FzZSIsIl9pc0lNRUkiLCJfaXNBc2NpaSIsIl9pc0Z1bGxXaWR0aCIsIl9pc0hhbGZXaWR0aCIsIl9pc1ZhcmlhYmxlV2lkdGgiLCJfaXNNdWx0aWJ5dGUiLCJfaXNTZW1WZXIiLCJfaXNTdXJyb2dhdGVQYWlyIiwiX2lzSW50IiwiX2lzRmxvYXQiLCJfaXNEZWNpbWFsIiwiX2lzSGV4YWRlY2ltYWwiLCJfaXNPY3RhbCIsIl9pc0RpdmlzaWJsZUJ5IiwiX2lzSGV4Q29sb3IiLCJfaXNSZ2JDb2xvciIsIl9pc0hTTCIsIl9pc0lTUkMiLCJfaXNJQkFOIiwiX2lzQklDIiwiX2lzTUQiLCJfaXNIYXNoIiwiX2lzSldUIiwiX2lzSlNPTiIsIl9pc0VtcHR5IiwiX2lzTGVuZ3RoIiwiX2lzQnl0ZUxlbmd0aCIsIl9pc1VVSUQiLCJfaXNNb25nb0lkIiwiX2lzQWZ0ZXIiLCJfaXNCZWZvcmUiLCJfaXNJbiIsIl9pc0x1aG5OdW1iZXIiLCJfaXNDcmVkaXRDYXJkIiwiX2lzSWRlbnRpdHlDYXJkIiwiX2lzRUFOIiwiX2lzSVNJTiIsIl9pc0lTQk4iLCJfaXNJU1NOIiwiX2lzVGF4SUQiLCJfaXNNb2JpbGVQaG9uZSIsIl9pc0V0aGVyZXVtQWRkcmVzcyIsIl9pc0N1cnJlbmN5IiwiX2lzQnRjQWRkcmVzcyIsIl9pc0lTTyIsIl9pc0lTTzIiLCJfaXNJU08zIiwiX2lzUkZDIiwiX2lzSVNPMzE2NjFBbHBoYSIsIl9pc0lTTzMxNjYxQWxwaGEyIiwiX2lzSVNPNCIsIl9pc0Jhc2UiLCJfaXNCYXNlMiIsIl9pc0Jhc2UzIiwiX2lzRGF0YVVSSSIsIl9pc01hZ25ldFVSSSIsIl9pc01haWx0b1VSSSIsIl9pc01pbWVUeXBlIiwiX2lzTGF0TG9uZyIsIl9pc1Bvc3RhbENvZGUiLCJfbHRyaW0iLCJfcnRyaW0iLCJfdHJpbSIsIl9lc2NhcGUiLCJfdW5lc2NhcGUiLCJfc3RyaXBMb3ciLCJfd2hpdGVsaXN0IiwiX2JsYWNrbGlzdCIsIl9pc1doaXRlbGlzdGVkIiwiX25vcm1hbGl6ZUVtYWlsIiwiX2lzU2x1ZyIsIl9pc0xpY2Vuc2VQbGF0ZSIsIl9pc1N0cm9uZ1Bhc3N3b3JkIiwiX2lzVkFUIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiX19lc01vZHVsZSIsIl9fcHJvdG9fXyIsInZhbGlkYXRvciIsInRvRGF0ZSIsInRvRmxvYXQiLCJ0b0ludCIsInRvQm9vbGVhbiIsImVxdWFscyIsIm1hdGNoZXMiLCJpc0VtYWlsIiwiaXNVUkwiLCJpc01BQ0FkZHJlc3MiLCJpc0lQIiwiaXNJUFJhbmdlIiwiaXNGUUROIiwiaXNCb29sZWFuIiwiaXNJQkFOIiwiaXNCSUMiLCJpc0FiYVJvdXRpbmciLCJpc0FscGhhIiwiaXNBbHBoYUxvY2FsZXMiLCJsb2NhbGVzIiwiaXNBbHBoYW51bWVyaWMiLCJpc0FscGhhbnVtZXJpY0xvY2FsZXMiLCJpc051bWVyaWMiLCJpc1Bhc3Nwb3J0TnVtYmVyIiwiaXNQb3J0IiwiaXNMb3dlcmNhc2UiLCJpc1VwcGVyY2FzZSIsImlzQXNjaWkiLCJpc0Z1bGxXaWR0aCIsImlzSGFsZldpZHRoIiwiaXNWYXJpYWJsZVdpZHRoIiwiaXNNdWx0aWJ5dGUiLCJpc1NlbVZlciIsImlzU3Vycm9nYXRlUGFpciIsImlzSW50IiwiaXNJTUVJIiwiaXNGbG9hdCIsImlzRmxvYXRMb2NhbGVzIiwiaXNEZWNpbWFsIiwiaXNIZXhhZGVjaW1hbCIsImlzT2N0YWwiLCJpc0RpdmlzaWJsZUJ5IiwiaXNIZXhDb2xvciIsImlzUmdiQ29sb3IiLCJpc0hTTCIsImlzSVNSQyIsImlzTUQ1IiwiaXNIYXNoIiwiaXNKV1QiLCJpc0pTT04iLCJpc0VtcHR5IiwiaXNMZW5ndGgiLCJpc0xvY2FsZSIsImlzQnl0ZUxlbmd0aCIsImlzVVVJRCIsImlzTW9uZ29JZCIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImlzSW4iLCJpc0x1aG5OdW1iZXIiLCJpc0NyZWRpdENhcmQiLCJpc0lkZW50aXR5Q2FyZCIsImlzRUFOIiwiaXNJU0lOIiwiaXNJU0JOIiwiaXNJU1NOIiwiaXNNb2JpbGVQaG9uZSIsImlzTW9iaWxlUGhvbmVMb2NhbGVzIiwiaXNQb3N0YWxDb2RlIiwiaXNQb3N0YWxDb2RlTG9jYWxlcyIsImlzRXRoZXJldW1BZGRyZXNzIiwiaXNDdXJyZW5jeSIsImlzQnRjQWRkcmVzcyIsImlzSVNPNjM0NiIsImlzRnJlaWdodENvbnRhaW5lcklEIiwiaXNJU082MzkxIiwiaXNJU084NjAxIiwiaXNSRkMzMzM5IiwiaXNJU08zMTY2MUFscGhhMiIsImlzSVNPMzE2NjFBbHBoYTMiLCJpc0lTTzQyMTciLCJpc0Jhc2UzMiIsImlzQmFzZTU4IiwiaXNCYXNlNjQiLCJpc0RhdGFVUkkiLCJpc01hZ25ldFVSSSIsImlzTWFpbHRvVVJJIiwiaXNNaW1lVHlwZSIsImlzTGF0TG9uZyIsImx0cmltIiwicnRyaW0iLCJzdHJpcExvdyIsIndoaXRlbGlzdCIsImJsYWNrbGlzdCIsImlzV2hpdGVsaXN0ZWQiLCJub3JtYWxpemVFbWFpbCIsImlzU2x1ZyIsImlzU3Ryb25nUGFzc3dvcmQiLCJpc1RheElEIiwiaXNEYXRlIiwiaXNUaW1lIiwiaXNMaWNlbnNlUGxhdGUiLCJpc1ZBVCIsImliYW5Mb2NhbGVzIiwiZmFyc2lMb2NhbGVzIiwiZW5nbGlzaExvY2FsZXMiLCJkb3REZWNpbWFsIiwiZGVjaW1hbCIsImNvbW1hRGVjaW1hbCIsImJlbmdhbGlMb2NhbGVzIiwiYXJhYmljTG9jYWxlcyIsImFscGhhbnVtZXJpYyIsImFscGhhIiwiYXIiLCJibiIsImVvIiwiX2xvY2FsZSIsIl9sb2NhbGUyIiwiX2kyIiwiX2xvY2FsZTMiLCJfaTMiLCJfaTQiLCJfaTUiLCJzdHIiLCJjaGFycyIsIl9hc3NlcnRTdHJpbmciLCJSZWdFeHAiLCJlbGVtIiwiX21lcmdlIiwiZGVmYXVsQ29udGFpbnNPcHRpb25zIiwiaWdub3JlQ2FzZSIsIl90b1N0cmluZyIsIm1pbk9jY3VycmVuY2VzIiwiY29tcGFyaXNvbiIsImlzUm91dGluZ1JlZyIsImNoZWNrU3VtVmFsIiwiY29tcGFyaXNvbkRhdGUiLCJvcmlnaW5hbCIsIl9zdHIiLCJpZ25vcmUiLCJfYWxwaGEiLCJhc2NpaSIsImNvdW50cnlDb2RlIiwiQ291bnRyeUNvZGVzIiwiaXNCSUNSZWciLCJkZWZhdWx0QmFzZTMyT3B0aW9ucyIsImNyb2NrZm9yZCIsImNyb2NrZm9yZEJhc2UzMiIsImJhc2UzMiIsImJhc2U1OFJlZyIsImRlZmF1bHRCYXNlNjRPcHRpb25zIiwibGVuIiwidXJsU2FmZSIsInVybFNhZmVCYXNlNjQiLCJub3RCYXNlNjQiLCJmaXJzdFBhZGRpbmdDaGFyIiwiZGVmYXVsdE9wdGlvbnMiLCJsb29zZSIsImxvb3NlQm9vbGVhbnMiLCJzdHJpY3RCb29sZWFucyIsImJlY2gzMiIsImJhc2U1OCIsIm1heCIsImVuY29kZVVSSSIsImNhcmQiLCJwcm92aWRlciIsInNhbml0aXplZCIsImNhcmRzIiwiYWxsQ2FyZHMiLCJzb21lIiwiY2FyZFByb3ZpZGVyIiwiYW1leCIsImRpbmVyc2NsdWIiLCJkaXNjb3ZlciIsImpjYiIsIm1hc3RlcmNhcmQiLCJ1bmlvbnBheSIsInZpc2EiLCJ0bXBDYXJkc0FycmF5IiwiZGVjaW1hbF9kaWdpdHMiLCJkaWdpdHNfYWZ0ZXJfZGVjaW1hbCIsImRpZ2l0Iiwic3ltYm9sIiwicmVxdWlyZV9zeW1ib2wiLCJuZWdhdGl2ZSIsIndob2xlX2RvbGxhcl9hbW91bnRfd2l0aF9zZXAiLCJ0aG91c2FuZHNfc2VwYXJhdG9yIiwid2hvbGVfZG9sbGFyX2Ftb3VudCIsImRlY2ltYWxfYW1vdW50IiwiZGVjaW1hbF9zZXBhcmF0b3IiLCJyZXF1aXJlX2RlY2ltYWwiLCJwYXR0ZXJuIiwiYWxsb3dfZGVjaW1hbCIsImFsbG93X25lZ2F0aXZlcyIsInBhcmVuc19mb3JfbmVnYXRpdmVzIiwibmVnYXRpdmVfc2lnbl9hZnRlcl9kaWdpdHMiLCJuZWdhdGl2ZV9zaWduX2JlZm9yZV9kaWdpdHMiLCJhbGxvd19uZWdhdGl2ZV9zaWduX3BsYWNlaG9sZGVyIiwiYWxsb3dfc3BhY2VfYWZ0ZXJfc3ltYm9sIiwiYWxsb3dfc3BhY2VfYWZ0ZXJfZGlnaXRzIiwic3ltYm9sX2FmdGVyX2RpZ2l0cyIsImN1cnJlbmN5UmVnZXgiLCJkZWZhdWx0X2N1cnJlbmN5X29wdGlvbnMiLCJzY2hlbWVBbmRNZWRpYVR5cGUiLCJtZWRpYVR5cGUiLCJ2YWxpZE1lZGlhVHlwZSIsInZhbGlkQXR0cmlidXRlIiwidmFsaWREYXRhIiwiZm9ybWF0IiwiZGVmYXVsdF9kYXRlX29wdGlvbnMiLCJfc3RlcCIsImZvcm1hdERlbGltaXRlciIsImRlbGltaXRlcnMiLCJmaW5kIiwiZGVsaW1pdGVyIiwiZGF0ZURlbGltaXRlciIsInN0cmljdE1vZGUiLCJkYXRlQW5kRm9ybWF0IiwiemlwcGVkQXJyIiwiemlwIiwiZGF0ZU9iaiIsIl9pdGVyYXRvciIsIml0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwicyIsIl9lIiwiVHlwZUVycm9yIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsInN0ZXAiLCJfZTIiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwJHZhbHVlIiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsImRhdGVXb3JkIiwiZm9ybWF0V29yZCIsImZ1bGxZZWFyIiwic3RhcnRzV2l0aCIsInBhcnNlZFllYXIiLCJwYXJzZUludCIsImdldEZ1bGxZZWFyIiwiZGF5IiwiZ2V0VVRDRGF0ZSIsImlzRmluaXRlIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJmcm9tIiwiYXJyMiIsImRlZmF1bHRfZGVjaW1hbF9vcHRpb25zIiwiX2luY2x1ZGVzIiwiZm9yY2VfZGVjaW1hbCIsImRlY2ltYWxSZWdFeHAiLCJudW0iLCJlYW4iLCJyZW1haW5kZXIiLCJhY3R1YWxDaGVja0RpZ2l0IiwiTnVtYmVyIiwidmFsaWRFYW5SZWdleCIsIkxFTkdUSF9FQU5fOCIsIkxFTkdUSF9FQU5fMTQiLCJnZXRQb3NpdGlvbldlaWdodFRocm91Z2hMZW5ndGhBbmRJbmRleCIsInJlZHVjZSIsImFjYyIsInBhcnRpYWxTdW0iLCJkZWZhdWx0X2VtYWlsX29wdGlvbnMiLCJyZXF1aXJlX2Rpc3BsYXlfbmFtZSIsImFsbG93X2Rpc3BsYXlfbmFtZSIsImRpc3BsYXlfZW1haWwiLCJzcGxpdE5hbWVBZGRyZXNzIiwiZGlzcGxheV9uYW1lIiwiZW5kc1dpdGgiLCJkaXNwbGF5X25hbWVfd2l0aG91dF9xdW90ZXMiLCJ2YWxpZGF0ZURpc3BsYXlOYW1lIiwiaWdub3JlX21heF9sZW5ndGgiLCJkZWZhdWx0TWF4RW1haWxMZW5ndGgiLCJwYXJ0cyIsImRvbWFpbiIsImxvd2VyX2RvbWFpbiIsImhvc3RfYmxhY2tsaXN0IiwiaG9zdF93aGl0ZWxpc3QiLCJ1c2VyIiwiZG9tYWluX3NwZWNpZmljX3ZhbGlkYXRpb24iLCJ1c2VybmFtZSIsIl91c2VyX3BhcnRzIiwiZ21haWxVc2VyUGFydCIsInJlcXVpcmVfdGxkIiwiYWxsb3dfdW5kZXJzY29yZXMiLCJhbGxvd19pcF9kb21haW4iLCJub0JyYWNrZXRkb21haW4iLCJhbGxvd191dGY4X2xvY2FsX3BhcnQiLCJxdW90ZWRFbWFpbFVzZXJVdGY4IiwicXVvdGVkRW1haWxVc2VyIiwiZW1haWxVc2VyVXRmOFBhcnQiLCJlbWFpbFVzZXJQYXJ0IiwidXNlcl9wYXJ0cyIsImJsYWNrbGlzdGVkX2NoYXJzIiwiZGVmYXVsdF9pc19lbXB0eV9vcHRpb25zIiwiaWdub3JlX3doaXRlc3BhY2UiLCJldGgiLCJkZWZhdWx0X2ZxZG5fb3B0aW9ucyIsImFsbG93X3RyYWlsaW5nX2RvdCIsImFsbG93X3dpbGRjYXJkIiwidGxkIiwiYWxsb3dfbnVtZXJpY190bGQiLCJldmVyeSIsInBhcnQiLCJmbG9hdCIsInBhcnNlRmxvYXQiLCJsdCIsImd0IiwiZnVsbFdpZHRoIiwic3RyaXBwZWRTdHIiLCJoc2xDb21tYSIsImhzbFNwYWNlIiwiaGFsZldpZHRoIiwiYWxnb3JpdGhtIiwibGVuZ3RocyIsIm1kNSIsIm1kNCIsInNoYTEiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJyaXBlbWQxMjgiLCJyaXBlbWQxNjAiLCJ0aWdlcjEyOCIsInRpZ2VyMTYwIiwidGlnZXIxOTIiLCJjcmMzMiIsImNyYzMyYiIsImhleGNvbG9yIiwiaGV4YWRlY2ltYWwiLCJpc29Db3VudHJ5Q29kZSIsImlzb0NvdW50cnlDb2RlSW5JYmFuUmVnZXhDb2RlT2JqZWN0IiwiaWJhblJlZ2V4VGhyb3VnaENvdW50cnlDb2RlIiwiZmlsdGVyIiwiaGFzVmFsaWRJYmFuRm9ybWF0IiwiY2hhckNvZGVBdCIsImhhc1ZhbGlkSWJhbkNoZWNrc3VtIiwiQUQiLCJBRSIsIkFMIiwiQVQiLCJBWiIsIkJBIiwiQkUiLCJCRyIsIkJIIiwiQlIiLCJCWSIsIkNIIiwiQ1IiLCJDWSIsIkNaIiwiREUiLCJESyIsIkRPIiwiRFoiLCJFRSIsIkVHIiwiRVMiLCJGSSIsIkZPIiwiRlIiLCJHQiIsIkdFIiwiR0kiLCJHTCIsIkdSIiwiR1QiLCJIUiIsIkhVIiwiSUUiLCJJTCIsIklRIiwiSVIiLCJJUyIsIklUIiwiSk8iLCJLVyIsIktaIiwiTEIiLCJMQyIsIkxJIiwiTFQiLCJMVSIsIkxWIiwiTUEiLCJNQyIsIk1EIiwiTUUiLCJNSyIsIk1SIiwiTVQiLCJNVSIsIk1aIiwiTkwiLCJOTyIsIlBLIiwiUEwiLCJQUyIsIlBUIiwiUUEiLCJSTyIsIlJTIiwiU0EiLCJTQyIsIlNFIiwiU0kiLCJTSyIsIlNNIiwiU1YiLCJUTCIsIlROIiwiVFIiLCJVQSIsIlZBIiwiVkciLCJYSyIsImltZWlSZWdleCIsImltZWlSZWdleFdpdGhvdXRIeXBlbnMiLCJhbGxvd19oeXBoZW5zIiwiaW1laVJlZ2V4V2l0aEh5cGVucyIsInN1bSIsIm11bCIsInRwIiwiSVB2NEFkZHJlc3NSZWdFeHAiLCJJUHY2QWRkcmVzc1JlZ0V4cCIsIklQdjRTZWdtZW50Rm9ybWF0IiwiSVB2NEFkZHJlc3NGb3JtYXQiLCJJUHY2U2VnbWVudEZvcm1hdCIsInN1Ym5ldE1heWJlIiwiZXhwZWN0ZWRTdWJuZXQiLCJ2NFN1Ym5ldCIsInY2U3VibmV0IiwiaXNibiIsInNhbml0aXplZElzYm4iLCJjaGVja3N1bSIsInBvc3NpYmxlSXNibjEwIiwicG9zc2libGVJc2JuMTMiLCJmYWN0b3IiLCJpc2luIiwiZG91YmxlIiwiX2FyciIsInRydW5jIiwiX2RpZ2l0IiwiY2hlY2siLCJ2YWxpZElTTzMxNjYxQWxwaGEyQ291bnRyaWVzQ29kZXMiLCJ2YWxpZElTTzMxNjYxQWxwaGEzQ291bnRyaWVzQ29kZXMiLCJDdXJyZW5jeUNvZGVzIiwidmFsaWRJU080MjE3Q3VycmVuY3lDb2RlcyIsImlzSVNPNjM0NlN0ciIsImlzRGlnaXQiLCJwb3ciLCJsZXR0ZXJDb2RlIiwiY2hlY2tTdW1EaWdpdCIsImlzSVNPNjM5MVNldCIsInN0cmljdFNlcGFyYXRvciIsImlzbzg2MDFTdHJpY3RTZXBhcmF0b3IiLCJpc284NjAxIiwic3RyaWN0IiwiaXNWYWxpZERhdGUiLCJvcmRpbmFsTWF0Y2giLCJvWWVhciIsIm9EYXkiLCJ5ZWFyIiwibW9udGhTdHJpbmciLCJkYXlTdHJpbmciLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiaXNyYyIsInRlc3RJc3NuIiwiaXNzbiIsInJlcXVpcmVfaHlwaGVuIiwiY2FzZV9zZW5zaXRpdmUiLCJkaWdpdHMiLCJ2YWxpZGF0b3JzIiwid2VpZ2h0T2ZEaWdpdHMiLCJhbGxvd19sZWFkaW5nX3plcm9lcyIsIm1vZHVsbyIsImxhc3REaWdpdCIsImNoYXJzVmFsdWUiLCJJTiIsInJldmVyc2UiLCJ2YWwiLCJsYXN0TnVtYmVyIiwiazEiLCJrMiIsIlRIIiwiTEsiLCJpbmNOdW0iLCJpZENhcmRObyIsInByb3ZpbmNlc0FuZENpdGllcyIsInBvd2VycyIsInBhcml0eUJpdCIsImNoZWNrQWRkcmVzc0NvZGUiLCJhZGRyZXNzQ29kZSIsImNoZWNrQmlydGhEYXlDb2RlIiwiYmlyRGF5Q29kZSIsInl5eXkiLCJtbSIsInhkYXRhIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY2hlY2sxNUlkQ2FyZE5vIiwiaWQxNyIsInBvd2VyIiwiZ2V0UGFyaXR5Qml0IiwiY2hlY2tQYXJpdHlCaXQiLCJjaGVjazE4SWRDYXJkTm8iLCJyZWdleElzRGlnaXQiLCJBTFBIQUJFVF9DT0RFUyIsImFycmF5IiwicmVnZXgiLCJpbnQiLCJpbnRMZWFkaW5nWmVyb2VzIiwibWluQ2hlY2tQYXNzZWQiLCJtYXhDaGVja1Bhc3NlZCIsImx0Q2hlY2tQYXNzZWQiLCJndENoZWNrUGFzc2VkIiwiZGVmYXVsdF9qc29uX29wdGlvbnMiLCJwcmltaXRpdmVzIiwiYWxsb3dfcHJpbWl0aXZlcyIsInBhcnNlIiwiZG90U3BsaXQiLCJjdXJyRWxlbSIsImRlZmF1bHRMYXRMb25nT3B0aW9ucyIsInBhaXIiLCJjaGVja0RNUyIsImxhdERNUyIsImxvbmdETVMiLCJsYXQiLCJsb25nIiwicHJlc2VudGF0aW9uU2VxdWVuY2VzIiwic3Vycm9nYXRlUGFpcnMiLCJsYW5ndWFnZVRhZ1JlZ2V4IiwibGFuZ3VhZ2UiLCJleHRlbnNpb24iLCJwcml2YXRldXNlIiwiZ3JhbmRmYXRoZXJlZCIsImxhbmd0YWciLCJ0bXBOdW0iLCJzaG91bGREb3VibGUiLCJldWkiLCJub19jb2xvbnMiLCJub19zZXBhcmF0b3JzIiwibWFjQWRkcmVzczQ4Tm9TZXBhcmF0b3JzIiwibWFjQWRkcmVzczY0Tm9TZXBhcmF0b3JzIiwibWFjQWRkcmVzczQ4IiwibWFjQWRkcmVzczQ4V2l0aERvdHMiLCJtYWNBZGRyZXNzNjQiLCJtYWNBZGRyZXNzNjRXaXRoRG90cyIsIm1hZ25ldFVSSUNvbXBvbmVudCIsIl91cmwkcmVwbGFjZSRzcGxpdDIiLCJfc2xpY2VkVG9BcnJheSIsInRvIiwiX3VybCRyZXBsYWNlJHNwbGl0MiQiLCJxdWVyeVN0cmluZyIsInF1ZXJ5IiwiYWxsb3dlZFBhcmFtcyIsImJjYyIsImlzUGFyc2VGYWlsZWQiLCJxdWVyeVBhcmFtcyIsIl9xJHNwbGl0MiIsInBhcnNlTWFpbHRvUXVlcnlTdHJpbmciLCJtaW1lVHlwZVNpbXBsZSIsIm1pbWVUeXBlVGV4dCIsIm1pbWVUeXBlTXVsdGlwYXJ0IiwicGhvbmVzIiwibXVsdGlieXRlIiwibm9fc3ltYm9scyIsIm51bWVyaWNOb1N5bWJvbHMiLCJvY3RhbCIsIm5vcm1hbGl6ZWRTdHIiLCJwYXNzcG9ydFJlZ2V4QnlDb3VudHJ5Q29kZSIsIkFNIiwiQVIiLCJBVSIsIkNBIiwiQ04iLCJJRCIsIkpNIiwiSlAiLCJLUiIsIkxZIiwiTVkiLCJNWCIsIk5aIiwiUEgiLCJSVSIsIlNMIiwiVVMiLCJaQSIsInBhdHRlcm5zIiwidGhyZWVEaWdpdCIsImZvdXJEaWdpdCIsImZpdmVEaWdpdCIsInNpeERpZ2l0IiwiSFQiLCJLRSIsIk1HIiwiTlAiLCJQUiIsIlNHIiwiVFciLCJaTSIsInJmYzMzMzkiLCJ0aW1lSG91ciIsInRpbWVNaW51dGUiLCJ0aW1lTnVtT2Zmc2V0IiwidGltZU9mZnNldCIsInBhcnRpYWxUaW1lIiwiZnVsbERhdGUiLCJmdWxsVGltZSIsImluY2x1ZGVQZXJjZW50VmFsdWVzIiwicmdiQ29sb3IiLCJyZ2JhQ29sb3IiLCJyZ2JDb2xvclBlcmNlbnQiLCJyZ2JhQ29sb3JQZXJjZW50Iiwic2VtYW50aWNWZXJzaW9uaW5nUmVnZXgiLCJjaGFyc2V0UmVnZXgiLCJhbmFseXNpcyIsImNoYXJNYXAiLCJjb3VudENoYXJzIiwidW5pcXVlQ2hhcnMiLCJ1cHBlcmNhc2VDb3VudCIsImxvd2VyY2FzZUNvdW50IiwibnVtYmVyQ291bnQiLCJzeW1ib2xDb3VudCIsInVwcGVyQ2FzZVJlZ2V4IiwibG93ZXJDYXNlUmVnZXgiLCJudW1iZXJSZWdleCIsInN5bWJvbFJlZ2V4IiwiYW5hbHl6ZVBhc3N3b3JkIiwicmV0dXJuU2NvcmUiLCJzY29yaW5nT3B0aW9ucyIsInBvaW50cyIsInBvaW50c1BlclVuaXF1ZSIsInBvaW50c1BlclJlcGVhdCIsInBvaW50c0ZvckNvbnRhaW5pbmdMb3dlciIsInBvaW50c0ZvckNvbnRhaW5pbmdVcHBlciIsInBvaW50c0ZvckNvbnRhaW5pbmdOdW1iZXIiLCJwb2ludHNGb3JDb250YWluaW5nU3ltYm9sIiwic2NvcmVQYXNzd29yZCIsIm1pbkxlbmd0aCIsIm1pbkxvd2VyY2FzZSIsIm1pblVwcGVyY2FzZSIsIm1pbk51bWJlcnMiLCJtaW5TeW1ib2xzIiwic3Vycm9nYXRlUGFpciIsInN0cmNvcHkiLCJ0YXhJZEZvcm1hdCIsInNhbml0aXplUmVnZXhlcyIsInRheElkQ2hlY2siLCJhbGdvcml0aG1zIiwiZW5Vc0NhbXB1c1ByZWZpeCIsImFuZG92ZXIiLCJhdGxhbnRhIiwiYXVzdGluIiwiYnJvb2toYXZlbiIsImNpbmNpbm5hdGkiLCJmcmVzbm8iLCJpbnRlcm5ldCIsImthbnNhcyIsIm1lbXBoaXMiLCJvZ2RlbiIsInBoaWxhZGVscGhpYSIsInNiYSIsIml0SXROYW1lQ2hlY2siLCJ2b3dlbGZsYWciLCJ4ZmxhZyIsInRpbiIsImNlbnR1cnlfeWVhciIsIm11bHRpcF9sb29rdXAiLCJmdWxsX3llYXIiLCJjaGVja2RpZ2l0IiwibHVobkNoZWNrIiwib2NjdXJlbmNlcyIsImoiLCJ0cmlwX2xvY2F0aW9ucyIsInJlY3VycmVudCIsImlzbzcwNjRDaGVjayIsIndlaWdodCIsImRpZ2l0c0FycmF5IiwiZXZlbiIsIl8iLCJpZHgiLCJjdXIiLCJyZXZlcnNlTXVsdGlwbHlBbmRTdW0iLCJwcmVmaXhlcyIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiZW5Vc0dldFByZWZpeGVzIiwiYWNjdW0iLCJ2ZXJpZiIsImxlYWRfcmVwbGFjZSIsImNoZWNrZGlnaXRzIiwidmVyaG9lZmZDaGVjayIsIm51bWJlcl9yZXBsYWNlIiwiX251bWJlcl9sb2NhdGlvbnMiLCJjaGFyX3RvX2ludCIsIm9kZF9jb252ZXJ0IiwiX2k2IiwiX2NoYXJfdG9faW50IiwibXVsdGlwbGllciIsImZpcnN0X3BhcnQiLCJsb29rdXAiLCJfY2hlY2tzdW0iLCJfaTciLCJfc3VtIiwiX2k4IiwidmVyaWZpY2F0b3JzIiwicG9zIiwiX2k5IiwiX2kxMCIsIm11bHRpcGxpZXJzIiwidGluX2NvcHkiLCJjdXJyZW50X3llYXIiLCJjdXJyZW50X2NlbnR1cnkiLCJhbGxzeW1ib2xzIiwiZGVmYXVsdF90aW1lX29wdGlvbnMiLCJmb3JtYXRzIiwiaG91ckZvcm1hdCIsImhvdXIyNCIsIndpdGhTZWNvbmRzIiwiaG91cjEyIiwiZGVmYXVsdF91cmxfb3B0aW9ucyIsInZhbGlkYXRlX2xlbmd0aCIsImFsbG93X2ZyYWdtZW50cyIsImFsbG93X3F1ZXJ5X2NvbXBvbmVudHMiLCJwcm90b2NvbCIsImF1dGgiLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicG9ydF9zdHIiLCJpcHY2IiwicmVxdWlyZV92YWxpZF9wcm90b2NvbCIsInByb3RvY29scyIsInJlcXVpcmVfcHJvdG9jb2wiLCJhbGxvd19wcm90b2NvbF9yZWxhdGl2ZV91cmxzIiwicmVxdWlyZV9ob3N0IiwiZGlzYWxsb3dfYXV0aCIsIl9hdXRoJHNwbGl0MiIsImlwdjZfbWF0Y2giLCJ3cmFwcGVkX2lwdjYiLCJyZXF1aXJlX3BvcnQiLCJjaGVja0hvc3QiLCJ1dWlkIiwiYWxsIiwidmF0TWF0Y2hlcnMiLCJFTCIsIndlaWdodHMiLCJBQk4iLCJ0b3RhbCIsIk5HIiwiVVoiLCJCTyIsIkNMIiwiQ08iLCJFQyIsIkhOIiwiTkkiLCJQQSIsIlBZIiwiUEUiLCJVWSIsIlZFIiwibW9kaWZpZXJzIiwiZGVmYXVsdF9ub3JtYWxpemVfZW1haWxfb3B0aW9ucyIsInJhd19wYXJ0cyIsImdtYWlsX3JlbW92ZV9zdWJhZGRyZXNzIiwiZ21haWxfcmVtb3ZlX2RvdHMiLCJkb3RzUmVwbGFjZXIiLCJhbGxfbG93ZXJjYXNlIiwiZ21haWxfbG93ZXJjYXNlIiwiZ21haWxfY29udmVydF9nb29nbGVtYWlsZG90Y29tIiwiaWNsb3VkX2RvbWFpbnMiLCJpY2xvdWRfcmVtb3ZlX3N1YmFkZHJlc3MiLCJpY2xvdWRfbG93ZXJjYXNlIiwib3V0bG9va2RvdGNvbV9kb21haW5zIiwib3V0bG9va2RvdGNvbV9yZW1vdmVfc3ViYWRkcmVzcyIsIm91dGxvb2tkb3Rjb21fbG93ZXJjYXNlIiwieWFob29fZG9tYWlucyIsInlhaG9vX3JlbW92ZV9zdWJhZGRyZXNzIiwiY29tcG9uZW50cyIsInlhaG9vX2xvd2VyY2FzZSIsInlhbmRleF9kb21haW5zIiwieWFuZGV4X2xvd2VyY2FzZSIsInN0ckluZGV4Iiwia2VlcF9uZXdfbGluZXMiLCJOYU4iLCJyYWRpeCIsImNoZWNrdmFsdWUiLCJzZWNvbmQiLCJwcm9kdWN0IiwiZF90YWJsZSIsInBfdGFibGUiLCJzdHJfY29weSIsImludmFsaWRUeXBlIiwiYXJyVmFsIiwiZGVmYXVsdHMiLCJyZWdleHBBc1N0cmluZ0xpdGVyYWwiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZyIsImFwcGVuZENsYXNzIiwicGFyc2VWYWx1ZSIsIm5ld0NsYXNzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImdldFByb3RvdHlwZU9mIiwibnMiLCJkZWYiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZGVmaW5pdGlvbiIsImNodW5rSWQiLCJwcm9taXNlcyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwiY2hhcnNldCIsInRpbWVvdXQiLCJuYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2Iiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJmbiIsInRvU3RyaW5nVGFnIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiLCJpbnN0YWxsZWRDaHVua3MiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwicmVqZWN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiQWN0aW9uIiwiX2V4dGVuZHMiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsIndhcm5pbmciLCJjb25kIiwid2FybiIsImdldEhpc3RvcnlTdGF0ZSIsInVzciIsImNyZWF0ZUxvY2F0aW9uIiwicGF0aG5hbWUiLCJoYXNoIiwicGFyc2VQYXRoIiwic3Vic3RyIiwiX3JlZiIsInBhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJSZXN1bHRUeXBlIiwiaW1tdXRhYmxlUm91dGVLZXlzIiwiY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyIsInJvdXRlcyIsIm1hcFJvdXRlUHJvcGVydGllcyIsInBhcmVudFBhdGgiLCJtYW5pZmVzdCIsInJvdXRlIiwidHJlZVBhdGgiLCJpc0luZGV4Um91dGUiLCJpbmRleFJvdXRlIiwicGF0aE9yTGF5b3V0Um91dGUiLCJtYXRjaFJvdXRlcyIsImxvY2F0aW9uQXJnIiwiYmFzZW5hbWUiLCJtYXRjaFJvdXRlc0ltcGwiLCJhbGxvd1BhcnRpYWwiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzb3J0Iiwic2NvcmUiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJkZWNvZGVkIiwiZGVjb2RlUGF0aCIsIm1hdGNoUm91dGVCcmFuY2giLCJwYXJlbnRzTWV0YSIsImZsYXR0ZW5Sb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJjb21wdXRlU2NvcmUiLCJfcm91dGUkcGF0aCIsImV4cGxvZGVkIiwiZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMiLCJzZWdtZW50cyIsImZpcnN0IiwicmVzdCIsImlzT3B0aW9uYWwiLCJyZXF1aXJlZCIsInJlc3RFeHBsb2RlZCIsInN1YnBhdGgiLCJwYXJhbVJlIiwiZHluYW1pY1NlZ21lbnRWYWx1ZSIsImluZGV4Um91dGVWYWx1ZSIsImVtcHR5U2VnbWVudFZhbHVlIiwic3RhdGljU2VnbWVudFZhbHVlIiwic3BsYXRQZW5hbHR5IiwiaXNTcGxhdCIsImluaXRpYWxTY29yZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJwYXJhbXMiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsIm1hdGNoZXIiLCJjb21waWxlZFBhcmFtcyIsInJlZ2V4cFNvdXJjZSIsInBhcmFtTmFtZSIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdGFydEluZGV4IiwibmV4dENoYXIiLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiZmllbGQiLCJkZXN0IiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJnZXRSZXNvbHZlVG9NYXRjaGVzIiwidjdfcmVsYXRpdmVTcGxhdFBhdGgiLCJwYXRoTWF0Y2hlcyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJpc0VtcHR5UGF0aCIsInRvUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiZnJvbVBhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsInJlc29sdmVQYXRoIiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJwYXRocyIsIkVycm9yUmVzcG9uc2VJbXBsIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkTXV0YXRpb25NZXRob2RzIiwidmFsaWRSZXF1ZXN0TWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHMiLCJyZWRpcmVjdFN0YXR1c0NvZGVzIiwicmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzIiwiSURMRV9OQVZJR0FUSU9OIiwiZm9ybU1ldGhvZCIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImZvcm1EYXRhIiwianNvbiIsInByb2NlZWQiLCJyZXNldCIsIkFCU09MVVRFX1VSTF9SRUdFWCIsImRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMiLCJoYXNFcnJvckJvdW5kYXJ5IiwiQm9vbGVhbiIsIlRSQU5TSVRJT05TX1NUT1JBR0VfS0VZIiwibm9ybWFsaXplVG8iLCJwcmVwZW5kQmFzZW5hbWUiLCJmcm9tUm91dGVJZCIsInJlbGF0aXZlIiwiY29udGV4dHVhbE1hdGNoZXMiLCJhY3RpdmVSb3V0ZU1hdGNoIiwibmFrZWRJbmRleCIsImhhc05ha2VkSW5kZXhRdWVyeSIsIlVSTFNlYXJjaFBhcmFtcyIsImluZGV4VmFsdWVzIiwiZ2V0QWxsIiwiYXBwZW5kIiwicXMiLCJub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMiLCJub3JtYWxpemVGb3JtTWV0aG9kIiwiaXNGZXRjaGVyIiwib3B0cyIsImlzU3VibWlzc2lvbk5hdmlnYXRpb24iLCJtZXRob2QiLCJnZXRJbnRlcm5hbFJvdXRlckVycm9yIiwic2VhcmNoUGFyYW1zIiwiZ2V0SW52YWxpZEJvZHlFcnJvciIsInJhd0Zvcm1NZXRob2QiLCJzdHJpcEhhc2hGcm9tUGF0aCIsImlzTXV0YXRpb25NZXRob2QiLCJGb3JtRGF0YSIsImVudHJpZXMiLCJfcmVmMyIsInN1Ym1pc3Npb24iLCJjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyIsImNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhIiwiZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkiLCJib3VuZGFyeUlkIiwiaW5jbHVkZUJvdW5kYXJ5IiwiZmluZEluZGV4IiwiZ2V0TWF0Y2hlc1RvTG9hZCIsImhpc3RvcnkiLCJpbml0aWFsSHlkcmF0aW9uIiwic2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uIiwiaXNSZXZhbGlkYXRpb25SZXF1aXJlZCIsImNhbmNlbGxlZERlZmVycmVkUm91dGVzIiwiY2FuY2VsbGVkRmV0Y2hlckxvYWRzIiwiZGVsZXRlZEZldGNoZXJzIiwiZmV0Y2hMb2FkTWF0Y2hlcyIsImZldGNoUmVkaXJlY3RJZHMiLCJyb3V0ZXNUb1VzZSIsInBlbmRpbmdBY3Rpb25SZXN1bHQiLCJhY3Rpb25SZXN1bHQiLCJpc0Vycm9yUmVzdWx0IiwiY3VycmVudFVybCIsImNyZWF0ZVVSTCIsIm5leHRVcmwiLCJib3VuZGFyeU1hdGNoZXMiLCJlcnJvcnMiLCJhY3Rpb25TdGF0dXMiLCJzdGF0dXNDb2RlIiwic2hvdWxkU2tpcFJldmFsaWRhdGlvbiIsIm5hdmlnYXRpb25NYXRjaGVzIiwibG9hZGVyIiwic2hvdWxkTG9hZFJvdXRlT25IeWRyYXRpb24iLCJsb2FkZXJEYXRhIiwiY3VycmVudExvYWRlckRhdGEiLCJjdXJyZW50TWF0Y2giLCJpc05ldyIsImlzTWlzc2luZ0RhdGEiLCJpc05ld0xvYWRlciIsImN1cnJlbnRSb3V0ZU1hdGNoIiwibmV4dFJvdXRlTWF0Y2giLCJzaG91bGRSZXZhbGlkYXRlTG9hZGVyIiwiY3VycmVudFBhcmFtcyIsIm5leHRQYXJhbXMiLCJkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSIsImlzTmV3Um91dGVJbnN0YW5jZSIsInJldmFsaWRhdGluZ0ZldGNoZXJzIiwicm91dGVJZCIsImZldGNoZXJNYXRjaGVzIiwiY29udHJvbGxlciIsImZldGNoZXIiLCJmZXRjaGVycyIsImZldGNoZXJNYXRjaCIsImdldFRhcmdldE1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZSIsIkFib3J0Q29udHJvbGxlciIsImhhc0RhdGEiLCJoYXNFcnJvciIsImN1cnJlbnRQYXRoIiwibG9hZGVyTWF0Y2giLCJyb3V0ZUNob2ljZSIsInBhdGNoUm91dGVzSW1wbCIsIl9jaGlsZHJlblRvUGF0Y2giLCJjaGlsZHJlblRvUGF0Y2giLCJuZXdSb3V0ZXMiLCJuZXdSb3V0ZSIsImV4aXN0aW5nUm91dGUiLCJpc1NhbWVSb3V0ZSIsImFDaGlsZCIsIl9leGlzdGluZ1JvdXRlJGNoaWxkciIsImJDaGlsZCIsImFzeW5jIiwiZGVmYXVsdERhdGFTdHJhdGVneSIsIl9yZWY0IiwibWF0Y2hlc1RvTG9hZCIsInNob3VsZExvYWQiLCJjb252ZXJ0RGF0YVN0cmF0ZWd5UmVzdWx0VG9EYXRhUmVzdWx0IiwiZGF0YVN0cmF0ZWd5UmVzdWx0IiwiaXNSZXNwb25zZSIsImNvbnRlbnRUeXBlIiwiaGVhZGVycyIsImlzRGF0YVdpdGhSZXNwb25zZUluaXQiLCJfcmVzdWx0JGluaXQyIiwiX3Jlc3VsdCRpbml0IiwiaW5pdCIsIl9yZXN1bHQkaW5pdDMiLCJfcmVzdWx0JGluaXQ0IiwiX3Jlc3VsdCRpbml0NSIsIl9yZXN1bHQkaW5pdDYiLCJkZWZlcnJlZCIsInN1YnNjcmliZSIsImNhbmNlbCIsInJlc29sdmVEYXRhIiwiaXNEZWZlcnJlZERhdGEiLCJkZWZlcnJlZERhdGEiLCJIZWFkZXJzIiwibm9ybWFsaXplUmVsYXRpdmVSb3V0aW5nUmVkaXJlY3RSZXNwb25zZSIsInJlc3BvbnNlIiwidHJpbW1lZE1hdGNoZXMiLCJVUkwiLCJub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uIiwibm9ybWFsaXplZExvY2F0aW9uIiwiaXNTYW1lQmFzZW5hbWUiLCJvcmlnaW4iLCJjcmVhdGVDbGllbnRTaWRlUmVxdWVzdCIsInNpZ25hbCIsIlJlcXVlc3QiLCJwcm9jZXNzTG9hZGVyRGF0YSIsInJlc3VsdHMiLCJmZXRjaGVyUmVzdWx0cyIsImFjdGl2ZURlZmVycmVkcyIsInNraXBMb2FkZXJFcnJvckJ1YmJsaW5nIiwiZm91bmRFcnJvciIsImxvYWRlckhlYWRlcnMiLCJwZW5kaW5nRXJyb3IiLCJpc1JlZGlyZWN0UmVzdWx0IiwiYm91bmRhcnlNYXRjaCIsImZpbmROZWFyZXN0Qm91bmRhcnkiLCJpc0RlZmVycmVkUmVzdWx0IiwicHJvY2Vzc1JvdXRlTG9hZGVyRGF0YSIsImFib3J0ZWQiLCJkb25lRmV0Y2hlciIsImdldERvbmVGZXRjaGVyIiwibWVyZ2VMb2FkZXJEYXRhIiwibmV3TG9hZGVyRGF0YSIsIm1lcmdlZExvYWRlckRhdGEiLCJnZXRBY3Rpb25EYXRhRm9yQ29tbWl0IiwiYWN0aW9uRGF0YSIsImdldFNob3J0Q2lyY3VpdE1hdGNoZXMiLCJfdGVtcDUiLCJlcnJvck1lc3NhZ2UiLCJmaW5kUmVkaXJlY3QiLCJpc1JlZGlyZWN0RGF0YVN0cmF0ZWd5UmVzdWx0UmVzdWx0IiwicmVkaXJlY3QiLCJyZXNvbHZlTmF2aWdhdGlvbkRlZmVycmVkUmVzdWx0cyIsImN1cnJlbnRNYXRjaGVzIiwiaXNSZXZhbGlkYXRpbmdMb2FkZXIiLCJyZXNvbHZlRGVmZXJyZWREYXRhIiwicmVzb2x2ZUZldGNoZXJEZWZlcnJlZFJlc3VsdHMiLCJ1bndyYXAiLCJ1bndyYXBwZWREYXRhIiwiZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uIiwibmF2aWdhdGlvbiIsImdldExvYWRpbmdOYXZpZ2F0aW9uIiwiZ2V0TG9hZGluZ0ZldGNoZXIiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsImlzRGF0YVJvdXRlIiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Iiwic3RhdGljIiwicm91dGVyIiwiY3R4IiwidXNlRGF0YVJvdXRlckNvbnRleHQiLCJEYXRhUm91dGVySG9vayIsIlVzZU5hdmlnYXRlU3RhYmxlIiwidXNlQ3VycmVudFJvdXRlSWQiLCJEYXRhUm91dGVyU3RhdGVIb29rIiwiYWN0aXZlUmVmIiwibmF2aWdhdGUiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsImRhdGFSb3V0ZXJDb250ZXh0IiwiZnV0dXJlIiwicm91dGVQYXRobmFtZXNKc29uIiwiZ28iLCJ1c2VOYXZpZ2F0ZVVuc3RhYmxlIiwiT3V0bGV0Q29udGV4dCIsIl90ZW1wMiIsInVzZVJvdXRlc0ltcGwiLCJkYXRhUm91dGVyU3RhdGUiLCJwYXJlbnRNYXRjaGVzIiwicm91dGVNYXRjaCIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInBhcmVudFNlZ21lbnRzIiwicmVuZGVyZWRNYXRjaGVzIiwiX2RhdGFSb3V0ZXJTdGF0ZSIsIl9mdXR1cmUiLCJ2N19wYXJ0aWFsSHlkcmF0aW9uIiwiaW5pdGlhbGl6ZWQiLCJlcnJvckluZGV4IiwicmVuZGVyRmFsbGJhY2siLCJmYWxsYmFja0luZGV4IiwiSHlkcmF0ZUZhbGxiYWNrIiwiaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCIsIm5lZWRzVG9SdW5Mb2FkZXIiLCJyZWR1Y2VSaWdodCIsInNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayIsImVycm9yRWxlbWVudCIsImRlZmF1bHRFcnJvckVsZW1lbnQiLCJhbHJlYWR5V2FybmVkJDEiLCJnZXRDaGlsZHJlbiIsIlJlbmRlcmVkUm91dGUiLCJyb3V0ZUNvbnRleHQiLCJFcnJvckJvdW5kYXJ5IiwiUmVuZGVyRXJyb3JCb3VuZGFyeSIsInJldmFsaWRhdGlvbiIsImNvbXBvbmVudCIsIl9yZW5kZXJNYXRjaGVzIiwiZW5jb2RlTG9jYXRpb24iLCJuYXZpZ2F0aW9uVHlwZSIsIlBvcCIsIkRlZmF1bHRFcnJvckNvbXBvbmVudCIsIl9zdGF0ZSRlcnJvcnMiLCJ1c2VEYXRhUm91dGVyU3RhdGUiLCJVc2VSb3V0ZUVycm9yIiwidXNlUm91dGVFcnJvciIsInByZVN0eWxlcyIsInBhZGRpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250U3R5bGUiLCJzdXBlciIsImVycm9ySW5mbyIsInN0YXRpY0NvbnRleHQiLCJfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCIsImhvb2tOYW1lIiwidXNlUm91dGVDb250ZXh0IiwidGhpc1JvdXRlIiwiYWxyZWFkeVdhcm5lZCIsImxvZ0RlcHJlY2F0aW9uIiwiZmxhZyIsIm1zZyIsIk91dGxldCIsInVzZU91dGxldCIsIl9yZWY1IiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwibG9jYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIl9fcmVhY3RSb3V0ZXJWZXJzaW9uIiwiZGVzZXJpYWxpemVFcnJvcnMiLCJzZXJpYWxpemVkIiwiX190eXBlIiwiX19zdWJUeXBlIiwiRXJyb3JDb25zdHJ1Y3RvciIsIlZpZXdUcmFuc2l0aW9uQ29udGV4dCIsImlzVHJhbnNpdGlvbmluZyIsIkZldGNoZXJzQ29udGV4dCIsImZsdXNoU3luY0ltcGwiLCJmbHVzaFN5bmNTYWZlIiwiRGVmZXJyZWQiLCJyZWFzb24iLCJmYWxsYmFja0VsZW1lbnQiLCJzZXRTdGF0ZUltcGwiLCJwZW5kaW5nU3RhdGUiLCJzZXRQZW5kaW5nU3RhdGUiLCJ2dENvbnRleHQiLCJzZXRWdENvbnRleHQiLCJyZW5kZXJEZmQiLCJzZXRSZW5kZXJEZmQiLCJzZXRUcmFuc2l0aW9uIiwiaW50ZXJydXB0aW9uIiwic2V0SW50ZXJydXB0aW9uIiwiZmV0Y2hlckRhdGEiLCJ2N19zdGFydFRyYW5zaXRpb24iLCJvcHRJblN0YXJ0VHJhbnNpdGlvbiIsInN0YXJ0VHJhbnNpdGlvblNhZmUiLCJuZXdTdGF0ZSIsIl9yZWYyIiwidmlld1RyYW5zaXRpb25PcHRzIiwiaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlIiwic3RhcnRWaWV3VHJhbnNpdGlvbiIsInNraXBUcmFuc2l0aW9uIiwiY3VycmVudExvY2F0aW9uIiwibmV4dExvY2F0aW9uIiwiZmluaXNoZWQiLCJmaW5hbGx5IiwicmVuZGVyUHJvbWlzZSIsImNyZWF0ZUhyZWYiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJyb3V0ZXJGdXR1cmUiLCJyZW5kZXJGdXR1cmUiLCJ2N19mZXRjaGVyUGVyc2lzdCIsInY3X25vcm1hbGl6ZUZvcm1NZXRob2QiLCJ2N19za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24iLCJoaXN0b3J5QWN0aW9uIiwiTWVtb2l6ZWREYXRhUm91dGVzIiwiaXNCcm93c2VyIiwiTGluayIsIl9yZWY3IiwiYWJzb2x1dGVIcmVmIiwicmVsb2FkRG9jdW1lbnQiLCJ2aWV3VHJhbnNpdGlvbiIsImlzRXh0ZXJuYWwiLCJ0YXJnZXRVcmwiLCJfdGVtcCIsImpvaW5lZFBhdGhuYW1lIiwidXNlSHJlZiIsImludGVybmFsT25DbGljayIsInJlcGxhY2VQcm9wIiwiaXNNb2RpZmllZEV2ZW50Iiwic2hvdWxkUHJvY2Vzc0xpbmtDbGljayIsInVzZUxpbmtDbGlja0hhbmRsZXIiLCJOYXZMaW5rIiwiX3JlZjgiLCJhcmlhQ3VycmVudFByb3AiLCJjbGFzc05hbWVQcm9wIiwic3R5bGVQcm9wIiwicm91dGVyU3RhdGUiLCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlIiwibmV4dFBhdGgiLCJuZXh0TG9jYXRpb25QYXRobmFtZSIsImVuZFNsYXNoUG9zaXRpb24iLCJpc0FjdGl2ZSIsImlzUGVuZGluZyIsInJlbmRlclByb3BzIiwiYXJpYUN1cnJlbnQiLCJJbnB1dCIsIl9hIiwiaW5wdXRBdHRyaWJ1dGVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX3Jlc3QiLCJQb3J0YWwiLCJNb2RhbCIsIm9uQ2xvc2UiLCJpc0NoZWNrQm94SW5wdXQiLCJpc0RhdGVPYmplY3QiLCJpc051bGxPclVuZGVmaW5lZCIsImlzT2JqZWN0VHlwZSIsImlzT2JqZWN0IiwiaXNXZWIiLCJIVE1MRWxlbWVudCIsImNsb25lT2JqZWN0IiwiY29weSIsImlzRmlsZUxpc3RJbnN0YW5jZSIsIkZpbGVMaXN0IiwiQmxvYiIsInRlbXBPYmplY3QiLCJwcm90b3R5cGVDb3B5IiwiaXNQbGFpbk9iamVjdCIsImNvbXBhY3QiLCJpc1VuZGVmaW5lZCIsIm9iamVjdCIsImlzS2V5Iiwic3RyaW5nVG9QYXRoIiwidGVtcFBhdGgiLCJsYXN0SW5kZXgiLCJuZXdWYWx1ZSIsIm9ialZhbHVlIiwiVkFMSURBVElPTl9NT0RFIiwiSU5QVVRfVkFMSURBVElPTl9SVUxFUyIsImdldFByb3h5Rm9ybVN0YXRlIiwiZm9ybVN0YXRlIiwiY29udHJvbCIsImxvY2FsUHJveHlGb3JtU3RhdGUiLCJpc1Jvb3QiLCJkZWZhdWx0VmFsdWVzIiwiX2RlZmF1bHRWYWx1ZXMiLCJfa2V5IiwiX3Byb3h5Rm9ybVN0YXRlIiwiaXNFbXB0eU9iamVjdCIsImNvbnZlcnRUb0FycmF5UGF5bG9hZCIsImlzU3RyaW5nIiwiYXBwZW5kRXJyb3JzIiwidmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhIiwidHlwZXMiLCJnZXRWYWxpZGF0aW9uTW9kZXMiLCJpc09uU3VibWl0IiwiaXNPbkJsdXIiLCJpc09uQ2hhbmdlIiwiaXNPbkFsbCIsImlzT25Ub3VjaCIsImlzV2F0Y2hlZCIsIl9uYW1lcyIsImlzQmx1ckV2ZW50Iiwid2F0Y2hBbGwiLCJ3YXRjaCIsIndhdGNoTmFtZSIsIml0ZXJhdGVGaWVsZHNCeUFjdGlvbiIsImZpZWxkcyIsImZpZWxkc05hbWVzIiwiYWJvcnRFYXJseSIsIl9mIiwiY3VycmVudEZpZWxkIiwidXBkYXRlRmllbGRBcnJheVJvb3RFcnJvciIsImZpZWxkQXJyYXlFcnJvcnMiLCJpc0ZpbGVJbnB1dCIsImlzRnVuY3Rpb24iLCJpc0hUTUxFbGVtZW50Iiwib3duZXIiLCJpc01lc3NhZ2UiLCJpc1JhZGlvSW5wdXQiLCJpc1JlZ2V4IiwiZGVmYXVsdFJlc3VsdCIsImlzVmFsaWQiLCJ2YWxpZFJlc3VsdCIsImdldENoZWNrYm94VmFsdWUiLCJ2YWx1ZXMiLCJvcHRpb24iLCJkZWZhdWx0UmV0dXJuIiwiZ2V0UmFkaW9WYWx1ZSIsInByZXZpb3VzIiwiZ2V0VmFsaWRhdGVFcnJvciIsImdldFZhbHVlQW5kTWVzc2FnZSIsInZhbGlkYXRpb25EYXRhIiwidmFsaWRhdGVGaWVsZCIsImZvcm1WYWx1ZXMiLCJzaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uIiwiaXNGaWVsZEFycmF5IiwibWF4TGVuZ3RoIiwidmFsaWRhdGUiLCJ2YWx1ZUFzTnVtYmVyIiwibW91bnQiLCJpbnB1dFZhbHVlIiwiaW5wdXRSZWYiLCJzZXRDdXN0b21WYWxpZGl0eSIsInJlcG9ydFZhbGlkaXR5IiwiaXNSYWRpbyIsImlzQ2hlY2tCb3giLCJpc1JhZGlvT3JDaGVja2JveCIsImFwcGVuZEVycm9yc0N1cnJ5IiwiZ2V0TWluTWF4TWVzc2FnZSIsImV4Y2VlZE1heCIsIm1heExlbmd0aE1lc3NhZ2UiLCJtaW5MZW5ndGhNZXNzYWdlIiwibWF4VHlwZSIsIm1pblR5cGUiLCJleGNlZWRNaW4iLCJtYXhPdXRwdXQiLCJtaW5PdXRwdXQiLCJ2YWx1ZURhdGUiLCJ2YWx1ZUFzRGF0ZSIsImNvbnZlcnRUaW1lVG9EYXRlIiwidG9EYXRlU3RyaW5nIiwiaXNXZWVrIiwidmFsdWVOdW1iZXIiLCJtYXhMZW5ndGhPdXRwdXQiLCJtaW5MZW5ndGhPdXRwdXQiLCJwYXR0ZXJuVmFsdWUiLCJ2YWxpZGF0ZUVycm9yIiwidmFsaWRhdGlvblJlc3VsdCIsInVuc2V0IiwiY2hpbGRPYmplY3QiLCJ1cGRhdGVQYXRoIiwiYmFzZUdldCIsImlzRW1wdHlBcnJheSIsImNyZWF0ZVN1YmplY3QiLCJfb2JzZXJ2ZXJzIiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsImlzUHJpbWl0aXZlIiwiZGVlcEVxdWFsIiwib2JqZWN0MSIsIm9iamVjdDIiLCJnZXRUaW1lIiwia2V5czEiLCJrZXlzMiIsInZhbDEiLCJ2YWwyIiwiaXNNdWx0aXBsZVNlbGVjdCIsImxpdmUiLCJpc0Nvbm5lY3RlZCIsIm9iamVjdEhhc0Z1bmN0aW9uIiwibWFya0ZpZWxkc0RpcnR5IiwiaXNQYXJlbnROb2RlQXJyYXkiLCJnZXREaXJ0eUZpZWxkc0Zyb21EZWZhdWx0VmFsdWVzIiwiZGlydHlGaWVsZHNGcm9tVmFsdWVzIiwiZ2V0RGlydHlGaWVsZHMiLCJnZXRGaWVsZFZhbHVlQXMiLCJzZXRWYWx1ZUFzIiwiZ2V0RmllbGRWYWx1ZSIsImZpbGVzIiwic2VsZWN0ZWRPcHRpb25zIiwiZ2V0UnVsZVZhbHVlIiwicnVsZSIsIkFTWU5DX0ZVTkNUSU9OIiwic2NoZW1hRXJyb3JMb29rdXAiLCJfZmllbGRzIiwibmFtZXMiLCJmaWVsZE5hbWUiLCJyZVZhbGlkYXRlTW9kZSIsInNob3VsZEZvY3VzRXJyb3IiLCJjcmVhdGVGb3JtQ29udHJvbCIsImRlbGF5RXJyb3JDYWxsYmFjayIsIl9vcHRpb25zIiwiX2Zvcm1TdGF0ZSIsInN1Ym1pdENvdW50IiwiaXNEaXJ0eSIsImlzTG9hZGluZyIsImlzVmFsaWRhdGluZyIsImlzU3VibWl0dGVkIiwiaXNTdWJtaXR0aW5nIiwiaXNTdWJtaXRTdWNjZXNzZnVsIiwidG91Y2hlZEZpZWxkcyIsImRpcnR5RmllbGRzIiwidmFsaWRhdGluZ0ZpZWxkcyIsIl9mb3JtVmFsdWVzIiwic2hvdWxkVW5yZWdpc3RlciIsIl9zdGF0ZSIsInVuTW91bnQiLCJ0aW1lciIsIl9zdWJqZWN0cyIsInZhbGlkYXRpb25Nb2RlQmVmb3JlU3VibWl0IiwidmFsaWRhdGlvbk1vZGVBZnRlclN1Ym1pdCIsInNob3VsZERpc3BsYXlBbGxBc3NvY2lhdGVkRXJyb3JzIiwiY3JpdGVyaWFNb2RlIiwiX3VwZGF0ZVZhbGlkIiwic2hvdWxkVXBkYXRlVmFsaWQiLCJyZXNvbHZlciIsIl9leGVjdXRlU2NoZW1hIiwiZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uIiwiX3VwZGF0ZUlzVmFsaWRhdGluZyIsInVwZGF0ZVZhbGlkQW5kVmFsdWUiLCJzaG91bGRTa2lwU2V0VmFsdWVBcyIsInNldEZpZWxkVmFsdWUiLCJ1cGRhdGVUb3VjaEFuZERpcnR5IiwiZmllbGRWYWx1ZSIsInNob3VsZERpcnR5Iiwic2hvdWxkUmVuZGVyIiwic2hvdWxkVXBkYXRlRmllbGQiLCJpc1ByZXZpb3VzRGlydHkiLCJvdXRwdXQiLCJkaXNhYmxlZEZpZWxkIiwiX2dldERpcnR5IiwiaXNDdXJyZW50RmllbGRQcmlzdGluZSIsImlzUHJldmlvdXNGaWVsZFRvdWNoZWQiLCJnZXRSZXNvbHZlck9wdGlvbnMiLCJzaG91bGRPbmx5Q2hlY2tWYWxpZCIsInZhbGlkIiwiaXNGaWVsZEFycmF5Um9vdCIsImlzUHJvbWlzZUZ1bmN0aW9uIiwiZmllbGRSZWZlcmVuY2UiLCJ2YWxpZGF0ZUZ1bmN0aW9uIiwiZmllbGRFcnJvciIsImdldFZhbHVlcyIsIl9nZXRXYXRjaCIsImlzR2xvYmFsIiwiZ2VuZXJhdGVXYXRjaE91dHB1dCIsIm9wdGlvblJlZiIsImNoZWNrYm94UmVmIiwicmFkaW9SZWYiLCJzaG91bGRUb3VjaCIsInNob3VsZFZhbGlkYXRlIiwidHJpZ2dlciIsInNldFZhbHVlcyIsImZpZWxkS2V5IiwiY2xvbmVWYWx1ZSIsIm9uQ2hhbmdlIiwiaXNGaWVsZFZhbHVlVXBkYXRlZCIsIl91cGRhdGVJc0ZpZWxkVmFsdWVVcGRhdGVkIiwiZ2V0RXZlbnRWYWx1ZSIsInNob3VsZFNraXBWYWxpZGF0aW9uIiwiaGFzVmFsaWRhdGlvbiIsImlzVG91Y2hlZCIsInNraXBWYWxpZGF0aW9uIiwid2F0Y2hlZCIsIm9uQmx1ciIsImZpZWxkU3RhdGUiLCJwcmV2aW91c0Vycm9yTG9va3VwUmVzdWx0IiwiZXJyb3JMb29rdXBSZXN1bHQiLCJwcmV2aW91c0ZpZWxkRXJyb3IiLCJkZWxheUVycm9yIiwidXBkYXRlRXJyb3JzIiwid2FpdCIsInVwZGF0ZWRGb3JtU3RhdGUiLCJzaG91bGRSZW5kZXJCeUVycm9yIiwiX2ZvY3VzSW5wdXQiLCJmaWVsZE5hbWVzIiwiZXhlY3V0ZVNjaGVtYUFuZFVwZGF0ZVN0YXRlIiwic2hvdWxkRm9jdXMiLCJnZXRGaWVsZFN0YXRlIiwiaW52YWxpZCIsInNldEVycm9yIiwiY3VycmVudEVycm9yIiwiY3VycmVudFJlZiIsInJlc3RPZkVycm9yVHJlZSIsInVucmVnaXN0ZXIiLCJrZWVwVmFsdWUiLCJrZWVwRXJyb3IiLCJrZWVwRGlydHkiLCJrZWVwVG91Y2hlZCIsImtlZXBJc1ZhbGlkYXRpbmciLCJrZWVwRGVmYXVsdFZhbHVlIiwia2VlcElzVmFsaWQiLCJfdXBkYXRlRGlzYWJsZWRGaWVsZCIsInJlZ2lzdGVyIiwiZGlzYWJsZWRJc0RlZmluZWQiLCJwcm9ncmVzc2l2ZSIsImZpZWxkUmVmIiwicmFkaW9PckNoZWNrYm94IiwiZ2V0Tm9kZVBhcmVudE5hbWUiLCJpc05hbWVJbkZpZWxkQXJyYXkiLCJfZm9jdXNFcnJvciIsImhhbmRsZVN1Ym1pdCIsIm9uVmFsaWQiLCJvbkludmFsaWQiLCJvblZhbGlkRXJyb3IiLCJmaWVsZFZhbHVlcyIsIl9yZXNldCIsImtlZXBTdGF0ZU9wdGlvbnMiLCJ1cGRhdGVkVmFsdWVzIiwiY2xvbmVVcGRhdGVkVmFsdWVzIiwiaXNFbXB0eVJlc2V0VmFsdWVzIiwia2VlcERlZmF1bHRWYWx1ZXMiLCJrZWVwVmFsdWVzIiwia2VlcERpcnR5VmFsdWVzIiwiZmllbGRzVG9DaGVjayIsImNsb3Nlc3QiLCJrZWVwU3VibWl0Q291bnQiLCJrZWVwSXNTdWJtaXR0ZWQiLCJrZWVwRXJyb3JzIiwia2VlcElzU3VibWl0U3VjY2Vzc2Z1bCIsIl9yZW1vdmVVbm1vdW50ZWQiLCJfdXBkYXRlRmllbGRBcnJheSIsImFyZ3MiLCJzaG91bGRTZXRWYWx1ZXMiLCJzaG91bGRVcGRhdGVGaWVsZHNBbmRTdGF0ZSIsImFyZ0EiLCJhcmdCIiwidW5zZXRFbXB0eUFycmF5IiwiX2dldEZpZWxkQXJyYXkiLCJfcmVzZXREZWZhdWx0VmFsdWVzIiwicmVzZXRPcHRpb25zIiwiX3VwZGF0ZUZvcm1TdGF0ZSIsIl9kaXNhYmxlRm9ybSIsIl9zZXRFcnJvcnMiLCJyZXNldEZpZWxkIiwiY2xlYXJFcnJvcnMiLCJpbnB1dE5hbWUiLCJzZXRGb2N1cyIsInNob3VsZFNlbGVjdCIsInNlbGVjdCIsIl9mb3JtQ29udHJvbCIsIl92YWx1ZXMiLCJ1cGRhdGVGb3JtU3RhdGUiLCJfcHJvcHMiLCJzdWJzY3JpcHRpb24iLCJzdWJqZWN0IiwidXNlU3Vic2NyaWJlIiwiZm9ybVN0YXRlRGF0YSIsInNob3VsZFJlbmRlckZvcm1TdGF0ZSIsInVzZUZvcm0iLCJvblN1Ym1pdCIsInBsYWNlaG9sZGVyIiwiZmlyc3RuYW1lIiwibGFzdG5hbWUiLCJjb25maXJtX3Bhc3N3b3JkIiwiY2hlY2tib3giLCJjcmVhdGVBY2NvdW50Iiwic2V0Q3JlYXRlQWNjb3VudCIsImFsdCIsIlNlYXJjaCIsIkhlYWRlciIsIm1vZGFsQWN0aXZlIiwic2V0TW9kYWxBY3RpdmUiLCJzZWFyY2hBY3RpdmUiLCJzZXRTZWFyY2hBY3RpdmUiLCJoZWFkZXIiLCJGb290ZXIiLCJyZWwiLCJpbnN0YWdyYW0iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiSG9tZVBhZ2UiLCJBYm91dFVzIiwiU2hvcEFsbCIsIkNvbGxlY3Rpb24iLCJCZXN0c2VsbGVycyIsIkJsb2ciLCJyb3V0ZXJXaW5kb3ciLCJpc1NlcnZlciIsImRldGVjdEVycm9yQm91bmRhcnkiLCJpbkZsaWdodERhdGFSb3V0ZXMiLCJkYXRhUm91dGVzIiwiZGF0YVN0cmF0ZWd5SW1wbCIsImRhdGFTdHJhdGVneSIsInBhdGNoUm91dGVzT25OYXZpZ2F0aW9uSW1wbCIsInBhdGNoUm91dGVzT25OYXZpZ2F0aW9uIiwidjdfcHJlcGVuZEJhc2VuYW1lIiwidW5saXN0ZW5IaXN0b3J5Iiwic3Vic2NyaWJlcnMiLCJzYXZlZFNjcm9sbFBvc2l0aW9ucyIsImdldFNjcm9sbFJlc3RvcmF0aW9uS2V5IiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJpbml0aWFsU2Nyb2xsUmVzdG9yZWQiLCJoeWRyYXRpb25EYXRhIiwiaW5pdGlhbE1hdGNoZXMiLCJpbml0aWFsRXJyb3JzIiwiY2hlY2tGb2dPZldhciIsImFjdGl2ZSIsImZvZ09mV2FyIiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwidW5ibG9ja0Jsb2NrZXJIaXN0b3J5VXBkYXRlIiwicmVzdG9yZVNjcm9sbFBvc2l0aW9uIiwiYmxvY2tlcnMiLCJwZW5kaW5nQWN0aW9uIiwicGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCIsInBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQiLCJhcHBsaWVkVmlld1RyYW5zaXRpb25zIiwicmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyIiwiaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uIiwiZmV0Y2hDb250cm9sbGVycyIsImluY3JlbWVudGluZ0xvYWRJZCIsInBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkIiwiZmV0Y2hSZWxvYWRJZHMiLCJhY3RpdmVGZXRjaGVycyIsImJsb2NrZXJGdW5jdGlvbnMiLCJ1cGRhdGVTdGF0ZSIsImNvbXBsZXRlZEZldGNoZXJzIiwiZGVsZXRlZEZldGNoZXJzS2V5cyIsInN1YnNjcmliZXIiLCJkZWxldGVGZXRjaGVyIiwiY29tcGxldGVOYXZpZ2F0aW9uIiwiX2xvY2F0aW9uJHN0YXRlIiwiX2xvY2F0aW9uJHN0YXRlMiIsImlzQWN0aW9uUmVsb2FkIiwiX2lzUmVkaXJlY3QiLCJQdXNoIiwiUmVwbGFjZSIsInByaW9yUGF0aHMiLCJ0b1BhdGhzIiwiZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbiIsInN0YXJ0TmF2aWdhdGlvbiIsImFib3J0Iiwic3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uIiwiZ2V0U2Nyb2xsS2V5Iiwic2F2ZVNjcm9sbFBvc2l0aW9uIiwiZW5hYmxlVmlld1RyYW5zaXRpb24iLCJsb2FkaW5nTmF2aWdhdGlvbiIsIm92ZXJyaWRlTmF2aWdhdGlvbiIsIm5vdEZvdW5kTWF0Y2hlcyIsImhhbmRsZU5hdmlnYXRpb25hbDQwNCIsImlzRm9nT2ZXYXIiLCJpbnRlcnJ1cHRBY3RpdmVMb2FkcyIsImdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uIiwiZGlzY292ZXJSZXN1bHQiLCJkaXNjb3ZlclJvdXRlcyIsInNob3J0Q2lyY3VpdGVkIiwicGFydGlhbE1hdGNoZXMiLCJhY3Rpb25NYXRjaCIsImNhbGxEYXRhU3RyYXRlZ3kiLCJzdGFydFJlZGlyZWN0TmF2aWdhdGlvbiIsImhhbmRsZUFjdGlvbiIsInVwZGF0ZWRNYXRjaGVzIiwiZmV0Y2hlclN1Ym1pc3Npb24iLCJhY3RpdmVTdWJtaXNzaW9uIiwic2hvdWxkVXBkYXRlTmF2aWdhdGlvblN0YXRlIiwiZ2V0VXBkYXRlZEFjdGlvbkRhdGEiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJ1cGRhdGVkRmV0Y2hlcnMiLCJtYXJrRmV0Y2hSZWRpcmVjdHNEb25lIiwidXBkYXRlcyIsInJldmFsaWRhdGluZ0ZldGNoZXIiLCJnZXRVcGRhdGVkUmV2YWxpZGF0aW5nRmV0Y2hlcnMiLCJhYm9ydEZldGNoZXIiLCJhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMiLCJsb2FkZXJSZXN1bHRzIiwiY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhIiwiZGlkQWJvcnRGZXRjaExvYWRzIiwiYWJvcnRTdGFsZUZldGNoTG9hZHMiLCJzaG91bGRVcGRhdGVGZXRjaGVycyIsImhhbmRsZUxvYWRlcnMiLCJpc05hdmlnYXRpb24iLCJyZWRpcmVjdExvY2F0aW9uIiwiaXNEb2N1bWVudFJlbG9hZCIsInJlZGlyZWN0SGlzdG9yeUFjdGlvbiIsImZldGNoZXJLZXkiLCJkYXRhUmVzdWx0cyIsInJlcXVlc3RDb250ZXh0IiwibG9hZFJvdXRlRGVmaW5pdGlvbnNQcm9taXNlcyIsImxhenlSb3V0ZSIsInJvdXRlVG9VcGRhdGUiLCJyb3V0ZVVwZGF0ZXMiLCJsYXp5Um91dGVQcm9wZXJ0eSIsImlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCIsImxvYWRMYXp5Um91dGVNb2R1bGUiLCJkc01hdGNoZXMiLCJsb2FkUm91dGVQcm9taXNlIiwiaGFuZGxlck92ZXJyaWRlIiwib25SZWplY3QiLCJydW5IYW5kbGVyIiwiaGFuZGxlciIsImFib3J0UHJvbWlzZSIsImFjdHVhbEhhbmRsZXIiLCJoYW5kbGVyUHJvbWlzZSIsInJhY2UiLCJoYW5kbGVyRXJyb3IiLCJjYWxsTG9hZGVyT3JBY3Rpb24iLCJjYWxsRGF0YVN0cmF0ZWd5SW1wbCIsImZldGNoZXJzVG9Mb2FkIiwibG9hZGVyUmVzdWx0c1Byb21pc2UiLCJmZXRjaGVyUmVzdWx0c1Byb21pc2UiLCJ1cGRhdGVGZXRjaGVyU3RhdGUiLCJzZXRGZXRjaGVyRXJyb3IiLCJnZXRGZXRjaGVyIiwibWFya0ZldGNoZXJzRG9uZSIsImRvbmVLZXlzIiwibGFuZGVkSWQiLCJ5ZWV0ZWRLZXlzIiwiZGVsZXRlQmxvY2tlciIsInVwZGF0ZUJsb2NrZXIiLCJuZXdCbG9ja2VyIiwiYmxvY2tlciIsInNob3VsZEJsb2NrTmF2aWdhdGlvbiIsImJsb2NrZXJLZXkiLCJibG9ja2VyRnVuY3Rpb24iLCJwcmVkaWNhdGUiLCJjYW5jZWxsZWRSb3V0ZUlkcyIsImRmZCIsImhhbmRsZSIsImNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoIiwiaXNOb25ITVIiLCJsb2NhbE1hbmlmZXN0IiwicGF0Y2giLCJuZXdNYXRjaGVzIiwibmV3UGFydGlhbE1hdGNoZXMiLCJpbml0aWFsaXplIiwibGlzdGVuIiwiZGVsdGEiLCJuZXh0SGlzdG9yeVVwZGF0ZVByb21pc2UiLCJfd2luZG93Iiwic2Vzc2lvblBvc2l0aW9ucyIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsInJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMiLCJfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyIsInNldEl0ZW0iLCJwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zIiwiZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24iLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbiIsImdldEtleSIsIm5vcm1hbGl6ZWRQYXRoIiwidXNlclJlcGxhY2UiLCJmZXRjaCIsInJlcXVlc3RNYXRjaGVzIiwiZGV0ZWN0QW5kSGFuZGxlNDA1RXJyb3IiLCJleGlzdGluZ0ZldGNoZXIiLCJnZXRTdWJtaXR0aW5nRmV0Y2hlciIsImFib3J0Q29udHJvbGxlciIsImZldGNoUmVxdWVzdCIsIm9yaWdpbmF0aW5nTG9hZElkIiwicmV2YWxpZGF0aW9uUmVxdWVzdCIsImxvYWRJZCIsImxvYWRGZXRjaGVyIiwic3RhbGVLZXkiLCJoYW5kbGVGZXRjaGVyQWN0aW9uIiwiaGFuZGxlRmV0Y2hlckxvYWRlciIsInJldmFsaWRhdGUiLCJkaXNwb3NlIiwiY2xlYXIiLCJnZXRCbG9ja2VyIiwicGF0Y2hSb3V0ZXMiLCJfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzIiwiX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzIiwiX2ludGVybmFsU2V0Um91dGVzIiwiZ2V0TG9jYXRpb24iLCJ2YWxpZGF0ZUxvY2F0aW9uIiwidjVDb21wYXQiLCJnbG9iYWxIaXN0b3J5IiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJyZXBsYWNlU3RhdGUiLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJET01FeGNlcHRpb24iLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJfX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGEiLCJwYXJzZUh5ZHJhdGlvbkRhdGEiLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=